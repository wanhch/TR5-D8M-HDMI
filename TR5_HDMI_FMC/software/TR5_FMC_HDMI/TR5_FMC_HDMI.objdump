
TR5_FMC_HDMI.elf:     file format elf32-littlenios2
TR5_FMC_HDMI.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00015f00 memsz 0x00015f00 flags r-x
    LOAD off    0x00016f20 vaddr 0x00055f20 paddr 0x00057adc align 2**12
         filesz 0x00001bbc memsz 0x00001bbc flags rw-
    LOAD off    0x00019698 vaddr 0x00059698 paddr 0x00059698 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015300  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000009dc  00055544  00055544  00016544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bbc  00055f20  00057adc  00016f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00059698  00059698  00019698  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  000597f8  000597f8  00018adc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00018adc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001090  00000000  00000000  00018b00  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000286b0  00000000  00000000  00019b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a53c  00000000  00000000  00042240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000da96  00000000  00000000  0004c77c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000291c  00000000  00000000  0005a214  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004058  00000000  00000000  0005cb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001d0f8  00000000  00000000  00060b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0007dc80  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001b90  00000000  00000000  0007dce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008322e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00083231  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008323d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008323e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0008323f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00083248  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00083251  2**0
                  CONTENTS, READONLY
 24 .thread_model 00000003  00000000  00000000  0008325a  2**0
                  CONTENTS, READONLY
 25 .cpu          0000000c  00000000  00000000  0008325d  2**0
                  CONTENTS, READONLY
 26 .qsys         00000001  00000000  00000000  00083269  2**0
                  CONTENTS, READONLY
 27 .simulation_enabled 00000001  00000000  00000000  0008326a  2**0
                  CONTENTS, READONLY
 28 .stderr_dev   00000009  00000000  00000000  0008326b  2**0
                  CONTENTS, READONLY
 29 .stdin_dev    00000009  00000000  00000000  00083274  2**0
                  CONTENTS, READONLY
 30 .stdout_dev   00000009  00000000  00000000  0008327d  2**0
                  CONTENTS, READONLY
 31 .sopc_system_name 00000008  00000000  00000000  00083286  2**0
                  CONTENTS, READONLY
 32 .quartus_project_dir 00000024  00000000  00000000  0008328e  2**0
                  CONTENTS, READONLY
 33 .jdi          00004010  00000000  00000000  000832b2  2**0
                  CONTENTS, READONLY
 34 .sopcinfo     000970a9  00000000  00000000  000872c2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
00055544 l    d  .rodata	00000000 .rodata
00055f20 l    d  .rwdata	00000000 .rwdata
00059698 l    d  .bss	00000000 .bss
000597f8 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../TR5_FMC_HDMI_bsp//obj/HAL/src/crt0.o
0004028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 HDMI_RX.c
000407f4 l     F .text	0000006c hdmi_isr
00000000 l    df *ABS*	00000000 HDMI_TX.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00055d2e l     O .rodata	00000010 zeroes.4389
00055d3e l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
00055d4e l     O .rodata	00000010 zeroes.4404
00048558 l     F .text	000000bc __sbprintf
00055d5e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0004888c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0004a3bc l     F .text	00000008 __fp_unlock
0004a3d0 l     F .text	0000019c __sinit.part.1
0004a56c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00055ff0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00056434 l     O .rwdata	00000020 lc_ctype_charset
00056414 l     O .rwdata	00000020 lc_message_charset
00056454 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00055d90 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00055ec4 l     O .rodata	00000010 blanks.4332
00055eb4 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
0004ed74 l     F .text	000000fc __sprint_r.part.0
00055ee4 l     O .rodata	00000010 blanks.4348
00055ed4 l     O .rodata	00000010 zeroes.4349
00050300 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00052c10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00052d1c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00052d48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
000530d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000531b4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000532a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00053474 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00057ad0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000536f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00053824 l     F .text	00000034 alt_dev_reg
00056a3c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00053b14 l     F .text	0000020c altera_avalon_jtag_uart_irq
00053d20 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00054358 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00054718 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00054988 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00054ac8 l     F .text	0000003c alt_get_errno
00054b04 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000596c4 g     O .bss	00000004 alt_instruction_exception_handler
0004cfac g     F .text	00000074 _mprec_log10
00041e4c g     F .text	0000013c I2C_Read
0004d098 g     F .text	0000008c __any_on
0005089c g     F .text	00000054 _isatty_r
00055d9c g     O .rodata	00000028 __mprec_tinytens
000533b0 g     F .text	0000007c alt_main
00043f3c g     F .text	000000c0 _puts_r
000596f8 g     O .bss	00000100 alt_irq
000508f0 g     F .text	00000060 _lseek_r
00057adc g       *ABS*	00000000 __flash_rwdata_start
000517a0 g     F .text	00000088 .hidden __eqdf2
000597f8 g       *ABS*	00000000 __alt_heap_start
00043f00 g     F .text	0000003c printf
00050b08 g     F .text	0000009c _wcrtomb_r
0004d828 g     F .text	0000005c __sseek
0004a70c g     F .text	00000010 __sinit
000509b0 g     F .text	00000140 __swbuf_r
0004099c g     F .text	000000b4 HDMI_TX_WriteI2C_ByteN_0
0004b1d4 g     F .text	0000007c _setlocale_r
0004a574 g     F .text	00000068 __sfmoreglue
00053450 g     F .text	00000024 __malloc_unlock
0004bea4 g     F .text	0000015c memmove
0004a6f4 g     F .text	00000018 _cleanup
0004c128 g     F .text	000000a8 _Balloc
00051828 g     F .text	000000dc .hidden __gtdf2
00054ec0 g     F .text	00000024 altera_nios2_gen2_irq_init
00042218 g     F .text	0000012c i2c_write
00040000 g     F .entry	0000001c __reset
0004107c g     F .text	000006e8 Meaurement
00040020 g       *ABS*	00000000 __flash_exceptions_start
00050840 g     F .text	0000005c _fstat_r
000596b0 g     O .bss	00000004 errno
0004d7a4 g     F .text	00000008 __seofread
0004db38 g     F .text	0000123c ___svfiprintf_internal_r
000596bc g     O .bss	00000004 alt_argv
0005fa9c g       *ABS*	00000000 _gp
000536c0 g     F .text	00000030 usleep
000408f0 g     F .text	000000ac HDMI_TX_ReadI2C_ByteN_0
000568bc g     O .rwdata	00000180 alt_fd_list
00040fe0 g     F .text	0000009c IsTmdsClockDetected
00054ee4 g     F .text	00000090 alt_find_dev
0004bd5c g     F .text	00000148 memcpy
00040d1c g     F .text	0000019c InitSII9136
0004a3c4 g     F .text	0000000c _cleanup_r
00052a8c g     F .text	000000dc .hidden __floatsidf
00054a4c g     F .text	0000007c alt_io_redirect
00051904 g     F .text	000000f4 .hidden __ltdf2
00055544 g       *ABS*	00000000 __DTOR_END__
00043ffc g     F .text	00000014 puts
000548ec g     F .text	0000009c alt_exception_cause_generated_bad_addr
0004d688 g     F .text	00000074 __fpclassifyd
0004cf08 g     F .text	000000a4 __ratio
00040eb8 g     F .text	00000064 HDMI_TX_Init
000502e4 g     F .text	0000001c __vfiprintf_internal
00053f18 g     F .text	0000021c altera_avalon_jtag_uart_read
00043ed0 g     F .text	00000030 _printf_r
00043e14 g     F .text	00000064 .hidden __udivsi3
00053110 g     F .text	000000a4 isatty
00055dec g     O .rodata	000000c8 __mprec_tens
0004b250 g     F .text	0000000c __locale_charset
00048704 g     F .text	00000034 vsnprintf
00055120 g     F .text	00000090 alt_icache_flush
00041f88 g     F .text	0000018c I2C_MultipleRead
000596ac g     O .bss	00000004 __malloc_top_pad
00057aa4 g     O .rwdata	00000004 __mb_cur_max
0004b280 g     F .text	0000000c _localeconv_r
0004c534 g     F .text	0000003c __i2b
0004ab90 g     F .text	000004bc __sfvwrite_r
0004d6fc g     F .text	00000054 _sbrk_r
00040f1c g     F .text	000000c4 IsPortDetected
00040be4 g     F .text	00000138 HDMI_TX_ChipVerify
00050950 g     F .text	00000060 _read_r
00057ac4 g     O .rwdata	00000004 alt_max_fd
00050534 g     F .text	000000f0 _fclose_r
0004a38c g     F .text	00000030 fflush
000596a8 g     O .bss	00000004 __malloc_max_sbrked_mem
00043a00 g     F .text	00000110 .hidden __extendsfdf2
0004286c g     F .text	000008ac .hidden __adddf3
00041c98 g     F .text	00000058 I2C_Open
0004ccb0 g     F .text	0000010c __b2d
00051268 g     F .text	00000538 .hidden __umoddi3
000532dc g     F .text	000000d4 lseek
00057a9c g     O .rwdata	00000004 _global_impure_ptr
0004d124 g     F .text	00000564 _realloc_r
000597f8 g       *ABS*	00000000 __bss_end
00052fe4 g     F .text	000000f0 alt_iic_isr_register
00054db8 g     F .text	00000108 alt_tick
00050cf0 g     F .text	00000578 .hidden __udivdi3
00040564 g     F .text	000000e4 hdmi_read_video_statue
0005079c g     F .text	00000024 _fputwc_r
00055dc4 g     O .rodata	00000028 __mprec_bigtens
0004c318 g     F .text	00000104 __s2b
00052b68 g     F .text	000000a8 .hidden __floatunsidf
0004c9f0 g     F .text	00000060 __mcmp
0004a72c g     F .text	00000018 __fp_lock_all
00052f98 g     F .text	0000004c alt_ic_irq_enabled
00041d38 g     F .text	00000114 I2C_Write
00054d1c g     F .text	0000009c alt_alarm_stop
000596b4 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
00056894 g     O .rwdata	00000028 alt_dev_null
00042114 g     F .text	0000008c i2c_start
000546d0 g     F .text	00000048 alt_dcache_flush_all
0004c41c g     F .text	00000068 __hi0bits
00052a0c g     F .text	00000080 .hidden __fixdfsi
00057adc g       *ABS*	00000000 __ram_rwdata_end
00057abc g     O .rwdata	00000008 alt_dev_list
0005372c g     F .text	000000f8 write
00055f20 g       *ABS*	00000000 __ram_rodata_end
00052d84 g     F .text	000000b0 fstat
00051904 g     F .text	000000f4 .hidden __ledf2
000424d4 g     F .text	0000006c myprintf
0004c768 g     F .text	00000140 __pow5mult
0004ee88 g     F .text	0000145c ___vfiprintf_internal_r
000596a0 g     O .bss	00000004 __nlocale_changed
00043e78 g     F .text	00000058 .hidden __umodsi3
000597f8 g       *ABS*	00000000 end
000404f4 g     F .text	00000070 hdmi_DE_REGEN_FILTER_STATUS
00053a54 g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00041764 g     F .text	00000160 WriteRxEDID
00055544 g       *ABS*	00000000 __CTOR_LIST__
0007e800 g       *ABS*	00000000 __alt_stack_pointer
000543d0 g     F .text	0000007c alt_avalon_timer_sc_init
00043cb8 g     F .text	00000064 .hidden __clzsi2
00054134 g     F .text	00000224 altera_avalon_jtag_uart_write
0004a71c g     F .text	00000004 __sfp_lock_acquire
0004bc78 g     F .text	000000e4 memchr
00046344 g     F .text	000021f8 ___vfprintf_internal_r
00044010 g     F .text	00000058 _sprintf_r
0004a880 g     F .text	00000310 _free_r
0004b25c g     F .text	00000010 __locale_mb_cur_max
00055390 g     F .text	00000180 __call_exitprocs
0005969c g     O .bss	00000004 __mlocale_changed
00057aa8 g     O .rwdata	00000004 __malloc_sbrk_base
00040244 g     F .text	0000004c _start
000596c8 g     O .bss	00000004 _alt_tick_rate
0004c8a8 g     F .text	00000148 __lshift
000596cc g     O .bss	00000004 _alt_nticks
000534b0 g     F .text	000000fc read
00053890 g     F .text	00000060 alt_sys_init
00042658 g     F .text	00000124 .hidden __floatsisf
0004d968 g     F .text	000001d0 __ssprint_r
00055278 g     F .text	00000118 __register_exitproc
0004c570 g     F .text	000001f8 __multiply
00053dc0 g     F .text	00000068 altera_avalon_jtag_uart_close
00055f20 g       *ABS*	00000000 __ram_rwdata_start
00055544 g       *ABS*	00000000 __ram_rodata_start
000596d0 g     O .bss	00000028 __malloc_current_mallinfo
0004cdbc g     F .text	0000014c __d2b
00040a98 g     F .text	00000050 HDMI_TX_WriteI2C_Byte_0
000538f0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0005507c g     F .text	000000a4 alt_get_fd
00054578 g     F .text	00000158 alt_busy_sleep
0005041c g     F .text	00000054 _close_r
000551fc g     F .text	0000007c memcmp
000539b0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000597f8 g       *ABS*	00000000 __alt_stack_base
00053a00 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00048738 g     F .text	00000154 __swsetup_r
00043118 g     F .text	000008e8 .hidden __divdf3
0004a5dc g     F .text	00000118 __sfp
0004d020 g     F .text	00000078 __copybits
0005648c g     O .rwdata	00000408 __malloc_av_
0004a728 g     F .text	00000004 __sinit_lock_release
00048614 g     F .text	000000f0 _vsnprintf_r
000421a0 g     F .text	00000078 i2c_stop
000519f8 g     F .text	00000718 .hidden __muldf3
0004d750 g     F .text	00000054 __sread
00054f74 g     F .text	00000108 alt_find_file
00054754 g     F .text	000000a4 alt_dev_llist_insert
0005342c g     F .text	00000024 __malloc_lock
00053610 g     F .text	000000b0 sbrk
0004416c g     F .text	000021d8 ___svfprintf_internal_r
0004a330 g     F .text	0000005c _fflush_r
00050470 g     F .text	000000c4 _calloc_r
00040860 g     F .text	00000090 hdmi_interrupt_init
00059698 g       *ABS*	00000000 __bss_start
0004c000 g     F .text	00000128 memset
000418c4 g     F .text	000003d4 main
000596c0 g     O .bss	00000004 alt_envp
000596a4 g     O .bss	00000004 __malloc_max_total_mem
00042540 g     F .text	00000088 myprintf_hexarray
00053950 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00040ae8 g     F .text	0000006c HDMI_TX_TPI_Mode_Enable
00042344 g     F .text	0000015c i2c_read
00050af0 g     F .text	00000018 __swbuf
00055f20 g     O .rwdata	000000d0 regData
0004d884 g     F .text	00000008 __sclose
0007e800 g       *ABS*	00000000 __alt_heap_limit
00050624 g     F .text	00000014 fclose
00043b10 g     F .text	000001a8 .hidden __truncdfsf2
00048a8c g     F .text	00001688 _dtoa_r
0004b46c g     F .text	0000080c _malloc_r
00050c64 g     F .text	00000030 __ascii_wctomb
00057ac8 g     O .rwdata	00000004 alt_errno
00040648 g     F .text	00000080 hdmi_port_enable
0004b04c g     F .text	000000c4 _fwalk
00043d1c g     F .text	00000084 .hidden __divsi3
0004a75c g     F .text	00000124 _malloc_trim_r
00055544 g       *ABS*	00000000 __CTOR_END__
00040470 g     F .text	00000084 hdmi_rx_regwrite
0004d88c g     F .text	000000dc strcmp
00040354 g     F .text	0000011c HDMIRX_VerifyEeprom
00055544 g       *ABS*	00000000 __flash_rodata_start
00055544 g       *ABS*	00000000 __DTOR_LIST__
000517a0 g     F .text	00000088 .hidden __nedf2
00053858 g     F .text	00000038 alt_irq_init
000535ac g     F .text	00000064 alt_release_fd
00044068 g     F .text	0000006c sprintf
00055be7 g     O .rodata	00000100 .hidden __clz_tab
000424a0 g     F .text	00000034 debug_output
00059698 g     O .bss	00000004 _PathLocale
000551b0 g     F .text	00000014 atexit
00040290 g     F .text	000000c4 HDMIRX_WriteEeprom
000503bc g     F .text	00000060 _write_r
0004b28c g     F .text	00000018 setlocale
0004074c g     F .text	000000a8 hdmi_port_detect_st_raw
00057aa0 g     O .rwdata	00000004 _impure_ptr
000596b8 g     O .bss	00000004 alt_argc
0004a114 g     F .text	0000021c __sflush_r
00054858 g     F .text	00000060 _do_dtors
0004b278 g     F .text	00000008 __locale_cjk_lang
000425c8 g     F .text	00000090 myprintf_dwordarray
00040020 g       .exceptions	00000000 alt_irq_entry
0004cc4c g     F .text	00000064 __ulp
0004a744 g     F .text	00000018 __fp_unlock_all
00057ab4 g     O .rwdata	00000008 alt_fs_list
000406c8 g     F .text	00000084 hdmi_port_detect_st_cl
00040020 g       *ABS*	00000000 __ram_exceptions_start
0004b2a4 g     F .text	0000000c localeconv
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00052e34 g     F .text	00000050 alt_ic_isr_register
00057adc g       *ABS*	00000000 _edata
000597f8 g       *ABS*	00000000 _end
00050638 g     F .text	00000164 __fputwc
00040244 g       *ABS*	00000000 __ram_exceptions_end
00053e28 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00052f0c g     F .text	0000008c alt_ic_irq_disable
0004d7ac g     F .text	0000007c __swrite
00057aac g     O .rwdata	00000004 __malloc_trim_threshold
0004b26c g     F .text	0000000c __locale_msgcharset
000551c4 g     F .text	00000038 exit
0004b110 g     F .text	000000c4 _fwalk_reent
0004277c g     F .text	000000f0 .hidden __floatunsisf
0004ca50 g     F .text	000001fc __mdiff
00043da0 g     F .text	00000074 .hidden __modsi3
0007e800 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004a720 g     F .text	00000004 __sfp_lock_release
00040a50 g     F .text	00000048 HDMI_TX_ReadI2C_Byte_0
00055510 g     F .text	00000034 _exit
0005444c g     F .text	0000012c alt_alarm_start
00040b54 g     F .text	00000090 HDMI_TX_Reset
0004b2b0 g     F .text	000001bc __smakebuf_r
00041cf0 g     F .text	00000048 I2C_Close
000440d4 g     F .text	00000098 strlen
00054bc8 g     F .text	00000154 open
00051828 g     F .text	000000dc .hidden __gedf2
00057ab0 g     O .rwdata	00000004 __wctomb
0004ee70 g     F .text	00000018 __sprint_r
000548b8 g     F .text	00000034 alt_icache_flush_all
00057acc g     O .rwdata	00000004 alt_priority_mask
00052e84 g     F .text	00000088 alt_ic_irq_enable
0004853c g     F .text	0000001c __vfprintf_internal
00050c94 g     F .text	0000005c _wctomb_r
00052110 g     F .text	000008fc .hidden __subdf3
0004c484 g     F .text	000000b0 __lo0bits
00057ad4 g     O .rwdata	00000008 alt_alarm_list
000547f8 g     F .text	00000060 _do_ctors
00050ba4 g     F .text	000000c0 wcrtomb
00052c4c g     F .text	000000d0 close
0005321c g     F .text	00000084 alt_load
000507c0 g     F .text	00000080 fputwc
0004a724 g     F .text	00000004 __sinit_lock_acquire
0004c1f8 g     F .text	00000120 __multadd
0004c1d0 g     F .text	00000028 _Bfree
00055544 g     O .rodata	00000100 szDefaultEDID



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffc1804>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409114 	ori	at,at,580
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__reset-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	008001b4 	movhi	r2,6
   40140:	10a5be04 	addi	r2,r2,-26888
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	008001b4 	movhi	r2,6
   40158:	10a5be04 	addi	r2,r2,-26888
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffc192c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffc1920>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a70a17 	ldw	r2,-25560(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a70a17 	ldw	r2,-25560(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   40248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   4024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   40250:	00bffd16 	blt	zero,r2,40248 <__alt_data_end+0xfffc1a48>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40254:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40258:	defa0014 	ori	sp,sp,59392
    movhi gp, %hi(_gp)
   4025c:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   40260:	d6bea714 	ori	gp,gp,64156
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40264:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40268:	10a5a614 	ori	r2,r2,38552

    movhi r3, %hi(__bss_end)
   4026c:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   40270:	18e5fe14 	ori	r3,r3,38904

    beq r2, r3, 1f
   40274:	10c00326 	beq	r2,r3,40284 <_start+0x40>

0:
    stw zero, (r2)
   40278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40280:	10fffd36 	bltu	r2,r3,40278 <__alt_data_end+0xfffc1a78>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40284:	005321c0 	call	5321c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40288:	00533b00 	call	533b0 <alt_main>

0004028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4028c:	003fff06 	br	4028c <__alt_data_end+0xfffc1a8c>

00040290 <HDMIRX_WriteEeprom>:
0x25,0x00,0xFA,0x8C,0x00,0x00,0x00,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9A
};



bool HDMIRX_WriteEeprom(alt_u32   SCL_BASE, alt_u32 SDA_BASE  ){
   40290:	defff704 	addi	sp,sp,-36
   40294:	dfc00815 	stw	ra,32(sp)
   40298:	df000715 	stw	fp,28(sp)
   4029c:	df000704 	addi	fp,sp,28
   402a0:	e13ffe15 	stw	r4,-8(fp)
   402a4:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = true;
   402a8:	00800044 	movi	r2,1
   402ac:	e0bffa05 	stb	r2,-24(fp)
    int i;
    const alt_u8 *pEdid = szDefaultEDID;
   402b0:	00800174 	movhi	r2,5
   402b4:	10955104 	addi	r2,r2,21828
   402b8:	e0bffc15 	stw	r2,-16(fp)
    int nNum = sizeof(szDefaultEDID)/sizeof(szDefaultEDID[0]);
   402bc:	00804004 	movi	r2,256
   402c0:	e0bffd15 	stw	r2,-12(fp)
    I2C_Open(SCL_BASE, SDA_BASE);
   402c4:	e17fff17 	ldw	r5,-4(fp)
   402c8:	e13ffe17 	ldw	r4,-8(fp)
   402cc:	0041c980 	call	41c98 <I2C_Open>
    for(i=0;i<nNum && bSuccess;i++){
   402d0:	e03ffb15 	stw	zero,-20(fp)
   402d4:	00001106 	br	4031c <HDMIRX_WriteEeprom+0x8c>
            bSuccess = I2C_Write(SCL_BASE, SDA_BASE,0xa0,i, *(pEdid+i));
   402d8:	e0bffb17 	ldw	r2,-20(fp)
   402dc:	11003fcc 	andi	r4,r2,255
   402e0:	e0bffb17 	ldw	r2,-20(fp)
   402e4:	e0fffc17 	ldw	r3,-16(fp)
   402e8:	1885883a 	add	r2,r3,r2
   402ec:	10800003 	ldbu	r2,0(r2)
   402f0:	10803fcc 	andi	r2,r2,255
   402f4:	d8800015 	stw	r2,0(sp)
   402f8:	200f883a 	mov	r7,r4
   402fc:	01bfe804 	movi	r6,-96
   40300:	e17fff17 	ldw	r5,-4(fp)
   40304:	e13ffe17 	ldw	r4,-8(fp)
   40308:	0041d380 	call	41d38 <I2C_Write>
   4030c:	e0bffa05 	stb	r2,-24(fp)
    bool bSuccess = true;
    int i;
    const alt_u8 *pEdid = szDefaultEDID;
    int nNum = sizeof(szDefaultEDID)/sizeof(szDefaultEDID[0]);
    I2C_Open(SCL_BASE, SDA_BASE);
    for(i=0;i<nNum && bSuccess;i++){
   40310:	e0bffb17 	ldw	r2,-20(fp)
   40314:	10800044 	addi	r2,r2,1
   40318:	e0bffb15 	stw	r2,-20(fp)
   4031c:	e0fffb17 	ldw	r3,-20(fp)
   40320:	e0bffd17 	ldw	r2,-12(fp)
   40324:	1880020e 	bge	r3,r2,40330 <HDMIRX_WriteEeprom+0xa0>
   40328:	e0bffa03 	ldbu	r2,-24(fp)
   4032c:	103fea1e 	bne	r2,zero,402d8 <__alt_data_end+0xfffc1ad8>
            bSuccess = I2C_Write(SCL_BASE, SDA_BASE,0xa0,i, *(pEdid+i));
    }
    I2C_Close(SCL_BASE, SDA_BASE);
   40330:	e17fff17 	ldw	r5,-4(fp)
   40334:	e13ffe17 	ldw	r4,-8(fp)
   40338:	0041cf00 	call	41cf0 <I2C_Close>
    return bSuccess;
   4033c:	e0bffa03 	ldbu	r2,-24(fp)
}
   40340:	e037883a 	mov	sp,fp
   40344:	dfc00117 	ldw	ra,4(sp)
   40348:	df000017 	ldw	fp,0(sp)
   4034c:	dec00204 	addi	sp,sp,8
   40350:	f800283a 	ret

00040354 <HDMIRX_VerifyEeprom>:

bool HDMIRX_VerifyEeprom( alt_u32   SCL_BASE, alt_u32 SDA_BASE  ){
   40354:	deffb704 	addi	sp,sp,-292
   40358:	dfc04815 	stw	ra,288(sp)
   4035c:	df004715 	stw	fp,284(sp)
   40360:	df004704 	addi	fp,sp,284
   40364:	e13ffe15 	stw	r4,-8(fp)
   40368:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = true;
   4036c:	00800044 	movi	r2,1
   40370:	e0bfba05 	stb	r2,-280(fp)
    alt_u8 szEDID[256];
    //alt_u8 szEDID[272];
    int i;
    const alt_u8 *pEdid = szDefaultEDID;
   40374:	00800174 	movhi	r2,5
   40378:	10955104 	addi	r2,r2,21828
   4037c:	e0bfbc15 	stw	r2,-272(fp)
    int nNum = sizeof(szDefaultEDID)/sizeof(szDefaultEDID[0]);
   40380:	00804004 	movi	r2,256
   40384:	e0bfbd15 	stw	r2,-268(fp)

     I2C_Open(SCL_BASE, SDA_BASE);
   40388:	e17fff17 	ldw	r5,-4(fp)
   4038c:	e13ffe17 	ldw	r4,-8(fp)
   40390:	0041c980 	call	41c98 <I2C_Open>

    for(i=0;i<nNum && bSuccess;i++){
   40394:	e03fbb15 	stw	zero,-276(fp)
   40398:	00000f06 	br	403d8 <HDMIRX_VerifyEeprom+0x84>
            bSuccess = I2C_Read(SCL_BASE, SDA_BASE,0xa0,i, &szEDID[i]);
   4039c:	e0bfbb17 	ldw	r2,-276(fp)
   403a0:	11003fcc 	andi	r4,r2,255
   403a4:	e0ffbe04 	addi	r3,fp,-264
   403a8:	e0bfbb17 	ldw	r2,-276(fp)
   403ac:	1885883a 	add	r2,r3,r2
   403b0:	d8800015 	stw	r2,0(sp)
   403b4:	200f883a 	mov	r7,r4
   403b8:	01bfe804 	movi	r6,-96
   403bc:	e17fff17 	ldw	r5,-4(fp)
   403c0:	e13ffe17 	ldw	r4,-8(fp)
   403c4:	0041e4c0 	call	41e4c <I2C_Read>
   403c8:	e0bfba05 	stb	r2,-280(fp)
    const alt_u8 *pEdid = szDefaultEDID;
    int nNum = sizeof(szDefaultEDID)/sizeof(szDefaultEDID[0]);

     I2C_Open(SCL_BASE, SDA_BASE);

    for(i=0;i<nNum && bSuccess;i++){
   403cc:	e0bfbb17 	ldw	r2,-276(fp)
   403d0:	10800044 	addi	r2,r2,1
   403d4:	e0bfbb15 	stw	r2,-276(fp)
   403d8:	e0ffbb17 	ldw	r3,-276(fp)
   403dc:	e0bfbd17 	ldw	r2,-268(fp)
   403e0:	1880020e 	bge	r3,r2,403ec <HDMIRX_VerifyEeprom+0x98>
   403e4:	e0bfba03 	ldbu	r2,-280(fp)
   403e8:	103fec1e 	bne	r2,zero,4039c <__alt_data_end+0xfffc1b9c>
            bSuccess = I2C_Read(SCL_BASE, SDA_BASE,0xa0,i, &szEDID[i]);
//            if (bSuccess)
//            	printf("EDID[%d]=%02xh\r\n", i, szEDID[i]);
    }

    I2C_Close(SCL_BASE, SDA_BASE);
   403ec:	e17fff17 	ldw	r5,-4(fp)
   403f0:	e13ffe17 	ldw	r4,-8(fp)
   403f4:	0041cf00 	call	41cf0 <I2C_Close>

    // compare
    if (bSuccess){
   403f8:	e0bfba03 	ldbu	r2,-280(fp)
   403fc:	10001626 	beq	r2,zero,40458 <HDMIRX_VerifyEeprom+0x104>
        for(i=0;i<nNum && bSuccess;i++){
   40400:	e03fbb15 	stw	zero,-276(fp)
   40404:	00000f06 	br	40444 <HDMIRX_VerifyEeprom+0xf0>
            if (szEDID[i] != *(pEdid+i))
   40408:	e0ffbe04 	addi	r3,fp,-264
   4040c:	e0bfbb17 	ldw	r2,-276(fp)
   40410:	1885883a 	add	r2,r3,r2
   40414:	11000003 	ldbu	r4,0(r2)
   40418:	e0bfbb17 	ldw	r2,-276(fp)
   4041c:	e0ffbc17 	ldw	r3,-272(fp)
   40420:	1885883a 	add	r2,r3,r2
   40424:	10800003 	ldbu	r2,0(r2)
   40428:	20c03fcc 	andi	r3,r4,255
   4042c:	10803fcc 	andi	r2,r2,255
   40430:	18800126 	beq	r3,r2,40438 <HDMIRX_VerifyEeprom+0xe4>
                bSuccess = false;
   40434:	e03fba05 	stb	zero,-280(fp)

    I2C_Close(SCL_BASE, SDA_BASE);

    // compare
    if (bSuccess){
        for(i=0;i<nNum && bSuccess;i++){
   40438:	e0bfbb17 	ldw	r2,-276(fp)
   4043c:	10800044 	addi	r2,r2,1
   40440:	e0bfbb15 	stw	r2,-276(fp)
   40444:	e0ffbb17 	ldw	r3,-276(fp)
   40448:	e0bfbd17 	ldw	r2,-268(fp)
   4044c:	1880020e 	bge	r3,r2,40458 <HDMIRX_VerifyEeprom+0x104>
   40450:	e0bfba03 	ldbu	r2,-280(fp)
   40454:	103fec1e 	bne	r2,zero,40408 <__alt_data_end+0xfffc1c08>
            if (szEDID[i] != *(pEdid+i))
                bSuccess = false;
        }
    }
    return bSuccess;
   40458:	e0bfba03 	ldbu	r2,-280(fp)
}
   4045c:	e037883a 	mov	sp,fp
   40460:	dfc00117 	ldw	ra,4(sp)
   40464:	df000017 	ldw	fp,0(sp)
   40468:	dec00204 	addi	sp,sp,8
   4046c:	f800283a 	ret

00040470 <hdmi_rx_regwrite>:



void hdmi_rx_regwrite(alt_32 data)
{
   40470:	defffb04 	addi	sp,sp,-20
   40474:	dfc00415 	stw	ra,16(sp)
   40478:	df000315 	stw	fp,12(sp)
   4047c:	df000304 	addi	fp,sp,12
   40480:	e13fff15 	stw	r4,-4(fp)
	alt_u8 device_addr=(data>>16)&0xff;
   40484:	e0bfff17 	ldw	r2,-4(fp)
   40488:	1005d43a 	srai	r2,r2,16
   4048c:	e0bffe05 	stb	r2,-8(fp)
	alt_u8 reg_index=(data>>8)&0xff;
   40490:	e0bfff17 	ldw	r2,-4(fp)
   40494:	1005d23a 	srai	r2,r2,8
   40498:	e0bffe45 	stb	r2,-7(fp)
	alt_u8 value=data&0xff;
   4049c:	e0bfff17 	ldw	r2,-4(fp)
   404a0:	e0bffe85 	stb	r2,-6(fp)
	alt_u8  value2;
	I2C_Write(I2C_SCL_BASE ,I2C_SDA_BASE , device_addr ,reg_index ,value);
   404a4:	e0bffe03 	ldbu	r2,-8(fp)
   404a8:	10c03fcc 	andi	r3,r2,255
   404ac:	18c0201c 	xori	r3,r3,128
   404b0:	18ffe004 	addi	r3,r3,-128
   404b4:	e13ffe43 	ldbu	r4,-7(fp)
   404b8:	e0bffe83 	ldbu	r2,-6(fp)
   404bc:	d8800015 	stw	r2,0(sp)
   404c0:	200f883a 	mov	r7,r4
   404c4:	180d883a 	mov	r6,r3
   404c8:	01400234 	movhi	r5,8
   404cc:	29442004 	addi	r5,r5,4224
   404d0:	01000234 	movhi	r4,8
   404d4:	21042404 	addi	r4,r4,4240
   404d8:	0041d380 	call	41d38 <I2C_Write>
	//I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , device_addr, reg_index, &value2);
	//printf("value = 0x%x\r\n",value2);
}
   404dc:	0001883a 	nop
   404e0:	e037883a 	mov	sp,fp
   404e4:	dfc00117 	ldw	ra,4(sp)
   404e8:	df000017 	ldw	fp,0(sp)
   404ec:	dec00204 	addi	sp,sp,8
   404f0:	f800283a 	ret

000404f4 <hdmi_DE_REGEN_FILTER_STATUS>:

bool hdmi_DE_REGEN_FILTER_STATUS(void)
{
   404f4:	defffc04 	addi	sp,sp,-16
   404f8:	dfc00315 	stw	ra,12(sp)
   404fc:	df000215 	stw	fp,8(sp)
   40500:	df000204 	addi	fp,sp,8
	alt_u8 value;
	I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68 ,0x07 ,&value);
   40504:	e0bfff04 	addi	r2,fp,-4
   40508:	d8800015 	stw	r2,0(sp)
   4050c:	01c001c4 	movi	r7,7
   40510:	01801a04 	movi	r6,104
   40514:	01400234 	movhi	r5,8
   40518:	29442004 	addi	r5,r5,4224
   4051c:	01000234 	movhi	r4,8
   40520:	21042404 	addi	r4,r4,4240
   40524:	0041e4c0 	call	41e4c <I2C_Read>
	if(value&0x01){
   40528:	e0bfff03 	ldbu	r2,-4(fp)
   4052c:	10803fcc 	andi	r2,r2,255
   40530:	1080004c 	andi	r2,r2,1
   40534:	10000526 	beq	r2,zero,4054c <hdmi_DE_REGEN_FILTER_STATUS+0x58>
		printf("ED_REGEN_FILTER has been locked\r\n");
   40538:	01000174 	movhi	r4,5
   4053c:	21159104 	addi	r4,r4,22084
   40540:	0043ffc0 	call	43ffc <puts>
		return true;
   40544:	00800044 	movi	r2,1
   40548:	00000106 	br	40550 <hdmi_DE_REGEN_FILTER_STATUS+0x5c>
	}else{
		return false;
   4054c:	0005883a 	mov	r2,zero
	}
}
   40550:	e037883a 	mov	sp,fp
   40554:	dfc00117 	ldw	ra,4(sp)
   40558:	df000017 	ldw	fp,0(sp)
   4055c:	dec00204 	addi	sp,sp,8
   40560:	f800283a 	ret

00040564 <hdmi_read_video_statue>:


bool  hdmi_read_video_statue(void)
{
   40564:	defffb04 	addi	sp,sp,-20
   40568:	dfc00415 	stw	ra,16(sp)
   4056c:	df000315 	stw	fp,12(sp)
   40570:	df000304 	addi	fp,sp,12
	bool bPass;
	alt_u8 value1,value2;
	alt_16 data;
	bPass=hdmi_DE_REGEN_FILTER_STATUS();
   40574:	00404f40 	call	404f4 <hdmi_DE_REGEN_FILTER_STATUS>
   40578:	e0bffe05 	stb	r2,-8(fp)
	if(bPass==false)
   4057c:	e0bffe03 	ldbu	r2,-8(fp)
   40580:	1080005c 	xori	r2,r2,1
   40584:	10803fcc 	andi	r2,r2,255
   40588:	10000526 	beq	r2,zero,405a0 <hdmi_read_video_statue+0x3c>
	{
		printf("hdmi status error\r\n" );
   4058c:	01000174 	movhi	r4,5
   40590:	21159a04 	addi	r4,r4,22120
   40594:	0043ffc0 	call	43ffc <puts>
		return false;
   40598:	0005883a 	mov	r2,zero
   4059c:	00002506 	br	40634 <hdmi_read_video_statue+0xd0>
	}else{
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68 ,0x1E ,&value1);
   405a0:	e0bfff04 	addi	r2,fp,-4
   405a4:	d8800015 	stw	r2,0(sp)
   405a8:	01c00784 	movi	r7,30
   405ac:	01801a04 	movi	r6,104
   405b0:	01400234 	movhi	r5,8
   405b4:	29442004 	addi	r5,r5,4224
   405b8:	01000234 	movhi	r4,8
   405bc:	21042404 	addi	r4,r4,4240
   405c0:	0041e4c0 	call	41e4c <I2C_Read>
		usleep(1000);
   405c4:	0100fa04 	movi	r4,1000
   405c8:	00536c00 	call	536c0 <usleep>
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68 ,0x1F ,&value2);
   405cc:	e0bfff44 	addi	r2,fp,-3
   405d0:	d8800015 	stw	r2,0(sp)
   405d4:	01c007c4 	movi	r7,31
   405d8:	01801a04 	movi	r6,104
   405dc:	01400234 	movhi	r5,8
   405e0:	29442004 	addi	r5,r5,4224
   405e4:	01000234 	movhi	r4,8
   405e8:	21042404 	addi	r4,r4,4240
   405ec:	0041e4c0 	call	41e4c <I2C_Read>
		usleep(1000);
   405f0:	0100fa04 	movi	r4,1000
   405f4:	00536c00 	call	536c0 <usleep>
		data=(value1&0x3f)<<8|value2;
   405f8:	e0bfff03 	ldbu	r2,-4(fp)
   405fc:	10803fcc 	andi	r2,r2,255
   40600:	10800fcc 	andi	r2,r2,63
   40604:	1004923a 	slli	r2,r2,8
   40608:	1007883a 	mov	r3,r2
   4060c:	e0bfff43 	ldbu	r2,-3(fp)
   40610:	10803fcc 	andi	r2,r2,255
   40614:	1884b03a 	or	r2,r3,r2
   40618:	e0bffe8d 	sth	r2,-6(fp)
		printf("total line data %d\r\n",data);
   4061c:	e0bffe8f 	ldh	r2,-6(fp)
   40620:	100b883a 	mov	r5,r2
   40624:	01000174 	movhi	r4,5
   40628:	21159f04 	addi	r4,r4,22140
   4062c:	0043f000 	call	43f00 <printf>
		return true;
   40630:	00800044 	movi	r2,1
	}
}
   40634:	e037883a 	mov	sp,fp
   40638:	dfc00117 	ldw	ra,4(sp)
   4063c:	df000017 	ldw	fp,0(sp)
   40640:	dec00204 	addi	sp,sp,8
   40644:	f800283a 	ret

00040648 <hdmi_port_enable>:

#define PORT_A  0x01
#define PORT_B  0x02
void  hdmi_port_enable(int port_number)
{
   40648:	defffb04 	addi	sp,sp,-20
   4064c:	dfc00415 	stw	ra,16(sp)
   40650:	df000315 	stw	fp,12(sp)
   40654:	df000304 	addi	fp,sp,12
   40658:	e13fff15 	stw	r4,-4(fp)
	alt_u8  value;
	if(port_number==PORT_A)
   4065c:	e0bfff17 	ldw	r2,-4(fp)
   40660:	10800058 	cmpnei	r2,r2,1
   40664:	1000021e 	bne	r2,zero,40670 <hdmi_port_enable+0x28>
		value=0x00;
   40668:	e03ffe05 	stb	zero,-8(fp)
   4066c:	00000706 	br	4068c <hdmi_port_enable+0x44>
	else  if(port_number==PORT_B)
   40670:	e0bfff17 	ldw	r2,-4(fp)
   40674:	10800098 	cmpnei	r2,r2,2
   40678:	1000031e 	bne	r2,zero,40688 <hdmi_port_enable+0x40>
		value=0x01;
   4067c:	00800044 	movi	r2,1
   40680:	e0bffe05 	stb	r2,-8(fp)
   40684:	00000106 	br	4068c <hdmi_port_enable+0x44>
	else
		value=0x00;
   40688:	e03ffe05 	stb	zero,-8(fp)
	I2C_Write(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68 ,0x00 ,value);
   4068c:	e0bffe03 	ldbu	r2,-8(fp)
   40690:	d8800015 	stw	r2,0(sp)
   40694:	000f883a 	mov	r7,zero
   40698:	01801a04 	movi	r6,104
   4069c:	01400234 	movhi	r5,8
   406a0:	29442004 	addi	r5,r5,4224
   406a4:	01000234 	movhi	r4,8
   406a8:	21042404 	addi	r4,r4,4240
   406ac:	0041d380 	call	41d38 <I2C_Write>
}
   406b0:	0001883a 	nop
   406b4:	e037883a 	mov	sp,fp
   406b8:	dfc00117 	ldw	ra,4(sp)
   406bc:	df000017 	ldw	fp,0(sp)
   406c0:	dec00204 	addi	sp,sp,8
   406c4:	f800283a 	ret

000406c8 <hdmi_port_detect_st_cl>:

void  hdmi_port_detect_st_cl(int port_number)
{
   406c8:	defffb04 	addi	sp,sp,-20
   406cc:	dfc00415 	stw	ra,16(sp)
   406d0:	df000315 	stw	fp,12(sp)
   406d4:	df000304 	addi	fp,sp,12
   406d8:	e13fff15 	stw	r4,-4(fp)
	    alt_u8  value;
		value=0x01;
   406dc:	00800044 	movi	r2,1
   406e0:	e0bffe05 	stb	r2,-8(fp)
		I2C_Write(I2C_SCL_BASE ,I2C_SDA_BASE , 0x98 ,0x71 ,value);
   406e4:	e0bffe03 	ldbu	r2,-8(fp)
   406e8:	d8800015 	stw	r2,0(sp)
   406ec:	01c01c44 	movi	r7,113
   406f0:	01bfe604 	movi	r6,-104
   406f4:	01400234 	movhi	r5,8
   406f8:	29442004 	addi	r5,r5,4224
   406fc:	01000234 	movhi	r4,8
   40700:	21042404 	addi	r4,r4,4240
   40704:	0041d380 	call	41d38 <I2C_Write>

		value=0x80;
   40708:	00bfe004 	movi	r2,-128
   4070c:	e0bffe05 	stb	r2,-8(fp)
		I2C_Write(I2C_SCL_BASE ,I2C_SDA_BASE , 0x98 ,0x6c ,value);
   40710:	e0bffe03 	ldbu	r2,-8(fp)
   40714:	d8800015 	stw	r2,0(sp)
   40718:	01c01b04 	movi	r7,108
   4071c:	01bfe604 	movi	r6,-104
   40720:	01400234 	movhi	r5,8
   40724:	29442004 	addi	r5,r5,4224
   40728:	01000234 	movhi	r4,8
   4072c:	21042404 	addi	r4,r4,4240
   40730:	0041d380 	call	41d38 <I2C_Write>
		return;
   40734:	0001883a 	nop

}
   40738:	e037883a 	mov	sp,fp
   4073c:	dfc00117 	ldw	ra,4(sp)
   40740:	df000017 	ldw	fp,0(sp)
   40744:	dec00204 	addi	sp,sp,8
   40748:	f800283a 	ret

0004074c <hdmi_port_detect_st_raw>:


alt_u8  hdmi_port_detect_st_raw( )
{
   4074c:	defffc04 	addi	sp,sp,-16
   40750:	dfc00315 	stw	ra,12(sp)
   40754:	df000215 	stw	fp,8(sp)
   40758:	df000204 	addi	fp,sp,8
	alt_u8  value=0x00,value1,value2;
   4075c:	e03fff05 	stb	zero,-4(fp)
	I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x98, 0x6a, &value1);
   40760:	e0bfff44 	addi	r2,fp,-3
   40764:	d8800015 	stw	r2,0(sp)
   40768:	01c01a84 	movi	r7,106
   4076c:	01bfe604 	movi	r6,-104
   40770:	01400234 	movhi	r5,8
   40774:	29442004 	addi	r5,r5,4224
   40778:	01000234 	movhi	r4,8
   4077c:	21042404 	addi	r4,r4,4240
   40780:	0041e4c0 	call	41e4c <I2C_Read>
	if(value1&0x80)
   40784:	e0bfff43 	ldbu	r2,-3(fp)
   40788:	10803fcc 	andi	r2,r2,255
   4078c:	1080201c 	xori	r2,r2,128
   40790:	10bfe004 	addi	r2,r2,-128
   40794:	1000020e 	bge	r2,zero,407a0 <hdmi_port_detect_st_raw+0x54>
		value=PORT_B;
   40798:	00800084 	movi	r2,2
   4079c:	e0bfff05 	stb	r2,-4(fp)
	I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x98, 0x6f, &value2);
   407a0:	e0bfff84 	addi	r2,fp,-2
   407a4:	d8800015 	stw	r2,0(sp)
   407a8:	01c01bc4 	movi	r7,111
   407ac:	01bfe604 	movi	r6,-104
   407b0:	01400234 	movhi	r5,8
   407b4:	29442004 	addi	r5,r5,4224
   407b8:	01000234 	movhi	r4,8
   407bc:	21042404 	addi	r4,r4,4240
   407c0:	0041e4c0 	call	41e4c <I2C_Read>
	if(value2&0x01)
   407c4:	e0bfff83 	ldbu	r2,-2(fp)
   407c8:	10803fcc 	andi	r2,r2,255
   407cc:	1080004c 	andi	r2,r2,1
   407d0:	10000226 	beq	r2,zero,407dc <hdmi_port_detect_st_raw+0x90>
		value=PORT_A;
   407d4:	00800044 	movi	r2,1
   407d8:	e0bfff05 	stb	r2,-4(fp)
    return value;
   407dc:	e0bfff03 	ldbu	r2,-4(fp)

}
   407e0:	e037883a 	mov	sp,fp
   407e4:	dfc00117 	ldw	ra,4(sp)
   407e8:	df000017 	ldw	fp,0(sp)
   407ec:	dec00204 	addi	sp,sp,8
   407f0:	f800283a 	ret

000407f4 <hdmi_isr>:


static void hdmi_isr(void* context){
   407f4:	defffc04 	addi	sp,sp,-16
   407f8:	dfc00315 	stw	ra,12(sp)
   407fc:	df000215 	stw	fp,8(sp)
   40800:	df000204 	addi	fp,sp,8
   40804:	e13fff15 	stw	r4,-4(fp)
  //  alt_u32 ActiveMask,i,Mask=0x01, nIndex=0;
		alt_u8 port_number;
        if ((alt_u32)context == ADV7619_INT_BASE){
   40808:	e0ffff17 	ldw	r3,-4(fp)
   4080c:	00800234 	movhi	r2,8
   40810:	10841004 	addi	r2,r2,4160
   40814:	18800c1e 	bne	r3,r2,40848 <hdmi_isr+0x54>
        	port_number=hdmi_port_detect_st_raw();
   40818:	004074c0 	call	4074c <hdmi_port_detect_st_raw>
   4081c:	e0bffe05 	stb	r2,-8(fp)
        hdmi_port_enable(port_number);
   40820:	e0bffe03 	ldbu	r2,-8(fp)
   40824:	1009883a 	mov	r4,r2
   40828:	00406480 	call	40648 <hdmi_port_enable>
        hdmi_port_detect_st_cl(port_number);
   4082c:	e0bffe03 	ldbu	r2,-8(fp)
   40830:	1009883a 	mov	r4,r2
   40834:	00406c80 	call	406c8 <hdmi_port_detect_st_cl>
        IOWR_ALTERA_AVALON_PIO_EDGE_CAP(ADV7619_INT_BASE,0);
   40838:	0007883a 	mov	r3,zero
   4083c:	00800234 	movhi	r2,8
   40840:	10841304 	addi	r2,r2,4172
   40844:	10c00035 	stwio	r3,0(r2)
    }
}
   40848:	0001883a 	nop
   4084c:	e037883a 	mov	sp,fp
   40850:	dfc00117 	ldw	ra,4(sp)
   40854:	df000017 	ldw	fp,0(sp)
   40858:	dec00204 	addi	sp,sp,8
   4085c:	f800283a 	ret

00040860 <hdmi_interrupt_init>:


void hdmi_interrupt_init(void)
{
   40860:	defffc04 	addi	sp,sp,-16
   40864:	dfc00315 	stw	ra,12(sp)
   40868:	df000215 	stw	fp,8(sp)
   4086c:	df000204 	addi	fp,sp,8
	int error;
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(ADV7619_INT_BASE, 0x00);
   40870:	0007883a 	mov	r3,zero
   40874:	00800234 	movhi	r2,8
   40878:	10841204 	addi	r2,r2,4168
   4087c:	10c00035 	stwio	r3,0(r2)

    // clear capture flag
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(ADV7619_INT_BASE,0);
   40880:	0007883a 	mov	r3,zero
   40884:	00800234 	movhi	r2,8
   40888:	10841304 	addi	r2,r2,4172
   4088c:	10c00035 	stwio	r3,0(r2)

    error = alt_ic_isr_register (ADV7619_INT_IRQ_INTERRUPT_CONTROLLER_ID, ADV7619_INT_IRQ, hdmi_isr, ADV7619_INT_BASE, NULL);
   40890:	d8000015 	stw	zero,0(sp)
   40894:	01c00234 	movhi	r7,8
   40898:	39c41004 	addi	r7,r7,4160
   4089c:	01800134 	movhi	r6,4
   408a0:	3181fd04 	addi	r6,r6,2036
   408a4:	01400184 	movi	r5,6
   408a8:	0009883a 	mov	r4,zero
   408ac:	0052e340 	call	52e34 <alt_ic_isr_register>
   408b0:	e0bfff15 	stw	r2,-4(fp)
    if (error){
   408b4:	e0bfff17 	ldw	r2,-4(fp)
   408b8:	10000326 	beq	r2,zero,408c8 <hdmi_interrupt_init+0x68>
                printf("alt_ic_isr_register failed!\r\n");
   408bc:	01000174 	movhi	r4,5
   408c0:	2115a504 	addi	r4,r4,22164
   408c4:	0043ffc0 	call	43ffc <puts>
    }
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(ADV7619_INT_BASE, 0x01);
   408c8:	00c00044 	movi	r3,1
   408cc:	00800234 	movhi	r2,8
   408d0:	10841204 	addi	r2,r2,4168
   408d4:	10c00035 	stwio	r3,0(r2)
}
   408d8:	0001883a 	nop
   408dc:	e037883a 	mov	sp,fp
   408e0:	dfc00117 	ldw	ra,4(sp)
   408e4:	df000017 	ldw	fp,0(sp)
   408e8:	dec00204 	addi	sp,sp,8
   408ec:	f800283a 	ret

000408f0 <HDMI_TX_ReadI2C_ByteN_0>:
#include "HDMI_TX.h"
#include "I2C.h"


bool HDMI_TX_ReadI2C_ByteN_0(alt_u8 RegAddr, alt_u8 *pData,int N)
{
   408f0:	defff804 	addi	sp,sp,-32
   408f4:	dfc00715 	stw	ra,28(sp)
   408f8:	df000615 	stw	fp,24(sp)
   408fc:	df000604 	addi	fp,sp,24
   40900:	2005883a 	mov	r2,r4
   40904:	e17ffe15 	stw	r5,-8(fp)
   40908:	e1bfff15 	stw	r6,-4(fp)
   4090c:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess = true;
   40910:	00800044 	movi	r2,1
   40914:	e0bffb05 	stb	r2,-20(fp)
	int i;
    for(i=0;i<N && bSuccess;i++){
   40918:	e03ffc15 	stw	zero,-16(fp)
   4091c:	00001406 	br	40970 <HDMI_TX_ReadI2C_ByteN_0+0x80>
        bSuccess = I2C_Read(HDMI_TX_FMC_I2C_SCL_BASE, HDMI_TX_FMC_I2C_SDA_BASE, HDMI_TX_I2C_SLAVE_ADDR_0, RegAddr+i,(alt_u8 *)(pData+i));
   40920:	e0bffc17 	ldw	r2,-16(fp)
   40924:	1007883a 	mov	r3,r2
   40928:	e0bffd03 	ldbu	r2,-12(fp)
   4092c:	1885883a 	add	r2,r3,r2
   40930:	11003fcc 	andi	r4,r2,255
   40934:	e0bffc17 	ldw	r2,-16(fp)
   40938:	e0fffe17 	ldw	r3,-8(fp)
   4093c:	1885883a 	add	r2,r3,r2
   40940:	d8800015 	stw	r2,0(sp)
   40944:	200f883a 	mov	r7,r4
   40948:	01801c84 	movi	r6,114
   4094c:	01400234 	movhi	r5,8
   40950:	29443804 	addi	r5,r5,4320
   40954:	01000234 	movhi	r4,8
   40958:	21043404 	addi	r4,r4,4304
   4095c:	0041e4c0 	call	41e4c <I2C_Read>
   40960:	e0bffb05 	stb	r2,-20(fp)

bool HDMI_TX_ReadI2C_ByteN_0(alt_u8 RegAddr, alt_u8 *pData,int N)
{
	bool bSuccess = true;
	int i;
    for(i=0;i<N && bSuccess;i++){
   40964:	e0bffc17 	ldw	r2,-16(fp)
   40968:	10800044 	addi	r2,r2,1
   4096c:	e0bffc15 	stw	r2,-16(fp)
   40970:	e0fffc17 	ldw	r3,-16(fp)
   40974:	e0bfff17 	ldw	r2,-4(fp)
   40978:	1880020e 	bge	r3,r2,40984 <HDMI_TX_ReadI2C_ByteN_0+0x94>
   4097c:	e0bffb03 	ldbu	r2,-20(fp)
   40980:	103fe71e 	bne	r2,zero,40920 <__alt_data_end+0xfffc2120>
        bSuccess = I2C_Read(HDMI_TX_FMC_I2C_SCL_BASE, HDMI_TX_FMC_I2C_SDA_BASE, HDMI_TX_I2C_SLAVE_ADDR_0, RegAddr+i,(alt_u8 *)(pData+i));
        //printf("==========> Read HDMI-TX Reg[%02Xh]=%02Xh\n", RegAddr+i, *(alt_u8 *)(pData+i));
        //usleep(50); // wait
    }
    return bSuccess;
   40984:	e0bffb03 	ldbu	r2,-20(fp)
}
   40988:	e037883a 	mov	sp,fp
   4098c:	dfc00117 	ldw	ra,4(sp)
   40990:	df000017 	ldw	fp,0(sp)
   40994:	dec00204 	addi	sp,sp,8
   40998:	f800283a 	ret

0004099c <HDMI_TX_WriteI2C_ByteN_0>:


bool HDMI_TX_WriteI2C_ByteN_0(alt_u8 RegAddr, alt_u8 *pData,int N)
{
   4099c:	defff804 	addi	sp,sp,-32
   409a0:	dfc00715 	stw	ra,28(sp)
   409a4:	df000615 	stw	fp,24(sp)
   409a8:	df000604 	addi	fp,sp,24
   409ac:	2005883a 	mov	r2,r4
   409b0:	e17ffe15 	stw	r5,-8(fp)
   409b4:	e1bfff15 	stw	r6,-4(fp)
   409b8:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess = true;
   409bc:	00800044 	movi	r2,1
   409c0:	e0bffb05 	stb	r2,-20(fp)
	int i;
    for(i=0;i<N && bSuccess;i++){
   409c4:	e03ffc15 	stw	zero,-16(fp)
   409c8:	00001606 	br	40a24 <HDMI_TX_WriteI2C_ByteN_0+0x88>
        //printf("==========> Write HDMI-TX Reg[%02Xh]=%02Xh\n", RegAddr+i, *(pData+i));
        bSuccess = I2C_Write(HDMI_TX_FMC_I2C_SCL_BASE, HDMI_TX_FMC_I2C_SDA_BASE, HDMI_TX_I2C_SLAVE_ADDR_0, RegAddr+i, *(pData+i));
   409cc:	e0bffc17 	ldw	r2,-16(fp)
   409d0:	1007883a 	mov	r3,r2
   409d4:	e0bffd03 	ldbu	r2,-12(fp)
   409d8:	1885883a 	add	r2,r3,r2
   409dc:	11003fcc 	andi	r4,r2,255
   409e0:	e0bffc17 	ldw	r2,-16(fp)
   409e4:	e0fffe17 	ldw	r3,-8(fp)
   409e8:	1885883a 	add	r2,r3,r2
   409ec:	10800003 	ldbu	r2,0(r2)
   409f0:	10803fcc 	andi	r2,r2,255
   409f4:	d8800015 	stw	r2,0(sp)
   409f8:	200f883a 	mov	r7,r4
   409fc:	01801c84 	movi	r6,114
   40a00:	01400234 	movhi	r5,8
   40a04:	29443804 	addi	r5,r5,4320
   40a08:	01000234 	movhi	r4,8
   40a0c:	21043404 	addi	r4,r4,4304
   40a10:	0041d380 	call	41d38 <I2C_Write>
   40a14:	e0bffb05 	stb	r2,-20(fp)

bool HDMI_TX_WriteI2C_ByteN_0(alt_u8 RegAddr, alt_u8 *pData,int N)
{
	bool bSuccess = true;
	int i;
    for(i=0;i<N && bSuccess;i++){
   40a18:	e0bffc17 	ldw	r2,-16(fp)
   40a1c:	10800044 	addi	r2,r2,1
   40a20:	e0bffc15 	stw	r2,-16(fp)
   40a24:	e0fffc17 	ldw	r3,-16(fp)
   40a28:	e0bfff17 	ldw	r2,-4(fp)
   40a2c:	1880020e 	bge	r3,r2,40a38 <HDMI_TX_WriteI2C_ByteN_0+0x9c>
   40a30:	e0bffb03 	ldbu	r2,-20(fp)
   40a34:	103fe51e 	bne	r2,zero,409cc <__alt_data_end+0xfffc21cc>
        //printf("==========> Write HDMI-TX Reg[%02Xh]=%02Xh\n", RegAddr+i, *(pData+i));
        bSuccess = I2C_Write(HDMI_TX_FMC_I2C_SCL_BASE, HDMI_TX_FMC_I2C_SDA_BASE, HDMI_TX_I2C_SLAVE_ADDR_0, RegAddr+i, *(pData+i));
    }
    return bSuccess;
   40a38:	e0bffb03 	ldbu	r2,-20(fp)
}
   40a3c:	e037883a 	mov	sp,fp
   40a40:	dfc00117 	ldw	ra,4(sp)
   40a44:	df000017 	ldw	fp,0(sp)
   40a48:	dec00204 	addi	sp,sp,8
   40a4c:	f800283a 	ret

00040a50 <HDMI_TX_ReadI2C_Byte_0>:


int HDMI_TX_ReadI2C_Byte_0(alt_u8 RegAddr)
{
   40a50:	defffc04 	addi	sp,sp,-16
   40a54:	dfc00315 	stw	ra,12(sp)
   40a58:	df000215 	stw	fp,8(sp)
   40a5c:	df000204 	addi	fp,sp,8
   40a60:	2005883a 	mov	r2,r4
   40a64:	e0bfff05 	stb	r2,-4(fp)
	//return I2C_Read_Byte(HDMI_TX_I2C_SLAVE_ADDR,RegAddr) ;
	alt_u8 Value;
    HDMI_TX_ReadI2C_ByteN_0(RegAddr, &Value, 1);
   40a68:	e0bfff03 	ldbu	r2,-4(fp)
   40a6c:	01800044 	movi	r6,1
   40a70:	e17ffe04 	addi	r5,fp,-8
   40a74:	1009883a 	mov	r4,r2
   40a78:	00408f00 	call	408f0 <HDMI_TX_ReadI2C_ByteN_0>
    return Value;
   40a7c:	e0bffe03 	ldbu	r2,-8(fp)
   40a80:	10803fcc 	andi	r2,r2,255
}
   40a84:	e037883a 	mov	sp,fp
   40a88:	dfc00117 	ldw	ra,4(sp)
   40a8c:	df000017 	ldw	fp,0(sp)
   40a90:	dec00204 	addi	sp,sp,8
   40a94:	f800283a 	ret

00040a98 <HDMI_TX_WriteI2C_Byte_0>:
int HDMI_TX_WriteI2C_Byte_0(alt_u8 RegAddr,alt_u8 Data)
{
   40a98:	defffc04 	addi	sp,sp,-16
   40a9c:	dfc00315 	stw	ra,12(sp)
   40aa0:	df000215 	stw	fp,8(sp)
   40aa4:	df000204 	addi	fp,sp,8
   40aa8:	2007883a 	mov	r3,r4
   40aac:	2805883a 	mov	r2,r5
   40ab0:	e0fffe05 	stb	r3,-8(fp)
   40ab4:	e0bfff05 	stb	r2,-4(fp)

    return HDMI_TX_WriteI2C_ByteN_0(RegAddr, &Data, 1);
   40ab8:	e0bffe03 	ldbu	r2,-8(fp)
   40abc:	e0ffff04 	addi	r3,fp,-4
   40ac0:	01800044 	movi	r6,1
   40ac4:	180b883a 	mov	r5,r3
   40ac8:	1009883a 	mov	r4,r2
   40acc:	004099c0 	call	4099c <HDMI_TX_WriteI2C_ByteN_0>
   40ad0:	10803fcc 	andi	r2,r2,255
}
   40ad4:	e037883a 	mov	sp,fp
   40ad8:	dfc00117 	ldw	ra,4(sp)
   40adc:	df000017 	ldw	fp,0(sp)
   40ae0:	dec00204 	addi	sp,sp,8
   40ae4:	f800283a 	ret

00040ae8 <HDMI_TX_TPI_Mode_Enable>:


bool HDMI_TX_TPI_Mode_Enable(void){
   40ae8:	defffd04 	addi	sp,sp,-12
   40aec:	dfc00215 	stw	ra,8(sp)
   40af0:	df000115 	stw	fp,4(sp)
   40af4:	df000104 	addi	fp,sp,4
    bool bSuccess = false;
   40af8:	e03fff05 	stb	zero,-4(fp)
    bSuccess=HDMI_TX_WriteI2C_Byte_0(0xC7, 0x00);
   40afc:	000b883a 	mov	r5,zero
   40b00:	010031c4 	movi	r4,199
   40b04:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>
   40b08:	1004c03a 	cmpne	r2,r2,zero
   40b0c:	e0bfff05 	stb	r2,-4(fp)
    usleep(30*1000);
   40b10:	011d4c04 	movi	r4,30000
   40b14:	00536c00 	call	536c0 <usleep>
   // bSuccess=HDMI_TX_WriteI2C_Byte_0(0xC7, 0x80);
    if (bSuccess){
   40b18:	e0bfff03 	ldbu	r2,-4(fp)
   40b1c:	10000426 	beq	r2,zero,40b30 <HDMI_TX_TPI_Mode_Enable+0x48>
        printf("HDMI TX TPI Mode Enable success\r\n");
   40b20:	01000174 	movhi	r4,5
   40b24:	2115ad04 	addi	r4,r4,22196
   40b28:	0043ffc0 	call	43ffc <puts>
   40b2c:	00000306 	br	40b3c <HDMI_TX_TPI_Mode_Enable+0x54>
    }else{
        printf("HDMI TX TPI Mode Enable failed\r\n");
   40b30:	01000174 	movhi	r4,5
   40b34:	2115b604 	addi	r4,r4,22232
   40b38:	0043ffc0 	call	43ffc <puts>
    }
    return bSuccess;
   40b3c:	e0bfff03 	ldbu	r2,-4(fp)
}
   40b40:	e037883a 	mov	sp,fp
   40b44:	dfc00117 	ldw	ra,4(sp)
   40b48:	df000017 	ldw	fp,0(sp)
   40b4c:	dec00204 	addi	sp,sp,8
   40b50:	f800283a 	ret

00040b54 <HDMI_TX_Reset>:


void HDMI_TX_Reset(void){
   40b54:	defffe04 	addi	sp,sp,-8
   40b58:	dfc00115 	stw	ra,4(sp)
   40b5c:	df000015 	stw	fp,0(sp)
   40b60:	d839883a 	mov	fp,sp
	printf("TX hardware Reset\n");
   40b64:	01000174 	movhi	r4,5
   40b68:	2115be04 	addi	r4,r4,22264
   40b6c:	0043ffc0 	call	43ffc <puts>
    IOWR(SII9136_RST_N_BASE, 0, 1);
   40b70:	00c00044 	movi	r3,1
   40b74:	00800234 	movhi	r2,8
   40b78:	10842c04 	addi	r2,r2,4272
   40b7c:	10c00035 	stwio	r3,0(r2)
    usleep(20*1000);
   40b80:	01138804 	movi	r4,20000
   40b84:	00536c00 	call	536c0 <usleep>
    IOWR(SII9136_RST_N_BASE, 0, 0);
   40b88:	0007883a 	mov	r3,zero
   40b8c:	00800234 	movhi	r2,8
   40b90:	10842c04 	addi	r2,r2,4272
   40b94:	10c00035 	stwio	r3,0(r2)
    usleep(20*1000);
   40b98:	01138804 	movi	r4,20000
   40b9c:	00536c00 	call	536c0 <usleep>
    IOWR(SII9136_RST_N_BASE, 0, 1);
   40ba0:	00c00044 	movi	r3,1
   40ba4:	00800234 	movhi	r2,8
   40ba8:	10842c04 	addi	r2,r2,4272
   40bac:	10c00035 	stwio	r3,0(r2)
    usleep(200*1000);
   40bb0:	010000f4 	movhi	r4,3
   40bb4:	21035004 	addi	r4,r4,3392
   40bb8:	00536c00 	call	536c0 <usleep>
    //I2C_Write(HDMI_FMC_I2C_SCL_BASE, HDMI_FMC_I2C_SDA_BASE, HDMI_TX_I2C_SLAVE_ADDR_0, 0xc7, 0x00);
    HDMI_TX_TPI_Mode_Enable();
   40bbc:	0040ae80 	call	40ae8 <HDMI_TX_TPI_Mode_Enable>
    usleep(500*1000);
   40bc0:	01000234 	movhi	r4,8
   40bc4:	21284804 	addi	r4,r4,-24288
   40bc8:	00536c00 	call	536c0 <usleep>
}
   40bcc:	0001883a 	nop
   40bd0:	e037883a 	mov	sp,fp
   40bd4:	dfc00117 	ldw	ra,4(sp)
   40bd8:	df000017 	ldw	fp,0(sp)
   40bdc:	dec00204 	addi	sp,sp,8
   40be0:	f800283a 	ret

00040be4 <HDMI_TX_ChipVerify>:

bool HDMI_TX_ChipVerify(void){
   40be4:	defffb04 	addi	sp,sp,-20
   40be8:	dfc00415 	stw	ra,16(sp)
   40bec:	df000315 	stw	fp,12(sp)
   40bf0:	df000304 	addi	fp,sp,12
    bool bPass = false;
   40bf4:	e03ffd05 	stb	zero,-12(fp)
    alt_u8 szID[3];
    int i;
    for(i=0;i<3;i++){
   40bf8:	e03ffe15 	stw	zero,-8(fp)
   40bfc:	00001706 	br	40c5c <HDMI_TX_ChipVerify+0x78>
    	//I2C_Read(HDMI_FMC_I2C_SCL_BASE, HDMI_FMC_I2C_SDA_BASE, HDMI_TX_I2C_SLAVE_ADDR_0, 0x1b+i,&szID[i]);
    	szID[i]=HDMI_TX_ReadI2C_Byte_0(i+0x1b);
   40c00:	e0bffe17 	ldw	r2,-8(fp)
   40c04:	108006c4 	addi	r2,r2,27
   40c08:	10803fcc 	andi	r2,r2,255
   40c0c:	1009883a 	mov	r4,r2
   40c10:	0040a500 	call	40a50 <HDMI_TX_ReadI2C_Byte_0>
   40c14:	1009883a 	mov	r4,r2
   40c18:	e0ffff04 	addi	r3,fp,-4
   40c1c:	e0bffe17 	ldw	r2,-8(fp)
   40c20:	1885883a 	add	r2,r3,r2
   40c24:	11000005 	stb	r4,0(r2)
        printf("szID[%d]= %x\n",i, szID[i]);}
   40c28:	e0ffff04 	addi	r3,fp,-4
   40c2c:	e0bffe17 	ldw	r2,-8(fp)
   40c30:	1885883a 	add	r2,r3,r2
   40c34:	10800003 	ldbu	r2,0(r2)
   40c38:	10803fcc 	andi	r2,r2,255
   40c3c:	100d883a 	mov	r6,r2
   40c40:	e17ffe17 	ldw	r5,-8(fp)
   40c44:	01000174 	movhi	r4,5
   40c48:	2115c304 	addi	r4,r4,22284
   40c4c:	0043f000 	call	43f00 <printf>

bool HDMI_TX_ChipVerify(void){
    bool bPass = false;
    alt_u8 szID[3];
    int i;
    for(i=0;i<3;i++){
   40c50:	e0bffe17 	ldw	r2,-8(fp)
   40c54:	10800044 	addi	r2,r2,1
   40c58:	e0bffe15 	stw	r2,-8(fp)
   40c5c:	e0bffe17 	ldw	r2,-8(fp)
   40c60:	108000d0 	cmplti	r2,r2,3
   40c64:	103fe61e 	bne	r2,zero,40c00 <__alt_data_end+0xfffc2400>
    	//I2C_Read(HDMI_FMC_I2C_SCL_BASE, HDMI_FMC_I2C_SDA_BASE, HDMI_TX_I2C_SLAVE_ADDR_0, 0x1b+i,&szID[i]);
    	szID[i]=HDMI_TX_ReadI2C_Byte_0(i+0x1b);
        printf("szID[%d]= %x\n",i, szID[i]);}
       // szID[i] = HDMITX_ReadI2C_Byte(i+0x1b);

    if ((szID[0]==0xB4 && szID[1] == 0x20 && szID[2] == 0x30)){
   40c68:	e0bfff03 	ldbu	r2,-4(fp)
   40c6c:	10803fcc 	andi	r2,r2,255
   40c70:	10802d18 	cmpnei	r2,r2,180
   40c74:	1000171e 	bne	r2,zero,40cd4 <HDMI_TX_ChipVerify+0xf0>
   40c78:	e0bfff43 	ldbu	r2,-3(fp)
   40c7c:	10803fcc 	andi	r2,r2,255
   40c80:	10800818 	cmpnei	r2,r2,32
   40c84:	1000131e 	bne	r2,zero,40cd4 <HDMI_TX_ChipVerify+0xf0>
   40c88:	e0bfff83 	ldbu	r2,-2(fp)
   40c8c:	10803fcc 	andi	r2,r2,255
   40c90:	10800c18 	cmpnei	r2,r2,48
   40c94:	10000f1e 	bne	r2,zero,40cd4 <HDMI_TX_ChipVerify+0xf0>
        bPass = true;
   40c98:	00800044 	movi	r2,1
   40c9c:	e0bffd05 	stb	r2,-12(fp)
        printf("TX Chip Device ID: %02X%02X%02Xh\n", szID[0], szID[1], szID[2]);
   40ca0:	e0bfff03 	ldbu	r2,-4(fp)
   40ca4:	10803fcc 	andi	r2,r2,255
   40ca8:	e0ffff43 	ldbu	r3,-3(fp)
   40cac:	18c03fcc 	andi	r3,r3,255
   40cb0:	e13fff83 	ldbu	r4,-2(fp)
   40cb4:	21003fcc 	andi	r4,r4,255
   40cb8:	200f883a 	mov	r7,r4
   40cbc:	180d883a 	mov	r6,r3
   40cc0:	100b883a 	mov	r5,r2
   40cc4:	01000174 	movhi	r4,5
   40cc8:	2115c704 	addi	r4,r4,22300
   40ccc:	0043f000 	call	43f00 <printf>
   40cd0:	00000c06 	br	40d04 <HDMI_TX_ChipVerify+0x120>
    }else{
        printf("NG, Read TX Chip ID:%02X%02X%02Xh (expected:B4C2030)\n", szID[0], szID[1], szID[2]);
   40cd4:	e0bfff03 	ldbu	r2,-4(fp)
   40cd8:	10803fcc 	andi	r2,r2,255
   40cdc:	e0ffff43 	ldbu	r3,-3(fp)
   40ce0:	18c03fcc 	andi	r3,r3,255
   40ce4:	e13fff83 	ldbu	r4,-2(fp)
   40ce8:	21003fcc 	andi	r4,r4,255
   40cec:	200f883a 	mov	r7,r4
   40cf0:	180d883a 	mov	r6,r3
   40cf4:	100b883a 	mov	r5,r2
   40cf8:	01000174 	movhi	r4,5
   40cfc:	2115d004 	addi	r4,r4,22336
   40d00:	0043f000 	call	43f00 <printf>
    }

    return bPass;
   40d04:	e0bffd03 	ldbu	r2,-12(fp)
}
   40d08:	e037883a 	mov	sp,fp
   40d0c:	dfc00117 	ldw	ra,4(sp)
   40d10:	df000017 	ldw	fp,0(sp)
   40d14:	dec00204 	addi	sp,sp,8
   40d18:	f800283a 	ret

00040d1c <InitSII9136>:





void InitSII9136(void){
   40d1c:	defffd04 	addi	sp,sp,-12
   40d20:	dfc00215 	stw	ra,8(sp)
   40d24:	df000115 	stw	fp,4(sp)
   40d28:	df000104 	addi	fp,sp,4
	alt_u8 STATUE;




		HDMI_TX_WriteI2C_Byte_0(0x1A, 0x11);	// disable TMDS output
   40d2c:	01400444 	movi	r5,17
   40d30:	01000684 	movi	r4,26
   40d34:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>


		HDMI_TX_WriteI2C_Byte_0(0x09, 0x00);  //input 8-bit  RGB mode
   40d38:	000b883a 	mov	r5,zero
   40d3c:	01000244 	movi	r4,9
   40d40:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>
		HDMI_TX_WriteI2C_Byte_0(0x1E, 0x00);    // Power up transmitter----Enter full-operation D0 state
   40d44:	000b883a 	mov	r5,zero
   40d48:	01000784 	movi	r4,30
   40d4c:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>


		HDMI_TX_WriteI2C_Byte_0(0x09, 0x04);  //input 12-bit  RGB mode
   40d50:	01400104 	movi	r5,4
   40d54:	01000244 	movi	r4,9
   40d58:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>
		HDMI_TX_WriteI2C_Byte_0(0x0A, 0x04);    //output 12-bit RGB
   40d5c:	01400104 	movi	r5,4
   40d60:	01000284 	movi	r4,10
   40d64:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>

		HDMI_TX_WriteI2C_Byte_0(0xBC, 0x01);    //Set source termination
   40d68:	01400044 	movi	r5,1
   40d6c:	01002f04 	movi	r4,188
   40d70:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>
	    HDMI_TX_WriteI2C_Byte_0(0xBD, 0x80);
   40d74:	01402004 	movi	r5,128
   40d78:	01002f44 	movi	r4,189
   40d7c:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>
	    HDMI_TX_WriteI2C_Byte_0(0xBE, 0x24);
   40d80:	01400904 	movi	r5,36
   40d84:	01002f84 	movi	r4,190
   40d88:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>

	    HDMI_TX_WriteI2C_Byte_0(0x19, 0x01);
   40d8c:	01400044 	movi	r5,1
   40d90:	01000644 	movi	r4,25
   40d94:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>
	    HDMI_TX_WriteI2C_Byte_0(0x3C, 0x00);     // disable Interrupt
   40d98:	000b883a 	mov	r5,zero
   40d9c:	01000f04 	movi	r4,60
   40da0:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>
	    HDMI_TX_WriteI2C_Byte_0(0x3D, 0xF3);     // clear Interrupt Status
   40da4:	01403cc4 	movi	r5,243
   40da8:	01000f44 	movi	r4,61
   40dac:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>



	    //audio config
	    HDMI_TX_WriteI2C_Byte_0(0x26, 0x91);
   40db0:	01402444 	movi	r5,145
   40db4:	01000984 	movi	r4,38
   40db8:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>
	    HDMI_TX_WriteI2C_Byte_0(0x25, 0x03);
   40dbc:	014000c4 	movi	r5,3
   40dc0:	01000944 	movi	r4,37
   40dc4:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>
	    HDMI_TX_WriteI2C_Byte_0(0x27, 0x00);  //
   40dc8:	000b883a 	mov	r5,zero
   40dcc:	010009c4 	movi	r4,39
   40dd0:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>
		HDMI_TX_WriteI2C_Byte_0(0x1f, 0x80);  //
   40dd4:	01402004 	movi	r5,128
   40dd8:	010007c4 	movi	r4,31
   40ddc:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>
		HDMI_TX_WriteI2C_Byte_0(0x1f, 0x91);  //
   40de0:	01402444 	movi	r5,145
   40de4:	010007c4 	movi	r4,31
   40de8:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>
	    HDMI_TX_WriteI2C_Byte_0(0x1f, 0xa2);  //
   40dec:	01402884 	movi	r5,162
   40df0:	010007c4 	movi	r4,31
   40df4:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>
		HDMI_TX_WriteI2C_Byte_0(0x1f, 0xb3);  //
   40df8:	01402cc4 	movi	r5,179
   40dfc:	010007c4 	movi	r4,31
   40e00:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>
		HDMI_TX_WriteI2C_Byte_0(0x20, 0xF0);  //
   40e04:	01403c04 	movi	r5,240
   40e08:	01000804 	movi	r4,32
   40e0c:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>
		HDMI_TX_WriteI2C_Byte_0(0x26, 0x81);	// I2S
   40e10:	01402044 	movi	r5,129
   40e14:	01000984 	movi	r4,38
   40e18:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>
		//audio config end

		HDMI_TX_WriteI2C_Byte_0(0xBC, 0x02);  //
   40e1c:	01400084 	movi	r5,2
   40e20:	01002f04 	movi	r4,188
   40e24:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>
		HDMI_TX_WriteI2C_Byte_0(0xBD, 0x1D);  //
   40e28:	01400744 	movi	r5,29
   40e2c:	01002f44 	movi	r4,189
   40e30:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>
		STATUE=HDMI_TX_ReadI2C_Byte_0(0xBE);
   40e34:	01002f84 	movi	r4,190
   40e38:	0040a500 	call	40a50 <HDMI_TX_ReadI2C_Byte_0>
   40e3c:	e0bfff05 	stb	r2,-4(fp)
		STATUE=STATUE^0x10;
   40e40:	e0bfff03 	ldbu	r2,-4(fp)
   40e44:	1080041c 	xori	r2,r2,16
   40e48:	e0bfff05 	stb	r2,-4(fp)
		HDMI_TX_WriteI2C_Byte_0(0xBE, STATUE);  //
   40e4c:	e0bfff03 	ldbu	r2,-4(fp)
   40e50:	100b883a 	mov	r5,r2
   40e54:	01002f84 	movi	r4,190
   40e58:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>

		HDMI_TX_WriteI2C_Byte_0(0x1A, 0x01);	// enable TMDS output
   40e5c:	01400044 	movi	r5,1
   40e60:	01000684 	movi	r4,26
   40e64:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>
	//
	//
		HDMI_TX_WriteI2C_Byte_0(0x3C, 0xFB);     // Interrupt Enable
   40e68:	01403ec4 	movi	r5,251
   40e6c:	01000f04 	movi	r4,60
   40e70:	0040a980 	call	40a98 <HDMI_TX_WriteI2C_Byte_0>

		//while(1){
		STATUE=HDMI_TX_ReadI2C_Byte_0(0x3D);
   40e74:	01000f44 	movi	r4,61
   40e78:	0040a500 	call	40a50 <HDMI_TX_ReadI2C_Byte_0>
   40e7c:	e0bfff05 	stb	r2,-4(fp)
		printf("STATUE= %x\n", STATUE);
   40e80:	e0bfff03 	ldbu	r2,-4(fp)
   40e84:	100b883a 	mov	r5,r2
   40e88:	01000174 	movhi	r4,5
   40e8c:	2115de04 	addi	r4,r4,22392
   40e90:	0043f000 	call	43f00 <printf>
		usleep(1000*1000);
   40e94:	010003f4 	movhi	r4,15
   40e98:	21109004 	addi	r4,r4,16960
   40e9c:	00536c00 	call	536c0 <usleep>
		//}


}
   40ea0:	0001883a 	nop
   40ea4:	e037883a 	mov	sp,fp
   40ea8:	dfc00117 	ldw	ra,4(sp)
   40eac:	df000017 	ldw	fp,0(sp)
   40eb0:	dec00204 	addi	sp,sp,8
   40eb4:	f800283a 	ret

00040eb8 <HDMI_TX_Init>:

bool HDMI_TX_Init(void){
   40eb8:	defffd04 	addi	sp,sp,-12
   40ebc:	dfc00215 	stw	ra,8(sp)
   40ec0:	df000115 	stw	fp,4(sp)
   40ec4:	df000104 	addi	fp,sp,4
    bool bSuccess = true;
   40ec8:	00800044 	movi	r2,1
   40ecc:	e0bfff05 	stb	r2,-4(fp)
    HDMI_TX_Reset();
   40ed0:	0040b540 	call	40b54 <HDMI_TX_Reset>
    usleep(500*1000);
   40ed4:	01000234 	movhi	r4,8
   40ed8:	21284804 	addi	r4,r4,-24288
   40edc:	00536c00 	call	536c0 <usleep>
    if (!HDMI_TX_ChipVerify()){
   40ee0:	0040be40 	call	40be4 <HDMI_TX_ChipVerify>
   40ee4:	1080005c 	xori	r2,r2,1
   40ee8:	10803fcc 	andi	r2,r2,255
   40eec:	10000426 	beq	r2,zero,40f00 <HDMI_TX_Init+0x48>
    	printf("Failed to find SIL9136-3 HDMI-TX Chip.\n");
   40ef0:	01000174 	movhi	r4,5
   40ef4:	2115e104 	addi	r4,r4,22404
   40ef8:	0043ffc0 	call	43ffc <puts>
        bSuccess = false;
   40efc:	e03fff05 	stb	zero,-4(fp)
        //return 0;
    }

    //HDMITX_InitInstance(&InitInstanceData) ;
    InitSII9136() ;
   40f00:	0040d1c0 	call	40d1c <InitSII9136>


    return bSuccess;
   40f04:	e0bfff03 	ldbu	r2,-4(fp)
}
   40f08:	e037883a 	mov	sp,fp
   40f0c:	dfc00117 	ldw	ra,4(sp)
   40f10:	df000017 	ldw	fp,0(sp)
   40f14:	dec00204 	addi	sp,sp,8
   40f18:	f800283a 	ret

00040f1c <IsPortDetected>:
	PORT_A = 0,
	PORT_B,
	PORT_NUM
}PORD_ID;

bool IsPortDetected(PORD_ID PortID){
   40f1c:	defffb04 	addi	sp,sp,-20
   40f20:	dfc00415 	stw	ra,16(sp)
   40f24:	df000315 	stw	fp,12(sp)
   40f28:	df000304 	addi	fp,sp,12
   40f2c:	e13fff15 	stw	r4,-4(fp)
	bool bDetected = false;
   40f30:	e03ffe05 	stb	zero,-8(fp)
	alt_u8 value8;

	if (PortID == PORT_B){ // CABLE_DET_B_RAW, IO, Address 0x6A[7] (Read Only)
   40f34:	e0bfff17 	ldw	r2,-4(fp)
   40f38:	10800058 	cmpnei	r2,r2,1
   40f3c:	1000111e 	bne	r2,zero,40f84 <IsPortDetected+0x68>
    	I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x98, 0x6a, &value8);
   40f40:	e0bffe44 	addi	r2,fp,-7
   40f44:	d8800015 	stw	r2,0(sp)
   40f48:	01c01a84 	movi	r7,106
   40f4c:	01bfe604 	movi	r6,-104
   40f50:	01400234 	movhi	r5,8
   40f54:	29442004 	addi	r5,r5,4224
   40f58:	01000234 	movhi	r4,8
   40f5c:	21042404 	addi	r4,r4,4240
   40f60:	0041e4c0 	call	41e4c <I2C_Read>
    	if(value8&0x80)
   40f64:	e0bffe43 	ldbu	r2,-7(fp)
   40f68:	10803fcc 	andi	r2,r2,255
   40f6c:	1080201c 	xori	r2,r2,128
   40f70:	10bfe004 	addi	r2,r2,-128
   40f74:	1000140e 	bge	r2,zero,40fc8 <IsPortDetected+0xac>
    		bDetected = true;
   40f78:	00800044 	movi	r2,1
   40f7c:	e0bffe05 	stb	r2,-8(fp)
   40f80:	00001106 	br	40fc8 <IsPortDetected+0xac>
    }else if (PortID == PORT_A){ //CABLE_DET_A_RAW, IO, Address 0x6F[0] (Read Only)
   40f84:	e0bfff17 	ldw	r2,-4(fp)
   40f88:	10000f1e 	bne	r2,zero,40fc8 <IsPortDetected+0xac>
    	I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x98, 0x6f, &value8);
   40f8c:	e0bffe44 	addi	r2,fp,-7
   40f90:	d8800015 	stw	r2,0(sp)
   40f94:	01c01bc4 	movi	r7,111
   40f98:	01bfe604 	movi	r6,-104
   40f9c:	01400234 	movhi	r5,8
   40fa0:	29442004 	addi	r5,r5,4224
   40fa4:	01000234 	movhi	r4,8
   40fa8:	21042404 	addi	r4,r4,4240
   40fac:	0041e4c0 	call	41e4c <I2C_Read>
    	if(value8&0x01)
   40fb0:	e0bffe43 	ldbu	r2,-7(fp)
   40fb4:	10803fcc 	andi	r2,r2,255
   40fb8:	1080004c 	andi	r2,r2,1
   40fbc:	10000226 	beq	r2,zero,40fc8 <IsPortDetected+0xac>
    		bDetected = true;
   40fc0:	00800044 	movi	r2,1
   40fc4:	e0bffe05 	stb	r2,-8(fp)
	}

	return bDetected;
   40fc8:	e0bffe03 	ldbu	r2,-8(fp)
}
   40fcc:	e037883a 	mov	sp,fp
   40fd0:	dfc00117 	ldw	ra,4(sp)
   40fd4:	df000017 	ldw	fp,0(sp)
   40fd8:	dec00204 	addi	sp,sp,8
   40fdc:	f800283a 	ret

00040fe0 <IsTmdsClockDetected>:

bool IsTmdsClockDetected(PORD_ID PortID){
   40fe0:	defffb04 	addi	sp,sp,-20
   40fe4:	dfc00415 	stw	ra,16(sp)
   40fe8:	df000315 	stw	fp,12(sp)
   40fec:	df000304 	addi	fp,sp,12
   40ff0:	e13fff15 	stw	r4,-4(fp)
	bool bDetected = false;
   40ff4:	e03ffe05 	stb	zero,-8(fp)
	alt_u8 value8;
	alt_u8 Mask=0;
   40ff8:	e03ffe45 	stb	zero,-7(fp)

	if (PortID == PORT_A) // TMDS_CLK_A_RAW, IO, Address 0x6A[4] (Read Only)
   40ffc:	e0bfff17 	ldw	r2,-4(fp)
   41000:	1000031e 	bne	r2,zero,41010 <IsTmdsClockDetected+0x30>
		Mask = 0x10;
   41004:	00800404 	movi	r2,16
   41008:	e0bffe45 	stb	r2,-7(fp)
   4100c:	00000506 	br	41024 <IsTmdsClockDetected+0x44>
    else if (PortID == PORT_B) //TMDS_CLK_B_RAW, IO, Address 0x6A[3] (Read Only)
   41010:	e0bfff17 	ldw	r2,-4(fp)
   41014:	10800058 	cmpnei	r2,r2,1
   41018:	1000021e 	bne	r2,zero,41024 <IsTmdsClockDetected+0x44>
		Mask = 0x08;
   4101c:	00800204 	movi	r2,8
   41020:	e0bffe45 	stb	r2,-7(fp)

   	I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x98, 0x6a, &value8);
   41024:	e0bffe84 	addi	r2,fp,-6
   41028:	d8800015 	stw	r2,0(sp)
   4102c:	01c01a84 	movi	r7,106
   41030:	01bfe604 	movi	r6,-104
   41034:	01400234 	movhi	r5,8
   41038:	29442004 	addi	r5,r5,4224
   4103c:	01000234 	movhi	r4,8
   41040:	21042404 	addi	r4,r4,4240
   41044:	0041e4c0 	call	41e4c <I2C_Read>
    	if(Mask&value8)
   41048:	e0bffe83 	ldbu	r2,-6(fp)
   4104c:	e0fffe43 	ldbu	r3,-7(fp)
   41050:	1884703a 	and	r2,r3,r2
   41054:	10803fcc 	andi	r2,r2,255
   41058:	10000226 	beq	r2,zero,41064 <IsTmdsClockDetected+0x84>
    		bDetected = true;
   4105c:	00800044 	movi	r2,1
   41060:	e0bffe05 	stb	r2,-8(fp)

	return bDetected;
   41064:	e0bffe03 	ldbu	r2,-8(fp)
}
   41068:	e037883a 	mov	sp,fp
   4106c:	dfc00117 	ldw	ra,4(sp)
   41070:	df000017 	ldw	fp,0(sp)
   41074:	dec00204 	addi	sp,sp,8
   41078:	f800283a 	ret

0004107c <Meaurement>:
• BG_FIELD_HEIGHT[12:0]
• BG_HDMI_INTERLACED
*/


void Meaurement(PORD_ID PortID){
   4107c:	defff604 	addi	sp,sp,-40
   41080:	dfc00915 	stw	ra,36(sp)
   41084:	df000815 	stw	fp,32(sp)
   41088:	dc400715 	stw	r17,28(sp)
   4108c:	dc000615 	stw	r16,24(sp)
   41090:	df000804 	addi	fp,sp,32
   41094:	e13ffd15 	stw	r4,-12(fp)
	alt_u8 value8, value8_L, value8_H;
	alt_u16 value16;
	float fValue;
	int i;

	printf("===== Port%d Measurement =====\r\n", PortID);
   41098:	e17ffd17 	ldw	r5,-12(fp)
   4109c:	01000174 	movhi	r4,5
   410a0:	2115eb04 	addi	r4,r4,22444
   410a4:	0043f000 	call	43f00 <printf>


	// set as background port for measurement
	// BG_MEAS_PORT_SEL[2:0], Addr 68 (HDMI), Address 0x00[5:3]
	printf("Set Port%d as background port for measurement\r\n", PortID);
   410a8:	e17ffd17 	ldw	r5,-12(fp)
   410ac:	01000174 	movhi	r4,5
   410b0:	2115f404 	addi	r4,r4,22480
   410b4:	0043f000 	call	43f00 <printf>
	I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68, 0x00, &value8);
   410b8:	e0bffc04 	addi	r2,fp,-16
   410bc:	d8800015 	stw	r2,0(sp)
   410c0:	000f883a 	mov	r7,zero
   410c4:	01801a04 	movi	r6,104
   410c8:	01400234 	movhi	r5,8
   410cc:	29442004 	addi	r5,r5,4224
   410d0:	01000234 	movhi	r4,8
   410d4:	21042404 	addi	r4,r4,4240
   410d8:	0041e4c0 	call	41e4c <I2C_Read>
	value8 &= 0xC7;
   410dc:	e0fffc03 	ldbu	r3,-16(fp)
   410e0:	00bff1c4 	movi	r2,-57
   410e4:	1884703a 	and	r2,r3,r2
   410e8:	e0bffc05 	stb	r2,-16(fp)
	if (PortID == PORT_B)
   410ec:	e0bffd17 	ldw	r2,-12(fp)
   410f0:	10800058 	cmpnei	r2,r2,1
   410f4:	1000031e 	bne	r2,zero,41104 <Meaurement+0x88>
		value8 |= 0x08;
   410f8:	e0bffc03 	ldbu	r2,-16(fp)
   410fc:	10800214 	ori	r2,r2,8
   41100:	e0bffc05 	stb	r2,-16(fp)
	I2C_Write(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68, 0x00, value8);
   41104:	e0bffc03 	ldbu	r2,-16(fp)
   41108:	10803fcc 	andi	r2,r2,255
   4110c:	d8800015 	stw	r2,0(sp)
   41110:	000f883a 	mov	r7,zero
   41114:	01801a04 	movi	r6,104
   41118:	01400234 	movhi	r5,8
   4111c:	29442004 	addi	r5,r5,4224
   41120:	01000234 	movhi	r4,8
   41124:	21042404 	addi	r4,r4,4240
   41128:	0041d380 	call	41d38 <I2C_Write>

	usleep(200*1000); //!!!!!!!!!!!! it is necessary to add delay here
   4112c:	010000f4 	movhi	r4,3
   41130:	21035004 	addi	r4,r4,3392
   41134:	00536c00 	call	536c0 <usleep>


	//BG_MEAS_REQ, Addr 68 (HDMI), Address 0x5A[5] (Self-Clearing)
	I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68, 0x5A, &value8);
   41138:	e0bffc04 	addi	r2,fp,-16
   4113c:	d8800015 	stw	r2,0(sp)
   41140:	01c01684 	movi	r7,90
   41144:	01801a04 	movi	r6,104
   41148:	01400234 	movhi	r5,8
   4114c:	29442004 	addi	r5,r5,4224
   41150:	01000234 	movhi	r4,8
   41154:	21042404 	addi	r4,r4,4240
   41158:	0041e4c0 	call	41e4c <I2C_Read>
	value8 |= 0x20; //Requests an update of the selected background port synchronization parameter measurements
   4115c:	e0bffc03 	ldbu	r2,-16(fp)
   41160:	10800814 	ori	r2,r2,32
   41164:	e0bffc05 	stb	r2,-16(fp)
	I2C_Write(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68, 0x5A, value8);
   41168:	e0bffc03 	ldbu	r2,-16(fp)
   4116c:	10803fcc 	andi	r2,r2,255
   41170:	d8800015 	stw	r2,0(sp)
   41174:	01c01684 	movi	r7,90
   41178:	01801a04 	movi	r6,104
   4117c:	01400234 	movhi	r5,8
   41180:	29442004 	addi	r5,r5,4224
   41184:	01000234 	movhi	r4,8
   41188:	21042404 	addi	r4,r4,4240
   4118c:	0041d380 	call	41d38 <I2C_Write>
	printf("BG_MEAS_REQ<--%0xh\r\n", value8);
   41190:	e0bffc03 	ldbu	r2,-16(fp)
   41194:	10803fcc 	andi	r2,r2,255
   41198:	100b883a 	mov	r5,r2
   4119c:	01000174 	movhi	r4,5
   411a0:	21160004 	addi	r4,r4,22528
   411a4:	0043f000 	call	43f00 <printf>
	

	//check measure done by monitor BG_MEAS_DONE_RAW, IO, Address 0x8D[1] (Read Only)
	i=0;
   411a8:	e03ffa15 	stw	zero,-24(fp)
	while(i++ < 100){
   411ac:	00000f06 	br	411ec <Meaurement+0x170>
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x98, 0x8D, &value8); // Note: it is IO Port
   411b0:	e0bffc04 	addi	r2,fp,-16
   411b4:	d8800015 	stw	r2,0(sp)
   411b8:	01c02344 	movi	r7,141
   411bc:	01bfe604 	movi	r6,-104
   411c0:	01400234 	movhi	r5,8
   411c4:	29442004 	addi	r5,r5,4224
   411c8:	01000234 	movhi	r4,8
   411cc:	21042404 	addi	r4,r4,4240
   411d0:	0041e4c0 	call	41e4c <I2C_Read>
		//printf("%d...BG_MEAS_DONE_RAW(0x8D[1])=%xh\r\n", i, value8);
		if (value8 & 0x02)
   411d4:	e0bffc03 	ldbu	r2,-16(fp)
   411d8:	10803fcc 	andi	r2,r2,255
   411dc:	1080008c 	andi	r2,r2,2
   411e0:	1000081e 	bne	r2,zero,41204 <Meaurement+0x188>
			break;
		else
			usleep(100);
   411e4:	01001904 	movi	r4,100
   411e8:	00536c00 	call	536c0 <usleep>
	printf("BG_MEAS_REQ<--%0xh\r\n", value8);
	

	//check measure done by monitor BG_MEAS_DONE_RAW, IO, Address 0x8D[1] (Read Only)
	i=0;
	while(i++ < 100){
   411ec:	e0bffa17 	ldw	r2,-24(fp)
   411f0:	10c00044 	addi	r3,r2,1
   411f4:	e0fffa15 	stw	r3,-24(fp)
   411f8:	10801910 	cmplti	r2,r2,100
   411fc:	103fec1e 	bne	r2,zero,411b0 <__alt_data_end+0xfffc29b0>
   41200:	00000106 	br	41208 <Meaurement+0x18c>
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x98, 0x8D, &value8); // Note: it is IO Port
		//printf("%d...BG_MEAS_DONE_RAW(0x8D[1])=%xh\r\n", i, value8);
		if (value8 & 0x02)
			break;
   41204:	0001883a 	nop
		else
			usleep(100);
	}
	if ((value8 & 0x02) != 0x02){
   41208:	e0bffc03 	ldbu	r2,-16(fp)
   4120c:	10803fcc 	andi	r2,r2,255
   41210:	1080008c 	andi	r2,r2,2
   41214:	1000071e 	bne	r2,zero,41234 <Meaurement+0x1b8>
		printf("measure failed0....BG_MEAS_DONE_RAW(0x8D[1])=%xh\r\n", value8);
   41218:	e0bffc03 	ldbu	r2,-16(fp)
   4121c:	10803fcc 	andi	r2,r2,255
   41220:	100b883a 	mov	r5,r2
   41224:	01000174 	movhi	r4,5
   41228:	21160604 	addi	r4,r4,22552
   4122c:	0043f000 	call	43f00 <printf>
		return;
   41230:	00014506 	br	41748 <Meaurement+0x6cc>
	}else{
		printf("BG_MEAS_DONE_RAW=%xh(wait %d)\r\n", value8, i);
   41234:	e0bffc03 	ldbu	r2,-16(fp)
   41238:	10803fcc 	andi	r2,r2,255
   4123c:	e1bffa17 	ldw	r6,-24(fp)
   41240:	100b883a 	mov	r5,r2
   41244:	01000174 	movhi	r4,5
   41248:	21161304 	addi	r4,r4,22604
   4124c:	0043f000 	call	43f00 <printf>
	}

	//BG_PARAM_LOCK, Addr 68 (HDMI), Address 0xEA[1] (Read Only)
	//BG_PARAM_LOCK (wait go high)
	i=0;
   41250:	e03ffa15 	stw	zero,-24(fp)
	while(i++ < 100){
   41254:	00000f06 	br	41294 <Meaurement+0x218>
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68, 0xEA, &value8);
   41258:	e0bffc04 	addi	r2,fp,-16
   4125c:	d8800015 	stw	r2,0(sp)
   41260:	01c03a84 	movi	r7,234
   41264:	01801a04 	movi	r6,104
   41268:	01400234 	movhi	r5,8
   4126c:	29442004 	addi	r5,r5,4224
   41270:	01000234 	movhi	r4,8
   41274:	21042404 	addi	r4,r4,4240
   41278:	0041e4c0 	call	41e4c <I2C_Read>
		//printf("%d...BG_PARAM_LOCK(0xEA[1])=%xh\r\n", i, value8);
		if (value8 & 0x02)
   4127c:	e0bffc03 	ldbu	r2,-16(fp)
   41280:	10803fcc 	andi	r2,r2,255
   41284:	1080008c 	andi	r2,r2,2
   41288:	1000081e 	bne	r2,zero,412ac <Meaurement+0x230>
			break;
		else
			usleep(100);
   4128c:	01001904 	movi	r4,100
   41290:	00536c00 	call	536c0 <usleep>
	}

	//BG_PARAM_LOCK, Addr 68 (HDMI), Address 0xEA[1] (Read Only)
	//BG_PARAM_LOCK (wait go high)
	i=0;
	while(i++ < 100){
   41294:	e0bffa17 	ldw	r2,-24(fp)
   41298:	10c00044 	addi	r3,r2,1
   4129c:	e0fffa15 	stw	r3,-24(fp)
   412a0:	10801910 	cmplti	r2,r2,100
   412a4:	103fec1e 	bne	r2,zero,41258 <__alt_data_end+0xfffc2a58>
   412a8:	00000106 	br	412b0 <Meaurement+0x234>
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68, 0xEA, &value8);
		//printf("%d...BG_PARAM_LOCK(0xEA[1])=%xh\r\n", i, value8);
		if (value8 & 0x02)
			break;
   412ac:	0001883a 	nop
		else
			usleep(100);

	}
	if ((value8 & 0x02) != 0x02){
   412b0:	e0bffc03 	ldbu	r2,-16(fp)
   412b4:	10803fcc 	andi	r2,r2,255
   412b8:	1080008c 	andi	r2,r2,2
   412bc:	1000071e 	bne	r2,zero,412dc <Meaurement+0x260>
		printf("measure failed1....BG_PARAM_LOCK(0xEA[1])=%xh\r\n", value8);
   412c0:	e0bffc03 	ldbu	r2,-16(fp)
   412c4:	10803fcc 	andi	r2,r2,255
   412c8:	100b883a 	mov	r5,r2
   412cc:	01000174 	movhi	r4,5
   412d0:	21161b04 	addi	r4,r4,22636
   412d4:	0043f000 	call	43f00 <printf>
		return;
   412d8:	00011b06 	br	41748 <Meaurement+0x6cc>
	}else{
		printf("BG_PARAM_LOCK=%xh(wait %d)\r\n", value8, i);
   412dc:	e0bffc03 	ldbu	r2,-16(fp)
   412e0:	10803fcc 	andi	r2,r2,255
   412e4:	e1bffa17 	ldw	r6,-24(fp)
   412e8:	100b883a 	mov	r5,r2
   412ec:	01000174 	movhi	r4,5
   412f0:	21162704 	addi	r4,r4,22684
   412f4:	0043f000 	call	43f00 <printf>
	}


		// BG_TMDSFREQ[8:0]
		// BG_TMDSFREQ_FRAC[6:0],
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68, 0xE0, &value8_L);
   412f8:	e0bffc44 	addi	r2,fp,-15
   412fc:	d8800015 	stw	r2,0(sp)
   41300:	01c03804 	movi	r7,224
   41304:	01801a04 	movi	r6,104
   41308:	01400234 	movhi	r5,8
   4130c:	29442004 	addi	r5,r5,4224
   41310:	01000234 	movhi	r4,8
   41314:	21042404 	addi	r4,r4,4240
   41318:	0041e4c0 	call	41e4c <I2C_Read>
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68, 0xE1, &value8_H);
   4131c:	e0bffc84 	addi	r2,fp,-14
   41320:	d8800015 	stw	r2,0(sp)
   41324:	01c03844 	movi	r7,225
   41328:	01801a04 	movi	r6,104
   4132c:	01400234 	movhi	r5,8
   41330:	29442004 	addi	r5,r5,4224
   41334:	01000234 	movhi	r4,8
   41338:	21042404 	addi	r4,r4,4240
   4133c:	0041e4c0 	call	41e4c <I2C_Read>
		//printf("TMDS frequency L=%xh, H=%xh\r\n", value8_L, value8_H);
		value16 = value8_L;
   41340:	e0bffc43 	ldbu	r2,-15(fp)
   41344:	10803fcc 	andi	r2,r2,255
   41348:	e0bff90d 	sth	r2,-28(fp)
		if (value8_H & 0x80)
   4134c:	e0bffc83 	ldbu	r2,-14(fp)
   41350:	10803fcc 	andi	r2,r2,255
   41354:	1080201c 	xori	r2,r2,128
   41358:	10bfe004 	addi	r2,r2,-128
   4135c:	1000030e 	bge	r2,zero,4136c <Meaurement+0x2f0>
			value16 += 256;
   41360:	e0bff90b 	ldhu	r2,-28(fp)
   41364:	10804004 	addi	r2,r2,256
   41368:	e0bff90d 	sth	r2,-28(fp)
		fValue = (float)value16 + (float)(value8_H & 0x7F)/128.0;
   4136c:	e0bff90b 	ldhu	r2,-28(fp)
   41370:	1009883a 	mov	r4,r2
   41374:	004277c0 	call	4277c <__floatunsisf>
   41378:	1007883a 	mov	r3,r2
   4137c:	1809883a 	mov	r4,r3
   41380:	0043a000 	call	43a00 <__extendsfdf2>
   41384:	1021883a 	mov	r16,r2
   41388:	1823883a 	mov	r17,r3
   4138c:	e0bffc83 	ldbu	r2,-14(fp)
   41390:	10803fcc 	andi	r2,r2,255
   41394:	10801fcc 	andi	r2,r2,127
   41398:	1009883a 	mov	r4,r2
   4139c:	00426580 	call	42658 <__floatsisf>
   413a0:	1007883a 	mov	r3,r2
   413a4:	1809883a 	mov	r4,r3
   413a8:	0043a000 	call	43a00 <__extendsfdf2>
   413ac:	1011883a 	mov	r8,r2
   413b0:	1813883a 	mov	r9,r3
   413b4:	000d883a 	mov	r6,zero
   413b8:	01d01834 	movhi	r7,16480
   413bc:	4009883a 	mov	r4,r8
   413c0:	480b883a 	mov	r5,r9
   413c4:	00431180 	call	43118 <__divdf3>
   413c8:	1009883a 	mov	r4,r2
   413cc:	180b883a 	mov	r5,r3
   413d0:	2005883a 	mov	r2,r4
   413d4:	2807883a 	mov	r3,r5
   413d8:	100d883a 	mov	r6,r2
   413dc:	180f883a 	mov	r7,r3
   413e0:	8009883a 	mov	r4,r16
   413e4:	880b883a 	mov	r5,r17
   413e8:	004286c0 	call	4286c <__adddf3>
   413ec:	1009883a 	mov	r4,r2
   413f0:	180b883a 	mov	r5,r3
   413f4:	2005883a 	mov	r2,r4
   413f8:	2807883a 	mov	r3,r5
   413fc:	1009883a 	mov	r4,r2
   41400:	180b883a 	mov	r5,r3
   41404:	0043b100 	call	43b10 <__truncdfsf2>
   41408:	1007883a 	mov	r3,r2
   4140c:	e0fffb15 	stw	r3,-20(fp)
		printf("TMDS frequency: %f Mhz\r\n", fValue);
   41410:	e13ffb17 	ldw	r4,-20(fp)
   41414:	0043a000 	call	43a00 <__extendsfdf2>
   41418:	100d883a 	mov	r6,r2
   4141c:	180f883a 	mov	r7,r3
   41420:	300b883a 	mov	r5,r6
   41424:	380d883a 	mov	r6,r7
   41428:	01000174 	movhi	r4,5
   4142c:	21162f04 	addi	r4,r4,22716
   41430:	0043f000 	call	43f00 <printf>

		//BG_DEEP_COLOR_MODE[1:0]
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68, 0xEA, &value8);
   41434:	e0bffc04 	addi	r2,fp,-16
   41438:	d8800015 	stw	r2,0(sp)
   4143c:	01c03a84 	movi	r7,234
   41440:	01801a04 	movi	r6,104
   41444:	01400234 	movhi	r5,8
   41448:	29442004 	addi	r5,r5,4224
   4144c:	01000234 	movhi	r4,8
   41450:	21042404 	addi	r4,r4,4240
   41454:	0041e4c0 	call	41e4c <I2C_Read>
		printf("BG_DEEP_COLOR_MODE ");
   41458:	01000174 	movhi	r4,5
   4145c:	21163604 	addi	r4,r4,22744
   41460:	0043f000 	call	43f00 <printf>
		switch((value8 >> 2) & 0x03){
   41464:	e0bffc03 	ldbu	r2,-16(fp)
   41468:	10803fcc 	andi	r2,r2,255
   4146c:	1004d0ba 	srli	r2,r2,2
   41470:	10803fcc 	andi	r2,r2,255
   41474:	108000cc 	andi	r2,r2,3
   41478:	10c00060 	cmpeqi	r3,r2,1
   4147c:	18000d1e 	bne	r3,zero,414b4 <Meaurement+0x438>
   41480:	10c00088 	cmpgei	r3,r2,2
   41484:	1800021e 	bne	r3,zero,41490 <Meaurement+0x414>
   41488:	10000626 	beq	r2,zero,414a4 <Meaurement+0x428>
   4148c:	00001506 	br	414e4 <Meaurement+0x468>
   41490:	10c000a0 	cmpeqi	r3,r2,2
   41494:	18000b1e 	bne	r3,zero,414c4 <Meaurement+0x448>
   41498:	108000e0 	cmpeqi	r2,r2,3
   4149c:	10000d1e 	bne	r2,zero,414d4 <Meaurement+0x458>
   414a0:	00001006 	br	414e4 <Meaurement+0x468>
			case 0: printf("8-bit color\r\n"); break;
   414a4:	01000174 	movhi	r4,5
   414a8:	21163b04 	addi	r4,r4,22764
   414ac:	0043ffc0 	call	43ffc <puts>
   414b0:	00000c06 	br	414e4 <Meaurement+0x468>
			case 1: printf("10-bit color\r\n"); break;
   414b4:	01000174 	movhi	r4,5
   414b8:	21163f04 	addi	r4,r4,22780
   414bc:	0043ffc0 	call	43ffc <puts>
   414c0:	00000806 	br	414e4 <Meaurement+0x468>
			case 2: printf("12-bit color\r\n"); break;
   414c4:	01000174 	movhi	r4,5
   414c8:	21164304 	addi	r4,r4,22796
   414cc:	0043ffc0 	call	43ffc <puts>
   414d0:	00000406 	br	414e4 <Meaurement+0x468>
			case 3: printf("16-bit color\r\n"); break;
   414d4:	01000174 	movhi	r4,5
   414d8:	21164704 	addi	r4,r4,22812
   414dc:	0043ffc0 	call	43ffc <puts>
   414e0:	0001883a 	nop

		}

		//BG_TOTAL_LINE_WIDTH[13:0], Addr 68 (HDMI), Address 0xE4[5:0]; Address 0xE5[7:0] (Read Only)
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68, 0xE4, &value8_H);
   414e4:	e0bffc84 	addi	r2,fp,-14
   414e8:	d8800015 	stw	r2,0(sp)
   414ec:	01c03904 	movi	r7,228
   414f0:	01801a04 	movi	r6,104
   414f4:	01400234 	movhi	r5,8
   414f8:	29442004 	addi	r5,r5,4224
   414fc:	01000234 	movhi	r4,8
   41500:	21042404 	addi	r4,r4,4240
   41504:	0041e4c0 	call	41e4c <I2C_Read>
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68, 0xE5, &value8_L);
   41508:	e0bffc44 	addi	r2,fp,-15
   4150c:	d8800015 	stw	r2,0(sp)
   41510:	01c03944 	movi	r7,229
   41514:	01801a04 	movi	r6,104
   41518:	01400234 	movhi	r5,8
   4151c:	29442004 	addi	r5,r5,4224
   41520:	01000234 	movhi	r4,8
   41524:	21042404 	addi	r4,r4,4240
   41528:	0041e4c0 	call	41e4c <I2C_Read>
		value16 = ((value8_H & 0x1F) << 8) | value8_L;
   4152c:	e0bffc83 	ldbu	r2,-14(fp)
   41530:	10803fcc 	andi	r2,r2,255
   41534:	108007cc 	andi	r2,r2,31
   41538:	1004923a 	slli	r2,r2,8
   4153c:	1007883a 	mov	r3,r2
   41540:	e0bffc43 	ldbu	r2,-15(fp)
   41544:	10803fcc 	andi	r2,r2,255
   41548:	1884b03a 	or	r2,r3,r2
   4154c:	e0bff90d 	sth	r2,-28(fp)
		printf("BG_TOTAL_LINE_WIDTH %d\r\n", value16);
   41550:	e0bff90b 	ldhu	r2,-28(fp)
   41554:	100b883a 	mov	r5,r2
   41558:	01000174 	movhi	r4,5
   4155c:	21164b04 	addi	r4,r4,22828
   41560:	0043f000 	call	43f00 <printf>

		//BG_LINE_WIDTH[12:0], Addr 68 (HDMI), Address 0xE2[4:0]; Address 0xE3[7:0] (Read Only)
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68, 0xE2, &value8_H);
   41564:	e0bffc84 	addi	r2,fp,-14
   41568:	d8800015 	stw	r2,0(sp)
   4156c:	01c03884 	movi	r7,226
   41570:	01801a04 	movi	r6,104
   41574:	01400234 	movhi	r5,8
   41578:	29442004 	addi	r5,r5,4224
   4157c:	01000234 	movhi	r4,8
   41580:	21042404 	addi	r4,r4,4240
   41584:	0041e4c0 	call	41e4c <I2C_Read>
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68, 0xE3, &value8_L);
   41588:	e0bffc44 	addi	r2,fp,-15
   4158c:	d8800015 	stw	r2,0(sp)
   41590:	01c038c4 	movi	r7,227
   41594:	01801a04 	movi	r6,104
   41598:	01400234 	movhi	r5,8
   4159c:	29442004 	addi	r5,r5,4224
   415a0:	01000234 	movhi	r4,8
   415a4:	21042404 	addi	r4,r4,4240
   415a8:	0041e4c0 	call	41e4c <I2C_Read>
		value16 = ((value8_H & 0x1F) << 8) | value8_L;
   415ac:	e0bffc83 	ldbu	r2,-14(fp)
   415b0:	10803fcc 	andi	r2,r2,255
   415b4:	108007cc 	andi	r2,r2,31
   415b8:	1004923a 	slli	r2,r2,8
   415bc:	1007883a 	mov	r3,r2
   415c0:	e0bffc43 	ldbu	r2,-15(fp)
   415c4:	10803fcc 	andi	r2,r2,255
   415c8:	1884b03a 	or	r2,r3,r2
   415cc:	e0bff90d 	sth	r2,-28(fp)
		printf("BG_LINE_WIDTH %d\r\n", value16);
   415d0:	e0bff90b 	ldhu	r2,-28(fp)
   415d4:	100b883a 	mov	r5,r2
   415d8:	01000174 	movhi	r4,5
   415dc:	21165204 	addi	r4,r4,22856
   415e0:	0043f000 	call	43f00 <printf>

		//BG_TOTAL_FIELD_HEIGHT[12:0], Addr 68 (HDMI), Address 0xE8[4:0]; Address 0xE9[7:0] (Read Only)
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68, 0xE8, &value8_H);
   415e4:	e0bffc84 	addi	r2,fp,-14
   415e8:	d8800015 	stw	r2,0(sp)
   415ec:	01c03a04 	movi	r7,232
   415f0:	01801a04 	movi	r6,104
   415f4:	01400234 	movhi	r5,8
   415f8:	29442004 	addi	r5,r5,4224
   415fc:	01000234 	movhi	r4,8
   41600:	21042404 	addi	r4,r4,4240
   41604:	0041e4c0 	call	41e4c <I2C_Read>
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68, 0xE9, &value8_L);
   41608:	e0bffc44 	addi	r2,fp,-15
   4160c:	d8800015 	stw	r2,0(sp)
   41610:	01c03a44 	movi	r7,233
   41614:	01801a04 	movi	r6,104
   41618:	01400234 	movhi	r5,8
   4161c:	29442004 	addi	r5,r5,4224
   41620:	01000234 	movhi	r4,8
   41624:	21042404 	addi	r4,r4,4240
   41628:	0041e4c0 	call	41e4c <I2C_Read>
		value16 = ((value8_H & 0x1F) << 8) | value8_L;
   4162c:	e0bffc83 	ldbu	r2,-14(fp)
   41630:	10803fcc 	andi	r2,r2,255
   41634:	108007cc 	andi	r2,r2,31
   41638:	1004923a 	slli	r2,r2,8
   4163c:	1007883a 	mov	r3,r2
   41640:	e0bffc43 	ldbu	r2,-15(fp)
   41644:	10803fcc 	andi	r2,r2,255
   41648:	1884b03a 	or	r2,r3,r2
   4164c:	e0bff90d 	sth	r2,-28(fp)
		printf("BG_TOTAL_FIELD_HEIGHT %d\r\n", value16);
   41650:	e0bff90b 	ldhu	r2,-28(fp)
   41654:	100b883a 	mov	r5,r2
   41658:	01000174 	movhi	r4,5
   4165c:	21165704 	addi	r4,r4,22876
   41660:	0043f000 	call	43f00 <printf>


		//BG_FIELD_HEIGHT[12:0], Addr 68 (HDMI), Address 0xE6[4:0]; Address 0xE7[7:0] (Read Only)
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68, 0xE6, &value8_H);
   41664:	e0bffc84 	addi	r2,fp,-14
   41668:	d8800015 	stw	r2,0(sp)
   4166c:	01c03984 	movi	r7,230
   41670:	01801a04 	movi	r6,104
   41674:	01400234 	movhi	r5,8
   41678:	29442004 	addi	r5,r5,4224
   4167c:	01000234 	movhi	r4,8
   41680:	21042404 	addi	r4,r4,4240
   41684:	0041e4c0 	call	41e4c <I2C_Read>
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68, 0xE7, &value8_L);
   41688:	e0bffc44 	addi	r2,fp,-15
   4168c:	d8800015 	stw	r2,0(sp)
   41690:	01c039c4 	movi	r7,231
   41694:	01801a04 	movi	r6,104
   41698:	01400234 	movhi	r5,8
   4169c:	29442004 	addi	r5,r5,4224
   416a0:	01000234 	movhi	r4,8
   416a4:	21042404 	addi	r4,r4,4240
   416a8:	0041e4c0 	call	41e4c <I2C_Read>
		value16 = ((value8_H & 0x1F) << 8) | value8_L;
   416ac:	e0bffc83 	ldbu	r2,-14(fp)
   416b0:	10803fcc 	andi	r2,r2,255
   416b4:	108007cc 	andi	r2,r2,31
   416b8:	1004923a 	slli	r2,r2,8
   416bc:	1007883a 	mov	r3,r2
   416c0:	e0bffc43 	ldbu	r2,-15(fp)
   416c4:	10803fcc 	andi	r2,r2,255
   416c8:	1884b03a 	or	r2,r3,r2
   416cc:	e0bff90d 	sth	r2,-28(fp)
		printf("BG_FIELD_HEIGHT %d\r\n", value16);
   416d0:	e0bff90b 	ldhu	r2,-28(fp)
   416d4:	100b883a 	mov	r5,r2
   416d8:	01000174 	movhi	r4,5
   416dc:	21165e04 	addi	r4,r4,22904
   416e0:	0043f000 	call	43f00 <printf>

		//BG_HDMI_INTERLACED, Addr 68 (HDMI), Address 0xEA[0] (Read Only)
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68, 0xEA, &value8);
   416e4:	e0bffc04 	addi	r2,fp,-16
   416e8:	d8800015 	stw	r2,0(sp)
   416ec:	01c03a84 	movi	r7,234
   416f0:	01801a04 	movi	r6,104
   416f4:	01400234 	movhi	r5,8
   416f8:	29442004 	addi	r5,r5,4224
   416fc:	01000234 	movhi	r4,8
   41700:	21042404 	addi	r4,r4,4240
   41704:	0041e4c0 	call	41e4c <I2C_Read>
		printf("BG_HDMI_INTERLACED %s\r\n", (value8 & 0x01)?"interlaced input":"progressive input");
   41708:	e0bffc03 	ldbu	r2,-16(fp)
   4170c:	10803fcc 	andi	r2,r2,255
   41710:	1080004c 	andi	r2,r2,1
   41714:	10000326 	beq	r2,zero,41724 <Meaurement+0x6a8>
   41718:	00800174 	movhi	r2,5
   4171c:	10966404 	addi	r2,r2,22928
   41720:	00000206 	br	4172c <Meaurement+0x6b0>
   41724:	00800174 	movhi	r2,5
   41728:	10966904 	addi	r2,r2,22948
   4172c:	100b883a 	mov	r5,r2
   41730:	01000174 	movhi	r4,5
   41734:	21166e04 	addi	r4,r4,22968
   41738:	0043f000 	call	43f00 <printf>

		printf("====\r\n");
   4173c:	01000174 	movhi	r4,5
   41740:	21167404 	addi	r4,r4,22992
   41744:	0043ffc0 	call	43ffc <puts>




}
   41748:	e6fffe04 	addi	sp,fp,-8
   4174c:	dfc00317 	ldw	ra,12(sp)
   41750:	df000217 	ldw	fp,8(sp)
   41754:	dc400117 	ldw	r17,4(sp)
   41758:	dc000017 	ldw	r16,0(sp)
   4175c:	dec00404 	addi	sp,sp,16
   41760:	f800283a 	ret

00041764 <WriteRxEDID>:


void WriteRxEDID(void){
   41764:	defffd04 	addi	sp,sp,-12
   41768:	dfc00215 	stw	ra,8(sp)
   4176c:	df000115 	stw	fp,4(sp)
   41770:	df000104 	addi	fp,sp,4
	bool bPass;
	 // RX0 EDID
	  bPass=HDMIRX_VerifyEeprom( RX0_EDID_I2C_SCL_BASE,RX0_EDID_I2C_SDA_BASE    );
   41774:	01400234 	movhi	r5,8
   41778:	29441404 	addi	r5,r5,4176
   4177c:	01000234 	movhi	r4,8
   41780:	21041804 	addi	r4,r4,4192
   41784:	00403540 	call	40354 <HDMIRX_VerifyEeprom>
   41788:	e0bfff05 	stb	r2,-4(fp)
	  if (!bPass){
   4178c:	e0bfff03 	ldbu	r2,-4(fp)
   41790:	1080005c 	xori	r2,r2,1
   41794:	10803fcc 	andi	r2,r2,255
   41798:	10001a26 	beq	r2,zero,41804 <WriteRxEDID+0xa0>
		  // need to write EDID
		  HDMIRX_WriteEeprom(  RX0_EDID_I2C_SCL_BASE,RX0_EDID_I2C_SDA_BASE    );
   4179c:	01400234 	movhi	r5,8
   417a0:	29441404 	addi	r5,r5,4176
   417a4:	01000234 	movhi	r4,8
   417a8:	21041804 	addi	r4,r4,4192
   417ac:	00402900 	call	40290 <HDMIRX_WriteEeprom>
		  printf("Write RX0 EEPROM EDID\r\n");
   417b0:	01000174 	movhi	r4,5
   417b4:	21167604 	addi	r4,r4,23000
   417b8:	0043ffc0 	call	43ffc <puts>
		  bPass=HDMIRX_VerifyEeprom( RX0_EDID_I2C_SCL_BASE,RX0_EDID_I2C_SDA_BASE    );
   417bc:	01400234 	movhi	r5,8
   417c0:	29441404 	addi	r5,r5,4176
   417c4:	01000234 	movhi	r4,8
   417c8:	21041804 	addi	r4,r4,4192
   417cc:	00403540 	call	40354 <HDMIRX_VerifyEeprom>
   417d0:	e0bfff05 	stb	r2,-4(fp)
		  printf("RX0 EEPROM EDID Verify %s \r\n", bPass?"OK":"NG");
   417d4:	e0bfff03 	ldbu	r2,-4(fp)
   417d8:	10000326 	beq	r2,zero,417e8 <WriteRxEDID+0x84>
   417dc:	00800174 	movhi	r2,5
   417e0:	10967c04 	addi	r2,r2,23024
   417e4:	00000206 	br	417f0 <WriteRxEDID+0x8c>
   417e8:	00800174 	movhi	r2,5
   417ec:	10967d04 	addi	r2,r2,23028
   417f0:	100b883a 	mov	r5,r2
   417f4:	01000174 	movhi	r4,5
   417f8:	21167e04 	addi	r4,r4,23032
   417fc:	0043f000 	call	43f00 <printf>
   41800:	00000306 	br	41810 <WriteRxEDID+0xac>
	  }else{
		  printf("RX0 EEPROM EDID ready\r\n");
   41804:	01000174 	movhi	r4,5
   41808:	21168604 	addi	r4,r4,23064
   4180c:	0043ffc0 	call	43ffc <puts>
	  }
	  // RX1 EDID
	  bPass=HDMIRX_VerifyEeprom( RX1_EDID_I2C_SCL_BASE,RX1_EDID_I2C_SDA_BASE    );
   41810:	01400234 	movhi	r5,8
   41814:	29440c04 	addi	r5,r5,4144
   41818:	01000234 	movhi	r4,8
   4181c:	21040804 	addi	r4,r4,4128
   41820:	00403540 	call	40354 <HDMIRX_VerifyEeprom>
   41824:	e0bfff05 	stb	r2,-4(fp)
	  if (!bPass){
   41828:	e0bfff03 	ldbu	r2,-4(fp)
   4182c:	1080005c 	xori	r2,r2,1
   41830:	10803fcc 	andi	r2,r2,255
   41834:	10001a26 	beq	r2,zero,418a0 <WriteRxEDID+0x13c>
		  // need to write EDID
		  HDMIRX_WriteEeprom(  RX1_EDID_I2C_SCL_BASE,RX1_EDID_I2C_SDA_BASE    );
   41838:	01400234 	movhi	r5,8
   4183c:	29440c04 	addi	r5,r5,4144
   41840:	01000234 	movhi	r4,8
   41844:	21040804 	addi	r4,r4,4128
   41848:	00402900 	call	40290 <HDMIRX_WriteEeprom>
		  printf("Write RX1 EEPROM EDID\r\n");
   4184c:	01000174 	movhi	r4,5
   41850:	21168c04 	addi	r4,r4,23088
   41854:	0043ffc0 	call	43ffc <puts>
		  bPass=HDMIRX_VerifyEeprom( RX1_EDID_I2C_SCL_BASE,RX1_EDID_I2C_SDA_BASE    );
   41858:	01400234 	movhi	r5,8
   4185c:	29440c04 	addi	r5,r5,4144
   41860:	01000234 	movhi	r4,8
   41864:	21040804 	addi	r4,r4,4128
   41868:	00403540 	call	40354 <HDMIRX_VerifyEeprom>
   4186c:	e0bfff05 	stb	r2,-4(fp)
		  printf("RX1 EEPROM EDID Verify %s \r\n", bPass?"OK":"NG");
   41870:	e0bfff03 	ldbu	r2,-4(fp)
   41874:	10000326 	beq	r2,zero,41884 <WriteRxEDID+0x120>
   41878:	00800174 	movhi	r2,5
   4187c:	10967c04 	addi	r2,r2,23024
   41880:	00000206 	br	4188c <WriteRxEDID+0x128>
   41884:	00800174 	movhi	r2,5
   41888:	10967d04 	addi	r2,r2,23028
   4188c:	100b883a 	mov	r5,r2
   41890:	01000174 	movhi	r4,5
   41894:	21169204 	addi	r4,r4,23112
   41898:	0043f000 	call	43f00 <printf>
	  }else{
		  printf("RX1 EEPROM EDID ready\r\n");
	  }
}
   4189c:	00000306 	br	418ac <WriteRxEDID+0x148>
		  HDMIRX_WriteEeprom(  RX1_EDID_I2C_SCL_BASE,RX1_EDID_I2C_SDA_BASE    );
		  printf("Write RX1 EEPROM EDID\r\n");
		  bPass=HDMIRX_VerifyEeprom( RX1_EDID_I2C_SCL_BASE,RX1_EDID_I2C_SDA_BASE    );
		  printf("RX1 EEPROM EDID Verify %s \r\n", bPass?"OK":"NG");
	  }else{
		  printf("RX1 EEPROM EDID ready\r\n");
   418a0:	01000174 	movhi	r4,5
   418a4:	21169a04 	addi	r4,r4,23144
   418a8:	0043ffc0 	call	43ffc <puts>
	  }
}
   418ac:	0001883a 	nop
   418b0:	e037883a 	mov	sp,fp
   418b4:	dfc00117 	ldw	ra,4(sp)
   418b8:	df000017 	ldw	fp,0(sp)
   418bc:	dec00204 	addi	sp,sp,8
   418c0:	f800283a 	ret

000418c4 <main>:

int main()
{
   418c4:	defff704 	addi	sp,sp,-36
   418c8:	dfc00815 	stw	ra,32(sp)
   418cc:	df000715 	stw	fp,28(sp)
   418d0:	df000704 	addi	fp,sp,28
	// bool bPass=true;
	 bool bCableDetected[2],bPreCabletDetected[2]={false,false};
   418d4:	e03ffd85 	stb	zero,-10(fp)
   418d8:	e03ffdc5 	stb	zero,-9(fp)
	 bool bClkDetected[2],bPreClkDetected[2]={false,false};
   418dc:	e03ffe85 	stb	zero,-6(fp)
   418e0:	e03ffec5 	stb	zero,-5(fp)
	 bool bStateChagned;
	 alt_u8 value,PrePortSelValue=0xFF,PortSelValue;
   418e4:	00bfffc4 	movi	r2,-1
   418e8:	e0bffa45 	stb	r2,-23(fp)
	 int i, port;

	// printf("FMC D Port for HDMI Daughter Card \r\n");
//#ifdef WRITE_EEPROM
	 WriteRxEDID();
   418ec:	00417640 	call	41764 <WriteRxEDID>
//#endif
		HDMI_TX_Init();
   418f0:	0040eb80 	call	40eb8 <HDMI_TX_Init>

		usleep(2000);
   418f4:	0101f404 	movi	r4,2000
   418f8:	00536c00 	call	536c0 <usleep>

	    IOWR(ADV7619_RST_BASE, 0, 1);
   418fc:	00c00044 	movi	r3,1
   41900:	00800234 	movhi	r2,8
   41904:	10841c04 	addi	r2,r2,4208
   41908:	10c00035 	stwio	r3,0(r2)
	     usleep(20*1000);
   4190c:	01138804 	movi	r4,20000
   41910:	00536c00 	call	536c0 <usleep>
	     IOWR(ADV7619_RST_BASE, 0, 0);
   41914:	0007883a 	mov	r3,zero
   41918:	00800234 	movhi	r2,8
   4191c:	10841c04 	addi	r2,r2,4208
   41920:	10c00035 	stwio	r3,0(r2)
	     usleep(20*1000);
   41924:	01138804 	movi	r4,20000
   41928:	00536c00 	call	536c0 <usleep>
	     IOWR(ADV7619_RST_BASE, 0, 1);
   4192c:	00c00044 	movi	r3,1
   41930:	00800234 	movhi	r2,8
   41934:	10841c04 	addi	r2,r2,4208
   41938:	10c00035 	stwio	r3,0(r2)
	     usleep(20*1000);
   4193c:	01138804 	movi	r4,20000
   41940:	00536c00 	call	536c0 <usleep>
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x98, 0xEA, &value);
   41944:	e0bfff04 	addi	r2,fp,-4
   41948:	d8800015 	stw	r2,0(sp)
   4194c:	01c03a84 	movi	r7,234
   41950:	01bfe604 	movi	r6,-104
   41954:	01400234 	movhi	r5,8
   41958:	29442004 	addi	r5,r5,4224
   4195c:	01000234 	movhi	r4,8
   41960:	21042404 	addi	r4,r4,4240
   41964:	0041e4c0 	call	41e4c <I2C_Read>
		printf("version ID0 %x\r\n",value);
   41968:	e0bfff03 	ldbu	r2,-4(fp)
   4196c:	10803fcc 	andi	r2,r2,255
   41970:	100b883a 	mov	r5,r2
   41974:	01000174 	movhi	r4,5
   41978:	2116a004 	addi	r4,r4,23168
   4197c:	0043f000 	call	43f00 <printf>
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x98, 0xEB, &value);
   41980:	e0bfff04 	addi	r2,fp,-4
   41984:	d8800015 	stw	r2,0(sp)
   41988:	01c03ac4 	movi	r7,235
   4198c:	01bfe604 	movi	r6,-104
   41990:	01400234 	movhi	r5,8
   41994:	29442004 	addi	r5,r5,4224
   41998:	01000234 	movhi	r4,8
   4199c:	21042404 	addi	r4,r4,4240
   419a0:	0041e4c0 	call	41e4c <I2C_Read>
		printf("version ID1 %x\r\n",value);
   419a4:	e0bfff03 	ldbu	r2,-4(fp)
   419a8:	10803fcc 	andi	r2,r2,255
   419ac:	100b883a 	mov	r5,r2
   419b0:	01000174 	movhi	r4,5
   419b4:	2116a504 	addi	r4,r4,23188
   419b8:	0043f000 	call	43f00 <printf>
		printf("hdmi rx config starting...\r\n");
   419bc:	01000174 	movhi	r4,5
   419c0:	2116aa04 	addi	r4,r4,23208
   419c4:	0043ffc0 	call	43ffc <puts>
	    for(i=0;i<sizeof(regData)/sizeof(regData[0]);i++)
   419c8:	e03ffb15 	stw	zero,-20(fp)
   419cc:	00000c06 	br	41a00 <main+0x13c>
	    {
	    	hdmi_rx_regwrite(regData[i] );
   419d0:	00800174 	movhi	r2,5
   419d4:	1097c804 	addi	r2,r2,24352
   419d8:	e0fffb17 	ldw	r3,-20(fp)
   419dc:	18c7883a 	add	r3,r3,r3
   419e0:	18c7883a 	add	r3,r3,r3
   419e4:	10c5883a 	add	r2,r2,r3
   419e8:	10800017 	ldw	r2,0(r2)
   419ec:	1009883a 	mov	r4,r2
   419f0:	00404700 	call	40470 <hdmi_rx_regwrite>
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x98, 0xEA, &value);
		printf("version ID0 %x\r\n",value);
		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x98, 0xEB, &value);
		printf("version ID1 %x\r\n",value);
		printf("hdmi rx config starting...\r\n");
	    for(i=0;i<sizeof(regData)/sizeof(regData[0]);i++)
   419f4:	e0bffb17 	ldw	r2,-20(fp)
   419f8:	10800044 	addi	r2,r2,1
   419fc:	e0bffb15 	stw	r2,-20(fp)
   41a00:	e0bffb17 	ldw	r2,-20(fp)
   41a04:	10800d30 	cmpltui	r2,r2,52
   41a08:	103ff11e 	bne	r2,zero,419d0 <__alt_data_end+0xfffc31d0>
	    	//if(bPass==FALSE){
	    	//	printf("write reg %d error\r\n",i);
	    	//	return 1;
	    	//}
	    }
	    printf("hdmi rx config done\r\n");
   41a0c:	01000174 	movhi	r4,5
   41a10:	2116b104 	addi	r4,r4,23236
   41a14:	0043ffc0 	call	43ffc <puts>

		I2C_Read(I2C_SCL_BASE ,I2C_SDA_BASE , 0x98, 0xFB, &value);
   41a18:	e0bfff04 	addi	r2,fp,-4
   41a1c:	d8800015 	stw	r2,0(sp)
   41a20:	01c03ec4 	movi	r7,251
   41a24:	01bfe604 	movi	r6,-104
   41a28:	01400234 	movhi	r5,8
   41a2c:	29442004 	addi	r5,r5,4224
   41a30:	01000234 	movhi	r4,8
   41a34:	21042404 	addi	r4,r4,4240
   41a38:	0041e4c0 	call	41e4c <I2C_Read>
		printf("HDMI_SLAVE_ADDR[6:0]=%xh\r\n", value);
   41a3c:	e0bfff03 	ldbu	r2,-4(fp)
   41a40:	10803fcc 	andi	r2,r2,255
   41a44:	100b883a 	mov	r5,r2
   41a48:	01000174 	movhi	r4,5
   41a4c:	2116b704 	addi	r4,r4,23260
   41a50:	0043f000 	call	43f00 <printf>

	    hdmi_interrupt_init();
   41a54:	00408600 	call	40860 <hdmi_interrupt_init>
	    	//	printf("RX port%d detected\r\n", port);
	   // }
	    while(1)
	    {
	    	// monitor two RX port status
	    	bStateChagned = false;
   41a58:	e03ffa05 	stb	zero,-24(fp)
		    for(port=0;port<PORT_NUM;port++){
   41a5c:	e03ffc15 	stw	zero,-16(fp)
   41a60:	00005b06 	br	41bd0 <main+0x30c>
		    	bCableDetected[port] = IsPortDetected(port);
   41a64:	e0bffc17 	ldw	r2,-16(fp)
   41a68:	1009883a 	mov	r4,r2
   41a6c:	0040f1c0 	call	40f1c <IsPortDetected>
   41a70:	1009883a 	mov	r4,r2
   41a74:	e0fffd04 	addi	r3,fp,-12
   41a78:	e0bffc17 	ldw	r2,-16(fp)
   41a7c:	1885883a 	add	r2,r3,r2
   41a80:	11000005 	stb	r4,0(r2)
		    	bClkDetected[port] = IsTmdsClockDetected(port);
   41a84:	e0bffc17 	ldw	r2,-16(fp)
   41a88:	1009883a 	mov	r4,r2
   41a8c:	0040fe00 	call	40fe0 <IsTmdsClockDetected>
   41a90:	1009883a 	mov	r4,r2
   41a94:	e0fffe04 	addi	r3,fp,-8
   41a98:	e0bffc17 	ldw	r2,-16(fp)
   41a9c:	1885883a 	add	r2,r3,r2
   41aa0:	11000005 	stb	r4,0(r2)

		    	//
	    		if (bPreCabletDetected[port] ^ bCableDetected[port]){
   41aa4:	e0fffd84 	addi	r3,fp,-10
   41aa8:	e0bffc17 	ldw	r2,-16(fp)
   41aac:	1885883a 	add	r2,r3,r2
   41ab0:	10c00003 	ldbu	r3,0(r2)
   41ab4:	e13ffd04 	addi	r4,fp,-12
   41ab8:	e0bffc17 	ldw	r2,-16(fp)
   41abc:	2085883a 	add	r2,r4,r2
   41ac0:	10800003 	ldbu	r2,0(r2)
   41ac4:	1884f03a 	xor	r2,r3,r2
   41ac8:	10803fcc 	andi	r2,r2,255
   41acc:	10001826 	beq	r2,zero,41b30 <main+0x26c>
	    			bPreCabletDetected[port] = bCableDetected[port];
   41ad0:	e0fffd04 	addi	r3,fp,-12
   41ad4:	e0bffc17 	ldw	r2,-16(fp)
   41ad8:	1885883a 	add	r2,r3,r2
   41adc:	10c00003 	ldbu	r3,0(r2)
   41ae0:	e13ffd84 	addi	r4,fp,-10
   41ae4:	e0bffc17 	ldw	r2,-16(fp)
   41ae8:	2085883a 	add	r2,r4,r2
   41aec:	10c00005 	stb	r3,0(r2)
		    		printf("RX port%d cable %s\r\n", port, bCableDetected[port]?"detected":"removed");
   41af0:	e0fffd04 	addi	r3,fp,-12
   41af4:	e0bffc17 	ldw	r2,-16(fp)
   41af8:	1885883a 	add	r2,r3,r2
   41afc:	10800003 	ldbu	r2,0(r2)
   41b00:	10803fcc 	andi	r2,r2,255
   41b04:	10000326 	beq	r2,zero,41b14 <main+0x250>
   41b08:	00800174 	movhi	r2,5
   41b0c:	1096be04 	addi	r2,r2,23288
   41b10:	00000206 	br	41b1c <main+0x258>
   41b14:	00800174 	movhi	r2,5
   41b18:	1096c104 	addi	r2,r2,23300
   41b1c:	100d883a 	mov	r6,r2
   41b20:	e17ffc17 	ldw	r5,-16(fp)
   41b24:	01000174 	movhi	r4,5
   41b28:	2116c304 	addi	r4,r4,23308
   41b2c:	0043f000 	call	43f00 <printf>
		    		//bStateChagned = true;
	    		}

		    	//
	    		if (bPreClkDetected[port] ^ bClkDetected[port]){
   41b30:	e0fffe84 	addi	r3,fp,-6
   41b34:	e0bffc17 	ldw	r2,-16(fp)
   41b38:	1885883a 	add	r2,r3,r2
   41b3c:	10c00003 	ldbu	r3,0(r2)
   41b40:	e13ffe04 	addi	r4,fp,-8
   41b44:	e0bffc17 	ldw	r2,-16(fp)
   41b48:	2085883a 	add	r2,r4,r2
   41b4c:	10800003 	ldbu	r2,0(r2)
   41b50:	1884f03a 	xor	r2,r3,r2
   41b54:	10803fcc 	andi	r2,r2,255
   41b58:	10001a26 	beq	r2,zero,41bc4 <main+0x300>
	    			bPreClkDetected[port] = bClkDetected[port];
   41b5c:	e0fffe04 	addi	r3,fp,-8
   41b60:	e0bffc17 	ldw	r2,-16(fp)
   41b64:	1885883a 	add	r2,r3,r2
   41b68:	10c00003 	ldbu	r3,0(r2)
   41b6c:	e13ffe84 	addi	r4,fp,-6
   41b70:	e0bffc17 	ldw	r2,-16(fp)
   41b74:	2085883a 	add	r2,r4,r2
   41b78:	10c00005 	stb	r3,0(r2)
		    		printf("RX port%d TMDS clock %s\r\n", port, bClkDetected[port]?"detected":"undetected");
   41b7c:	e0fffe04 	addi	r3,fp,-8
   41b80:	e0bffc17 	ldw	r2,-16(fp)
   41b84:	1885883a 	add	r2,r3,r2
   41b88:	10800003 	ldbu	r2,0(r2)
   41b8c:	10803fcc 	andi	r2,r2,255
   41b90:	10000326 	beq	r2,zero,41ba0 <main+0x2dc>
   41b94:	00800174 	movhi	r2,5
   41b98:	1096be04 	addi	r2,r2,23288
   41b9c:	00000206 	br	41ba8 <main+0x2e4>
   41ba0:	00800174 	movhi	r2,5
   41ba4:	1096c904 	addi	r2,r2,23332
   41ba8:	100d883a 	mov	r6,r2
   41bac:	e17ffc17 	ldw	r5,-16(fp)
   41bb0:	01000174 	movhi	r4,5
   41bb4:	2116cc04 	addi	r4,r4,23344
   41bb8:	0043f000 	call	43f00 <printf>
		    		bStateChagned = true;
   41bbc:	00800044 	movi	r2,1
   41bc0:	e0bffa05 	stb	r2,-24(fp)
	   // }
	    while(1)
	    {
	    	// monitor two RX port status
	    	bStateChagned = false;
		    for(port=0;port<PORT_NUM;port++){
   41bc4:	e0bffc17 	ldw	r2,-16(fp)
   41bc8:	10800044 	addi	r2,r2,1
   41bcc:	e0bffc15 	stw	r2,-16(fp)
   41bd0:	e0bffc17 	ldw	r2,-16(fp)
   41bd4:	10800090 	cmplti	r2,r2,2
   41bd8:	103fa21e 	bne	r2,zero,41a64 <__alt_data_end+0xfffc3264>
		    		printf("RX port%d TMDS clock %s\r\n", port, bClkDetected[port]?"detected":"undetected");
		    		bStateChagned = true;
	    		}
	        }

		    if (bStateChagned){
   41bdc:	e0bffa03 	ldbu	r2,-24(fp)
   41be0:	10002a26 	beq	r2,zero,41c8c <main+0x3c8>
		    	// Set active RX port
		    	PortSelValue = 0xFF;
   41be4:	00bfffc4 	movi	r2,-1
   41be8:	e0bffa85 	stb	r2,-22(fp)
		    	if (bClkDetected[PORT_A] ){
   41bec:	e0bffe03 	ldbu	r2,-8(fp)
   41bf0:	10803fcc 	andi	r2,r2,255
   41bf4:	10000326 	beq	r2,zero,41c04 <main+0x340>
		    		PortSelValue = 0x00; // set port A as active
   41bf8:	e03ffa85 	stb	zero,-22(fp)
		    		port = PORT_A;
   41bfc:	e03ffc15 	stw	zero,-16(fp)
   41c00:	00000706 	br	41c20 <main+0x35c>
		    	}else if (bClkDetected[PORT_B]){
   41c04:	e0bffe43 	ldbu	r2,-7(fp)
   41c08:	10803fcc 	andi	r2,r2,255
   41c0c:	10000426 	beq	r2,zero,41c20 <main+0x35c>
		    		PortSelValue = 0x01; // set port B as active
   41c10:	00800044 	movi	r2,1
   41c14:	e0bffa85 	stb	r2,-22(fp)
		    		port = PORT_B;
   41c18:	00800044 	movi	r2,1
   41c1c:	e0bffc15 	stw	r2,-16(fp)
		    	}

		    	if ((PrePortSelValue != PortSelValue) && (PortSelValue != 0xFF)){
   41c20:	e0fffa43 	ldbu	r3,-23(fp)
   41c24:	e0bffa83 	ldbu	r2,-22(fp)
   41c28:	18801626 	beq	r3,r2,41c84 <main+0x3c0>
   41c2c:	e0bffa83 	ldbu	r2,-22(fp)
   41c30:	10803fe0 	cmpeqi	r2,r2,255
   41c34:	1000131e 	bne	r2,zero,41c84 <main+0x3c0>
		    		// port(s) active
		    		I2C_Write(I2C_SCL_BASE ,I2C_SDA_BASE , 0x68 ,0x00 ,PortSelValue); // set active port by HDMI_PORT_SELECT[2:0]
   41c38:	e0bffa83 	ldbu	r2,-22(fp)
   41c3c:	d8800015 	stw	r2,0(sp)
   41c40:	000f883a 	mov	r7,zero
   41c44:	01801a04 	movi	r6,104
   41c48:	01400234 	movhi	r5,8
   41c4c:	29442004 	addi	r5,r5,4224
   41c50:	01000234 	movhi	r4,8
   41c54:	21042404 	addi	r4,r4,4240
   41c58:	0041d380 	call	41d38 <I2C_Write>
		    		printf("Set RX port%d as active port\r\n", (PortSelValue == 0x00)?0:1);
   41c5c:	e0bffa83 	ldbu	r2,-22(fp)
   41c60:	1004c03a 	cmpne	r2,r2,zero
   41c64:	10803fcc 	andi	r2,r2,255
   41c68:	100b883a 	mov	r5,r2
   41c6c:	01000174 	movhi	r4,5
   41c70:	2116d304 	addi	r4,r4,23372
   41c74:	0043f000 	call	43f00 <printf>

		    		//bTmdsClockDetected = IsTmdsClockDetected(port);
		    		//printf("Port%d TMDS Clock detected:%s\r\n", port, bTmdsClockDetected?"yes":"no");
		    		Meaurement(port);
   41c78:	e0bffc17 	ldw	r2,-16(fp)
   41c7c:	1009883a 	mov	r4,r2
   41c80:	004107c0 	call	4107c <Meaurement>
		    	}
	    		PrePortSelValue = PortSelValue;
   41c84:	e0bffa83 	ldbu	r2,-22(fp)
   41c88:	e0bffa45 	stb	r2,-23(fp)
		    }

	        //
	    	usleep(10*1000);
   41c8c:	0109c404 	movi	r4,10000
   41c90:	00536c00 	call	536c0 <usleep>
//	    	usleep(1000*1000);

	    }
   41c94:	003f7006 	br	41a58 <__alt_data_end+0xfffc3258>

00041c98 <I2C_Open>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

void I2C_Open(alt_u32 clk_base, alt_u32 data_base){
   41c98:	defffd04 	addi	sp,sp,-12
   41c9c:	df000215 	stw	fp,8(sp)
   41ca0:	df000204 	addi	fp,sp,8
   41ca4:	e13ffe15 	stw	r4,-8(fp)
   41ca8:	e17fff15 	stw	r5,-4(fp)
    SDA_DIR_IN(data_base);
   41cac:	e0bfff17 	ldw	r2,-4(fp)
   41cb0:	10800104 	addi	r2,r2,4
   41cb4:	0007883a 	mov	r3,zero
   41cb8:	10c00035 	stwio	r3,0(r2)
    SCL_DIR_OUT(clk_base);
   41cbc:	e0bffe17 	ldw	r2,-8(fp)
   41cc0:	10800104 	addi	r2,r2,4
   41cc4:	1007883a 	mov	r3,r2
   41cc8:	00800044 	movi	r2,1
   41ccc:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base); 
   41cd0:	e0bffe17 	ldw	r2,-8(fp)
   41cd4:	00c00044 	movi	r3,1
   41cd8:	10c00035 	stwio	r3,0(r2)
}
   41cdc:	0001883a 	nop
   41ce0:	e037883a 	mov	sp,fp
   41ce4:	df000017 	ldw	fp,0(sp)
   41ce8:	dec00104 	addi	sp,sp,4
   41cec:	f800283a 	ret

00041cf0 <I2C_Close>:

void I2C_Close(alt_u32 clk_base, alt_u32 data_base){
   41cf0:	defffd04 	addi	sp,sp,-12
   41cf4:	df000215 	stw	fp,8(sp)
   41cf8:	df000204 	addi	fp,sp,8
   41cfc:	e13ffe15 	stw	r4,-8(fp)
   41d00:	e17fff15 	stw	r5,-4(fp)
    SCL_DIR_IN(clk_base);
   41d04:	e0bffe17 	ldw	r2,-8(fp)
   41d08:	10800104 	addi	r2,r2,4
   41d0c:	0007883a 	mov	r3,zero
   41d10:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_IN(data_base);
   41d14:	e0bfff17 	ldw	r2,-4(fp)
   41d18:	10800104 	addi	r2,r2,4
   41d1c:	0007883a 	mov	r3,zero
   41d20:	10c00035 	stwio	r3,0(r2)
}
   41d24:	0001883a 	nop
   41d28:	e037883a 	mov	sp,fp
   41d2c:	df000017 	ldw	fp,0(sp)
   41d30:	dec00104 	addi	sp,sp,4
   41d34:	f800283a 	ret

00041d38 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
   41d38:	defff804 	addi	sp,sp,-32
   41d3c:	dfc00715 	stw	ra,28(sp)
   41d40:	df000615 	stw	fp,24(sp)
   41d44:	df000604 	addi	fp,sp,24
   41d48:	e13ffb15 	stw	r4,-20(fp)
   41d4c:	e17ffc15 	stw	r5,-16(fp)
   41d50:	3009883a 	mov	r4,r6
   41d54:	3807883a 	mov	r3,r7
   41d58:	e0800217 	ldw	r2,8(fp)
   41d5c:	e13ffd05 	stb	r4,-12(fp)
   41d60:	e0fffe05 	stb	r3,-8(fp)
   41d64:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = true;
   41d68:	00800044 	movi	r2,1
   41d6c:	e0bffa05 	stb	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   41d70:	e17ffc17 	ldw	r5,-16(fp)
   41d74:	e13ffb17 	ldw	r4,-20(fp)
   41d78:	00421140 	call	42114 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   41d7c:	e0bffd03 	ldbu	r2,-12(fp)
   41d80:	10803fcc 	andi	r2,r2,255
   41d84:	100d883a 	mov	r6,r2
   41d88:	e17ffc17 	ldw	r5,-16(fp)
   41d8c:	e13ffb17 	ldw	r4,-20(fp)
   41d90:	00422180 	call	42218 <i2c_write>
   41d94:	1080005c 	xori	r2,r2,1
   41d98:	10803fcc 	andi	r2,r2,255
   41d9c:	10000426 	beq	r2,zero,41db0 <I2C_Write+0x78>
        bSuccess = false;
   41da0:	e03ffa05 	stb	zero,-24(fp)
        I2C_DEBUG(("I2C Fail: Address NACK!\n"));
   41da4:	01000174 	movhi	r4,5
   41da8:	2116db04 	addi	r4,r4,23404
   41dac:	00424d40 	call	424d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   41db0:	e0bffa03 	ldbu	r2,-24(fp)
   41db4:	10000c26 	beq	r2,zero,41de8 <I2C_Write+0xb0>
   41db8:	e0bffe03 	ldbu	r2,-8(fp)
   41dbc:	100d883a 	mov	r6,r2
   41dc0:	e17ffc17 	ldw	r5,-16(fp)
   41dc4:	e13ffb17 	ldw	r4,-20(fp)
   41dc8:	00422180 	call	42218 <i2c_write>
   41dcc:	1080005c 	xori	r2,r2,1
   41dd0:	10803fcc 	andi	r2,r2,255
   41dd4:	10000426 	beq	r2,zero,41de8 <I2C_Write+0xb0>
        bSuccess = false;
   41dd8:	e03ffa05 	stb	zero,-24(fp)
        I2C_DEBUG(("I2C Fail: SubAddress NACK!\n"));
   41ddc:	01000174 	movhi	r4,5
   41de0:	2116e204 	addi	r4,r4,23432
   41de4:	00424d40 	call	424d4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
   41de8:	e0bffa03 	ldbu	r2,-24(fp)
   41dec:	10000c26 	beq	r2,zero,41e20 <I2C_Write+0xe8>
   41df0:	e0bfff03 	ldbu	r2,-4(fp)
   41df4:	100d883a 	mov	r6,r2
   41df8:	e17ffc17 	ldw	r5,-16(fp)
   41dfc:	e13ffb17 	ldw	r4,-20(fp)
   41e00:	00422180 	call	42218 <i2c_write>
   41e04:	1080005c 	xori	r2,r2,1
   41e08:	10803fcc 	andi	r2,r2,255
   41e0c:	10000426 	beq	r2,zero,41e20 <I2C_Write+0xe8>
        bSuccess = false;
   41e10:	e03ffa05 	stb	zero,-24(fp)
        I2C_DEBUG(("I2C Fail: write NACK!\n"));
   41e14:	01000174 	movhi	r4,5
   41e18:	2116e904 	addi	r4,r4,23460
   41e1c:	00424d40 	call	424d4 <myprintf>
    }
    i2c_stop(clk_base, data_base);
   41e20:	e17ffc17 	ldw	r5,-16(fp)
   41e24:	e13ffb17 	ldw	r4,-20(fp)
   41e28:	00421a00 	call	421a0 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   41e2c:	0106d604 	movi	r4,7000
   41e30:	00536c00 	call	536c0 <usleep>
    
    return bSuccess;
   41e34:	e0bffa03 	ldbu	r2,-24(fp)

    
}
   41e38:	e037883a 	mov	sp,fp
   41e3c:	dfc00117 	ldw	ra,4(sp)
   41e40:	df000017 	ldw	fp,0(sp)
   41e44:	dec00204 	addi	sp,sp,8
   41e48:	f800283a 	ret

00041e4c <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
   41e4c:	defff904 	addi	sp,sp,-28
   41e50:	dfc00615 	stw	ra,24(sp)
   41e54:	df000515 	stw	fp,20(sp)
   41e58:	df000504 	addi	fp,sp,20
   41e5c:	e13ffc15 	stw	r4,-16(fp)
   41e60:	e17ffd15 	stw	r5,-12(fp)
   41e64:	3007883a 	mov	r3,r6
   41e68:	3805883a 	mov	r2,r7
   41e6c:	e0fffe05 	stb	r3,-8(fp)
   41e70:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = true;
   41e74:	00800044 	movi	r2,1
   41e78:	e0bffb05 	stb	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   41e7c:	e17ffd17 	ldw	r5,-12(fp)
   41e80:	e13ffc17 	ldw	r4,-16(fp)
   41e84:	00421140 	call	42114 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   41e88:	e0bffe03 	ldbu	r2,-8(fp)
   41e8c:	10803fcc 	andi	r2,r2,255
   41e90:	100d883a 	mov	r6,r2
   41e94:	e17ffd17 	ldw	r5,-12(fp)
   41e98:	e13ffc17 	ldw	r4,-16(fp)
   41e9c:	00422180 	call	42218 <i2c_write>
   41ea0:	1080005c 	xori	r2,r2,1
   41ea4:	10803fcc 	andi	r2,r2,255
   41ea8:	10000426 	beq	r2,zero,41ebc <I2C_Read+0x70>
        bSuccess = false;
   41eac:	e03ffb05 	stb	zero,-20(fp)
        I2C_DEBUG(("I2C Fail: Address NACK!\n"));
   41eb0:	01000174 	movhi	r4,5
   41eb4:	2116db04 	addi	r4,r4,23404
   41eb8:	00424d40 	call	424d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   41ebc:	e0bffb03 	ldbu	r2,-20(fp)
   41ec0:	10000c26 	beq	r2,zero,41ef4 <I2C_Read+0xa8>
   41ec4:	e0bfff03 	ldbu	r2,-4(fp)
   41ec8:	100d883a 	mov	r6,r2
   41ecc:	e17ffd17 	ldw	r5,-12(fp)
   41ed0:	e13ffc17 	ldw	r4,-16(fp)
   41ed4:	00422180 	call	42218 <i2c_write>
   41ed8:	1080005c 	xori	r2,r2,1
   41edc:	10803fcc 	andi	r2,r2,255
   41ee0:	10000426 	beq	r2,zero,41ef4 <I2C_Read+0xa8>
        bSuccess = false;
   41ee4:	e03ffb05 	stb	zero,-20(fp)
        I2C_DEBUG(("I2C Fail: SubAddress NACK!\n"));
   41ee8:	01000174 	movhi	r4,5
   41eec:	2116e204 	addi	r4,r4,23432
   41ef0:	00424d40 	call	424d4 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
   41ef4:	e17ffd17 	ldw	r5,-12(fp)
   41ef8:	e13ffc17 	ldw	r4,-16(fp)
   41efc:	00421140 	call	42114 <i2c_start>
    DeviceAddr |= 1; // Read
   41f00:	e0bffe03 	ldbu	r2,-8(fp)
   41f04:	10800054 	ori	r2,r2,1
   41f08:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   41f0c:	e0bffb03 	ldbu	r2,-20(fp)
   41f10:	10000d26 	beq	r2,zero,41f48 <I2C_Read+0xfc>
   41f14:	e0bffe03 	ldbu	r2,-8(fp)
   41f18:	10803fcc 	andi	r2,r2,255
   41f1c:	100d883a 	mov	r6,r2
   41f20:	e17ffd17 	ldw	r5,-12(fp)
   41f24:	e13ffc17 	ldw	r4,-16(fp)
   41f28:	00422180 	call	42218 <i2c_write>
   41f2c:	1080005c 	xori	r2,r2,1
   41f30:	10803fcc 	andi	r2,r2,255
   41f34:	10000426 	beq	r2,zero,41f48 <I2C_Read+0xfc>
        bSuccess = false;
   41f38:	e03ffb05 	stb	zero,-20(fp)
        I2C_DEBUG(("I2C Fail: Address+1 NACK!\n"));
   41f3c:	01000174 	movhi	r4,5
   41f40:	2116ef04 	addi	r4,r4,23484
   41f44:	00424d40 	call	424d4 <myprintf>
    }
    
    if (bSuccess){
   41f48:	e0bffb03 	ldbu	r2,-20(fp)
   41f4c:	10000526 	beq	r2,zero,41f64 <I2C_Read+0x118>
        i2c_read(clk_base, data_base, pControlData, false);  // read
   41f50:	000f883a 	mov	r7,zero
   41f54:	e1800217 	ldw	r6,8(fp)
   41f58:	e17ffd17 	ldw	r5,-12(fp)
   41f5c:	e13ffc17 	ldw	r4,-16(fp)
   41f60:	00423440 	call	42344 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
   41f64:	e17ffd17 	ldw	r5,-12(fp)
   41f68:	e13ffc17 	ldw	r4,-16(fp)
   41f6c:	00421a00 	call	421a0 <i2c_stop>
    
    return bSuccess;
   41f70:	e0bffb03 	ldbu	r2,-20(fp)
}
   41f74:	e037883a 	mov	sp,fp
   41f78:	dfc00117 	ldw	ra,4(sp)
   41f7c:	df000017 	ldw	fp,0(sp)
   41f80:	dec00204 	addi	sp,sp,8
   41f84:	f800283a 	ret

00041f88 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_u8 DeviceAddr, alt_u8 RegAddr, alt_u8 szData[], alt_u16 len){
   41f88:	defff704 	addi	sp,sp,-36
   41f8c:	dfc00815 	stw	ra,32(sp)
   41f90:	df000715 	stw	fp,28(sp)
   41f94:	df000704 	addi	fp,sp,28
   41f98:	e13ffb15 	stw	r4,-20(fp)
   41f9c:	e17ffc15 	stw	r5,-16(fp)
   41fa0:	3009883a 	mov	r4,r6
   41fa4:	3807883a 	mov	r3,r7
   41fa8:	e0800317 	ldw	r2,12(fp)
   41fac:	e13ffd05 	stb	r4,-12(fp)
   41fb0:	e0fffe05 	stb	r3,-8(fp)
   41fb4:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = true;
   41fb8:	00800044 	movi	r2,1
   41fbc:	e0bffa05 	stb	r2,-24(fp)

    i2c_start(clk_base, data_base);
   41fc0:	e17ffc17 	ldw	r5,-16(fp)
   41fc4:	e13ffb17 	ldw	r4,-20(fp)
   41fc8:	00421140 	call	42114 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   41fcc:	e0bffd03 	ldbu	r2,-12(fp)
   41fd0:	100d883a 	mov	r6,r2
   41fd4:	e17ffc17 	ldw	r5,-16(fp)
   41fd8:	e13ffb17 	ldw	r4,-20(fp)
   41fdc:	00422180 	call	42218 <i2c_write>
   41fe0:	1080005c 	xori	r2,r2,1
   41fe4:	10803fcc 	andi	r2,r2,255
   41fe8:	10000426 	beq	r2,zero,41ffc <I2C_MultipleRead+0x74>
        bSuccess = false;
   41fec:	e03ffa05 	stb	zero,-24(fp)
        I2C_DEBUG(("I2C Fail: Address NACK!\n"));
   41ff0:	01000174 	movhi	r4,5
   41ff4:	2116db04 	addi	r4,r4,23404
   41ff8:	00424d40 	call	424d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, RegAddr)){ // send sub-address
   41ffc:	e0bffa03 	ldbu	r2,-24(fp)
   42000:	10000c26 	beq	r2,zero,42034 <I2C_MultipleRead+0xac>
   42004:	e0bffe03 	ldbu	r2,-8(fp)
   42008:	100d883a 	mov	r6,r2
   4200c:	e17ffc17 	ldw	r5,-16(fp)
   42010:	e13ffb17 	ldw	r4,-20(fp)
   42014:	00422180 	call	42218 <i2c_write>
   42018:	1080005c 	xori	r2,r2,1
   4201c:	10803fcc 	andi	r2,r2,255
   42020:	10000426 	beq	r2,zero,42034 <I2C_MultipleRead+0xac>
        bSuccess = false;
   42024:	e03ffa05 	stb	zero,-24(fp)
        I2C_DEBUG(("I2C Fail: SubAddress NACK!\n"));
   42028:	01000174 	movhi	r4,5
   4202c:	2116e204 	addi	r4,r4,23432
   42030:	00424d40 	call	424d4 <myprintf>
    }    
    if (bSuccess)        
   42034:	e0bffa03 	ldbu	r2,-24(fp)
   42038:	10000326 	beq	r2,zero,42048 <I2C_MultipleRead+0xc0>
        i2c_start(clk_base, data_base);  // restart
   4203c:	e17ffc17 	ldw	r5,-16(fp)
   42040:	e13ffb17 	ldw	r4,-20(fp)
   42044:	00421140 	call	42114 <i2c_start>
    DeviceAddr |= 1; // Read
   42048:	e0bffd03 	ldbu	r2,-12(fp)
   4204c:	10800054 	ori	r2,r2,1
   42050:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   42054:	e0bffa03 	ldbu	r2,-24(fp)
   42058:	10000c26 	beq	r2,zero,4208c <I2C_MultipleRead+0x104>
   4205c:	e0bffd03 	ldbu	r2,-12(fp)
   42060:	100d883a 	mov	r6,r2
   42064:	e17ffc17 	ldw	r5,-16(fp)
   42068:	e13ffb17 	ldw	r4,-20(fp)
   4206c:	00422180 	call	42218 <i2c_write>
   42070:	1080005c 	xori	r2,r2,1
   42074:	10803fcc 	andi	r2,r2,255
   42078:	10000426 	beq	r2,zero,4208c <I2C_MultipleRead+0x104>
        bSuccess = false;
   4207c:	e03ffa05 	stb	zero,-24(fp)
        I2C_DEBUG(("I2C Fail: Address+1 NACK!\n"));
   42080:	01000174 	movhi	r4,5
   42084:	2116ef04 	addi	r4,r4,23484
   42088:	00424d40 	call	424d4 <myprintf>
    }
    
    if (bSuccess){
   4208c:	e0bffa03 	ldbu	r2,-24(fp)
   42090:	10001726 	beq	r2,zero,420f0 <I2C_MultipleRead+0x168>
        for(i=0;i<len && bSuccess;i++){
   42094:	e03ff915 	stw	zero,-28(fp)
   42098:	00001006 	br	420dc <I2C_MultipleRead+0x154>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?false:true);  // read
   4209c:	e0bff917 	ldw	r2,-28(fp)
   420a0:	e0c00217 	ldw	r3,8(fp)
   420a4:	1889883a 	add	r4,r3,r2
   420a8:	e0bfff0b 	ldhu	r2,-4(fp)
   420ac:	10ffffc4 	addi	r3,r2,-1
   420b0:	e0bff917 	ldw	r2,-28(fp)
   420b4:	1884c03a 	cmpne	r2,r3,r2
   420b8:	10803fcc 	andi	r2,r2,255
   420bc:	100f883a 	mov	r7,r2
   420c0:	200d883a 	mov	r6,r4
   420c4:	e17ffc17 	ldw	r5,-16(fp)
   420c8:	e13ffb17 	ldw	r4,-20(fp)
   420cc:	00423440 	call	42344 <i2c_read>
        bSuccess = false;
        I2C_DEBUG(("I2C Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   420d0:	e0bff917 	ldw	r2,-28(fp)
   420d4:	10800044 	addi	r2,r2,1
   420d8:	e0bff915 	stw	r2,-28(fp)
   420dc:	e0bfff0b 	ldhu	r2,-4(fp)
   420e0:	e0fff917 	ldw	r3,-28(fp)
   420e4:	1880020e 	bge	r3,r2,420f0 <I2C_MultipleRead+0x168>
   420e8:	e0bffa03 	ldbu	r2,-24(fp)
   420ec:	103feb1e 	bne	r2,zero,4209c <__alt_data_end+0xfffc389c>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?false:true);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
   420f0:	e17ffc17 	ldw	r5,-16(fp)
   420f4:	e13ffb17 	ldw	r4,-20(fp)
   420f8:	00421a00 	call	421a0 <i2c_stop>
    
    return bSuccess;    
   420fc:	e0bffa03 	ldbu	r2,-24(fp)
    
}
   42100:	e037883a 	mov	sp,fp
   42104:	dfc00117 	ldw	ra,4(sp)
   42108:	df000017 	ldw	fp,0(sp)
   4210c:	dec00204 	addi	sp,sp,8
   42110:	f800283a 	ret

00042114 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
   42114:	defffc04 	addi	sp,sp,-16
   42118:	dfc00315 	stw	ra,12(sp)
   4211c:	df000215 	stw	fp,8(sp)
   42120:	df000204 	addi	fp,sp,8
   42124:	e13ffe15 	stw	r4,-8(fp)
   42128:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
   4212c:	e0bfff17 	ldw	r2,-4(fp)
   42130:	10800104 	addi	r2,r2,4
   42134:	1007883a 	mov	r3,r2
   42138:	00800044 	movi	r2,1
   4213c:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
   42140:	e0bfff17 	ldw	r2,-4(fp)
   42144:	00c00044 	movi	r3,1
   42148:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
   4214c:	e0bffe17 	ldw	r2,-8(fp)
   42150:	00c00044 	movi	r3,1
   42154:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
   42158:	01000044 	movi	r4,1
   4215c:	00536c00 	call	536c0 <usleep>
     
    SDA_LOW(data_base); // data low
   42160:	e0bfff17 	ldw	r2,-4(fp)
   42164:	0007883a 	mov	r3,zero
   42168:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
   4216c:	01000044 	movi	r4,1
   42170:	00536c00 	call	536c0 <usleep>
    SCL_LOW(clk_base); // clock low
   42174:	e0bffe17 	ldw	r2,-8(fp)
   42178:	0007883a 	mov	r3,zero
   4217c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
   42180:	01000044 	movi	r4,1
   42184:	00536c00 	call	536c0 <usleep>
}
   42188:	0001883a 	nop
   4218c:	e037883a 	mov	sp,fp
   42190:	dfc00117 	ldw	ra,4(sp)
   42194:	df000017 	ldw	fp,0(sp)
   42198:	dec00204 	addi	sp,sp,8
   4219c:	f800283a 	ret

000421a0 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
   421a0:	defffc04 	addi	sp,sp,-16
   421a4:	dfc00315 	stw	ra,12(sp)
   421a8:	df000215 	stw	fp,8(sp)
   421ac:	df000204 	addi	fp,sp,8
   421b0:	e13ffe15 	stw	r4,-8(fp)
   421b4:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
   421b8:	e0bfff17 	ldw	r2,-4(fp)
   421bc:	10800104 	addi	r2,r2,4
   421c0:	1007883a 	mov	r3,r2
   421c4:	00800044 	movi	r2,1
   421c8:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
   421cc:	e0bfff17 	ldw	r2,-4(fp)
   421d0:	0007883a 	mov	r3,zero
   421d4:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
   421d8:	e0bffe17 	ldw	r2,-8(fp)
   421dc:	00c00044 	movi	r3,1
   421e0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
   421e4:	01000044 	movi	r4,1
   421e8:	00536c00 	call	536c0 <usleep>
    SDA_HIGH(data_base); // data high
   421ec:	e0bfff17 	ldw	r2,-4(fp)
   421f0:	00c00044 	movi	r3,1
   421f4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
   421f8:	01000044 	movi	r4,1
   421fc:	00536c00 	call	536c0 <usleep>
    

    
}
   42200:	0001883a 	nop
   42204:	e037883a 	mov	sp,fp
   42208:	dfc00117 	ldw	ra,4(sp)
   4220c:	df000017 	ldw	fp,0(sp)
   42210:	dec00204 	addi	sp,sp,8
   42214:	f800283a 	ret

00042218 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
   42218:	defff804 	addi	sp,sp,-32
   4221c:	dfc00715 	stw	ra,28(sp)
   42220:	df000615 	stw	fp,24(sp)
   42224:	df000604 	addi	fp,sp,24
   42228:	e13ffd15 	stw	r4,-12(fp)
   4222c:	e17ffe15 	stw	r5,-8(fp)
   42230:	3005883a 	mov	r2,r6
   42234:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
   42238:	00bfe004 	movi	r2,-128
   4223c:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
   42240:	e0bffe17 	ldw	r2,-8(fp)
   42244:	10800104 	addi	r2,r2,4
   42248:	1007883a 	mov	r3,r2
   4224c:	00800044 	movi	r2,1
   42250:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
   42254:	e03ffb15 	stw	zero,-20(fp)
   42258:	00001f06 	br	422d8 <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
   4225c:	e0bffd17 	ldw	r2,-12(fp)
   42260:	0007883a 	mov	r3,zero
   42264:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
   42268:	e0ffff03 	ldbu	r3,-4(fp)
   4226c:	e0bffa03 	ldbu	r2,-24(fp)
   42270:	1884703a 	and	r2,r3,r2
   42274:	10803fcc 	andi	r2,r2,255
   42278:	10000426 	beq	r2,zero,4228c <i2c_write+0x74>
            SDA_HIGH(data_base);
   4227c:	e0bffe17 	ldw	r2,-8(fp)
   42280:	00c00044 	movi	r3,1
   42284:	10c00035 	stwio	r3,0(r2)
   42288:	00000306 	br	42298 <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
   4228c:	e0bffe17 	ldw	r2,-8(fp)
   42290:	0007883a 	mov	r3,zero
   42294:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
   42298:	e0bffa03 	ldbu	r2,-24(fp)
   4229c:	1004d07a 	srli	r2,r2,1
   422a0:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
   422a4:	e0bffd17 	ldw	r2,-12(fp)
   422a8:	00c00044 	movi	r3,1
   422ac:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   422b0:	01000044 	movi	r4,1
   422b4:	00536c00 	call	536c0 <usleep>
        SCL_LOW(clk_base);
   422b8:	e0bffd17 	ldw	r2,-12(fp)
   422bc:	0007883a 	mov	r3,zero
   422c0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   422c4:	01000044 	movi	r4,1
   422c8:	00536c00 	call	536c0 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
   422cc:	e0bffb17 	ldw	r2,-20(fp)
   422d0:	10800044 	addi	r2,r2,1
   422d4:	e0bffb15 	stw	r2,-20(fp)
   422d8:	e0bffb17 	ldw	r2,-20(fp)
   422dc:	10800210 	cmplti	r2,r2,8
   422e0:	103fde1e 	bne	r2,zero,4225c <__alt_data_end+0xfffc3a5c>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
   422e4:	e0bffe17 	ldw	r2,-8(fp)
   422e8:	10800104 	addi	r2,r2,4
   422ec:	0007883a 	mov	r3,zero
   422f0:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
   422f4:	e0bffd17 	ldw	r2,-12(fp)
   422f8:	00c00044 	movi	r3,1
   422fc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
   42300:	01000044 	movi	r4,1
   42304:	00536c00 	call	536c0 <usleep>
    bAck = SDA_READ(data_base)?false:true;  // get ack
   42308:	e0bffe17 	ldw	r2,-8(fp)
   4230c:	10800037 	ldwio	r2,0(r2)
   42310:	1005003a 	cmpeq	r2,r2,zero
   42314:	e0bffc05 	stb	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
   42318:	e0bffd17 	ldw	r2,-12(fp)
   4231c:	0007883a 	mov	r3,zero
   42320:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   42324:	01000044 	movi	r4,1
   42328:	00536c00 	call	536c0 <usleep>
    return bAck;
   4232c:	e0bffc03 	ldbu	r2,-16(fp)
}    
   42330:	e037883a 	mov	sp,fp
   42334:	dfc00117 	ldw	ra,4(sp)
   42338:	df000017 	ldw	fp,0(sp)
   4233c:	dec00204 	addi	sp,sp,8
   42340:	f800283a 	ret

00042344 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
   42344:	defff804 	addi	sp,sp,-32
   42348:	dfc00715 	stw	ra,28(sp)
   4234c:	df000615 	stw	fp,24(sp)
   42350:	df000604 	addi	fp,sp,24
   42354:	e13ffc15 	stw	r4,-16(fp)
   42358:	e17ffd15 	stw	r5,-12(fp)
   4235c:	e1bffe15 	stw	r6,-8(fp)
   42360:	3805883a 	mov	r2,r7
   42364:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Data=0;
   42368:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
   4236c:	e0bffd17 	ldw	r2,-12(fp)
   42370:	10800104 	addi	r2,r2,4
   42374:	0007883a 	mov	r3,zero
   42378:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
   4237c:	e0bffc17 	ldw	r2,-16(fp)
   42380:	0007883a 	mov	r3,zero
   42384:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   42388:	01000044 	movi	r4,1
   4238c:	00536c00 	call	536c0 <usleep>

    for(i=0;i<8;i++){
   42390:	e03ffb15 	stw	zero,-20(fp)
   42394:	00001606 	br	423f0 <i2c_read+0xac>
        Data <<= 1;
   42398:	e0bffa03 	ldbu	r2,-24(fp)
   4239c:	1085883a 	add	r2,r2,r2
   423a0:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
   423a4:	e0bffc17 	ldw	r2,-16(fp)
   423a8:	00c00044 	movi	r3,1
   423ac:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   423b0:	01000044 	movi	r4,1
   423b4:	00536c00 	call	536c0 <usleep>
        if (SDA_READ(data_base))  // read data   
   423b8:	e0bffd17 	ldw	r2,-12(fp)
   423bc:	10800037 	ldwio	r2,0(r2)
   423c0:	10000326 	beq	r2,zero,423d0 <i2c_read+0x8c>
            Data |= 0x01;
   423c4:	e0bffa03 	ldbu	r2,-24(fp)
   423c8:	10800054 	ori	r2,r2,1
   423cc:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
   423d0:	e0bffc17 	ldw	r2,-16(fp)
   423d4:	0007883a 	mov	r3,zero
   423d8:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   423dc:	01000044 	movi	r4,1
   423e0:	00536c00 	call	536c0 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
   423e4:	e0bffb17 	ldw	r2,-20(fp)
   423e8:	10800044 	addi	r2,r2,1
   423ec:	e0bffb15 	stw	r2,-20(fp)
   423f0:	e0bffb17 	ldw	r2,-20(fp)
   423f4:	10800210 	cmplti	r2,r2,8
   423f8:	103fe71e 	bne	r2,zero,42398 <__alt_data_end+0xfffc3b98>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
   423fc:	e0bffc17 	ldw	r2,-16(fp)
   42400:	0007883a 	mov	r3,zero
   42404:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
   42408:	e0bffd17 	ldw	r2,-12(fp)
   4240c:	10800104 	addi	r2,r2,4
   42410:	1007883a 	mov	r3,r2
   42414:	00800044 	movi	r2,1
   42418:	18800035 	stwio	r2,0(r3)
    if (bAck)
   4241c:	e0bfff03 	ldbu	r2,-4(fp)
   42420:	10000426 	beq	r2,zero,42434 <i2c_read+0xf0>
        SDA_LOW(data_base);
   42424:	e0bffd17 	ldw	r2,-12(fp)
   42428:	0007883a 	mov	r3,zero
   4242c:	10c00035 	stwio	r3,0(r2)
   42430:	00000306 	br	42440 <i2c_read+0xfc>
    else
        SDA_HIGH(data_base);
   42434:	e0bffd17 	ldw	r2,-12(fp)
   42438:	00c00044 	movi	r3,1
   4243c:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
   42440:	e0bffc17 	ldw	r2,-16(fp)
   42444:	00c00044 	movi	r3,1
   42448:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
   4244c:	01000044 	movi	r4,1
   42450:	00536c00 	call	536c0 <usleep>
    SCL_LOW(clk_base); // clock low
   42454:	e0bffc17 	ldw	r2,-16(fp)
   42458:	0007883a 	mov	r3,zero
   4245c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   42460:	01000044 	movi	r4,1
   42464:	00536c00 	call	536c0 <usleep>
    SDA_LOW(data_base);  // data low
   42468:	e0bffd17 	ldw	r2,-12(fp)
   4246c:	0007883a 	mov	r3,zero
   42470:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
   42474:	01000044 	movi	r4,1
   42478:	00536c00 	call	536c0 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
   4247c:	e0bffe17 	ldw	r2,-8(fp)
   42480:	e0fffa03 	ldbu	r3,-24(fp)
   42484:	10c00005 	stb	r3,0(r2)
}
   42488:	0001883a 	nop
   4248c:	e037883a 	mov	sp,fp
   42490:	dfc00117 	ldw	ra,4(sp)
   42494:	df000017 	ldw	fp,0(sp)
   42498:	dec00204 	addi	sp,sp,8
   4249c:	f800283a 	ret

000424a0 <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
   424a0:	defffd04 	addi	sp,sp,-12
   424a4:	dfc00215 	stw	ra,8(sp)
   424a8:	df000115 	stw	fp,4(sp)
   424ac:	df000104 	addi	fp,sp,4
   424b0:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
   424b4:	e13fff17 	ldw	r4,-4(fp)
   424b8:	0043f000 	call	43f00 <printf>
}
   424bc:	0001883a 	nop
   424c0:	e037883a 	mov	sp,fp
   424c4:	dfc00117 	ldw	ra,4(sp)
   424c8:	df000017 	ldw	fp,0(sp)
   424cc:	dec00204 	addi	sp,sp,8
   424d0:	f800283a 	ret

000424d4 <myprintf>:





int myprintf(char *format, ...){
   424d4:	deff7804 	addi	sp,sp,-544
   424d8:	dfc08415 	stw	ra,528(sp)
   424dc:	df008315 	stw	fp,524(sp)
   424e0:	df008304 	addi	fp,sp,524
   424e4:	e13fff15 	stw	r4,-4(fp)
   424e8:	e1400215 	stw	r5,8(fp)
   424ec:	e1800315 	stw	r6,12(fp)
   424f0:	e1c00415 	stw	r7,16(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
   424f4:	e0800204 	addi	r2,fp,8
   424f8:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
   424fc:	e0fffe17 	ldw	r3,-8(fp)
   42500:	e0bf7e04 	addi	r2,fp,-520
   42504:	180f883a 	mov	r7,r3
   42508:	e1bfff17 	ldw	r6,-4(fp)
   4250c:	01408004 	movi	r5,512
   42510:	1009883a 	mov	r4,r2
   42514:	00487040 	call	48704 <vsnprintf>
   42518:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
   4251c:	e0bf7e04 	addi	r2,fp,-520
   42520:	1009883a 	mov	r4,r2
   42524:	00424a00 	call	424a0 <debug_output>

    return rc;    
   42528:	e0bf7d17 	ldw	r2,-524(fp)
}
   4252c:	e037883a 	mov	sp,fp
   42530:	dfc00117 	ldw	ra,4(sp)
   42534:	df000017 	ldw	fp,0(sp)
   42538:	dec00504 	addi	sp,sp,20
   4253c:	f800283a 	ret

00042540 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
   42540:	defff704 	addi	sp,sp,-36
   42544:	dfc00815 	stw	ra,32(sp)
   42548:	df000715 	stw	fp,28(sp)
   4254c:	df000704 	addi	fp,sp,28
   42550:	e13ffe15 	stw	r4,-8(fp)
   42554:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
   42558:	e03ff915 	stw	zero,-28(fp)
   4255c:	00001106 	br	425a4 <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
   42560:	e0bff917 	ldw	r2,-28(fp)
   42564:	e0fffe17 	ldw	r3,-8(fp)
   42568:	1885883a 	add	r2,r3,r2
   4256c:	10800003 	ldbu	r2,0(r2)
   42570:	10c03fcc 	andi	r3,r2,255
   42574:	e0bffa04 	addi	r2,fp,-24
   42578:	180d883a 	mov	r6,r3
   4257c:	01400174 	movhi	r5,5
   42580:	2956f604 	addi	r5,r5,23512
   42584:	1009883a 	mov	r4,r2
   42588:	00440680 	call	44068 <sprintf>
        DEBUG((szText));
   4258c:	e0bffa04 	addi	r2,fp,-24
   42590:	1009883a 	mov	r4,r2
   42594:	00424d40 	call	424d4 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
   42598:	e0bff917 	ldw	r2,-28(fp)
   4259c:	10800044 	addi	r2,r2,1
   425a0:	e0bff915 	stw	r2,-28(fp)
   425a4:	e0fff917 	ldw	r3,-28(fp)
   425a8:	e0bfff17 	ldw	r2,-4(fp)
   425ac:	18bfec16 	blt	r3,r2,42560 <__alt_data_end+0xfffc3d60>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
   425b0:	e0bfff17 	ldw	r2,-4(fp)
}
   425b4:	e037883a 	mov	sp,fp
   425b8:	dfc00117 	ldw	ra,4(sp)
   425bc:	df000017 	ldw	fp,0(sp)
   425c0:	dec00204 	addi	sp,sp,8
   425c4:	f800283a 	ret

000425c8 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
   425c8:	defff704 	addi	sp,sp,-36
   425cc:	dfc00815 	stw	ra,32(sp)
   425d0:	df000715 	stw	fp,28(sp)
   425d4:	df000704 	addi	fp,sp,28
   425d8:	e13ffe15 	stw	r4,-8(fp)
   425dc:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
   425e0:	e03ff915 	stw	zero,-28(fp)
   425e4:	00001306 	br	42634 <myprintf_dwordarray+0x6c>
        sprintf(szText, "[%08X]", *(pArray+i));
   425e8:	e0bff917 	ldw	r2,-28(fp)
   425ec:	1085883a 	add	r2,r2,r2
   425f0:	1085883a 	add	r2,r2,r2
   425f4:	1007883a 	mov	r3,r2
   425f8:	e0bffe17 	ldw	r2,-8(fp)
   425fc:	10c5883a 	add	r2,r2,r3
   42600:	10c00017 	ldw	r3,0(r2)
   42604:	e0bffa04 	addi	r2,fp,-24
   42608:	180d883a 	mov	r6,r3
   4260c:	01400174 	movhi	r5,5
   42610:	2956f804 	addi	r5,r5,23520
   42614:	1009883a 	mov	r4,r2
   42618:	00440680 	call	44068 <sprintf>
        DEBUG((szText));
   4261c:	e0bffa04 	addi	r2,fp,-24
   42620:	1009883a 	mov	r4,r2
   42624:	00424d40 	call	424d4 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
   42628:	e0bff917 	ldw	r2,-28(fp)
   4262c:	10800044 	addi	r2,r2,1
   42630:	e0bff915 	stw	r2,-28(fp)
   42634:	e0fff917 	ldw	r3,-28(fp)
   42638:	e0bfff17 	ldw	r2,-4(fp)
   4263c:	18bfea16 	blt	r3,r2,425e8 <__alt_data_end+0xfffc3de8>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
   42640:	e0bfff17 	ldw	r2,-4(fp)
}
   42644:	e037883a 	mov	sp,fp
   42648:	dfc00117 	ldw	ra,4(sp)
   4264c:	df000017 	ldw	fp,0(sp)
   42650:	dec00204 	addi	sp,sp,8
   42654:	f800283a 	ret

00042658 <__floatsisf>:
   42658:	defffd04 	addi	sp,sp,-12
   4265c:	dfc00215 	stw	ra,8(sp)
   42660:	dc400115 	stw	r17,4(sp)
   42664:	dc000015 	stw	r16,0(sp)
   42668:	20003526 	beq	r4,zero,42740 <__floatsisf+0xe8>
   4266c:	2021883a 	mov	r16,r4
   42670:	2022d7fa 	srli	r17,r4,31
   42674:	20003616 	blt	r4,zero,42750 <__floatsisf+0xf8>
   42678:	8009883a 	mov	r4,r16
   4267c:	0043cb80 	call	43cb8 <__clzsi2>
   42680:	00c02784 	movi	r3,158
   42684:	1887c83a 	sub	r3,r3,r2
   42688:	01002584 	movi	r4,150
   4268c:	20c01416 	blt	r4,r3,426e0 <__floatsisf+0x88>
   42690:	20c9c83a 	sub	r4,r4,r3
   42694:	8120983a 	sll	r16,r16,r4
   42698:	00802034 	movhi	r2,128
   4269c:	10bfffc4 	addi	r2,r2,-1
   426a0:	8809883a 	mov	r4,r17
   426a4:	80a0703a 	and	r16,r16,r2
   426a8:	18803fcc 	andi	r2,r3,255
   426ac:	100695fa 	slli	r3,r2,23
   426b0:	20803fcc 	andi	r2,r4,255
   426b4:	100897fa 	slli	r4,r2,31
   426b8:	00802034 	movhi	r2,128
   426bc:	10bfffc4 	addi	r2,r2,-1
   426c0:	8084703a 	and	r2,r16,r2
   426c4:	10c4b03a 	or	r2,r2,r3
   426c8:	1104b03a 	or	r2,r2,r4
   426cc:	dfc00217 	ldw	ra,8(sp)
   426d0:	dc400117 	ldw	r17,4(sp)
   426d4:	dc000017 	ldw	r16,0(sp)
   426d8:	dec00304 	addi	sp,sp,12
   426dc:	f800283a 	ret
   426e0:	01002644 	movi	r4,153
   426e4:	20c01c16 	blt	r4,r3,42758 <__floatsisf+0x100>
   426e8:	20c9c83a 	sub	r4,r4,r3
   426ec:	8120983a 	sll	r16,r16,r4
   426f0:	013f0034 	movhi	r4,64512
   426f4:	213fffc4 	addi	r4,r4,-1
   426f8:	814001cc 	andi	r5,r16,7
   426fc:	8108703a 	and	r4,r16,r4
   42700:	28000426 	beq	r5,zero,42714 <__floatsisf+0xbc>
   42704:	840003cc 	andi	r16,r16,15
   42708:	01400104 	movi	r5,4
   4270c:	81400126 	beq	r16,r5,42714 <__floatsisf+0xbc>
   42710:	2149883a 	add	r4,r4,r5
   42714:	2141002c 	andhi	r5,r4,1024
   42718:	28000526 	beq	r5,zero,42730 <__floatsisf+0xd8>
   4271c:	00c027c4 	movi	r3,159
   42720:	1887c83a 	sub	r3,r3,r2
   42724:	00bf0034 	movhi	r2,64512
   42728:	10bfffc4 	addi	r2,r2,-1
   4272c:	2088703a 	and	r4,r4,r2
   42730:	202091ba 	slli	r16,r4,6
   42734:	8809883a 	mov	r4,r17
   42738:	8020d27a 	srli	r16,r16,9
   4273c:	003fda06 	br	426a8 <__alt_data_end+0xfffc3ea8>
   42740:	0009883a 	mov	r4,zero
   42744:	0007883a 	mov	r3,zero
   42748:	0021883a 	mov	r16,zero
   4274c:	003fd606 	br	426a8 <__alt_data_end+0xfffc3ea8>
   42750:	0121c83a 	sub	r16,zero,r4
   42754:	003fc806 	br	42678 <__alt_data_end+0xfffc3e78>
   42758:	01002e44 	movi	r4,185
   4275c:	20c9c83a 	sub	r4,r4,r3
   42760:	01400144 	movi	r5,5
   42764:	8108983a 	sll	r4,r16,r4
   42768:	288bc83a 	sub	r5,r5,r2
   4276c:	8160d83a 	srl	r16,r16,r5
   42770:	2008c03a 	cmpne	r4,r4,zero
   42774:	8120b03a 	or	r16,r16,r4
   42778:	003fdd06 	br	426f0 <__alt_data_end+0xfffc3ef0>

0004277c <__floatunsisf>:
   4277c:	defffe04 	addi	sp,sp,-8
   42780:	dfc00115 	stw	ra,4(sp)
   42784:	dc000015 	stw	r16,0(sp)
   42788:	20002c26 	beq	r4,zero,4283c <__floatunsisf+0xc0>
   4278c:	2021883a 	mov	r16,r4
   42790:	0043cb80 	call	43cb8 <__clzsi2>
   42794:	00c02784 	movi	r3,158
   42798:	1887c83a 	sub	r3,r3,r2
   4279c:	01002584 	movi	r4,150
   427a0:	20c00f16 	blt	r4,r3,427e0 <__floatunsisf+0x64>
   427a4:	20c9c83a 	sub	r4,r4,r3
   427a8:	8108983a 	sll	r4,r16,r4
   427ac:	00802034 	movhi	r2,128
   427b0:	10bfffc4 	addi	r2,r2,-1
   427b4:	2088703a 	and	r4,r4,r2
   427b8:	18803fcc 	andi	r2,r3,255
   427bc:	100695fa 	slli	r3,r2,23
   427c0:	00802034 	movhi	r2,128
   427c4:	10bfffc4 	addi	r2,r2,-1
   427c8:	2084703a 	and	r2,r4,r2
   427cc:	10c4b03a 	or	r2,r2,r3
   427d0:	dfc00117 	ldw	ra,4(sp)
   427d4:	dc000017 	ldw	r16,0(sp)
   427d8:	dec00204 	addi	sp,sp,8
   427dc:	f800283a 	ret
   427e0:	01002644 	movi	r4,153
   427e4:	20c01816 	blt	r4,r3,42848 <__floatunsisf+0xcc>
   427e8:	20c9c83a 	sub	r4,r4,r3
   427ec:	8108983a 	sll	r4,r16,r4
   427f0:	017f0034 	movhi	r5,64512
   427f4:	297fffc4 	addi	r5,r5,-1
   427f8:	218001cc 	andi	r6,r4,7
   427fc:	214a703a 	and	r5,r4,r5
   42800:	30000426 	beq	r6,zero,42814 <__floatunsisf+0x98>
   42804:	210003cc 	andi	r4,r4,15
   42808:	01800104 	movi	r6,4
   4280c:	21800126 	beq	r4,r6,42814 <__floatunsisf+0x98>
   42810:	298b883a 	add	r5,r5,r6
   42814:	2901002c 	andhi	r4,r5,1024
   42818:	20000526 	beq	r4,zero,42830 <__floatunsisf+0xb4>
   4281c:	00c027c4 	movi	r3,159
   42820:	1887c83a 	sub	r3,r3,r2
   42824:	00bf0034 	movhi	r2,64512
   42828:	10bfffc4 	addi	r2,r2,-1
   4282c:	288a703a 	and	r5,r5,r2
   42830:	280891ba 	slli	r4,r5,6
   42834:	2008d27a 	srli	r4,r4,9
   42838:	003fdf06 	br	427b8 <__alt_data_end+0xfffc3fb8>
   4283c:	0007883a 	mov	r3,zero
   42840:	0009883a 	mov	r4,zero
   42844:	003fdc06 	br	427b8 <__alt_data_end+0xfffc3fb8>
   42848:	01402e44 	movi	r5,185
   4284c:	28cbc83a 	sub	r5,r5,r3
   42850:	01000144 	movi	r4,5
   42854:	2089c83a 	sub	r4,r4,r2
   42858:	814a983a 	sll	r5,r16,r5
   4285c:	8108d83a 	srl	r4,r16,r4
   42860:	2820c03a 	cmpne	r16,r5,zero
   42864:	2408b03a 	or	r4,r4,r16
   42868:	003fe106 	br	427f0 <__alt_data_end+0xfffc3ff0>

0004286c <__adddf3>:
   4286c:	02c00434 	movhi	r11,16
   42870:	5affffc4 	addi	r11,r11,-1
   42874:	2806d7fa 	srli	r3,r5,31
   42878:	2ad4703a 	and	r10,r5,r11
   4287c:	3ad2703a 	and	r9,r7,r11
   42880:	3804d53a 	srli	r2,r7,20
   42884:	3018d77a 	srli	r12,r6,29
   42888:	280ad53a 	srli	r5,r5,20
   4288c:	501490fa 	slli	r10,r10,3
   42890:	2010d77a 	srli	r8,r4,29
   42894:	481290fa 	slli	r9,r9,3
   42898:	380ed7fa 	srli	r7,r7,31
   4289c:	defffb04 	addi	sp,sp,-20
   428a0:	dc800215 	stw	r18,8(sp)
   428a4:	dc400115 	stw	r17,4(sp)
   428a8:	dc000015 	stw	r16,0(sp)
   428ac:	dfc00415 	stw	ra,16(sp)
   428b0:	dcc00315 	stw	r19,12(sp)
   428b4:	1c803fcc 	andi	r18,r3,255
   428b8:	2c01ffcc 	andi	r16,r5,2047
   428bc:	5210b03a 	or	r8,r10,r8
   428c0:	202290fa 	slli	r17,r4,3
   428c4:	1081ffcc 	andi	r2,r2,2047
   428c8:	4b12b03a 	or	r9,r9,r12
   428cc:	300c90fa 	slli	r6,r6,3
   428d0:	91c07526 	beq	r18,r7,42aa8 <__adddf3+0x23c>
   428d4:	8087c83a 	sub	r3,r16,r2
   428d8:	00c0ab0e 	bge	zero,r3,42b88 <__adddf3+0x31c>
   428dc:	10002a1e 	bne	r2,zero,42988 <__adddf3+0x11c>
   428e0:	4984b03a 	or	r2,r9,r6
   428e4:	1000961e 	bne	r2,zero,42b40 <__adddf3+0x2d4>
   428e8:	888001cc 	andi	r2,r17,7
   428ec:	10000726 	beq	r2,zero,4290c <__adddf3+0xa0>
   428f0:	888003cc 	andi	r2,r17,15
   428f4:	00c00104 	movi	r3,4
   428f8:	10c00426 	beq	r2,r3,4290c <__adddf3+0xa0>
   428fc:	88c7883a 	add	r3,r17,r3
   42900:	1c63803a 	cmpltu	r17,r3,r17
   42904:	4451883a 	add	r8,r8,r17
   42908:	1823883a 	mov	r17,r3
   4290c:	4080202c 	andhi	r2,r8,128
   42910:	10005926 	beq	r2,zero,42a78 <__adddf3+0x20c>
   42914:	84000044 	addi	r16,r16,1
   42918:	0081ffc4 	movi	r2,2047
   4291c:	8080ba26 	beq	r16,r2,42c08 <__adddf3+0x39c>
   42920:	00bfe034 	movhi	r2,65408
   42924:	10bfffc4 	addi	r2,r2,-1
   42928:	4090703a 	and	r8,r8,r2
   4292c:	4004977a 	slli	r2,r8,29
   42930:	4010927a 	slli	r8,r8,9
   42934:	8822d0fa 	srli	r17,r17,3
   42938:	8401ffcc 	andi	r16,r16,2047
   4293c:	4010d33a 	srli	r8,r8,12
   42940:	9007883a 	mov	r3,r18
   42944:	1444b03a 	or	r2,r2,r17
   42948:	8401ffcc 	andi	r16,r16,2047
   4294c:	8020953a 	slli	r16,r16,20
   42950:	18c03fcc 	andi	r3,r3,255
   42954:	01000434 	movhi	r4,16
   42958:	213fffc4 	addi	r4,r4,-1
   4295c:	180697fa 	slli	r3,r3,31
   42960:	4110703a 	and	r8,r8,r4
   42964:	4410b03a 	or	r8,r8,r16
   42968:	40c6b03a 	or	r3,r8,r3
   4296c:	dfc00417 	ldw	ra,16(sp)
   42970:	dcc00317 	ldw	r19,12(sp)
   42974:	dc800217 	ldw	r18,8(sp)
   42978:	dc400117 	ldw	r17,4(sp)
   4297c:	dc000017 	ldw	r16,0(sp)
   42980:	dec00504 	addi	sp,sp,20
   42984:	f800283a 	ret
   42988:	0081ffc4 	movi	r2,2047
   4298c:	80bfd626 	beq	r16,r2,428e8 <__alt_data_end+0xfffc40e8>
   42990:	4a402034 	orhi	r9,r9,128
   42994:	00800e04 	movi	r2,56
   42998:	10c09f16 	blt	r2,r3,42c18 <__adddf3+0x3ac>
   4299c:	008007c4 	movi	r2,31
   429a0:	10c0c216 	blt	r2,r3,42cac <__adddf3+0x440>
   429a4:	00800804 	movi	r2,32
   429a8:	10c5c83a 	sub	r2,r2,r3
   429ac:	488a983a 	sll	r5,r9,r2
   429b0:	30c8d83a 	srl	r4,r6,r3
   429b4:	3084983a 	sll	r2,r6,r2
   429b8:	48c6d83a 	srl	r3,r9,r3
   429bc:	290cb03a 	or	r6,r5,r4
   429c0:	1004c03a 	cmpne	r2,r2,zero
   429c4:	308cb03a 	or	r6,r6,r2
   429c8:	898dc83a 	sub	r6,r17,r6
   429cc:	89a3803a 	cmpltu	r17,r17,r6
   429d0:	40d1c83a 	sub	r8,r8,r3
   429d4:	4451c83a 	sub	r8,r8,r17
   429d8:	3023883a 	mov	r17,r6
   429dc:	4080202c 	andhi	r2,r8,128
   429e0:	10002326 	beq	r2,zero,42a70 <__adddf3+0x204>
   429e4:	04c02034 	movhi	r19,128
   429e8:	9cffffc4 	addi	r19,r19,-1
   429ec:	44e6703a 	and	r19,r8,r19
   429f0:	98007626 	beq	r19,zero,42bcc <__adddf3+0x360>
   429f4:	9809883a 	mov	r4,r19
   429f8:	0043cb80 	call	43cb8 <__clzsi2>
   429fc:	10fffe04 	addi	r3,r2,-8
   42a00:	010007c4 	movi	r4,31
   42a04:	20c07716 	blt	r4,r3,42be4 <__adddf3+0x378>
   42a08:	00800804 	movi	r2,32
   42a0c:	10c5c83a 	sub	r2,r2,r3
   42a10:	8884d83a 	srl	r2,r17,r2
   42a14:	98d0983a 	sll	r8,r19,r3
   42a18:	88e2983a 	sll	r17,r17,r3
   42a1c:	1204b03a 	or	r2,r2,r8
   42a20:	1c007416 	blt	r3,r16,42bf4 <__adddf3+0x388>
   42a24:	1c21c83a 	sub	r16,r3,r16
   42a28:	82000044 	addi	r8,r16,1
   42a2c:	00c007c4 	movi	r3,31
   42a30:	1a009116 	blt	r3,r8,42c78 <__adddf3+0x40c>
   42a34:	00c00804 	movi	r3,32
   42a38:	1a07c83a 	sub	r3,r3,r8
   42a3c:	8a08d83a 	srl	r4,r17,r8
   42a40:	88e2983a 	sll	r17,r17,r3
   42a44:	10c6983a 	sll	r3,r2,r3
   42a48:	1210d83a 	srl	r8,r2,r8
   42a4c:	8804c03a 	cmpne	r2,r17,zero
   42a50:	1906b03a 	or	r3,r3,r4
   42a54:	18a2b03a 	or	r17,r3,r2
   42a58:	0021883a 	mov	r16,zero
   42a5c:	003fa206 	br	428e8 <__alt_data_end+0xfffc40e8>
   42a60:	1890b03a 	or	r8,r3,r2
   42a64:	40017d26 	beq	r8,zero,4305c <__adddf3+0x7f0>
   42a68:	1011883a 	mov	r8,r2
   42a6c:	1823883a 	mov	r17,r3
   42a70:	888001cc 	andi	r2,r17,7
   42a74:	103f9e1e 	bne	r2,zero,428f0 <__alt_data_end+0xfffc40f0>
   42a78:	4004977a 	slli	r2,r8,29
   42a7c:	8822d0fa 	srli	r17,r17,3
   42a80:	4010d0fa 	srli	r8,r8,3
   42a84:	9007883a 	mov	r3,r18
   42a88:	1444b03a 	or	r2,r2,r17
   42a8c:	0101ffc4 	movi	r4,2047
   42a90:	81002426 	beq	r16,r4,42b24 <__adddf3+0x2b8>
   42a94:	8120703a 	and	r16,r16,r4
   42a98:	01000434 	movhi	r4,16
   42a9c:	213fffc4 	addi	r4,r4,-1
   42aa0:	4110703a 	and	r8,r8,r4
   42aa4:	003fa806 	br	42948 <__alt_data_end+0xfffc4148>
   42aa8:	8089c83a 	sub	r4,r16,r2
   42aac:	01005e0e 	bge	zero,r4,42c28 <__adddf3+0x3bc>
   42ab0:	10002b26 	beq	r2,zero,42b60 <__adddf3+0x2f4>
   42ab4:	0081ffc4 	movi	r2,2047
   42ab8:	80bf8b26 	beq	r16,r2,428e8 <__alt_data_end+0xfffc40e8>
   42abc:	4a402034 	orhi	r9,r9,128
   42ac0:	00800e04 	movi	r2,56
   42ac4:	1100a40e 	bge	r2,r4,42d58 <__adddf3+0x4ec>
   42ac8:	498cb03a 	or	r6,r9,r6
   42acc:	300ac03a 	cmpne	r5,r6,zero
   42ad0:	0013883a 	mov	r9,zero
   42ad4:	2c4b883a 	add	r5,r5,r17
   42ad8:	2c63803a 	cmpltu	r17,r5,r17
   42adc:	4a11883a 	add	r8,r9,r8
   42ae0:	8a11883a 	add	r8,r17,r8
   42ae4:	2823883a 	mov	r17,r5
   42ae8:	4080202c 	andhi	r2,r8,128
   42aec:	103fe026 	beq	r2,zero,42a70 <__alt_data_end+0xfffc4270>
   42af0:	84000044 	addi	r16,r16,1
   42af4:	0081ffc4 	movi	r2,2047
   42af8:	8080d226 	beq	r16,r2,42e44 <__adddf3+0x5d8>
   42afc:	00bfe034 	movhi	r2,65408
   42b00:	10bfffc4 	addi	r2,r2,-1
   42b04:	4090703a 	and	r8,r8,r2
   42b08:	880ad07a 	srli	r5,r17,1
   42b0c:	400897fa 	slli	r4,r8,31
   42b10:	88c0004c 	andi	r3,r17,1
   42b14:	28e2b03a 	or	r17,r5,r3
   42b18:	4010d07a 	srli	r8,r8,1
   42b1c:	2462b03a 	or	r17,r4,r17
   42b20:	003f7106 	br	428e8 <__alt_data_end+0xfffc40e8>
   42b24:	4088b03a 	or	r4,r8,r2
   42b28:	20014526 	beq	r4,zero,43040 <__adddf3+0x7d4>
   42b2c:	01000434 	movhi	r4,16
   42b30:	42000234 	orhi	r8,r8,8
   42b34:	213fffc4 	addi	r4,r4,-1
   42b38:	4110703a 	and	r8,r8,r4
   42b3c:	003f8206 	br	42948 <__alt_data_end+0xfffc4148>
   42b40:	18ffffc4 	addi	r3,r3,-1
   42b44:	1800491e 	bne	r3,zero,42c6c <__adddf3+0x400>
   42b48:	898bc83a 	sub	r5,r17,r6
   42b4c:	8963803a 	cmpltu	r17,r17,r5
   42b50:	4251c83a 	sub	r8,r8,r9
   42b54:	4451c83a 	sub	r8,r8,r17
   42b58:	2823883a 	mov	r17,r5
   42b5c:	003f9f06 	br	429dc <__alt_data_end+0xfffc41dc>
   42b60:	4984b03a 	or	r2,r9,r6
   42b64:	103f6026 	beq	r2,zero,428e8 <__alt_data_end+0xfffc40e8>
   42b68:	213fffc4 	addi	r4,r4,-1
   42b6c:	2000931e 	bne	r4,zero,42dbc <__adddf3+0x550>
   42b70:	898d883a 	add	r6,r17,r6
   42b74:	3463803a 	cmpltu	r17,r6,r17
   42b78:	4251883a 	add	r8,r8,r9
   42b7c:	8a11883a 	add	r8,r17,r8
   42b80:	3023883a 	mov	r17,r6
   42b84:	003fd806 	br	42ae8 <__alt_data_end+0xfffc42e8>
   42b88:	1800541e 	bne	r3,zero,42cdc <__adddf3+0x470>
   42b8c:	80800044 	addi	r2,r16,1
   42b90:	1081ffcc 	andi	r2,r2,2047
   42b94:	00c00044 	movi	r3,1
   42b98:	1880a00e 	bge	r3,r2,42e1c <__adddf3+0x5b0>
   42b9c:	8989c83a 	sub	r4,r17,r6
   42ba0:	8905803a 	cmpltu	r2,r17,r4
   42ba4:	4267c83a 	sub	r19,r8,r9
   42ba8:	98a7c83a 	sub	r19,r19,r2
   42bac:	9880202c 	andhi	r2,r19,128
   42bb0:	10006326 	beq	r2,zero,42d40 <__adddf3+0x4d4>
   42bb4:	3463c83a 	sub	r17,r6,r17
   42bb8:	4a07c83a 	sub	r3,r9,r8
   42bbc:	344d803a 	cmpltu	r6,r6,r17
   42bc0:	19a7c83a 	sub	r19,r3,r6
   42bc4:	3825883a 	mov	r18,r7
   42bc8:	983f8a1e 	bne	r19,zero,429f4 <__alt_data_end+0xfffc41f4>
   42bcc:	8809883a 	mov	r4,r17
   42bd0:	0043cb80 	call	43cb8 <__clzsi2>
   42bd4:	10800804 	addi	r2,r2,32
   42bd8:	10fffe04 	addi	r3,r2,-8
   42bdc:	010007c4 	movi	r4,31
   42be0:	20ff890e 	bge	r4,r3,42a08 <__alt_data_end+0xfffc4208>
   42be4:	10bff604 	addi	r2,r2,-40
   42be8:	8884983a 	sll	r2,r17,r2
   42bec:	0023883a 	mov	r17,zero
   42bf0:	1c3f8c0e 	bge	r3,r16,42a24 <__alt_data_end+0xfffc4224>
   42bf4:	023fe034 	movhi	r8,65408
   42bf8:	423fffc4 	addi	r8,r8,-1
   42bfc:	80e1c83a 	sub	r16,r16,r3
   42c00:	1210703a 	and	r8,r2,r8
   42c04:	003f3806 	br	428e8 <__alt_data_end+0xfffc40e8>
   42c08:	9007883a 	mov	r3,r18
   42c0c:	0011883a 	mov	r8,zero
   42c10:	0005883a 	mov	r2,zero
   42c14:	003f4c06 	br	42948 <__alt_data_end+0xfffc4148>
   42c18:	498cb03a 	or	r6,r9,r6
   42c1c:	300cc03a 	cmpne	r6,r6,zero
   42c20:	0007883a 	mov	r3,zero
   42c24:	003f6806 	br	429c8 <__alt_data_end+0xfffc41c8>
   42c28:	20009c1e 	bne	r4,zero,42e9c <__adddf3+0x630>
   42c2c:	80800044 	addi	r2,r16,1
   42c30:	1141ffcc 	andi	r5,r2,2047
   42c34:	01000044 	movi	r4,1
   42c38:	2140670e 	bge	r4,r5,42dd8 <__adddf3+0x56c>
   42c3c:	0101ffc4 	movi	r4,2047
   42c40:	11007f26 	beq	r2,r4,42e40 <__adddf3+0x5d4>
   42c44:	898d883a 	add	r6,r17,r6
   42c48:	4247883a 	add	r3,r8,r9
   42c4c:	3451803a 	cmpltu	r8,r6,r17
   42c50:	40d1883a 	add	r8,r8,r3
   42c54:	402297fa 	slli	r17,r8,31
   42c58:	300cd07a 	srli	r6,r6,1
   42c5c:	4010d07a 	srli	r8,r8,1
   42c60:	1021883a 	mov	r16,r2
   42c64:	89a2b03a 	or	r17,r17,r6
   42c68:	003f1f06 	br	428e8 <__alt_data_end+0xfffc40e8>
   42c6c:	0081ffc4 	movi	r2,2047
   42c70:	80bf481e 	bne	r16,r2,42994 <__alt_data_end+0xfffc4194>
   42c74:	003f1c06 	br	428e8 <__alt_data_end+0xfffc40e8>
   42c78:	843ff844 	addi	r16,r16,-31
   42c7c:	01000804 	movi	r4,32
   42c80:	1406d83a 	srl	r3,r2,r16
   42c84:	41005026 	beq	r8,r4,42dc8 <__adddf3+0x55c>
   42c88:	01001004 	movi	r4,64
   42c8c:	2211c83a 	sub	r8,r4,r8
   42c90:	1204983a 	sll	r2,r2,r8
   42c94:	88a2b03a 	or	r17,r17,r2
   42c98:	8822c03a 	cmpne	r17,r17,zero
   42c9c:	1c62b03a 	or	r17,r3,r17
   42ca0:	0011883a 	mov	r8,zero
   42ca4:	0021883a 	mov	r16,zero
   42ca8:	003f7106 	br	42a70 <__alt_data_end+0xfffc4270>
   42cac:	193ff804 	addi	r4,r3,-32
   42cb0:	00800804 	movi	r2,32
   42cb4:	4908d83a 	srl	r4,r9,r4
   42cb8:	18804526 	beq	r3,r2,42dd0 <__adddf3+0x564>
   42cbc:	00801004 	movi	r2,64
   42cc0:	10c5c83a 	sub	r2,r2,r3
   42cc4:	4886983a 	sll	r3,r9,r2
   42cc8:	198cb03a 	or	r6,r3,r6
   42ccc:	300cc03a 	cmpne	r6,r6,zero
   42cd0:	218cb03a 	or	r6,r4,r6
   42cd4:	0007883a 	mov	r3,zero
   42cd8:	003f3b06 	br	429c8 <__alt_data_end+0xfffc41c8>
   42cdc:	80002a26 	beq	r16,zero,42d88 <__adddf3+0x51c>
   42ce0:	0101ffc4 	movi	r4,2047
   42ce4:	11006826 	beq	r2,r4,42e88 <__adddf3+0x61c>
   42ce8:	00c7c83a 	sub	r3,zero,r3
   42cec:	42002034 	orhi	r8,r8,128
   42cf0:	01000e04 	movi	r4,56
   42cf4:	20c07c16 	blt	r4,r3,42ee8 <__adddf3+0x67c>
   42cf8:	010007c4 	movi	r4,31
   42cfc:	20c0da16 	blt	r4,r3,43068 <__adddf3+0x7fc>
   42d00:	01000804 	movi	r4,32
   42d04:	20c9c83a 	sub	r4,r4,r3
   42d08:	4114983a 	sll	r10,r8,r4
   42d0c:	88cad83a 	srl	r5,r17,r3
   42d10:	8908983a 	sll	r4,r17,r4
   42d14:	40c6d83a 	srl	r3,r8,r3
   42d18:	5162b03a 	or	r17,r10,r5
   42d1c:	2008c03a 	cmpne	r4,r4,zero
   42d20:	8922b03a 	or	r17,r17,r4
   42d24:	3463c83a 	sub	r17,r6,r17
   42d28:	48c7c83a 	sub	r3,r9,r3
   42d2c:	344d803a 	cmpltu	r6,r6,r17
   42d30:	1991c83a 	sub	r8,r3,r6
   42d34:	1021883a 	mov	r16,r2
   42d38:	3825883a 	mov	r18,r7
   42d3c:	003f2706 	br	429dc <__alt_data_end+0xfffc41dc>
   42d40:	24d0b03a 	or	r8,r4,r19
   42d44:	40001b1e 	bne	r8,zero,42db4 <__adddf3+0x548>
   42d48:	0005883a 	mov	r2,zero
   42d4c:	0007883a 	mov	r3,zero
   42d50:	0021883a 	mov	r16,zero
   42d54:	003f4d06 	br	42a8c <__alt_data_end+0xfffc428c>
   42d58:	008007c4 	movi	r2,31
   42d5c:	11003c16 	blt	r2,r4,42e50 <__adddf3+0x5e4>
   42d60:	00800804 	movi	r2,32
   42d64:	1105c83a 	sub	r2,r2,r4
   42d68:	488e983a 	sll	r7,r9,r2
   42d6c:	310ad83a 	srl	r5,r6,r4
   42d70:	3084983a 	sll	r2,r6,r2
   42d74:	4912d83a 	srl	r9,r9,r4
   42d78:	394ab03a 	or	r5,r7,r5
   42d7c:	1004c03a 	cmpne	r2,r2,zero
   42d80:	288ab03a 	or	r5,r5,r2
   42d84:	003f5306 	br	42ad4 <__alt_data_end+0xfffc42d4>
   42d88:	4448b03a 	or	r4,r8,r17
   42d8c:	20003e26 	beq	r4,zero,42e88 <__adddf3+0x61c>
   42d90:	00c6303a 	nor	r3,zero,r3
   42d94:	18003a1e 	bne	r3,zero,42e80 <__adddf3+0x614>
   42d98:	3463c83a 	sub	r17,r6,r17
   42d9c:	4a07c83a 	sub	r3,r9,r8
   42da0:	344d803a 	cmpltu	r6,r6,r17
   42da4:	1991c83a 	sub	r8,r3,r6
   42da8:	1021883a 	mov	r16,r2
   42dac:	3825883a 	mov	r18,r7
   42db0:	003f0a06 	br	429dc <__alt_data_end+0xfffc41dc>
   42db4:	2023883a 	mov	r17,r4
   42db8:	003f0d06 	br	429f0 <__alt_data_end+0xfffc41f0>
   42dbc:	0081ffc4 	movi	r2,2047
   42dc0:	80bf3f1e 	bne	r16,r2,42ac0 <__alt_data_end+0xfffc42c0>
   42dc4:	003ec806 	br	428e8 <__alt_data_end+0xfffc40e8>
   42dc8:	0005883a 	mov	r2,zero
   42dcc:	003fb106 	br	42c94 <__alt_data_end+0xfffc4494>
   42dd0:	0007883a 	mov	r3,zero
   42dd4:	003fbc06 	br	42cc8 <__alt_data_end+0xfffc44c8>
   42dd8:	4444b03a 	or	r2,r8,r17
   42ddc:	8000871e 	bne	r16,zero,42ffc <__adddf3+0x790>
   42de0:	1000ba26 	beq	r2,zero,430cc <__adddf3+0x860>
   42de4:	4984b03a 	or	r2,r9,r6
   42de8:	103ebf26 	beq	r2,zero,428e8 <__alt_data_end+0xfffc40e8>
   42dec:	8985883a 	add	r2,r17,r6
   42df0:	4247883a 	add	r3,r8,r9
   42df4:	1451803a 	cmpltu	r8,r2,r17
   42df8:	40d1883a 	add	r8,r8,r3
   42dfc:	40c0202c 	andhi	r3,r8,128
   42e00:	1023883a 	mov	r17,r2
   42e04:	183f1a26 	beq	r3,zero,42a70 <__alt_data_end+0xfffc4270>
   42e08:	00bfe034 	movhi	r2,65408
   42e0c:	10bfffc4 	addi	r2,r2,-1
   42e10:	2021883a 	mov	r16,r4
   42e14:	4090703a 	and	r8,r8,r2
   42e18:	003eb306 	br	428e8 <__alt_data_end+0xfffc40e8>
   42e1c:	4444b03a 	or	r2,r8,r17
   42e20:	8000291e 	bne	r16,zero,42ec8 <__adddf3+0x65c>
   42e24:	10004b1e 	bne	r2,zero,42f54 <__adddf3+0x6e8>
   42e28:	4990b03a 	or	r8,r9,r6
   42e2c:	40008b26 	beq	r8,zero,4305c <__adddf3+0x7f0>
   42e30:	4811883a 	mov	r8,r9
   42e34:	3023883a 	mov	r17,r6
   42e38:	3825883a 	mov	r18,r7
   42e3c:	003eaa06 	br	428e8 <__alt_data_end+0xfffc40e8>
   42e40:	1021883a 	mov	r16,r2
   42e44:	0011883a 	mov	r8,zero
   42e48:	0005883a 	mov	r2,zero
   42e4c:	003f0f06 	br	42a8c <__alt_data_end+0xfffc428c>
   42e50:	217ff804 	addi	r5,r4,-32
   42e54:	00800804 	movi	r2,32
   42e58:	494ad83a 	srl	r5,r9,r5
   42e5c:	20807d26 	beq	r4,r2,43054 <__adddf3+0x7e8>
   42e60:	00801004 	movi	r2,64
   42e64:	1109c83a 	sub	r4,r2,r4
   42e68:	4912983a 	sll	r9,r9,r4
   42e6c:	498cb03a 	or	r6,r9,r6
   42e70:	300cc03a 	cmpne	r6,r6,zero
   42e74:	298ab03a 	or	r5,r5,r6
   42e78:	0013883a 	mov	r9,zero
   42e7c:	003f1506 	br	42ad4 <__alt_data_end+0xfffc42d4>
   42e80:	0101ffc4 	movi	r4,2047
   42e84:	113f9a1e 	bne	r2,r4,42cf0 <__alt_data_end+0xfffc44f0>
   42e88:	4811883a 	mov	r8,r9
   42e8c:	3023883a 	mov	r17,r6
   42e90:	1021883a 	mov	r16,r2
   42e94:	3825883a 	mov	r18,r7
   42e98:	003e9306 	br	428e8 <__alt_data_end+0xfffc40e8>
   42e9c:	8000161e 	bne	r16,zero,42ef8 <__adddf3+0x68c>
   42ea0:	444ab03a 	or	r5,r8,r17
   42ea4:	28005126 	beq	r5,zero,42fec <__adddf3+0x780>
   42ea8:	0108303a 	nor	r4,zero,r4
   42eac:	20004d1e 	bne	r4,zero,42fe4 <__adddf3+0x778>
   42eb0:	89a3883a 	add	r17,r17,r6
   42eb4:	4253883a 	add	r9,r8,r9
   42eb8:	898d803a 	cmpltu	r6,r17,r6
   42ebc:	3251883a 	add	r8,r6,r9
   42ec0:	1021883a 	mov	r16,r2
   42ec4:	003f0806 	br	42ae8 <__alt_data_end+0xfffc42e8>
   42ec8:	1000301e 	bne	r2,zero,42f8c <__adddf3+0x720>
   42ecc:	4984b03a 	or	r2,r9,r6
   42ed0:	10007126 	beq	r2,zero,43098 <__adddf3+0x82c>
   42ed4:	4811883a 	mov	r8,r9
   42ed8:	3023883a 	mov	r17,r6
   42edc:	3825883a 	mov	r18,r7
   42ee0:	0401ffc4 	movi	r16,2047
   42ee4:	003e8006 	br	428e8 <__alt_data_end+0xfffc40e8>
   42ee8:	4462b03a 	or	r17,r8,r17
   42eec:	8822c03a 	cmpne	r17,r17,zero
   42ef0:	0007883a 	mov	r3,zero
   42ef4:	003f8b06 	br	42d24 <__alt_data_end+0xfffc4524>
   42ef8:	0141ffc4 	movi	r5,2047
   42efc:	11403b26 	beq	r2,r5,42fec <__adddf3+0x780>
   42f00:	0109c83a 	sub	r4,zero,r4
   42f04:	42002034 	orhi	r8,r8,128
   42f08:	01400e04 	movi	r5,56
   42f0c:	29006716 	blt	r5,r4,430ac <__adddf3+0x840>
   42f10:	014007c4 	movi	r5,31
   42f14:	29007016 	blt	r5,r4,430d8 <__adddf3+0x86c>
   42f18:	01400804 	movi	r5,32
   42f1c:	290bc83a 	sub	r5,r5,r4
   42f20:	4154983a 	sll	r10,r8,r5
   42f24:	890ed83a 	srl	r7,r17,r4
   42f28:	894a983a 	sll	r5,r17,r5
   42f2c:	4108d83a 	srl	r4,r8,r4
   42f30:	51e2b03a 	or	r17,r10,r7
   42f34:	280ac03a 	cmpne	r5,r5,zero
   42f38:	8962b03a 	or	r17,r17,r5
   42f3c:	89a3883a 	add	r17,r17,r6
   42f40:	2253883a 	add	r9,r4,r9
   42f44:	898d803a 	cmpltu	r6,r17,r6
   42f48:	3251883a 	add	r8,r6,r9
   42f4c:	1021883a 	mov	r16,r2
   42f50:	003ee506 	br	42ae8 <__alt_data_end+0xfffc42e8>
   42f54:	4984b03a 	or	r2,r9,r6
   42f58:	103e6326 	beq	r2,zero,428e8 <__alt_data_end+0xfffc40e8>
   42f5c:	8987c83a 	sub	r3,r17,r6
   42f60:	88c9803a 	cmpltu	r4,r17,r3
   42f64:	4245c83a 	sub	r2,r8,r9
   42f68:	1105c83a 	sub	r2,r2,r4
   42f6c:	1100202c 	andhi	r4,r2,128
   42f70:	203ebb26 	beq	r4,zero,42a60 <__alt_data_end+0xfffc4260>
   42f74:	3463c83a 	sub	r17,r6,r17
   42f78:	4a07c83a 	sub	r3,r9,r8
   42f7c:	344d803a 	cmpltu	r6,r6,r17
   42f80:	1991c83a 	sub	r8,r3,r6
   42f84:	3825883a 	mov	r18,r7
   42f88:	003e5706 	br	428e8 <__alt_data_end+0xfffc40e8>
   42f8c:	4984b03a 	or	r2,r9,r6
   42f90:	10002e26 	beq	r2,zero,4304c <__adddf3+0x7e0>
   42f94:	4004d0fa 	srli	r2,r8,3
   42f98:	8822d0fa 	srli	r17,r17,3
   42f9c:	4010977a 	slli	r8,r8,29
   42fa0:	10c0022c 	andhi	r3,r2,8
   42fa4:	4462b03a 	or	r17,r8,r17
   42fa8:	18000826 	beq	r3,zero,42fcc <__adddf3+0x760>
   42fac:	4808d0fa 	srli	r4,r9,3
   42fb0:	20c0022c 	andhi	r3,r4,8
   42fb4:	1800051e 	bne	r3,zero,42fcc <__adddf3+0x760>
   42fb8:	300cd0fa 	srli	r6,r6,3
   42fbc:	4806977a 	slli	r3,r9,29
   42fc0:	2005883a 	mov	r2,r4
   42fc4:	3825883a 	mov	r18,r7
   42fc8:	19a2b03a 	or	r17,r3,r6
   42fcc:	8810d77a 	srli	r8,r17,29
   42fd0:	100490fa 	slli	r2,r2,3
   42fd4:	882290fa 	slli	r17,r17,3
   42fd8:	0401ffc4 	movi	r16,2047
   42fdc:	4090b03a 	or	r8,r8,r2
   42fe0:	003e4106 	br	428e8 <__alt_data_end+0xfffc40e8>
   42fe4:	0141ffc4 	movi	r5,2047
   42fe8:	117fc71e 	bne	r2,r5,42f08 <__alt_data_end+0xfffc4708>
   42fec:	4811883a 	mov	r8,r9
   42ff0:	3023883a 	mov	r17,r6
   42ff4:	1021883a 	mov	r16,r2
   42ff8:	003e3b06 	br	428e8 <__alt_data_end+0xfffc40e8>
   42ffc:	10002f26 	beq	r2,zero,430bc <__adddf3+0x850>
   43000:	4984b03a 	or	r2,r9,r6
   43004:	10001126 	beq	r2,zero,4304c <__adddf3+0x7e0>
   43008:	4004d0fa 	srli	r2,r8,3
   4300c:	8822d0fa 	srli	r17,r17,3
   43010:	4010977a 	slli	r8,r8,29
   43014:	10c0022c 	andhi	r3,r2,8
   43018:	4462b03a 	or	r17,r8,r17
   4301c:	183feb26 	beq	r3,zero,42fcc <__alt_data_end+0xfffc47cc>
   43020:	4808d0fa 	srli	r4,r9,3
   43024:	20c0022c 	andhi	r3,r4,8
   43028:	183fe81e 	bne	r3,zero,42fcc <__alt_data_end+0xfffc47cc>
   4302c:	300cd0fa 	srli	r6,r6,3
   43030:	4806977a 	slli	r3,r9,29
   43034:	2005883a 	mov	r2,r4
   43038:	19a2b03a 	or	r17,r3,r6
   4303c:	003fe306 	br	42fcc <__alt_data_end+0xfffc47cc>
   43040:	0011883a 	mov	r8,zero
   43044:	0005883a 	mov	r2,zero
   43048:	003e3f06 	br	42948 <__alt_data_end+0xfffc4148>
   4304c:	0401ffc4 	movi	r16,2047
   43050:	003e2506 	br	428e8 <__alt_data_end+0xfffc40e8>
   43054:	0013883a 	mov	r9,zero
   43058:	003f8406 	br	42e6c <__alt_data_end+0xfffc466c>
   4305c:	0005883a 	mov	r2,zero
   43060:	0007883a 	mov	r3,zero
   43064:	003e8906 	br	42a8c <__alt_data_end+0xfffc428c>
   43068:	197ff804 	addi	r5,r3,-32
   4306c:	01000804 	movi	r4,32
   43070:	414ad83a 	srl	r5,r8,r5
   43074:	19002426 	beq	r3,r4,43108 <__adddf3+0x89c>
   43078:	01001004 	movi	r4,64
   4307c:	20c7c83a 	sub	r3,r4,r3
   43080:	40c6983a 	sll	r3,r8,r3
   43084:	1c46b03a 	or	r3,r3,r17
   43088:	1806c03a 	cmpne	r3,r3,zero
   4308c:	28e2b03a 	or	r17,r5,r3
   43090:	0007883a 	mov	r3,zero
   43094:	003f2306 	br	42d24 <__alt_data_end+0xfffc4524>
   43098:	0007883a 	mov	r3,zero
   4309c:	5811883a 	mov	r8,r11
   430a0:	00bfffc4 	movi	r2,-1
   430a4:	0401ffc4 	movi	r16,2047
   430a8:	003e7806 	br	42a8c <__alt_data_end+0xfffc428c>
   430ac:	4462b03a 	or	r17,r8,r17
   430b0:	8822c03a 	cmpne	r17,r17,zero
   430b4:	0009883a 	mov	r4,zero
   430b8:	003fa006 	br	42f3c <__alt_data_end+0xfffc473c>
   430bc:	4811883a 	mov	r8,r9
   430c0:	3023883a 	mov	r17,r6
   430c4:	0401ffc4 	movi	r16,2047
   430c8:	003e0706 	br	428e8 <__alt_data_end+0xfffc40e8>
   430cc:	4811883a 	mov	r8,r9
   430d0:	3023883a 	mov	r17,r6
   430d4:	003e0406 	br	428e8 <__alt_data_end+0xfffc40e8>
   430d8:	21fff804 	addi	r7,r4,-32
   430dc:	01400804 	movi	r5,32
   430e0:	41ced83a 	srl	r7,r8,r7
   430e4:	21400a26 	beq	r4,r5,43110 <__adddf3+0x8a4>
   430e8:	01401004 	movi	r5,64
   430ec:	2909c83a 	sub	r4,r5,r4
   430f0:	4108983a 	sll	r4,r8,r4
   430f4:	2448b03a 	or	r4,r4,r17
   430f8:	2008c03a 	cmpne	r4,r4,zero
   430fc:	3922b03a 	or	r17,r7,r4
   43100:	0009883a 	mov	r4,zero
   43104:	003f8d06 	br	42f3c <__alt_data_end+0xfffc473c>
   43108:	0007883a 	mov	r3,zero
   4310c:	003fdd06 	br	43084 <__alt_data_end+0xfffc4884>
   43110:	0009883a 	mov	r4,zero
   43114:	003ff706 	br	430f4 <__alt_data_end+0xfffc48f4>

00043118 <__divdf3>:
   43118:	defff204 	addi	sp,sp,-56
   4311c:	dd400915 	stw	r21,36(sp)
   43120:	282ad53a 	srli	r21,r5,20
   43124:	dd000815 	stw	r20,32(sp)
   43128:	2828d7fa 	srli	r20,r5,31
   4312c:	dc000415 	stw	r16,16(sp)
   43130:	04000434 	movhi	r16,16
   43134:	df000c15 	stw	fp,48(sp)
   43138:	843fffc4 	addi	r16,r16,-1
   4313c:	dfc00d15 	stw	ra,52(sp)
   43140:	ddc00b15 	stw	r23,44(sp)
   43144:	dd800a15 	stw	r22,40(sp)
   43148:	dcc00715 	stw	r19,28(sp)
   4314c:	dc800615 	stw	r18,24(sp)
   43150:	dc400515 	stw	r17,20(sp)
   43154:	ad41ffcc 	andi	r21,r21,2047
   43158:	2c20703a 	and	r16,r5,r16
   4315c:	a7003fcc 	andi	fp,r20,255
   43160:	a8006126 	beq	r21,zero,432e8 <__divdf3+0x1d0>
   43164:	0081ffc4 	movi	r2,2047
   43168:	2025883a 	mov	r18,r4
   4316c:	a8803726 	beq	r21,r2,4324c <__divdf3+0x134>
   43170:	80800434 	orhi	r2,r16,16
   43174:	100490fa 	slli	r2,r2,3
   43178:	2020d77a 	srli	r16,r4,29
   4317c:	202490fa 	slli	r18,r4,3
   43180:	ad7f0044 	addi	r21,r21,-1023
   43184:	80a0b03a 	or	r16,r16,r2
   43188:	0027883a 	mov	r19,zero
   4318c:	0013883a 	mov	r9,zero
   43190:	3804d53a 	srli	r2,r7,20
   43194:	382cd7fa 	srli	r22,r7,31
   43198:	04400434 	movhi	r17,16
   4319c:	8c7fffc4 	addi	r17,r17,-1
   431a0:	1081ffcc 	andi	r2,r2,2047
   431a4:	3011883a 	mov	r8,r6
   431a8:	3c62703a 	and	r17,r7,r17
   431ac:	b5c03fcc 	andi	r23,r22,255
   431b0:	10006c26 	beq	r2,zero,43364 <__divdf3+0x24c>
   431b4:	00c1ffc4 	movi	r3,2047
   431b8:	10c06426 	beq	r2,r3,4334c <__divdf3+0x234>
   431bc:	88c00434 	orhi	r3,r17,16
   431c0:	180690fa 	slli	r3,r3,3
   431c4:	3022d77a 	srli	r17,r6,29
   431c8:	301090fa 	slli	r8,r6,3
   431cc:	10bf0044 	addi	r2,r2,-1023
   431d0:	88e2b03a 	or	r17,r17,r3
   431d4:	000f883a 	mov	r7,zero
   431d8:	a58cf03a 	xor	r6,r20,r22
   431dc:	3cc8b03a 	or	r4,r7,r19
   431e0:	a8abc83a 	sub	r21,r21,r2
   431e4:	008003c4 	movi	r2,15
   431e8:	3007883a 	mov	r3,r6
   431ec:	34c03fcc 	andi	r19,r6,255
   431f0:	11009036 	bltu	r2,r4,43434 <__divdf3+0x31c>
   431f4:	200890ba 	slli	r4,r4,2
   431f8:	00800134 	movhi	r2,4
   431fc:	108c8304 	addi	r2,r2,12812
   43200:	2089883a 	add	r4,r4,r2
   43204:	20800017 	ldw	r2,0(r4)
   43208:	1000683a 	jmp	r2
   4320c:	00043434 	movhi	zero,4304
   43210:	00043284 	movi	zero,4298
   43214:	00043424 	muli	zero,zero,4304
   43218:	00043278 	rdprs	zero,zero,4297
   4321c:	00043424 	muli	zero,zero,4304
   43220:	000433f8 	rdprs	zero,zero,4303
   43224:	00043424 	muli	zero,zero,4304
   43228:	00043278 	rdprs	zero,zero,4297
   4322c:	00043284 	movi	zero,4298
   43230:	00043284 	movi	zero,4298
   43234:	000433f8 	rdprs	zero,zero,4303
   43238:	00043278 	rdprs	zero,zero,4297
   4323c:	00043268 	cmpgeui	zero,zero,4297
   43240:	00043268 	cmpgeui	zero,zero,4297
   43244:	00043268 	cmpgeui	zero,zero,4297
   43248:	00043718 	cmpnei	zero,zero,4316
   4324c:	2404b03a 	or	r2,r4,r16
   43250:	1000661e 	bne	r2,zero,433ec <__divdf3+0x2d4>
   43254:	04c00204 	movi	r19,8
   43258:	0021883a 	mov	r16,zero
   4325c:	0025883a 	mov	r18,zero
   43260:	02400084 	movi	r9,2
   43264:	003fca06 	br	43190 <__alt_data_end+0xfffc4990>
   43268:	8023883a 	mov	r17,r16
   4326c:	9011883a 	mov	r8,r18
   43270:	e02f883a 	mov	r23,fp
   43274:	480f883a 	mov	r7,r9
   43278:	00800084 	movi	r2,2
   4327c:	3881311e 	bne	r7,r2,43744 <__divdf3+0x62c>
   43280:	b827883a 	mov	r19,r23
   43284:	98c0004c 	andi	r3,r19,1
   43288:	0081ffc4 	movi	r2,2047
   4328c:	000b883a 	mov	r5,zero
   43290:	0025883a 	mov	r18,zero
   43294:	1004953a 	slli	r2,r2,20
   43298:	18c03fcc 	andi	r3,r3,255
   4329c:	04400434 	movhi	r17,16
   432a0:	8c7fffc4 	addi	r17,r17,-1
   432a4:	180697fa 	slli	r3,r3,31
   432a8:	2c4a703a 	and	r5,r5,r17
   432ac:	288ab03a 	or	r5,r5,r2
   432b0:	28c6b03a 	or	r3,r5,r3
   432b4:	9005883a 	mov	r2,r18
   432b8:	dfc00d17 	ldw	ra,52(sp)
   432bc:	df000c17 	ldw	fp,48(sp)
   432c0:	ddc00b17 	ldw	r23,44(sp)
   432c4:	dd800a17 	ldw	r22,40(sp)
   432c8:	dd400917 	ldw	r21,36(sp)
   432cc:	dd000817 	ldw	r20,32(sp)
   432d0:	dcc00717 	ldw	r19,28(sp)
   432d4:	dc800617 	ldw	r18,24(sp)
   432d8:	dc400517 	ldw	r17,20(sp)
   432dc:	dc000417 	ldw	r16,16(sp)
   432e0:	dec00e04 	addi	sp,sp,56
   432e4:	f800283a 	ret
   432e8:	2404b03a 	or	r2,r4,r16
   432ec:	2027883a 	mov	r19,r4
   432f0:	10003926 	beq	r2,zero,433d8 <__divdf3+0x2c0>
   432f4:	80012e26 	beq	r16,zero,437b0 <__divdf3+0x698>
   432f8:	8009883a 	mov	r4,r16
   432fc:	d9800315 	stw	r6,12(sp)
   43300:	d9c00215 	stw	r7,8(sp)
   43304:	0043cb80 	call	43cb8 <__clzsi2>
   43308:	d9800317 	ldw	r6,12(sp)
   4330c:	d9c00217 	ldw	r7,8(sp)
   43310:	113ffd44 	addi	r4,r2,-11
   43314:	00c00704 	movi	r3,28
   43318:	19012116 	blt	r3,r4,437a0 <__divdf3+0x688>
   4331c:	00c00744 	movi	r3,29
   43320:	147ffe04 	addi	r17,r2,-8
   43324:	1907c83a 	sub	r3,r3,r4
   43328:	8460983a 	sll	r16,r16,r17
   4332c:	98c6d83a 	srl	r3,r19,r3
   43330:	9c64983a 	sll	r18,r19,r17
   43334:	1c20b03a 	or	r16,r3,r16
   43338:	1080fcc4 	addi	r2,r2,1011
   4333c:	00abc83a 	sub	r21,zero,r2
   43340:	0027883a 	mov	r19,zero
   43344:	0013883a 	mov	r9,zero
   43348:	003f9106 	br	43190 <__alt_data_end+0xfffc4990>
   4334c:	3446b03a 	or	r3,r6,r17
   43350:	18001f1e 	bne	r3,zero,433d0 <__divdf3+0x2b8>
   43354:	0023883a 	mov	r17,zero
   43358:	0011883a 	mov	r8,zero
   4335c:	01c00084 	movi	r7,2
   43360:	003f9d06 	br	431d8 <__alt_data_end+0xfffc49d8>
   43364:	3446b03a 	or	r3,r6,r17
   43368:	18001526 	beq	r3,zero,433c0 <__divdf3+0x2a8>
   4336c:	88011b26 	beq	r17,zero,437dc <__divdf3+0x6c4>
   43370:	8809883a 	mov	r4,r17
   43374:	d9800315 	stw	r6,12(sp)
   43378:	da400115 	stw	r9,4(sp)
   4337c:	0043cb80 	call	43cb8 <__clzsi2>
   43380:	d9800317 	ldw	r6,12(sp)
   43384:	da400117 	ldw	r9,4(sp)
   43388:	113ffd44 	addi	r4,r2,-11
   4338c:	00c00704 	movi	r3,28
   43390:	19010e16 	blt	r3,r4,437cc <__divdf3+0x6b4>
   43394:	00c00744 	movi	r3,29
   43398:	123ffe04 	addi	r8,r2,-8
   4339c:	1907c83a 	sub	r3,r3,r4
   433a0:	8a22983a 	sll	r17,r17,r8
   433a4:	30c6d83a 	srl	r3,r6,r3
   433a8:	3210983a 	sll	r8,r6,r8
   433ac:	1c62b03a 	or	r17,r3,r17
   433b0:	1080fcc4 	addi	r2,r2,1011
   433b4:	0085c83a 	sub	r2,zero,r2
   433b8:	000f883a 	mov	r7,zero
   433bc:	003f8606 	br	431d8 <__alt_data_end+0xfffc49d8>
   433c0:	0023883a 	mov	r17,zero
   433c4:	0011883a 	mov	r8,zero
   433c8:	01c00044 	movi	r7,1
   433cc:	003f8206 	br	431d8 <__alt_data_end+0xfffc49d8>
   433d0:	01c000c4 	movi	r7,3
   433d4:	003f8006 	br	431d8 <__alt_data_end+0xfffc49d8>
   433d8:	04c00104 	movi	r19,4
   433dc:	0021883a 	mov	r16,zero
   433e0:	0025883a 	mov	r18,zero
   433e4:	02400044 	movi	r9,1
   433e8:	003f6906 	br	43190 <__alt_data_end+0xfffc4990>
   433ec:	04c00304 	movi	r19,12
   433f0:	024000c4 	movi	r9,3
   433f4:	003f6606 	br	43190 <__alt_data_end+0xfffc4990>
   433f8:	01400434 	movhi	r5,16
   433fc:	0007883a 	mov	r3,zero
   43400:	297fffc4 	addi	r5,r5,-1
   43404:	04bfffc4 	movi	r18,-1
   43408:	0081ffc4 	movi	r2,2047
   4340c:	003fa106 	br	43294 <__alt_data_end+0xfffc4a94>
   43410:	00c00044 	movi	r3,1
   43414:	1887c83a 	sub	r3,r3,r2
   43418:	01000e04 	movi	r4,56
   4341c:	20c1210e 	bge	r4,r3,438a4 <__divdf3+0x78c>
   43420:	98c0004c 	andi	r3,r19,1
   43424:	0005883a 	mov	r2,zero
   43428:	000b883a 	mov	r5,zero
   4342c:	0025883a 	mov	r18,zero
   43430:	003f9806 	br	43294 <__alt_data_end+0xfffc4a94>
   43434:	8c00fd36 	bltu	r17,r16,4382c <__divdf3+0x714>
   43438:	8440fb26 	beq	r16,r17,43828 <__divdf3+0x710>
   4343c:	8007883a 	mov	r3,r16
   43440:	ad7fffc4 	addi	r21,r21,-1
   43444:	0021883a 	mov	r16,zero
   43448:	4004d63a 	srli	r2,r8,24
   4344c:	8822923a 	slli	r17,r17,8
   43450:	1809883a 	mov	r4,r3
   43454:	402c923a 	slli	r22,r8,8
   43458:	88b8b03a 	or	fp,r17,r2
   4345c:	e028d43a 	srli	r20,fp,16
   43460:	d8c00015 	stw	r3,0(sp)
   43464:	e5ffffcc 	andi	r23,fp,65535
   43468:	a00b883a 	mov	r5,r20
   4346c:	0043e140 	call	43e14 <__udivsi3>
   43470:	d8c00017 	ldw	r3,0(sp)
   43474:	a00b883a 	mov	r5,r20
   43478:	d8800315 	stw	r2,12(sp)
   4347c:	1809883a 	mov	r4,r3
   43480:	0043e780 	call	43e78 <__umodsi3>
   43484:	d9800317 	ldw	r6,12(sp)
   43488:	1006943a 	slli	r3,r2,16
   4348c:	9004d43a 	srli	r2,r18,16
   43490:	b9a3383a 	mul	r17,r23,r6
   43494:	10c4b03a 	or	r2,r2,r3
   43498:	1440062e 	bgeu	r2,r17,434b4 <__divdf3+0x39c>
   4349c:	1705883a 	add	r2,r2,fp
   434a0:	30ffffc4 	addi	r3,r6,-1
   434a4:	1700ee36 	bltu	r2,fp,43860 <__divdf3+0x748>
   434a8:	1440ed2e 	bgeu	r2,r17,43860 <__divdf3+0x748>
   434ac:	31bfff84 	addi	r6,r6,-2
   434b0:	1705883a 	add	r2,r2,fp
   434b4:	1463c83a 	sub	r17,r2,r17
   434b8:	a00b883a 	mov	r5,r20
   434bc:	8809883a 	mov	r4,r17
   434c0:	d9800315 	stw	r6,12(sp)
   434c4:	0043e140 	call	43e14 <__udivsi3>
   434c8:	a00b883a 	mov	r5,r20
   434cc:	8809883a 	mov	r4,r17
   434d0:	d8800215 	stw	r2,8(sp)
   434d4:	0043e780 	call	43e78 <__umodsi3>
   434d8:	d9c00217 	ldw	r7,8(sp)
   434dc:	1004943a 	slli	r2,r2,16
   434e0:	94bfffcc 	andi	r18,r18,65535
   434e4:	b9d1383a 	mul	r8,r23,r7
   434e8:	90a4b03a 	or	r18,r18,r2
   434ec:	d9800317 	ldw	r6,12(sp)
   434f0:	9200062e 	bgeu	r18,r8,4350c <__divdf3+0x3f4>
   434f4:	9725883a 	add	r18,r18,fp
   434f8:	38bfffc4 	addi	r2,r7,-1
   434fc:	9700d636 	bltu	r18,fp,43858 <__divdf3+0x740>
   43500:	9200d52e 	bgeu	r18,r8,43858 <__divdf3+0x740>
   43504:	39ffff84 	addi	r7,r7,-2
   43508:	9725883a 	add	r18,r18,fp
   4350c:	3004943a 	slli	r2,r6,16
   43510:	b012d43a 	srli	r9,r22,16
   43514:	b1bfffcc 	andi	r6,r22,65535
   43518:	11e2b03a 	or	r17,r2,r7
   4351c:	8806d43a 	srli	r3,r17,16
   43520:	893fffcc 	andi	r4,r17,65535
   43524:	218b383a 	mul	r5,r4,r6
   43528:	30c5383a 	mul	r2,r6,r3
   4352c:	2249383a 	mul	r4,r4,r9
   43530:	280ed43a 	srli	r7,r5,16
   43534:	9225c83a 	sub	r18,r18,r8
   43538:	2089883a 	add	r4,r4,r2
   4353c:	3909883a 	add	r4,r7,r4
   43540:	1a47383a 	mul	r3,r3,r9
   43544:	2080022e 	bgeu	r4,r2,43550 <__divdf3+0x438>
   43548:	00800074 	movhi	r2,1
   4354c:	1887883a 	add	r3,r3,r2
   43550:	2004d43a 	srli	r2,r4,16
   43554:	2008943a 	slli	r4,r4,16
   43558:	297fffcc 	andi	r5,r5,65535
   4355c:	10c7883a 	add	r3,r2,r3
   43560:	2149883a 	add	r4,r4,r5
   43564:	90c0a536 	bltu	r18,r3,437fc <__divdf3+0x6e4>
   43568:	90c0bf26 	beq	r18,r3,43868 <__divdf3+0x750>
   4356c:	90c7c83a 	sub	r3,r18,r3
   43570:	810fc83a 	sub	r7,r16,r4
   43574:	81e5803a 	cmpltu	r18,r16,r7
   43578:	1ca5c83a 	sub	r18,r3,r18
   4357c:	e480c126 	beq	fp,r18,43884 <__divdf3+0x76c>
   43580:	a00b883a 	mov	r5,r20
   43584:	9009883a 	mov	r4,r18
   43588:	d9800315 	stw	r6,12(sp)
   4358c:	d9c00215 	stw	r7,8(sp)
   43590:	da400115 	stw	r9,4(sp)
   43594:	0043e140 	call	43e14 <__udivsi3>
   43598:	a00b883a 	mov	r5,r20
   4359c:	9009883a 	mov	r4,r18
   435a0:	d8800015 	stw	r2,0(sp)
   435a4:	0043e780 	call	43e78 <__umodsi3>
   435a8:	d9c00217 	ldw	r7,8(sp)
   435ac:	da000017 	ldw	r8,0(sp)
   435b0:	1006943a 	slli	r3,r2,16
   435b4:	3804d43a 	srli	r2,r7,16
   435b8:	ba21383a 	mul	r16,r23,r8
   435bc:	d9800317 	ldw	r6,12(sp)
   435c0:	10c4b03a 	or	r2,r2,r3
   435c4:	da400117 	ldw	r9,4(sp)
   435c8:	1400062e 	bgeu	r2,r16,435e4 <__divdf3+0x4cc>
   435cc:	1705883a 	add	r2,r2,fp
   435d0:	40ffffc4 	addi	r3,r8,-1
   435d4:	1700ad36 	bltu	r2,fp,4388c <__divdf3+0x774>
   435d8:	1400ac2e 	bgeu	r2,r16,4388c <__divdf3+0x774>
   435dc:	423fff84 	addi	r8,r8,-2
   435e0:	1705883a 	add	r2,r2,fp
   435e4:	1421c83a 	sub	r16,r2,r16
   435e8:	a00b883a 	mov	r5,r20
   435ec:	8009883a 	mov	r4,r16
   435f0:	d9800315 	stw	r6,12(sp)
   435f4:	d9c00215 	stw	r7,8(sp)
   435f8:	da000015 	stw	r8,0(sp)
   435fc:	da400115 	stw	r9,4(sp)
   43600:	0043e140 	call	43e14 <__udivsi3>
   43604:	8009883a 	mov	r4,r16
   43608:	a00b883a 	mov	r5,r20
   4360c:	1025883a 	mov	r18,r2
   43610:	0043e780 	call	43e78 <__umodsi3>
   43614:	d9c00217 	ldw	r7,8(sp)
   43618:	1004943a 	slli	r2,r2,16
   4361c:	bcaf383a 	mul	r23,r23,r18
   43620:	393fffcc 	andi	r4,r7,65535
   43624:	2088b03a 	or	r4,r4,r2
   43628:	d9800317 	ldw	r6,12(sp)
   4362c:	da000017 	ldw	r8,0(sp)
   43630:	da400117 	ldw	r9,4(sp)
   43634:	25c0062e 	bgeu	r4,r23,43650 <__divdf3+0x538>
   43638:	2709883a 	add	r4,r4,fp
   4363c:	90bfffc4 	addi	r2,r18,-1
   43640:	27009436 	bltu	r4,fp,43894 <__divdf3+0x77c>
   43644:	25c0932e 	bgeu	r4,r23,43894 <__divdf3+0x77c>
   43648:	94bfff84 	addi	r18,r18,-2
   4364c:	2709883a 	add	r4,r4,fp
   43650:	4004943a 	slli	r2,r8,16
   43654:	25efc83a 	sub	r23,r4,r23
   43658:	1490b03a 	or	r8,r2,r18
   4365c:	4008d43a 	srli	r4,r8,16
   43660:	40ffffcc 	andi	r3,r8,65535
   43664:	30c5383a 	mul	r2,r6,r3
   43668:	1a47383a 	mul	r3,r3,r9
   4366c:	310d383a 	mul	r6,r6,r4
   43670:	100ad43a 	srli	r5,r2,16
   43674:	4913383a 	mul	r9,r9,r4
   43678:	1987883a 	add	r3,r3,r6
   4367c:	28c7883a 	add	r3,r5,r3
   43680:	1980022e 	bgeu	r3,r6,4368c <__divdf3+0x574>
   43684:	01000074 	movhi	r4,1
   43688:	4913883a 	add	r9,r9,r4
   4368c:	1808d43a 	srli	r4,r3,16
   43690:	1806943a 	slli	r3,r3,16
   43694:	10bfffcc 	andi	r2,r2,65535
   43698:	2253883a 	add	r9,r4,r9
   4369c:	1887883a 	add	r3,r3,r2
   436a0:	ba403836 	bltu	r23,r9,43784 <__divdf3+0x66c>
   436a4:	ba403626 	beq	r23,r9,43780 <__divdf3+0x668>
   436a8:	42000054 	ori	r8,r8,1
   436ac:	a880ffc4 	addi	r2,r21,1023
   436b0:	00bf570e 	bge	zero,r2,43410 <__alt_data_end+0xfffc4c10>
   436b4:	40c001cc 	andi	r3,r8,7
   436b8:	18000726 	beq	r3,zero,436d8 <__divdf3+0x5c0>
   436bc:	40c003cc 	andi	r3,r8,15
   436c0:	01000104 	movi	r4,4
   436c4:	19000426 	beq	r3,r4,436d8 <__divdf3+0x5c0>
   436c8:	4107883a 	add	r3,r8,r4
   436cc:	1a11803a 	cmpltu	r8,r3,r8
   436d0:	8a23883a 	add	r17,r17,r8
   436d4:	1811883a 	mov	r8,r3
   436d8:	88c0402c 	andhi	r3,r17,256
   436dc:	18000426 	beq	r3,zero,436f0 <__divdf3+0x5d8>
   436e0:	00ffc034 	movhi	r3,65280
   436e4:	18ffffc4 	addi	r3,r3,-1
   436e8:	a8810004 	addi	r2,r21,1024
   436ec:	88e2703a 	and	r17,r17,r3
   436f0:	00c1ff84 	movi	r3,2046
   436f4:	18bee316 	blt	r3,r2,43284 <__alt_data_end+0xfffc4a84>
   436f8:	8824977a 	slli	r18,r17,29
   436fc:	4010d0fa 	srli	r8,r8,3
   43700:	8822927a 	slli	r17,r17,9
   43704:	1081ffcc 	andi	r2,r2,2047
   43708:	9224b03a 	or	r18,r18,r8
   4370c:	880ad33a 	srli	r5,r17,12
   43710:	98c0004c 	andi	r3,r19,1
   43714:	003edf06 	br	43294 <__alt_data_end+0xfffc4a94>
   43718:	8080022c 	andhi	r2,r16,8
   4371c:	10001226 	beq	r2,zero,43768 <__divdf3+0x650>
   43720:	8880022c 	andhi	r2,r17,8
   43724:	1000101e 	bne	r2,zero,43768 <__divdf3+0x650>
   43728:	00800434 	movhi	r2,16
   4372c:	89400234 	orhi	r5,r17,8
   43730:	10bfffc4 	addi	r2,r2,-1
   43734:	b007883a 	mov	r3,r22
   43738:	288a703a 	and	r5,r5,r2
   4373c:	4025883a 	mov	r18,r8
   43740:	003f3106 	br	43408 <__alt_data_end+0xfffc4c08>
   43744:	008000c4 	movi	r2,3
   43748:	3880a626 	beq	r7,r2,439e4 <__divdf3+0x8cc>
   4374c:	00800044 	movi	r2,1
   43750:	3880521e 	bne	r7,r2,4389c <__divdf3+0x784>
   43754:	b807883a 	mov	r3,r23
   43758:	0005883a 	mov	r2,zero
   4375c:	000b883a 	mov	r5,zero
   43760:	0025883a 	mov	r18,zero
   43764:	003ecb06 	br	43294 <__alt_data_end+0xfffc4a94>
   43768:	00800434 	movhi	r2,16
   4376c:	81400234 	orhi	r5,r16,8
   43770:	10bfffc4 	addi	r2,r2,-1
   43774:	a007883a 	mov	r3,r20
   43778:	288a703a 	and	r5,r5,r2
   4377c:	003f2206 	br	43408 <__alt_data_end+0xfffc4c08>
   43780:	183fca26 	beq	r3,zero,436ac <__alt_data_end+0xfffc4eac>
   43784:	e5ef883a 	add	r23,fp,r23
   43788:	40bfffc4 	addi	r2,r8,-1
   4378c:	bf00392e 	bgeu	r23,fp,43874 <__divdf3+0x75c>
   43790:	1011883a 	mov	r8,r2
   43794:	ba7fc41e 	bne	r23,r9,436a8 <__alt_data_end+0xfffc4ea8>
   43798:	b0ffc31e 	bne	r22,r3,436a8 <__alt_data_end+0xfffc4ea8>
   4379c:	003fc306 	br	436ac <__alt_data_end+0xfffc4eac>
   437a0:	143ff604 	addi	r16,r2,-40
   437a4:	9c20983a 	sll	r16,r19,r16
   437a8:	0025883a 	mov	r18,zero
   437ac:	003ee206 	br	43338 <__alt_data_end+0xfffc4b38>
   437b0:	d9800315 	stw	r6,12(sp)
   437b4:	d9c00215 	stw	r7,8(sp)
   437b8:	0043cb80 	call	43cb8 <__clzsi2>
   437bc:	10800804 	addi	r2,r2,32
   437c0:	d9c00217 	ldw	r7,8(sp)
   437c4:	d9800317 	ldw	r6,12(sp)
   437c8:	003ed106 	br	43310 <__alt_data_end+0xfffc4b10>
   437cc:	147ff604 	addi	r17,r2,-40
   437d0:	3462983a 	sll	r17,r6,r17
   437d4:	0011883a 	mov	r8,zero
   437d8:	003ef506 	br	433b0 <__alt_data_end+0xfffc4bb0>
   437dc:	3009883a 	mov	r4,r6
   437e0:	d9800315 	stw	r6,12(sp)
   437e4:	da400115 	stw	r9,4(sp)
   437e8:	0043cb80 	call	43cb8 <__clzsi2>
   437ec:	10800804 	addi	r2,r2,32
   437f0:	da400117 	ldw	r9,4(sp)
   437f4:	d9800317 	ldw	r6,12(sp)
   437f8:	003ee306 	br	43388 <__alt_data_end+0xfffc4b88>
   437fc:	85a1883a 	add	r16,r16,r22
   43800:	8585803a 	cmpltu	r2,r16,r22
   43804:	1705883a 	add	r2,r2,fp
   43808:	14a5883a 	add	r18,r2,r18
   4380c:	88bfffc4 	addi	r2,r17,-1
   43810:	e4800c2e 	bgeu	fp,r18,43844 <__divdf3+0x72c>
   43814:	90c03e36 	bltu	r18,r3,43910 <__divdf3+0x7f8>
   43818:	1c806926 	beq	r3,r18,439c0 <__divdf3+0x8a8>
   4381c:	90c7c83a 	sub	r3,r18,r3
   43820:	1023883a 	mov	r17,r2
   43824:	003f5206 	br	43570 <__alt_data_end+0xfffc4d70>
   43828:	923f0436 	bltu	r18,r8,4343c <__alt_data_end+0xfffc4c3c>
   4382c:	800897fa 	slli	r4,r16,31
   43830:	9004d07a 	srli	r2,r18,1
   43834:	8006d07a 	srli	r3,r16,1
   43838:	902097fa 	slli	r16,r18,31
   4383c:	20a4b03a 	or	r18,r4,r2
   43840:	003f0106 	br	43448 <__alt_data_end+0xfffc4c48>
   43844:	e4bff51e 	bne	fp,r18,4381c <__alt_data_end+0xfffc501c>
   43848:	85bff22e 	bgeu	r16,r22,43814 <__alt_data_end+0xfffc5014>
   4384c:	e0c7c83a 	sub	r3,fp,r3
   43850:	1023883a 	mov	r17,r2
   43854:	003f4606 	br	43570 <__alt_data_end+0xfffc4d70>
   43858:	100f883a 	mov	r7,r2
   4385c:	003f2b06 	br	4350c <__alt_data_end+0xfffc4d0c>
   43860:	180d883a 	mov	r6,r3
   43864:	003f1306 	br	434b4 <__alt_data_end+0xfffc4cb4>
   43868:	813fe436 	bltu	r16,r4,437fc <__alt_data_end+0xfffc4ffc>
   4386c:	0007883a 	mov	r3,zero
   43870:	003f3f06 	br	43570 <__alt_data_end+0xfffc4d70>
   43874:	ba402c36 	bltu	r23,r9,43928 <__divdf3+0x810>
   43878:	4dc05426 	beq	r9,r23,439cc <__divdf3+0x8b4>
   4387c:	1011883a 	mov	r8,r2
   43880:	003f8906 	br	436a8 <__alt_data_end+0xfffc4ea8>
   43884:	023fffc4 	movi	r8,-1
   43888:	003f8806 	br	436ac <__alt_data_end+0xfffc4eac>
   4388c:	1811883a 	mov	r8,r3
   43890:	003f5406 	br	435e4 <__alt_data_end+0xfffc4de4>
   43894:	1025883a 	mov	r18,r2
   43898:	003f6d06 	br	43650 <__alt_data_end+0xfffc4e50>
   4389c:	b827883a 	mov	r19,r23
   438a0:	003f8206 	br	436ac <__alt_data_end+0xfffc4eac>
   438a4:	010007c4 	movi	r4,31
   438a8:	20c02616 	blt	r4,r3,43944 <__divdf3+0x82c>
   438ac:	00800804 	movi	r2,32
   438b0:	10c5c83a 	sub	r2,r2,r3
   438b4:	888a983a 	sll	r5,r17,r2
   438b8:	40c8d83a 	srl	r4,r8,r3
   438bc:	4084983a 	sll	r2,r8,r2
   438c0:	88e2d83a 	srl	r17,r17,r3
   438c4:	2906b03a 	or	r3,r5,r4
   438c8:	1004c03a 	cmpne	r2,r2,zero
   438cc:	1886b03a 	or	r3,r3,r2
   438d0:	188001cc 	andi	r2,r3,7
   438d4:	10000726 	beq	r2,zero,438f4 <__divdf3+0x7dc>
   438d8:	188003cc 	andi	r2,r3,15
   438dc:	01000104 	movi	r4,4
   438e0:	11000426 	beq	r2,r4,438f4 <__divdf3+0x7dc>
   438e4:	1805883a 	mov	r2,r3
   438e8:	10c00104 	addi	r3,r2,4
   438ec:	1885803a 	cmpltu	r2,r3,r2
   438f0:	88a3883a 	add	r17,r17,r2
   438f4:	8880202c 	andhi	r2,r17,128
   438f8:	10002726 	beq	r2,zero,43998 <__divdf3+0x880>
   438fc:	98c0004c 	andi	r3,r19,1
   43900:	00800044 	movi	r2,1
   43904:	000b883a 	mov	r5,zero
   43908:	0025883a 	mov	r18,zero
   4390c:	003e6106 	br	43294 <__alt_data_end+0xfffc4a94>
   43910:	85a1883a 	add	r16,r16,r22
   43914:	8585803a 	cmpltu	r2,r16,r22
   43918:	1705883a 	add	r2,r2,fp
   4391c:	14a5883a 	add	r18,r2,r18
   43920:	8c7fff84 	addi	r17,r17,-2
   43924:	003f1106 	br	4356c <__alt_data_end+0xfffc4d6c>
   43928:	b589883a 	add	r4,r22,r22
   4392c:	25ad803a 	cmpltu	r22,r4,r22
   43930:	b739883a 	add	fp,r22,fp
   43934:	40bfff84 	addi	r2,r8,-2
   43938:	bf2f883a 	add	r23,r23,fp
   4393c:	202d883a 	mov	r22,r4
   43940:	003f9306 	br	43790 <__alt_data_end+0xfffc4f90>
   43944:	013ff844 	movi	r4,-31
   43948:	2085c83a 	sub	r2,r4,r2
   4394c:	8888d83a 	srl	r4,r17,r2
   43950:	00800804 	movi	r2,32
   43954:	18802126 	beq	r3,r2,439dc <__divdf3+0x8c4>
   43958:	00801004 	movi	r2,64
   4395c:	10c5c83a 	sub	r2,r2,r3
   43960:	8884983a 	sll	r2,r17,r2
   43964:	1204b03a 	or	r2,r2,r8
   43968:	1004c03a 	cmpne	r2,r2,zero
   4396c:	2084b03a 	or	r2,r4,r2
   43970:	144001cc 	andi	r17,r2,7
   43974:	88000d1e 	bne	r17,zero,439ac <__divdf3+0x894>
   43978:	000b883a 	mov	r5,zero
   4397c:	1024d0fa 	srli	r18,r2,3
   43980:	98c0004c 	andi	r3,r19,1
   43984:	0005883a 	mov	r2,zero
   43988:	9464b03a 	or	r18,r18,r17
   4398c:	003e4106 	br	43294 <__alt_data_end+0xfffc4a94>
   43990:	1007883a 	mov	r3,r2
   43994:	0023883a 	mov	r17,zero
   43998:	880a927a 	slli	r5,r17,9
   4399c:	1805883a 	mov	r2,r3
   439a0:	8822977a 	slli	r17,r17,29
   439a4:	280ad33a 	srli	r5,r5,12
   439a8:	003ff406 	br	4397c <__alt_data_end+0xfffc517c>
   439ac:	10c003cc 	andi	r3,r2,15
   439b0:	01000104 	movi	r4,4
   439b4:	193ff626 	beq	r3,r4,43990 <__alt_data_end+0xfffc5190>
   439b8:	0023883a 	mov	r17,zero
   439bc:	003fca06 	br	438e8 <__alt_data_end+0xfffc50e8>
   439c0:	813fd336 	bltu	r16,r4,43910 <__alt_data_end+0xfffc5110>
   439c4:	1023883a 	mov	r17,r2
   439c8:	003fa806 	br	4386c <__alt_data_end+0xfffc506c>
   439cc:	b0ffd636 	bltu	r22,r3,43928 <__alt_data_end+0xfffc5128>
   439d0:	1011883a 	mov	r8,r2
   439d4:	b0ff341e 	bne	r22,r3,436a8 <__alt_data_end+0xfffc4ea8>
   439d8:	003f3406 	br	436ac <__alt_data_end+0xfffc4eac>
   439dc:	0005883a 	mov	r2,zero
   439e0:	003fe006 	br	43964 <__alt_data_end+0xfffc5164>
   439e4:	00800434 	movhi	r2,16
   439e8:	89400234 	orhi	r5,r17,8
   439ec:	10bfffc4 	addi	r2,r2,-1
   439f0:	b807883a 	mov	r3,r23
   439f4:	288a703a 	and	r5,r5,r2
   439f8:	4025883a 	mov	r18,r8
   439fc:	003e8206 	br	43408 <__alt_data_end+0xfffc4c08>

00043a00 <__extendsfdf2>:
   43a00:	200ad5fa 	srli	r5,r4,23
   43a04:	defffd04 	addi	sp,sp,-12
   43a08:	dc400115 	stw	r17,4(sp)
   43a0c:	29403fcc 	andi	r5,r5,255
   43a10:	29800044 	addi	r6,r5,1
   43a14:	04402034 	movhi	r17,128
   43a18:	dc000015 	stw	r16,0(sp)
   43a1c:	8c7fffc4 	addi	r17,r17,-1
   43a20:	dfc00215 	stw	ra,8(sp)
   43a24:	31803fcc 	andi	r6,r6,255
   43a28:	00800044 	movi	r2,1
   43a2c:	8922703a 	and	r17,r17,r4
   43a30:	2020d7fa 	srli	r16,r4,31
   43a34:	1180110e 	bge	r2,r6,43a7c <__extendsfdf2+0x7c>
   43a38:	880cd0fa 	srli	r6,r17,3
   43a3c:	8822977a 	slli	r17,r17,29
   43a40:	2940e004 	addi	r5,r5,896
   43a44:	2941ffcc 	andi	r5,r5,2047
   43a48:	2804953a 	slli	r2,r5,20
   43a4c:	01400434 	movhi	r5,16
   43a50:	800697fa 	slli	r3,r16,31
   43a54:	297fffc4 	addi	r5,r5,-1
   43a58:	314a703a 	and	r5,r6,r5
   43a5c:	288ab03a 	or	r5,r5,r2
   43a60:	28c6b03a 	or	r3,r5,r3
   43a64:	8805883a 	mov	r2,r17
   43a68:	dfc00217 	ldw	ra,8(sp)
   43a6c:	dc400117 	ldw	r17,4(sp)
   43a70:	dc000017 	ldw	r16,0(sp)
   43a74:	dec00304 	addi	sp,sp,12
   43a78:	f800283a 	ret
   43a7c:	2800111e 	bne	r5,zero,43ac4 <__extendsfdf2+0xc4>
   43a80:	88001c26 	beq	r17,zero,43af4 <__extendsfdf2+0xf4>
   43a84:	8809883a 	mov	r4,r17
   43a88:	0043cb80 	call	43cb8 <__clzsi2>
   43a8c:	00c00284 	movi	r3,10
   43a90:	18801b16 	blt	r3,r2,43b00 <__extendsfdf2+0x100>
   43a94:	018002c4 	movi	r6,11
   43a98:	308dc83a 	sub	r6,r6,r2
   43a9c:	11000544 	addi	r4,r2,21
   43aa0:	8986d83a 	srl	r3,r17,r6
   43aa4:	8922983a 	sll	r17,r17,r4
   43aa8:	0180e244 	movi	r6,905
   43aac:	01400434 	movhi	r5,16
   43ab0:	3085c83a 	sub	r2,r6,r2
   43ab4:	297fffc4 	addi	r5,r5,-1
   43ab8:	194c703a 	and	r6,r3,r5
   43abc:	1141ffcc 	andi	r5,r2,2047
   43ac0:	003fe006 	br	43a44 <__alt_data_end+0xfffc5244>
   43ac4:	88000826 	beq	r17,zero,43ae8 <__extendsfdf2+0xe8>
   43ac8:	880cd0fa 	srli	r6,r17,3
   43acc:	00800434 	movhi	r2,16
   43ad0:	10bfffc4 	addi	r2,r2,-1
   43ad4:	31800234 	orhi	r6,r6,8
   43ad8:	8822977a 	slli	r17,r17,29
   43adc:	308c703a 	and	r6,r6,r2
   43ae0:	0141ffc4 	movi	r5,2047
   43ae4:	003fd706 	br	43a44 <__alt_data_end+0xfffc5244>
   43ae8:	0141ffc4 	movi	r5,2047
   43aec:	000d883a 	mov	r6,zero
   43af0:	003fd406 	br	43a44 <__alt_data_end+0xfffc5244>
   43af4:	000b883a 	mov	r5,zero
   43af8:	000d883a 	mov	r6,zero
   43afc:	003fd106 	br	43a44 <__alt_data_end+0xfffc5244>
   43b00:	11bffd44 	addi	r6,r2,-11
   43b04:	8986983a 	sll	r3,r17,r6
   43b08:	0023883a 	mov	r17,zero
   43b0c:	003fe606 	br	43aa8 <__alt_data_end+0xfffc52a8>

00043b10 <__truncdfsf2>:
   43b10:	2810d53a 	srli	r8,r5,20
   43b14:	01c00434 	movhi	r7,16
   43b18:	39ffffc4 	addi	r7,r7,-1
   43b1c:	29ce703a 	and	r7,r5,r7
   43b20:	4201ffcc 	andi	r8,r8,2047
   43b24:	380e90fa 	slli	r7,r7,3
   43b28:	200cd77a 	srli	r6,r4,29
   43b2c:	42400044 	addi	r9,r8,1
   43b30:	4a41ffcc 	andi	r9,r9,2047
   43b34:	00c00044 	movi	r3,1
   43b38:	280ad7fa 	srli	r5,r5,31
   43b3c:	31ceb03a 	or	r7,r6,r7
   43b40:	200490fa 	slli	r2,r4,3
   43b44:	1a40230e 	bge	r3,r9,43bd4 <__truncdfsf2+0xc4>
   43b48:	40ff2004 	addi	r3,r8,-896
   43b4c:	01803f84 	movi	r6,254
   43b50:	30c01516 	blt	r6,r3,43ba8 <__truncdfsf2+0x98>
   43b54:	00c0380e 	bge	zero,r3,43c38 <__truncdfsf2+0x128>
   43b58:	200c91ba 	slli	r6,r4,6
   43b5c:	380e90fa 	slli	r7,r7,3
   43b60:	1004d77a 	srli	r2,r2,29
   43b64:	300cc03a 	cmpne	r6,r6,zero
   43b68:	31ccb03a 	or	r6,r6,r7
   43b6c:	308cb03a 	or	r6,r6,r2
   43b70:	308001cc 	andi	r2,r6,7
   43b74:	10000426 	beq	r2,zero,43b88 <__truncdfsf2+0x78>
   43b78:	308003cc 	andi	r2,r6,15
   43b7c:	01000104 	movi	r4,4
   43b80:	11000126 	beq	r2,r4,43b88 <__truncdfsf2+0x78>
   43b84:	31800104 	addi	r6,r6,4
   43b88:	3081002c 	andhi	r2,r6,1024
   43b8c:	10001626 	beq	r2,zero,43be8 <__truncdfsf2+0xd8>
   43b90:	18c00044 	addi	r3,r3,1
   43b94:	00803fc4 	movi	r2,255
   43b98:	18800326 	beq	r3,r2,43ba8 <__truncdfsf2+0x98>
   43b9c:	300c91ba 	slli	r6,r6,6
   43ba0:	300cd27a 	srli	r6,r6,9
   43ba4:	00000206 	br	43bb0 <__truncdfsf2+0xa0>
   43ba8:	00ffffc4 	movi	r3,-1
   43bac:	000d883a 	mov	r6,zero
   43bb0:	18c03fcc 	andi	r3,r3,255
   43bb4:	180895fa 	slli	r4,r3,23
   43bb8:	00c02034 	movhi	r3,128
   43bbc:	280a97fa 	slli	r5,r5,31
   43bc0:	18ffffc4 	addi	r3,r3,-1
   43bc4:	30c6703a 	and	r3,r6,r3
   43bc8:	1906b03a 	or	r3,r3,r4
   43bcc:	1944b03a 	or	r2,r3,r5
   43bd0:	f800283a 	ret
   43bd4:	40000b1e 	bne	r8,zero,43c04 <__truncdfsf2+0xf4>
   43bd8:	388cb03a 	or	r6,r7,r2
   43bdc:	0007883a 	mov	r3,zero
   43be0:	30000426 	beq	r6,zero,43bf4 <__truncdfsf2+0xe4>
   43be4:	01800144 	movi	r6,5
   43be8:	00803fc4 	movi	r2,255
   43bec:	300cd0fa 	srli	r6,r6,3
   43bf0:	18800a26 	beq	r3,r2,43c1c <__truncdfsf2+0x10c>
   43bf4:	00802034 	movhi	r2,128
   43bf8:	10bfffc4 	addi	r2,r2,-1
   43bfc:	308c703a 	and	r6,r6,r2
   43c00:	003feb06 	br	43bb0 <__alt_data_end+0xfffc53b0>
   43c04:	3888b03a 	or	r4,r7,r2
   43c08:	203fe726 	beq	r4,zero,43ba8 <__alt_data_end+0xfffc53a8>
   43c0c:	380c90fa 	slli	r6,r7,3
   43c10:	00c03fc4 	movi	r3,255
   43c14:	31808034 	orhi	r6,r6,512
   43c18:	003fd506 	br	43b70 <__alt_data_end+0xfffc5370>
   43c1c:	303fe226 	beq	r6,zero,43ba8 <__alt_data_end+0xfffc53a8>
   43c20:	00802034 	movhi	r2,128
   43c24:	31801034 	orhi	r6,r6,64
   43c28:	10bfffc4 	addi	r2,r2,-1
   43c2c:	00ffffc4 	movi	r3,-1
   43c30:	308c703a 	and	r6,r6,r2
   43c34:	003fde06 	br	43bb0 <__alt_data_end+0xfffc53b0>
   43c38:	013ffa44 	movi	r4,-23
   43c3c:	19000e16 	blt	r3,r4,43c78 <__truncdfsf2+0x168>
   43c40:	01000784 	movi	r4,30
   43c44:	20c9c83a 	sub	r4,r4,r3
   43c48:	018007c4 	movi	r6,31
   43c4c:	39c02034 	orhi	r7,r7,128
   43c50:	31000b16 	blt	r6,r4,43c80 <__truncdfsf2+0x170>
   43c54:	423f2084 	addi	r8,r8,-894
   43c58:	120c983a 	sll	r6,r2,r8
   43c5c:	3a0e983a 	sll	r7,r7,r8
   43c60:	1104d83a 	srl	r2,r2,r4
   43c64:	300cc03a 	cmpne	r6,r6,zero
   43c68:	31ceb03a 	or	r7,r6,r7
   43c6c:	388cb03a 	or	r6,r7,r2
   43c70:	0007883a 	mov	r3,zero
   43c74:	003fbe06 	br	43b70 <__alt_data_end+0xfffc5370>
   43c78:	0007883a 	mov	r3,zero
   43c7c:	003fd906 	br	43be4 <__alt_data_end+0xfffc53e4>
   43c80:	01bfff84 	movi	r6,-2
   43c84:	30cdc83a 	sub	r6,r6,r3
   43c88:	00c00804 	movi	r3,32
   43c8c:	398cd83a 	srl	r6,r7,r6
   43c90:	20c00726 	beq	r4,r3,43cb0 <__truncdfsf2+0x1a0>
   43c94:	423f2884 	addi	r8,r8,-862
   43c98:	3a0e983a 	sll	r7,r7,r8
   43c9c:	3884b03a 	or	r2,r7,r2
   43ca0:	1004c03a 	cmpne	r2,r2,zero
   43ca4:	118cb03a 	or	r6,r2,r6
   43ca8:	0007883a 	mov	r3,zero
   43cac:	003fb006 	br	43b70 <__alt_data_end+0xfffc5370>
   43cb0:	000f883a 	mov	r7,zero
   43cb4:	003ff906 	br	43c9c <__alt_data_end+0xfffc549c>

00043cb8 <__clzsi2>:
   43cb8:	00bfffd4 	movui	r2,65535
   43cbc:	11000536 	bltu	r2,r4,43cd4 <__clzsi2+0x1c>
   43cc0:	00803fc4 	movi	r2,255
   43cc4:	11000f36 	bltu	r2,r4,43d04 <__clzsi2+0x4c>
   43cc8:	00800804 	movi	r2,32
   43ccc:	0007883a 	mov	r3,zero
   43cd0:	00000506 	br	43ce8 <__clzsi2+0x30>
   43cd4:	00804034 	movhi	r2,256
   43cd8:	10bfffc4 	addi	r2,r2,-1
   43cdc:	11000c2e 	bgeu	r2,r4,43d10 <__clzsi2+0x58>
   43ce0:	00800204 	movi	r2,8
   43ce4:	00c00604 	movi	r3,24
   43ce8:	20c8d83a 	srl	r4,r4,r3
   43cec:	00c00174 	movhi	r3,5
   43cf0:	18d6f9c4 	addi	r3,r3,23527
   43cf4:	1909883a 	add	r4,r3,r4
   43cf8:	20c00003 	ldbu	r3,0(r4)
   43cfc:	10c5c83a 	sub	r2,r2,r3
   43d00:	f800283a 	ret
   43d04:	00800604 	movi	r2,24
   43d08:	00c00204 	movi	r3,8
   43d0c:	003ff606 	br	43ce8 <__alt_data_end+0xfffc54e8>
   43d10:	00800404 	movi	r2,16
   43d14:	1007883a 	mov	r3,r2
   43d18:	003ff306 	br	43ce8 <__alt_data_end+0xfffc54e8>

00043d1c <__divsi3>:
   43d1c:	20001b16 	blt	r4,zero,43d8c <__divsi3+0x70>
   43d20:	000f883a 	mov	r7,zero
   43d24:	28001616 	blt	r5,zero,43d80 <__divsi3+0x64>
   43d28:	200d883a 	mov	r6,r4
   43d2c:	29001a2e 	bgeu	r5,r4,43d98 <__divsi3+0x7c>
   43d30:	00800804 	movi	r2,32
   43d34:	00c00044 	movi	r3,1
   43d38:	00000106 	br	43d40 <__divsi3+0x24>
   43d3c:	10000d26 	beq	r2,zero,43d74 <__divsi3+0x58>
   43d40:	294b883a 	add	r5,r5,r5
   43d44:	10bfffc4 	addi	r2,r2,-1
   43d48:	18c7883a 	add	r3,r3,r3
   43d4c:	293ffb36 	bltu	r5,r4,43d3c <__alt_data_end+0xfffc553c>
   43d50:	0005883a 	mov	r2,zero
   43d54:	18000726 	beq	r3,zero,43d74 <__divsi3+0x58>
   43d58:	0005883a 	mov	r2,zero
   43d5c:	31400236 	bltu	r6,r5,43d68 <__divsi3+0x4c>
   43d60:	314dc83a 	sub	r6,r6,r5
   43d64:	10c4b03a 	or	r2,r2,r3
   43d68:	1806d07a 	srli	r3,r3,1
   43d6c:	280ad07a 	srli	r5,r5,1
   43d70:	183ffa1e 	bne	r3,zero,43d5c <__alt_data_end+0xfffc555c>
   43d74:	38000126 	beq	r7,zero,43d7c <__divsi3+0x60>
   43d78:	0085c83a 	sub	r2,zero,r2
   43d7c:	f800283a 	ret
   43d80:	014bc83a 	sub	r5,zero,r5
   43d84:	39c0005c 	xori	r7,r7,1
   43d88:	003fe706 	br	43d28 <__alt_data_end+0xfffc5528>
   43d8c:	0109c83a 	sub	r4,zero,r4
   43d90:	01c00044 	movi	r7,1
   43d94:	003fe306 	br	43d24 <__alt_data_end+0xfffc5524>
   43d98:	00c00044 	movi	r3,1
   43d9c:	003fee06 	br	43d58 <__alt_data_end+0xfffc5558>

00043da0 <__modsi3>:
   43da0:	20001716 	blt	r4,zero,43e00 <__modsi3+0x60>
   43da4:	000f883a 	mov	r7,zero
   43da8:	2005883a 	mov	r2,r4
   43dac:	28001216 	blt	r5,zero,43df8 <__modsi3+0x58>
   43db0:	2900162e 	bgeu	r5,r4,43e0c <__modsi3+0x6c>
   43db4:	01800804 	movi	r6,32
   43db8:	00c00044 	movi	r3,1
   43dbc:	00000106 	br	43dc4 <__modsi3+0x24>
   43dc0:	30000a26 	beq	r6,zero,43dec <__modsi3+0x4c>
   43dc4:	294b883a 	add	r5,r5,r5
   43dc8:	31bfffc4 	addi	r6,r6,-1
   43dcc:	18c7883a 	add	r3,r3,r3
   43dd0:	293ffb36 	bltu	r5,r4,43dc0 <__alt_data_end+0xfffc55c0>
   43dd4:	18000526 	beq	r3,zero,43dec <__modsi3+0x4c>
   43dd8:	1806d07a 	srli	r3,r3,1
   43ddc:	11400136 	bltu	r2,r5,43de4 <__modsi3+0x44>
   43de0:	1145c83a 	sub	r2,r2,r5
   43de4:	280ad07a 	srli	r5,r5,1
   43de8:	183ffb1e 	bne	r3,zero,43dd8 <__alt_data_end+0xfffc55d8>
   43dec:	38000126 	beq	r7,zero,43df4 <__modsi3+0x54>
   43df0:	0085c83a 	sub	r2,zero,r2
   43df4:	f800283a 	ret
   43df8:	014bc83a 	sub	r5,zero,r5
   43dfc:	003fec06 	br	43db0 <__alt_data_end+0xfffc55b0>
   43e00:	0109c83a 	sub	r4,zero,r4
   43e04:	01c00044 	movi	r7,1
   43e08:	003fe706 	br	43da8 <__alt_data_end+0xfffc55a8>
   43e0c:	00c00044 	movi	r3,1
   43e10:	003ff106 	br	43dd8 <__alt_data_end+0xfffc55d8>

00043e14 <__udivsi3>:
   43e14:	200d883a 	mov	r6,r4
   43e18:	2900152e 	bgeu	r5,r4,43e70 <__udivsi3+0x5c>
   43e1c:	28001416 	blt	r5,zero,43e70 <__udivsi3+0x5c>
   43e20:	00800804 	movi	r2,32
   43e24:	00c00044 	movi	r3,1
   43e28:	00000206 	br	43e34 <__udivsi3+0x20>
   43e2c:	10000e26 	beq	r2,zero,43e68 <__udivsi3+0x54>
   43e30:	28000516 	blt	r5,zero,43e48 <__udivsi3+0x34>
   43e34:	294b883a 	add	r5,r5,r5
   43e38:	10bfffc4 	addi	r2,r2,-1
   43e3c:	18c7883a 	add	r3,r3,r3
   43e40:	293ffa36 	bltu	r5,r4,43e2c <__alt_data_end+0xfffc562c>
   43e44:	18000826 	beq	r3,zero,43e68 <__udivsi3+0x54>
   43e48:	0005883a 	mov	r2,zero
   43e4c:	31400236 	bltu	r6,r5,43e58 <__udivsi3+0x44>
   43e50:	314dc83a 	sub	r6,r6,r5
   43e54:	10c4b03a 	or	r2,r2,r3
   43e58:	1806d07a 	srli	r3,r3,1
   43e5c:	280ad07a 	srli	r5,r5,1
   43e60:	183ffa1e 	bne	r3,zero,43e4c <__alt_data_end+0xfffc564c>
   43e64:	f800283a 	ret
   43e68:	0005883a 	mov	r2,zero
   43e6c:	f800283a 	ret
   43e70:	00c00044 	movi	r3,1
   43e74:	003ff406 	br	43e48 <__alt_data_end+0xfffc5648>

00043e78 <__umodsi3>:
   43e78:	2005883a 	mov	r2,r4
   43e7c:	2900122e 	bgeu	r5,r4,43ec8 <__umodsi3+0x50>
   43e80:	28001116 	blt	r5,zero,43ec8 <__umodsi3+0x50>
   43e84:	01800804 	movi	r6,32
   43e88:	00c00044 	movi	r3,1
   43e8c:	00000206 	br	43e98 <__umodsi3+0x20>
   43e90:	30000c26 	beq	r6,zero,43ec4 <__umodsi3+0x4c>
   43e94:	28000516 	blt	r5,zero,43eac <__umodsi3+0x34>
   43e98:	294b883a 	add	r5,r5,r5
   43e9c:	31bfffc4 	addi	r6,r6,-1
   43ea0:	18c7883a 	add	r3,r3,r3
   43ea4:	293ffa36 	bltu	r5,r4,43e90 <__alt_data_end+0xfffc5690>
   43ea8:	18000626 	beq	r3,zero,43ec4 <__umodsi3+0x4c>
   43eac:	1806d07a 	srli	r3,r3,1
   43eb0:	11400136 	bltu	r2,r5,43eb8 <__umodsi3+0x40>
   43eb4:	1145c83a 	sub	r2,r2,r5
   43eb8:	280ad07a 	srli	r5,r5,1
   43ebc:	183ffb1e 	bne	r3,zero,43eac <__alt_data_end+0xfffc56ac>
   43ec0:	f800283a 	ret
   43ec4:	f800283a 	ret
   43ec8:	00c00044 	movi	r3,1
   43ecc:	003ff706 	br	43eac <__alt_data_end+0xfffc56ac>

00043ed0 <_printf_r>:
   43ed0:	defffd04 	addi	sp,sp,-12
   43ed4:	2805883a 	mov	r2,r5
   43ed8:	dfc00015 	stw	ra,0(sp)
   43edc:	d9800115 	stw	r6,4(sp)
   43ee0:	d9c00215 	stw	r7,8(sp)
   43ee4:	21400217 	ldw	r5,8(r4)
   43ee8:	d9c00104 	addi	r7,sp,4
   43eec:	100d883a 	mov	r6,r2
   43ef0:	00463440 	call	46344 <___vfprintf_internal_r>
   43ef4:	dfc00017 	ldw	ra,0(sp)
   43ef8:	dec00304 	addi	sp,sp,12
   43efc:	f800283a 	ret

00043f00 <printf>:
   43f00:	defffc04 	addi	sp,sp,-16
   43f04:	dfc00015 	stw	ra,0(sp)
   43f08:	d9400115 	stw	r5,4(sp)
   43f0c:	d9800215 	stw	r6,8(sp)
   43f10:	d9c00315 	stw	r7,12(sp)
   43f14:	00800174 	movhi	r2,5
   43f18:	109ea804 	addi	r2,r2,31392
   43f1c:	10800017 	ldw	r2,0(r2)
   43f20:	200b883a 	mov	r5,r4
   43f24:	d9800104 	addi	r6,sp,4
   43f28:	11000217 	ldw	r4,8(r2)
   43f2c:	004853c0 	call	4853c <__vfprintf_internal>
   43f30:	dfc00017 	ldw	ra,0(sp)
   43f34:	dec00404 	addi	sp,sp,16
   43f38:	f800283a 	ret

00043f3c <_puts_r>:
   43f3c:	defff604 	addi	sp,sp,-40
   43f40:	dc000715 	stw	r16,28(sp)
   43f44:	2021883a 	mov	r16,r4
   43f48:	2809883a 	mov	r4,r5
   43f4c:	dc400815 	stw	r17,32(sp)
   43f50:	dfc00915 	stw	ra,36(sp)
   43f54:	2823883a 	mov	r17,r5
   43f58:	00440d40 	call	440d4 <strlen>
   43f5c:	10c00044 	addi	r3,r2,1
   43f60:	d8800115 	stw	r2,4(sp)
   43f64:	00800174 	movhi	r2,5
   43f68:	10973a04 	addi	r2,r2,23784
   43f6c:	d8800215 	stw	r2,8(sp)
   43f70:	00800044 	movi	r2,1
   43f74:	d8800315 	stw	r2,12(sp)
   43f78:	00800084 	movi	r2,2
   43f7c:	dc400015 	stw	r17,0(sp)
   43f80:	d8c00615 	stw	r3,24(sp)
   43f84:	dec00415 	stw	sp,16(sp)
   43f88:	d8800515 	stw	r2,20(sp)
   43f8c:	80000226 	beq	r16,zero,43f98 <_puts_r+0x5c>
   43f90:	80800e17 	ldw	r2,56(r16)
   43f94:	10001426 	beq	r2,zero,43fe8 <_puts_r+0xac>
   43f98:	81400217 	ldw	r5,8(r16)
   43f9c:	2880030b 	ldhu	r2,12(r5)
   43fa0:	10c8000c 	andi	r3,r2,8192
   43fa4:	1800061e 	bne	r3,zero,43fc0 <_puts_r+0x84>
   43fa8:	29001917 	ldw	r4,100(r5)
   43fac:	00f7ffc4 	movi	r3,-8193
   43fb0:	10880014 	ori	r2,r2,8192
   43fb4:	20c6703a 	and	r3,r4,r3
   43fb8:	2880030d 	sth	r2,12(r5)
   43fbc:	28c01915 	stw	r3,100(r5)
   43fc0:	d9800404 	addi	r6,sp,16
   43fc4:	8009883a 	mov	r4,r16
   43fc8:	004ab900 	call	4ab90 <__sfvwrite_r>
   43fcc:	1000091e 	bne	r2,zero,43ff4 <_puts_r+0xb8>
   43fd0:	00800284 	movi	r2,10
   43fd4:	dfc00917 	ldw	ra,36(sp)
   43fd8:	dc400817 	ldw	r17,32(sp)
   43fdc:	dc000717 	ldw	r16,28(sp)
   43fe0:	dec00a04 	addi	sp,sp,40
   43fe4:	f800283a 	ret
   43fe8:	8009883a 	mov	r4,r16
   43fec:	004a70c0 	call	4a70c <__sinit>
   43ff0:	003fe906 	br	43f98 <__alt_data_end+0xfffc5798>
   43ff4:	00bfffc4 	movi	r2,-1
   43ff8:	003ff606 	br	43fd4 <__alt_data_end+0xfffc57d4>

00043ffc <puts>:
   43ffc:	00800174 	movhi	r2,5
   44000:	109ea804 	addi	r2,r2,31392
   44004:	200b883a 	mov	r5,r4
   44008:	11000017 	ldw	r4,0(r2)
   4400c:	0043f3c1 	jmpi	43f3c <_puts_r>

00044010 <_sprintf_r>:
   44010:	deffe404 	addi	sp,sp,-112
   44014:	2807883a 	mov	r3,r5
   44018:	dfc01a15 	stw	ra,104(sp)
   4401c:	d9c01b15 	stw	r7,108(sp)
   44020:	00a00034 	movhi	r2,32768
   44024:	10bfffc4 	addi	r2,r2,-1
   44028:	02008204 	movi	r8,520
   4402c:	d8800215 	stw	r2,8(sp)
   44030:	d8800515 	stw	r2,20(sp)
   44034:	d9c01b04 	addi	r7,sp,108
   44038:	d80b883a 	mov	r5,sp
   4403c:	00bfffc4 	movi	r2,-1
   44040:	d8c00015 	stw	r3,0(sp)
   44044:	d8c00415 	stw	r3,16(sp)
   44048:	da00030d 	sth	r8,12(sp)
   4404c:	d880038d 	sth	r2,14(sp)
   44050:	004416c0 	call	4416c <___svfprintf_internal_r>
   44054:	d8c00017 	ldw	r3,0(sp)
   44058:	18000005 	stb	zero,0(r3)
   4405c:	dfc01a17 	ldw	ra,104(sp)
   44060:	dec01c04 	addi	sp,sp,112
   44064:	f800283a 	ret

00044068 <sprintf>:
   44068:	deffe304 	addi	sp,sp,-116
   4406c:	2007883a 	mov	r3,r4
   44070:	dfc01a15 	stw	ra,104(sp)
   44074:	d9801b15 	stw	r6,108(sp)
   44078:	d9c01c15 	stw	r7,112(sp)
   4407c:	01000174 	movhi	r4,5
   44080:	211ea804 	addi	r4,r4,31392
   44084:	21000017 	ldw	r4,0(r4)
   44088:	00a00034 	movhi	r2,32768
   4408c:	10bfffc4 	addi	r2,r2,-1
   44090:	280d883a 	mov	r6,r5
   44094:	02008204 	movi	r8,520
   44098:	d8800215 	stw	r2,8(sp)
   4409c:	d8800515 	stw	r2,20(sp)
   440a0:	d9c01b04 	addi	r7,sp,108
   440a4:	d80b883a 	mov	r5,sp
   440a8:	00bfffc4 	movi	r2,-1
   440ac:	d8c00015 	stw	r3,0(sp)
   440b0:	d8c00415 	stw	r3,16(sp)
   440b4:	da00030d 	sth	r8,12(sp)
   440b8:	d880038d 	sth	r2,14(sp)
   440bc:	004416c0 	call	4416c <___svfprintf_internal_r>
   440c0:	d8c00017 	ldw	r3,0(sp)
   440c4:	18000005 	stb	zero,0(r3)
   440c8:	dfc01a17 	ldw	ra,104(sp)
   440cc:	dec01d04 	addi	sp,sp,116
   440d0:	f800283a 	ret

000440d4 <strlen>:
   440d4:	208000cc 	andi	r2,r4,3
   440d8:	10002026 	beq	r2,zero,4415c <strlen+0x88>
   440dc:	20800007 	ldb	r2,0(r4)
   440e0:	10002026 	beq	r2,zero,44164 <strlen+0x90>
   440e4:	2005883a 	mov	r2,r4
   440e8:	00000206 	br	440f4 <strlen+0x20>
   440ec:	10c00007 	ldb	r3,0(r2)
   440f0:	18001826 	beq	r3,zero,44154 <strlen+0x80>
   440f4:	10800044 	addi	r2,r2,1
   440f8:	10c000cc 	andi	r3,r2,3
   440fc:	183ffb1e 	bne	r3,zero,440ec <__alt_data_end+0xfffc58ec>
   44100:	10c00017 	ldw	r3,0(r2)
   44104:	01ffbff4 	movhi	r7,65279
   44108:	39ffbfc4 	addi	r7,r7,-257
   4410c:	00ca303a 	nor	r5,zero,r3
   44110:	01a02074 	movhi	r6,32897
   44114:	19c7883a 	add	r3,r3,r7
   44118:	31a02004 	addi	r6,r6,-32640
   4411c:	1946703a 	and	r3,r3,r5
   44120:	1986703a 	and	r3,r3,r6
   44124:	1800091e 	bne	r3,zero,4414c <strlen+0x78>
   44128:	10800104 	addi	r2,r2,4
   4412c:	10c00017 	ldw	r3,0(r2)
   44130:	19cb883a 	add	r5,r3,r7
   44134:	00c6303a 	nor	r3,zero,r3
   44138:	28c6703a 	and	r3,r5,r3
   4413c:	1986703a 	and	r3,r3,r6
   44140:	183ff926 	beq	r3,zero,44128 <__alt_data_end+0xfffc5928>
   44144:	00000106 	br	4414c <strlen+0x78>
   44148:	10800044 	addi	r2,r2,1
   4414c:	10c00007 	ldb	r3,0(r2)
   44150:	183ffd1e 	bne	r3,zero,44148 <__alt_data_end+0xfffc5948>
   44154:	1105c83a 	sub	r2,r2,r4
   44158:	f800283a 	ret
   4415c:	2005883a 	mov	r2,r4
   44160:	003fe706 	br	44100 <__alt_data_end+0xfffc5900>
   44164:	0005883a 	mov	r2,zero
   44168:	f800283a 	ret

0004416c <___svfprintf_internal_r>:
   4416c:	deffb704 	addi	sp,sp,-292
   44170:	dfc04815 	stw	ra,288(sp)
   44174:	ddc04615 	stw	r23,280(sp)
   44178:	d9402c15 	stw	r5,176(sp)
   4417c:	d9003915 	stw	r4,228(sp)
   44180:	302f883a 	mov	r23,r6
   44184:	d9c02d15 	stw	r7,180(sp)
   44188:	df004715 	stw	fp,284(sp)
   4418c:	dd804515 	stw	r22,276(sp)
   44190:	dd404415 	stw	r21,272(sp)
   44194:	dd004315 	stw	r20,268(sp)
   44198:	dcc04215 	stw	r19,264(sp)
   4419c:	dc804115 	stw	r18,260(sp)
   441a0:	dc404015 	stw	r17,256(sp)
   441a4:	dc003f15 	stw	r16,252(sp)
   441a8:	004b2800 	call	4b280 <_localeconv_r>
   441ac:	10800017 	ldw	r2,0(r2)
   441b0:	1009883a 	mov	r4,r2
   441b4:	d8803415 	stw	r2,208(sp)
   441b8:	00440d40 	call	440d4 <strlen>
   441bc:	d8c02c17 	ldw	r3,176(sp)
   441c0:	d8803815 	stw	r2,224(sp)
   441c4:	1880030b 	ldhu	r2,12(r3)
   441c8:	1080200c 	andi	r2,r2,128
   441cc:	10000226 	beq	r2,zero,441d8 <___svfprintf_internal_r+0x6c>
   441d0:	18800417 	ldw	r2,16(r3)
   441d4:	10067f26 	beq	r2,zero,45bd4 <___svfprintf_internal_r+0x1a68>
   441d8:	dcc03917 	ldw	r19,228(sp)
   441dc:	d8c00404 	addi	r3,sp,16
   441e0:	05400174 	movhi	r21,5
   441e4:	d9001e04 	addi	r4,sp,120
   441e8:	ad574b84 	addi	r21,r21,23854
   441ec:	d8c01e15 	stw	r3,120(sp)
   441f0:	d8002015 	stw	zero,128(sp)
   441f4:	d8001f15 	stw	zero,124(sp)
   441f8:	d8003315 	stw	zero,204(sp)
   441fc:	d8003615 	stw	zero,216(sp)
   44200:	d8003715 	stw	zero,220(sp)
   44204:	1811883a 	mov	r8,r3
   44208:	d8003a15 	stw	zero,232(sp)
   4420c:	d8003b15 	stw	zero,236(sp)
   44210:	d8002f15 	stw	zero,188(sp)
   44214:	d9002815 	stw	r4,160(sp)
   44218:	b8800007 	ldb	r2,0(r23)
   4421c:	10026726 	beq	r2,zero,44bbc <___svfprintf_internal_r+0xa50>
   44220:	00c00944 	movi	r3,37
   44224:	b821883a 	mov	r16,r23
   44228:	10c0021e 	bne	r2,r3,44234 <___svfprintf_internal_r+0xc8>
   4422c:	00001406 	br	44280 <___svfprintf_internal_r+0x114>
   44230:	10c00326 	beq	r2,r3,44240 <___svfprintf_internal_r+0xd4>
   44234:	84000044 	addi	r16,r16,1
   44238:	80800007 	ldb	r2,0(r16)
   4423c:	103ffc1e 	bne	r2,zero,44230 <__alt_data_end+0xfffc5a30>
   44240:	85e3c83a 	sub	r17,r16,r23
   44244:	88000e26 	beq	r17,zero,44280 <___svfprintf_internal_r+0x114>
   44248:	d8c02017 	ldw	r3,128(sp)
   4424c:	d8801f17 	ldw	r2,124(sp)
   44250:	45c00015 	stw	r23,0(r8)
   44254:	1c47883a 	add	r3,r3,r17
   44258:	10800044 	addi	r2,r2,1
   4425c:	d8c02015 	stw	r3,128(sp)
   44260:	44400115 	stw	r17,4(r8)
   44264:	d8801f15 	stw	r2,124(sp)
   44268:	00c001c4 	movi	r3,7
   4426c:	18809716 	blt	r3,r2,444cc <___svfprintf_internal_r+0x360>
   44270:	42000204 	addi	r8,r8,8
   44274:	d9402f17 	ldw	r5,188(sp)
   44278:	2c4b883a 	add	r5,r5,r17
   4427c:	d9402f15 	stw	r5,188(sp)
   44280:	80800007 	ldb	r2,0(r16)
   44284:	10009826 	beq	r2,zero,444e8 <___svfprintf_internal_r+0x37c>
   44288:	84400047 	ldb	r17,1(r16)
   4428c:	00bfffc4 	movi	r2,-1
   44290:	85c00044 	addi	r23,r16,1
   44294:	d8002785 	stb	zero,158(sp)
   44298:	0007883a 	mov	r3,zero
   4429c:	000f883a 	mov	r7,zero
   442a0:	d8802915 	stw	r2,164(sp)
   442a4:	d8003115 	stw	zero,196(sp)
   442a8:	0025883a 	mov	r18,zero
   442ac:	01401604 	movi	r5,88
   442b0:	01800244 	movi	r6,9
   442b4:	02800a84 	movi	r10,42
   442b8:	02401b04 	movi	r9,108
   442bc:	bdc00044 	addi	r23,r23,1
   442c0:	88bff804 	addi	r2,r17,-32
   442c4:	2882f036 	bltu	r5,r2,44e88 <___svfprintf_internal_r+0xd1c>
   442c8:	100490ba 	slli	r2,r2,2
   442cc:	01000134 	movhi	r4,4
   442d0:	2110b804 	addi	r4,r4,17120
   442d4:	1105883a 	add	r2,r2,r4
   442d8:	10800017 	ldw	r2,0(r2)
   442dc:	1000683a 	jmp	r2
   442e0:	00044df0 	cmpltui	zero,zero,4407
   442e4:	00044e88 	cmpgei	zero,zero,4410
   442e8:	00044e88 	cmpgei	zero,zero,4410
   442ec:	00044de4 	muli	zero,zero,4407
   442f0:	00044e88 	cmpgei	zero,zero,4410
   442f4:	00044e88 	cmpgei	zero,zero,4410
   442f8:	00044e88 	cmpgei	zero,zero,4410
   442fc:	00044e88 	cmpgei	zero,zero,4410
   44300:	00044e88 	cmpgei	zero,zero,4410
   44304:	00044e88 	cmpgei	zero,zero,4410
   44308:	00044544 	movi	zero,4373
   4430c:	00044d20 	cmpeqi	zero,zero,4404
   44310:	00044e88 	cmpgei	zero,zero,4410
   44314:	00044454 	movui	zero,4369
   44318:	0004456c 	andhi	zero,zero,4373
   4431c:	00044e88 	cmpgei	zero,zero,4410
   44320:	000445e0 	cmpeqi	zero,zero,4375
   44324:	000445ac 	andhi	zero,zero,4374
   44328:	000445ac 	andhi	zero,zero,4374
   4432c:	000445ac 	andhi	zero,zero,4374
   44330:	000445ac 	andhi	zero,zero,4374
   44334:	000445ac 	andhi	zero,zero,4374
   44338:	000445ac 	andhi	zero,zero,4374
   4433c:	000445ac 	andhi	zero,zero,4374
   44340:	000445ac 	andhi	zero,zero,4374
   44344:	000445ac 	andhi	zero,zero,4374
   44348:	00044e88 	cmpgei	zero,zero,4410
   4434c:	00044e88 	cmpgei	zero,zero,4410
   44350:	00044e88 	cmpgei	zero,zero,4410
   44354:	00044e88 	cmpgei	zero,zero,4410
   44358:	00044e88 	cmpgei	zero,zero,4410
   4435c:	00044e88 	cmpgei	zero,zero,4410
   44360:	00044e88 	cmpgei	zero,zero,4410
   44364:	00044e88 	cmpgei	zero,zero,4410
   44368:	00044e88 	cmpgei	zero,zero,4410
   4436c:	00044e88 	cmpgei	zero,zero,4410
   44370:	00044698 	cmpnei	zero,zero,4378
   44374:	000445ec 	andhi	zero,zero,4375
   44378:	00044e88 	cmpgei	zero,zero,4410
   4437c:	000445ec 	andhi	zero,zero,4375
   44380:	00044e88 	cmpgei	zero,zero,4410
   44384:	00044e88 	cmpgei	zero,zero,4410
   44388:	00044e88 	cmpgei	zero,zero,4410
   4438c:	00044e88 	cmpgei	zero,zero,4410
   44390:	0004468c 	andi	zero,zero,4378
   44394:	00044e88 	cmpgei	zero,zero,4410
   44398:	00044e88 	cmpgei	zero,zero,4410
   4439c:	00044754 	movui	zero,4381
   443a0:	00044e88 	cmpgei	zero,zero,4410
   443a4:	00044e88 	cmpgei	zero,zero,4410
   443a8:	00044e88 	cmpgei	zero,zero,4410
   443ac:	00044e88 	cmpgei	zero,zero,4410
   443b0:	00044e88 	cmpgei	zero,zero,4410
   443b4:	00044bc4 	movi	zero,4399
   443b8:	00044e88 	cmpgei	zero,zero,4410
   443bc:	00044e88 	cmpgei	zero,zero,4410
   443c0:	00044c24 	muli	zero,zero,4400
   443c4:	00044e88 	cmpgei	zero,zero,4410
   443c8:	00044e88 	cmpgei	zero,zero,4410
   443cc:	00044e88 	cmpgei	zero,zero,4410
   443d0:	00044e88 	cmpgei	zero,zero,4410
   443d4:	00044e88 	cmpgei	zero,zero,4410
   443d8:	00044e88 	cmpgei	zero,zero,4410
   443dc:	00044e88 	cmpgei	zero,zero,4410
   443e0:	00044e88 	cmpgei	zero,zero,4410
   443e4:	00044e88 	cmpgei	zero,zero,4410
   443e8:	00044e88 	cmpgei	zero,zero,4410
   443ec:	00044cd4 	movui	zero,4403
   443f0:	00044e10 	cmplti	zero,zero,4408
   443f4:	000445ec 	andhi	zero,zero,4375
   443f8:	000445ec 	andhi	zero,zero,4375
   443fc:	000445ec 	andhi	zero,zero,4375
   44400:	00044e64 	muli	zero,zero,4409
   44404:	00044e10 	cmplti	zero,zero,4408
   44408:	00044e88 	cmpgei	zero,zero,4410
   4440c:	00044e88 	cmpgei	zero,zero,4410
   44410:	00044e20 	cmpeqi	zero,zero,4408
   44414:	00044e88 	cmpgei	zero,zero,4410
   44418:	00044e30 	cmpltui	zero,zero,4408
   4441c:	00044d10 	cmplti	zero,zero,4404
   44420:	00044460 	cmpeqi	zero,zero,4369
   44424:	00044d30 	cmpltui	zero,zero,4404
   44428:	00044e88 	cmpgei	zero,zero,4410
   4442c:	00044d3c 	xorhi	zero,zero,4404
   44430:	00044e88 	cmpgei	zero,zero,4410
   44434:	00044d98 	cmpnei	zero,zero,4406
   44438:	00044e88 	cmpgei	zero,zero,4410
   4443c:	00044e88 	cmpgei	zero,zero,4410
   44440:	00044da8 	cmpgeui	zero,zero,4406
   44444:	d9003117 	ldw	r4,196(sp)
   44448:	d8802d15 	stw	r2,180(sp)
   4444c:	0109c83a 	sub	r4,zero,r4
   44450:	d9003115 	stw	r4,196(sp)
   44454:	94800114 	ori	r18,r18,4
   44458:	bc400007 	ldb	r17,0(r23)
   4445c:	003f9706 	br	442bc <__alt_data_end+0xfffc5abc>
   44460:	00800c04 	movi	r2,48
   44464:	d9002d17 	ldw	r4,180(sp)
   44468:	d9402917 	ldw	r5,164(sp)
   4446c:	d8802705 	stb	r2,156(sp)
   44470:	00801e04 	movi	r2,120
   44474:	d8802745 	stb	r2,157(sp)
   44478:	d8002785 	stb	zero,158(sp)
   4447c:	20c00104 	addi	r3,r4,4
   44480:	25000017 	ldw	r20,0(r4)
   44484:	002d883a 	mov	r22,zero
   44488:	90800094 	ori	r2,r18,2
   4448c:	28028616 	blt	r5,zero,44ea8 <___svfprintf_internal_r+0xd3c>
   44490:	00bfdfc4 	movi	r2,-129
   44494:	90a4703a 	and	r18,r18,r2
   44498:	d8c02d15 	stw	r3,180(sp)
   4449c:	94800094 	ori	r18,r18,2
   444a0:	a002731e 	bne	r20,zero,44e70 <___svfprintf_internal_r+0xd04>
   444a4:	00800174 	movhi	r2,5
   444a8:	10974404 	addi	r2,r2,23824
   444ac:	d8803a15 	stw	r2,232(sp)
   444b0:	04401e04 	movi	r17,120
   444b4:	d8c02917 	ldw	r3,164(sp)
   444b8:	0039883a 	mov	fp,zero
   444bc:	1801d526 	beq	r3,zero,44c14 <___svfprintf_internal_r+0xaa8>
   444c0:	0029883a 	mov	r20,zero
   444c4:	002d883a 	mov	r22,zero
   444c8:	0001f106 	br	44c90 <___svfprintf_internal_r+0xb24>
   444cc:	d9402c17 	ldw	r5,176(sp)
   444d0:	d9801e04 	addi	r6,sp,120
   444d4:	9809883a 	mov	r4,r19
   444d8:	004d9680 	call	4d968 <__ssprint_r>
   444dc:	1000081e 	bne	r2,zero,44500 <___svfprintf_internal_r+0x394>
   444e0:	da000404 	addi	r8,sp,16
   444e4:	003f6306 	br	44274 <__alt_data_end+0xfffc5a74>
   444e8:	d8802017 	ldw	r2,128(sp)
   444ec:	10000426 	beq	r2,zero,44500 <___svfprintf_internal_r+0x394>
   444f0:	d9402c17 	ldw	r5,176(sp)
   444f4:	d9003917 	ldw	r4,228(sp)
   444f8:	d9801e04 	addi	r6,sp,120
   444fc:	004d9680 	call	4d968 <__ssprint_r>
   44500:	d8802c17 	ldw	r2,176(sp)
   44504:	10c0030b 	ldhu	r3,12(r2)
   44508:	d8802f17 	ldw	r2,188(sp)
   4450c:	18c0100c 	andi	r3,r3,64
   44510:	1805f51e 	bne	r3,zero,45ce8 <___svfprintf_internal_r+0x1b7c>
   44514:	dfc04817 	ldw	ra,288(sp)
   44518:	df004717 	ldw	fp,284(sp)
   4451c:	ddc04617 	ldw	r23,280(sp)
   44520:	dd804517 	ldw	r22,276(sp)
   44524:	dd404417 	ldw	r21,272(sp)
   44528:	dd004317 	ldw	r20,268(sp)
   4452c:	dcc04217 	ldw	r19,264(sp)
   44530:	dc804117 	ldw	r18,260(sp)
   44534:	dc404017 	ldw	r17,256(sp)
   44538:	dc003f17 	ldw	r16,252(sp)
   4453c:	dec04904 	addi	sp,sp,292
   44540:	f800283a 	ret
   44544:	d8802d17 	ldw	r2,180(sp)
   44548:	d9002d17 	ldw	r4,180(sp)
   4454c:	10800017 	ldw	r2,0(r2)
   44550:	d8803115 	stw	r2,196(sp)
   44554:	20800104 	addi	r2,r4,4
   44558:	d9003117 	ldw	r4,196(sp)
   4455c:	203fb916 	blt	r4,zero,44444 <__alt_data_end+0xfffc5c44>
   44560:	d8802d15 	stw	r2,180(sp)
   44564:	bc400007 	ldb	r17,0(r23)
   44568:	003f5406 	br	442bc <__alt_data_end+0xfffc5abc>
   4456c:	bc400007 	ldb	r17,0(r23)
   44570:	bac00044 	addi	r11,r23,1
   44574:	8a873926 	beq	r17,r10,4625c <___svfprintf_internal_r+0x20f0>
   44578:	88bff404 	addi	r2,r17,-48
   4457c:	0009883a 	mov	r4,zero
   44580:	30868836 	bltu	r6,r2,45fa4 <___svfprintf_internal_r+0x1e38>
   44584:	5c400007 	ldb	r17,0(r11)
   44588:	210002a4 	muli	r4,r4,10
   4458c:	5dc00044 	addi	r23,r11,1
   44590:	b817883a 	mov	r11,r23
   44594:	2089883a 	add	r4,r4,r2
   44598:	88bff404 	addi	r2,r17,-48
   4459c:	30bff92e 	bgeu	r6,r2,44584 <__alt_data_end+0xfffc5d84>
   445a0:	2005d716 	blt	r4,zero,45d00 <___svfprintf_internal_r+0x1b94>
   445a4:	d9002915 	stw	r4,164(sp)
   445a8:	003f4506 	br	442c0 <__alt_data_end+0xfffc5ac0>
   445ac:	b809883a 	mov	r4,r23
   445b0:	d8003115 	stw	zero,196(sp)
   445b4:	88bff404 	addi	r2,r17,-48
   445b8:	0017883a 	mov	r11,zero
   445bc:	24400007 	ldb	r17,0(r4)
   445c0:	5ac002a4 	muli	r11,r11,10
   445c4:	bdc00044 	addi	r23,r23,1
   445c8:	b809883a 	mov	r4,r23
   445cc:	12d7883a 	add	r11,r2,r11
   445d0:	88bff404 	addi	r2,r17,-48
   445d4:	30bff92e 	bgeu	r6,r2,445bc <__alt_data_end+0xfffc5dbc>
   445d8:	dac03115 	stw	r11,196(sp)
   445dc:	003f3806 	br	442c0 <__alt_data_end+0xfffc5ac0>
   445e0:	94802014 	ori	r18,r18,128
   445e4:	bc400007 	ldb	r17,0(r23)
   445e8:	003f3406 	br	442bc <__alt_data_end+0xfffc5abc>
   445ec:	18c03fcc 	andi	r3,r3,255
   445f0:	1807471e 	bne	r3,zero,46310 <___svfprintf_internal_r+0x21a4>
   445f4:	9080020c 	andi	r2,r18,8
   445f8:	10047d26 	beq	r2,zero,457f0 <___svfprintf_internal_r+0x1684>
   445fc:	d8c02d17 	ldw	r3,180(sp)
   44600:	d9002d17 	ldw	r4,180(sp)
   44604:	d9402d17 	ldw	r5,180(sp)
   44608:	18c00017 	ldw	r3,0(r3)
   4460c:	21000117 	ldw	r4,4(r4)
   44610:	29400204 	addi	r5,r5,8
   44614:	d8c03615 	stw	r3,216(sp)
   44618:	d9003715 	stw	r4,220(sp)
   4461c:	d9402d15 	stw	r5,180(sp)
   44620:	d9003617 	ldw	r4,216(sp)
   44624:	d9403717 	ldw	r5,220(sp)
   44628:	da003e15 	stw	r8,248(sp)
   4462c:	04000044 	movi	r16,1
   44630:	004d6880 	call	4d688 <__fpclassifyd>
   44634:	da003e17 	ldw	r8,248(sp)
   44638:	14044b1e 	bne	r2,r16,45768 <___svfprintf_internal_r+0x15fc>
   4463c:	d9003617 	ldw	r4,216(sp)
   44640:	d9403717 	ldw	r5,220(sp)
   44644:	000d883a 	mov	r6,zero
   44648:	000f883a 	mov	r7,zero
   4464c:	00519040 	call	51904 <__ledf2>
   44650:	da003e17 	ldw	r8,248(sp)
   44654:	1005f316 	blt	r2,zero,45e24 <___svfprintf_internal_r+0x1cb8>
   44658:	df002783 	ldbu	fp,158(sp)
   4465c:	008011c4 	movi	r2,71
   44660:	1445590e 	bge	r2,r17,45bc8 <___svfprintf_internal_r+0x1a5c>
   44664:	04000174 	movhi	r16,5
   44668:	84173c04 	addi	r16,r16,23792
   4466c:	00c000c4 	movi	r3,3
   44670:	00bfdfc4 	movi	r2,-129
   44674:	d8c02a15 	stw	r3,168(sp)
   44678:	90a4703a 	and	r18,r18,r2
   4467c:	d8c02e15 	stw	r3,184(sp)
   44680:	d8002915 	stw	zero,164(sp)
   44684:	d8003215 	stw	zero,200(sp)
   44688:	00006606 	br	44824 <___svfprintf_internal_r+0x6b8>
   4468c:	94800214 	ori	r18,r18,8
   44690:	bc400007 	ldb	r17,0(r23)
   44694:	003f0906 	br	442bc <__alt_data_end+0xfffc5abc>
   44698:	18c03fcc 	andi	r3,r3,255
   4469c:	1807181e 	bne	r3,zero,46300 <___svfprintf_internal_r+0x2194>
   446a0:	94800414 	ori	r18,r18,16
   446a4:	9080080c 	andi	r2,r18,32
   446a8:	10039626 	beq	r2,zero,45504 <___svfprintf_internal_r+0x1398>
   446ac:	d9402d17 	ldw	r5,180(sp)
   446b0:	28800117 	ldw	r2,4(r5)
   446b4:	2d000017 	ldw	r20,0(r5)
   446b8:	29400204 	addi	r5,r5,8
   446bc:	d9402d15 	stw	r5,180(sp)
   446c0:	102d883a 	mov	r22,r2
   446c4:	10039816 	blt	r2,zero,45528 <___svfprintf_internal_r+0x13bc>
   446c8:	d9402917 	ldw	r5,164(sp)
   446cc:	df002783 	ldbu	fp,158(sp)
   446d0:	2803ab16 	blt	r5,zero,45580 <___svfprintf_internal_r+0x1414>
   446d4:	00ffdfc4 	movi	r3,-129
   446d8:	a584b03a 	or	r2,r20,r22
   446dc:	90e4703a 	and	r18,r18,r3
   446e0:	10014a26 	beq	r2,zero,44c0c <___svfprintf_internal_r+0xaa0>
   446e4:	b0034b26 	beq	r22,zero,45414 <___svfprintf_internal_r+0x12a8>
   446e8:	dc402a15 	stw	r17,168(sp)
   446ec:	dc001e04 	addi	r16,sp,120
   446f0:	b023883a 	mov	r17,r22
   446f4:	402d883a 	mov	r22,r8
   446f8:	a009883a 	mov	r4,r20
   446fc:	880b883a 	mov	r5,r17
   44700:	01800284 	movi	r6,10
   44704:	000f883a 	mov	r7,zero
   44708:	00512680 	call	51268 <__umoddi3>
   4470c:	10800c04 	addi	r2,r2,48
   44710:	843fffc4 	addi	r16,r16,-1
   44714:	a009883a 	mov	r4,r20
   44718:	880b883a 	mov	r5,r17
   4471c:	80800005 	stb	r2,0(r16)
   44720:	01800284 	movi	r6,10
   44724:	000f883a 	mov	r7,zero
   44728:	0050cf00 	call	50cf0 <__udivdi3>
   4472c:	1029883a 	mov	r20,r2
   44730:	10c4b03a 	or	r2,r2,r3
   44734:	1823883a 	mov	r17,r3
   44738:	103fef1e 	bne	r2,zero,446f8 <__alt_data_end+0xfffc5ef8>
   4473c:	d8c02817 	ldw	r3,160(sp)
   44740:	dc402a17 	ldw	r17,168(sp)
   44744:	b011883a 	mov	r8,r22
   44748:	1c07c83a 	sub	r3,r3,r16
   4474c:	d8c02e15 	stw	r3,184(sp)
   44750:	00002e06 	br	4480c <___svfprintf_internal_r+0x6a0>
   44754:	18c03fcc 	andi	r3,r3,255
   44758:	1806e71e 	bne	r3,zero,462f8 <___svfprintf_internal_r+0x218c>
   4475c:	94800414 	ori	r18,r18,16
   44760:	9080080c 	andi	r2,r18,32
   44764:	1002d426 	beq	r2,zero,452b8 <___svfprintf_internal_r+0x114c>
   44768:	d9402d17 	ldw	r5,180(sp)
   4476c:	d8c02917 	ldw	r3,164(sp)
   44770:	d8002785 	stb	zero,158(sp)
   44774:	28800204 	addi	r2,r5,8
   44778:	2d000017 	ldw	r20,0(r5)
   4477c:	2d800117 	ldw	r22,4(r5)
   44780:	18041516 	blt	r3,zero,457d8 <___svfprintf_internal_r+0x166c>
   44784:	013fdfc4 	movi	r4,-129
   44788:	a586b03a 	or	r3,r20,r22
   4478c:	d8802d15 	stw	r2,180(sp)
   44790:	9124703a 	and	r18,r18,r4
   44794:	1802d51e 	bne	r3,zero,452ec <___svfprintf_internal_r+0x1180>
   44798:	d9402917 	ldw	r5,164(sp)
   4479c:	0039883a 	mov	fp,zero
   447a0:	2806be26 	beq	r5,zero,4629c <___svfprintf_internal_r+0x2130>
   447a4:	0029883a 	mov	r20,zero
   447a8:	002d883a 	mov	r22,zero
   447ac:	dc001e04 	addi	r16,sp,120
   447b0:	a006d0fa 	srli	r3,r20,3
   447b4:	b008977a 	slli	r4,r22,29
   447b8:	b02cd0fa 	srli	r22,r22,3
   447bc:	a50001cc 	andi	r20,r20,7
   447c0:	a0800c04 	addi	r2,r20,48
   447c4:	843fffc4 	addi	r16,r16,-1
   447c8:	20e8b03a 	or	r20,r4,r3
   447cc:	80800005 	stb	r2,0(r16)
   447d0:	a586b03a 	or	r3,r20,r22
   447d4:	183ff61e 	bne	r3,zero,447b0 <__alt_data_end+0xfffc5fb0>
   447d8:	90c0004c 	andi	r3,r18,1
   447dc:	18013926 	beq	r3,zero,44cc4 <___svfprintf_internal_r+0xb58>
   447e0:	10803fcc 	andi	r2,r2,255
   447e4:	1080201c 	xori	r2,r2,128
   447e8:	10bfe004 	addi	r2,r2,-128
   447ec:	00c00c04 	movi	r3,48
   447f0:	10c13426 	beq	r2,r3,44cc4 <___svfprintf_internal_r+0xb58>
   447f4:	80ffffc5 	stb	r3,-1(r16)
   447f8:	d8c02817 	ldw	r3,160(sp)
   447fc:	80bfffc4 	addi	r2,r16,-1
   44800:	1021883a 	mov	r16,r2
   44804:	1887c83a 	sub	r3,r3,r2
   44808:	d8c02e15 	stw	r3,184(sp)
   4480c:	d8802e17 	ldw	r2,184(sp)
   44810:	d9002917 	ldw	r4,164(sp)
   44814:	1100010e 	bge	r2,r4,4481c <___svfprintf_internal_r+0x6b0>
   44818:	2005883a 	mov	r2,r4
   4481c:	d8802a15 	stw	r2,168(sp)
   44820:	d8003215 	stw	zero,200(sp)
   44824:	e7003fcc 	andi	fp,fp,255
   44828:	e700201c 	xori	fp,fp,128
   4482c:	e73fe004 	addi	fp,fp,-128
   44830:	e0000326 	beq	fp,zero,44840 <___svfprintf_internal_r+0x6d4>
   44834:	d8c02a17 	ldw	r3,168(sp)
   44838:	18c00044 	addi	r3,r3,1
   4483c:	d8c02a15 	stw	r3,168(sp)
   44840:	90c0008c 	andi	r3,r18,2
   44844:	d8c02b15 	stw	r3,172(sp)
   44848:	18000326 	beq	r3,zero,44858 <___svfprintf_internal_r+0x6ec>
   4484c:	d8c02a17 	ldw	r3,168(sp)
   44850:	18c00084 	addi	r3,r3,2
   44854:	d8c02a15 	stw	r3,168(sp)
   44858:	90c0210c 	andi	r3,r18,132
   4485c:	d8c03015 	stw	r3,192(sp)
   44860:	1801a11e 	bne	r3,zero,44ee8 <___svfprintf_internal_r+0xd7c>
   44864:	d9003117 	ldw	r4,196(sp)
   44868:	d8c02a17 	ldw	r3,168(sp)
   4486c:	20e9c83a 	sub	r20,r4,r3
   44870:	05019d0e 	bge	zero,r20,44ee8 <___svfprintf_internal_r+0xd7c>
   44874:	02400404 	movi	r9,16
   44878:	d8c02017 	ldw	r3,128(sp)
   4487c:	d8801f17 	ldw	r2,124(sp)
   44880:	4d051b0e 	bge	r9,r20,45cf0 <___svfprintf_internal_r+0x1b84>
   44884:	01400174 	movhi	r5,5
   44888:	29574f84 	addi	r5,r5,23870
   4488c:	dc403c15 	stw	r17,240(sp)
   44890:	d9403515 	stw	r5,212(sp)
   44894:	a023883a 	mov	r17,r20
   44898:	482d883a 	mov	r22,r9
   4489c:	9029883a 	mov	r20,r18
   448a0:	070001c4 	movi	fp,7
   448a4:	8025883a 	mov	r18,r16
   448a8:	dc002c17 	ldw	r16,176(sp)
   448ac:	00000306 	br	448bc <___svfprintf_internal_r+0x750>
   448b0:	8c7ffc04 	addi	r17,r17,-16
   448b4:	42000204 	addi	r8,r8,8
   448b8:	b440130e 	bge	r22,r17,44908 <___svfprintf_internal_r+0x79c>
   448bc:	01000174 	movhi	r4,5
   448c0:	18c00404 	addi	r3,r3,16
   448c4:	10800044 	addi	r2,r2,1
   448c8:	21174f84 	addi	r4,r4,23870
   448cc:	41000015 	stw	r4,0(r8)
   448d0:	45800115 	stw	r22,4(r8)
   448d4:	d8c02015 	stw	r3,128(sp)
   448d8:	d8801f15 	stw	r2,124(sp)
   448dc:	e0bff40e 	bge	fp,r2,448b0 <__alt_data_end+0xfffc60b0>
   448e0:	d9801e04 	addi	r6,sp,120
   448e4:	800b883a 	mov	r5,r16
   448e8:	9809883a 	mov	r4,r19
   448ec:	004d9680 	call	4d968 <__ssprint_r>
   448f0:	103f031e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   448f4:	8c7ffc04 	addi	r17,r17,-16
   448f8:	d8c02017 	ldw	r3,128(sp)
   448fc:	d8801f17 	ldw	r2,124(sp)
   44900:	da000404 	addi	r8,sp,16
   44904:	b47fed16 	blt	r22,r17,448bc <__alt_data_end+0xfffc60bc>
   44908:	9021883a 	mov	r16,r18
   4490c:	a025883a 	mov	r18,r20
   44910:	8829883a 	mov	r20,r17
   44914:	dc403c17 	ldw	r17,240(sp)
   44918:	d9403517 	ldw	r5,212(sp)
   4491c:	a0c7883a 	add	r3,r20,r3
   44920:	10800044 	addi	r2,r2,1
   44924:	41400015 	stw	r5,0(r8)
   44928:	45000115 	stw	r20,4(r8)
   4492c:	d8c02015 	stw	r3,128(sp)
   44930:	d8801f15 	stw	r2,124(sp)
   44934:	010001c4 	movi	r4,7
   44938:	20829f16 	blt	r4,r2,453b8 <___svfprintf_internal_r+0x124c>
   4493c:	df002787 	ldb	fp,158(sp)
   44940:	42000204 	addi	r8,r8,8
   44944:	e0000c26 	beq	fp,zero,44978 <___svfprintf_internal_r+0x80c>
   44948:	d8801f17 	ldw	r2,124(sp)
   4494c:	d9002784 	addi	r4,sp,158
   44950:	18c00044 	addi	r3,r3,1
   44954:	10800044 	addi	r2,r2,1
   44958:	41000015 	stw	r4,0(r8)
   4495c:	01000044 	movi	r4,1
   44960:	41000115 	stw	r4,4(r8)
   44964:	d8c02015 	stw	r3,128(sp)
   44968:	d8801f15 	stw	r2,124(sp)
   4496c:	010001c4 	movi	r4,7
   44970:	20823816 	blt	r4,r2,45254 <___svfprintf_internal_r+0x10e8>
   44974:	42000204 	addi	r8,r8,8
   44978:	d8802b17 	ldw	r2,172(sp)
   4497c:	10000c26 	beq	r2,zero,449b0 <___svfprintf_internal_r+0x844>
   44980:	d8801f17 	ldw	r2,124(sp)
   44984:	d9002704 	addi	r4,sp,156
   44988:	18c00084 	addi	r3,r3,2
   4498c:	10800044 	addi	r2,r2,1
   44990:	41000015 	stw	r4,0(r8)
   44994:	01000084 	movi	r4,2
   44998:	41000115 	stw	r4,4(r8)
   4499c:	d8c02015 	stw	r3,128(sp)
   449a0:	d8801f15 	stw	r2,124(sp)
   449a4:	010001c4 	movi	r4,7
   449a8:	20823216 	blt	r4,r2,45274 <___svfprintf_internal_r+0x1108>
   449ac:	42000204 	addi	r8,r8,8
   449b0:	d9003017 	ldw	r4,192(sp)
   449b4:	00802004 	movi	r2,128
   449b8:	20819726 	beq	r4,r2,45018 <___svfprintf_internal_r+0xeac>
   449bc:	d9402917 	ldw	r5,164(sp)
   449c0:	d8802e17 	ldw	r2,184(sp)
   449c4:	28adc83a 	sub	r22,r5,r2
   449c8:	05802f0e 	bge	zero,r22,44a88 <___svfprintf_internal_r+0x91c>
   449cc:	07000404 	movi	fp,16
   449d0:	d8801f17 	ldw	r2,124(sp)
   449d4:	e583c00e 	bge	fp,r22,458d8 <___svfprintf_internal_r+0x176c>
   449d8:	01400174 	movhi	r5,5
   449dc:	29574b84 	addi	r5,r5,23854
   449e0:	dc402915 	stw	r17,164(sp)
   449e4:	d9402b15 	stw	r5,172(sp)
   449e8:	b023883a 	mov	r17,r22
   449ec:	050001c4 	movi	r20,7
   449f0:	902d883a 	mov	r22,r18
   449f4:	8025883a 	mov	r18,r16
   449f8:	dc002c17 	ldw	r16,176(sp)
   449fc:	00000306 	br	44a0c <___svfprintf_internal_r+0x8a0>
   44a00:	8c7ffc04 	addi	r17,r17,-16
   44a04:	42000204 	addi	r8,r8,8
   44a08:	e440110e 	bge	fp,r17,44a50 <___svfprintf_internal_r+0x8e4>
   44a0c:	18c00404 	addi	r3,r3,16
   44a10:	10800044 	addi	r2,r2,1
   44a14:	45400015 	stw	r21,0(r8)
   44a18:	47000115 	stw	fp,4(r8)
   44a1c:	d8c02015 	stw	r3,128(sp)
   44a20:	d8801f15 	stw	r2,124(sp)
   44a24:	a0bff60e 	bge	r20,r2,44a00 <__alt_data_end+0xfffc6200>
   44a28:	d9801e04 	addi	r6,sp,120
   44a2c:	800b883a 	mov	r5,r16
   44a30:	9809883a 	mov	r4,r19
   44a34:	004d9680 	call	4d968 <__ssprint_r>
   44a38:	103eb11e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   44a3c:	8c7ffc04 	addi	r17,r17,-16
   44a40:	d8c02017 	ldw	r3,128(sp)
   44a44:	d8801f17 	ldw	r2,124(sp)
   44a48:	da000404 	addi	r8,sp,16
   44a4c:	e47fef16 	blt	fp,r17,44a0c <__alt_data_end+0xfffc620c>
   44a50:	9021883a 	mov	r16,r18
   44a54:	b025883a 	mov	r18,r22
   44a58:	882d883a 	mov	r22,r17
   44a5c:	dc402917 	ldw	r17,164(sp)
   44a60:	d9002b17 	ldw	r4,172(sp)
   44a64:	1d87883a 	add	r3,r3,r22
   44a68:	10800044 	addi	r2,r2,1
   44a6c:	41000015 	stw	r4,0(r8)
   44a70:	45800115 	stw	r22,4(r8)
   44a74:	d8c02015 	stw	r3,128(sp)
   44a78:	d8801f15 	stw	r2,124(sp)
   44a7c:	010001c4 	movi	r4,7
   44a80:	2081ec16 	blt	r4,r2,45234 <___svfprintf_internal_r+0x10c8>
   44a84:	42000204 	addi	r8,r8,8
   44a88:	9080400c 	andi	r2,r18,256
   44a8c:	1001181e 	bne	r2,zero,44ef0 <___svfprintf_internal_r+0xd84>
   44a90:	d9402e17 	ldw	r5,184(sp)
   44a94:	d8801f17 	ldw	r2,124(sp)
   44a98:	44000015 	stw	r16,0(r8)
   44a9c:	1947883a 	add	r3,r3,r5
   44aa0:	10800044 	addi	r2,r2,1
   44aa4:	41400115 	stw	r5,4(r8)
   44aa8:	d8c02015 	stw	r3,128(sp)
   44aac:	d8801f15 	stw	r2,124(sp)
   44ab0:	010001c4 	movi	r4,7
   44ab4:	2081d116 	blt	r4,r2,451fc <___svfprintf_internal_r+0x1090>
   44ab8:	42000204 	addi	r8,r8,8
   44abc:	9480010c 	andi	r18,r18,4
   44ac0:	90003226 	beq	r18,zero,44b8c <___svfprintf_internal_r+0xa20>
   44ac4:	d9403117 	ldw	r5,196(sp)
   44ac8:	d8802a17 	ldw	r2,168(sp)
   44acc:	28a1c83a 	sub	r16,r5,r2
   44ad0:	04002e0e 	bge	zero,r16,44b8c <___svfprintf_internal_r+0xa20>
   44ad4:	04400404 	movi	r17,16
   44ad8:	d8801f17 	ldw	r2,124(sp)
   44adc:	8c04b90e 	bge	r17,r16,45dc4 <___svfprintf_internal_r+0x1c58>
   44ae0:	01400174 	movhi	r5,5
   44ae4:	29574f84 	addi	r5,r5,23870
   44ae8:	d9403515 	stw	r5,212(sp)
   44aec:	048001c4 	movi	r18,7
   44af0:	dd002c17 	ldw	r20,176(sp)
   44af4:	00000306 	br	44b04 <___svfprintf_internal_r+0x998>
   44af8:	843ffc04 	addi	r16,r16,-16
   44afc:	42000204 	addi	r8,r8,8
   44b00:	8c00130e 	bge	r17,r16,44b50 <___svfprintf_internal_r+0x9e4>
   44b04:	01000174 	movhi	r4,5
   44b08:	18c00404 	addi	r3,r3,16
   44b0c:	10800044 	addi	r2,r2,1
   44b10:	21174f84 	addi	r4,r4,23870
   44b14:	41000015 	stw	r4,0(r8)
   44b18:	44400115 	stw	r17,4(r8)
   44b1c:	d8c02015 	stw	r3,128(sp)
   44b20:	d8801f15 	stw	r2,124(sp)
   44b24:	90bff40e 	bge	r18,r2,44af8 <__alt_data_end+0xfffc62f8>
   44b28:	d9801e04 	addi	r6,sp,120
   44b2c:	a00b883a 	mov	r5,r20
   44b30:	9809883a 	mov	r4,r19
   44b34:	004d9680 	call	4d968 <__ssprint_r>
   44b38:	103e711e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   44b3c:	843ffc04 	addi	r16,r16,-16
   44b40:	d8c02017 	ldw	r3,128(sp)
   44b44:	d8801f17 	ldw	r2,124(sp)
   44b48:	da000404 	addi	r8,sp,16
   44b4c:	8c3fed16 	blt	r17,r16,44b04 <__alt_data_end+0xfffc6304>
   44b50:	d9403517 	ldw	r5,212(sp)
   44b54:	1c07883a 	add	r3,r3,r16
   44b58:	10800044 	addi	r2,r2,1
   44b5c:	41400015 	stw	r5,0(r8)
   44b60:	44000115 	stw	r16,4(r8)
   44b64:	d8c02015 	stw	r3,128(sp)
   44b68:	d8801f15 	stw	r2,124(sp)
   44b6c:	010001c4 	movi	r4,7
   44b70:	2080060e 	bge	r4,r2,44b8c <___svfprintf_internal_r+0xa20>
   44b74:	d9402c17 	ldw	r5,176(sp)
   44b78:	d9801e04 	addi	r6,sp,120
   44b7c:	9809883a 	mov	r4,r19
   44b80:	004d9680 	call	4d968 <__ssprint_r>
   44b84:	103e5e1e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   44b88:	d8c02017 	ldw	r3,128(sp)
   44b8c:	d8803117 	ldw	r2,196(sp)
   44b90:	d9002a17 	ldw	r4,168(sp)
   44b94:	1100010e 	bge	r2,r4,44b9c <___svfprintf_internal_r+0xa30>
   44b98:	2005883a 	mov	r2,r4
   44b9c:	d9402f17 	ldw	r5,188(sp)
   44ba0:	288b883a 	add	r5,r5,r2
   44ba4:	d9402f15 	stw	r5,188(sp)
   44ba8:	18019c1e 	bne	r3,zero,4521c <___svfprintf_internal_r+0x10b0>
   44bac:	b8800007 	ldb	r2,0(r23)
   44bb0:	d8001f15 	stw	zero,124(sp)
   44bb4:	da000404 	addi	r8,sp,16
   44bb8:	103d991e 	bne	r2,zero,44220 <__alt_data_end+0xfffc5a20>
   44bbc:	b821883a 	mov	r16,r23
   44bc0:	003daf06 	br	44280 <__alt_data_end+0xfffc5a80>
   44bc4:	18c03fcc 	andi	r3,r3,255
   44bc8:	1805c71e 	bne	r3,zero,462e8 <___svfprintf_internal_r+0x217c>
   44bcc:	94800414 	ori	r18,r18,16
   44bd0:	9080080c 	andi	r2,r18,32
   44bd4:	10020126 	beq	r2,zero,453dc <___svfprintf_internal_r+0x1270>
   44bd8:	d8802d17 	ldw	r2,180(sp)
   44bdc:	d9002917 	ldw	r4,164(sp)
   44be0:	d8002785 	stb	zero,158(sp)
   44be4:	10c00204 	addi	r3,r2,8
   44be8:	15000017 	ldw	r20,0(r2)
   44bec:	15800117 	ldw	r22,4(r2)
   44bf0:	20038e16 	blt	r4,zero,45a2c <___svfprintf_internal_r+0x18c0>
   44bf4:	013fdfc4 	movi	r4,-129
   44bf8:	a584b03a 	or	r2,r20,r22
   44bfc:	d8c02d15 	stw	r3,180(sp)
   44c00:	9124703a 	and	r18,r18,r4
   44c04:	0039883a 	mov	fp,zero
   44c08:	103eb61e 	bne	r2,zero,446e4 <__alt_data_end+0xfffc5ee4>
   44c0c:	d8802917 	ldw	r2,164(sp)
   44c10:	1002c81e 	bne	r2,zero,45734 <___svfprintf_internal_r+0x15c8>
   44c14:	d8002915 	stw	zero,164(sp)
   44c18:	d8002e15 	stw	zero,184(sp)
   44c1c:	dc001e04 	addi	r16,sp,120
   44c20:	003efa06 	br	4480c <__alt_data_end+0xfffc600c>
   44c24:	18c03fcc 	andi	r3,r3,255
   44c28:	1805ad1e 	bne	r3,zero,462e0 <___svfprintf_internal_r+0x2174>
   44c2c:	01400174 	movhi	r5,5
   44c30:	29573f04 	addi	r5,r5,23804
   44c34:	d9403a15 	stw	r5,232(sp)
   44c38:	9080080c 	andi	r2,r18,32
   44c3c:	10006126 	beq	r2,zero,44dc4 <___svfprintf_internal_r+0xc58>
   44c40:	d8802d17 	ldw	r2,180(sp)
   44c44:	15000017 	ldw	r20,0(r2)
   44c48:	15800117 	ldw	r22,4(r2)
   44c4c:	10800204 	addi	r2,r2,8
   44c50:	d8802d15 	stw	r2,180(sp)
   44c54:	9080004c 	andi	r2,r18,1
   44c58:	10018e26 	beq	r2,zero,45294 <___svfprintf_internal_r+0x1128>
   44c5c:	a584b03a 	or	r2,r20,r22
   44c60:	10030926 	beq	r2,zero,45888 <___svfprintf_internal_r+0x171c>
   44c64:	d8c02917 	ldw	r3,164(sp)
   44c68:	00800c04 	movi	r2,48
   44c6c:	d8802705 	stb	r2,156(sp)
   44c70:	dc402745 	stb	r17,157(sp)
   44c74:	d8002785 	stb	zero,158(sp)
   44c78:	90800094 	ori	r2,r18,2
   44c7c:	18048716 	blt	r3,zero,45e9c <___svfprintf_internal_r+0x1d30>
   44c80:	00bfdfc4 	movi	r2,-129
   44c84:	90a4703a 	and	r18,r18,r2
   44c88:	94800094 	ori	r18,r18,2
   44c8c:	0039883a 	mov	fp,zero
   44c90:	d9003a17 	ldw	r4,232(sp)
   44c94:	dc001e04 	addi	r16,sp,120
   44c98:	a08003cc 	andi	r2,r20,15
   44c9c:	b006973a 	slli	r3,r22,28
   44ca0:	2085883a 	add	r2,r4,r2
   44ca4:	a028d13a 	srli	r20,r20,4
   44ca8:	10800003 	ldbu	r2,0(r2)
   44cac:	b02cd13a 	srli	r22,r22,4
   44cb0:	843fffc4 	addi	r16,r16,-1
   44cb4:	1d28b03a 	or	r20,r3,r20
   44cb8:	80800005 	stb	r2,0(r16)
   44cbc:	a584b03a 	or	r2,r20,r22
   44cc0:	103ff51e 	bne	r2,zero,44c98 <__alt_data_end+0xfffc6498>
   44cc4:	d8c02817 	ldw	r3,160(sp)
   44cc8:	1c07c83a 	sub	r3,r3,r16
   44ccc:	d8c02e15 	stw	r3,184(sp)
   44cd0:	003ece06 	br	4480c <__alt_data_end+0xfffc600c>
   44cd4:	d8c02d17 	ldw	r3,180(sp)
   44cd8:	d9002d17 	ldw	r4,180(sp)
   44cdc:	d8002785 	stb	zero,158(sp)
   44ce0:	18800017 	ldw	r2,0(r3)
   44ce4:	21000104 	addi	r4,r4,4
   44ce8:	00c00044 	movi	r3,1
   44cec:	d8c02a15 	stw	r3,168(sp)
   44cf0:	d8801405 	stb	r2,80(sp)
   44cf4:	d9002d15 	stw	r4,180(sp)
   44cf8:	d8c02e15 	stw	r3,184(sp)
   44cfc:	d8002915 	stw	zero,164(sp)
   44d00:	d8003215 	stw	zero,200(sp)
   44d04:	dc001404 	addi	r16,sp,80
   44d08:	0039883a 	mov	fp,zero
   44d0c:	003ecc06 	br	44840 <__alt_data_end+0xfffc6040>
   44d10:	18c03fcc 	andi	r3,r3,255
   44d14:	183e9226 	beq	r3,zero,44760 <__alt_data_end+0xfffc5f60>
   44d18:	d9c02785 	stb	r7,158(sp)
   44d1c:	003e9006 	br	44760 <__alt_data_end+0xfffc5f60>
   44d20:	00c00044 	movi	r3,1
   44d24:	01c00ac4 	movi	r7,43
   44d28:	bc400007 	ldb	r17,0(r23)
   44d2c:	003d6306 	br	442bc <__alt_data_end+0xfffc5abc>
   44d30:	94800814 	ori	r18,r18,32
   44d34:	bc400007 	ldb	r17,0(r23)
   44d38:	003d6006 	br	442bc <__alt_data_end+0xfffc5abc>
   44d3c:	d8c02d17 	ldw	r3,180(sp)
   44d40:	d8002785 	stb	zero,158(sp)
   44d44:	1c000017 	ldw	r16,0(r3)
   44d48:	1d000104 	addi	r20,r3,4
   44d4c:	80040f26 	beq	r16,zero,45d8c <___svfprintf_internal_r+0x1c20>
   44d50:	d9002917 	ldw	r4,164(sp)
   44d54:	2003dc16 	blt	r4,zero,45cc8 <___svfprintf_internal_r+0x1b5c>
   44d58:	200d883a 	mov	r6,r4
   44d5c:	000b883a 	mov	r5,zero
   44d60:	8009883a 	mov	r4,r16
   44d64:	da003e15 	stw	r8,248(sp)
   44d68:	004bc780 	call	4bc78 <memchr>
   44d6c:	da003e17 	ldw	r8,248(sp)
   44d70:	10045826 	beq	r2,zero,45ed4 <___svfprintf_internal_r+0x1d68>
   44d74:	1405c83a 	sub	r2,r2,r16
   44d78:	d8802e15 	stw	r2,184(sp)
   44d7c:	1003d816 	blt	r2,zero,45ce0 <___svfprintf_internal_r+0x1b74>
   44d80:	df002783 	ldbu	fp,158(sp)
   44d84:	d8802a15 	stw	r2,168(sp)
   44d88:	dd002d15 	stw	r20,180(sp)
   44d8c:	d8002915 	stw	zero,164(sp)
   44d90:	d8003215 	stw	zero,200(sp)
   44d94:	003ea306 	br	44824 <__alt_data_end+0xfffc6024>
   44d98:	18c03fcc 	andi	r3,r3,255
   44d9c:	183f8c26 	beq	r3,zero,44bd0 <__alt_data_end+0xfffc63d0>
   44da0:	d9c02785 	stb	r7,158(sp)
   44da4:	003f8a06 	br	44bd0 <__alt_data_end+0xfffc63d0>
   44da8:	18c03fcc 	andi	r3,r3,255
   44dac:	1805631e 	bne	r3,zero,4633c <___svfprintf_internal_r+0x21d0>
   44db0:	01400174 	movhi	r5,5
   44db4:	29574404 	addi	r5,r5,23824
   44db8:	d9403a15 	stw	r5,232(sp)
   44dbc:	9080080c 	andi	r2,r18,32
   44dc0:	103f9f1e 	bne	r2,zero,44c40 <__alt_data_end+0xfffc6440>
   44dc4:	9080040c 	andi	r2,r18,16
   44dc8:	10029c26 	beq	r2,zero,4583c <___svfprintf_internal_r+0x16d0>
   44dcc:	d8c02d17 	ldw	r3,180(sp)
   44dd0:	002d883a 	mov	r22,zero
   44dd4:	1d000017 	ldw	r20,0(r3)
   44dd8:	18c00104 	addi	r3,r3,4
   44ddc:	d8c02d15 	stw	r3,180(sp)
   44de0:	003f9c06 	br	44c54 <__alt_data_end+0xfffc6454>
   44de4:	94800054 	ori	r18,r18,1
   44de8:	bc400007 	ldb	r17,0(r23)
   44dec:	003d3306 	br	442bc <__alt_data_end+0xfffc5abc>
   44df0:	38803fcc 	andi	r2,r7,255
   44df4:	1080201c 	xori	r2,r2,128
   44df8:	10bfe004 	addi	r2,r2,-128
   44dfc:	1002971e 	bne	r2,zero,4585c <___svfprintf_internal_r+0x16f0>
   44e00:	00c00044 	movi	r3,1
   44e04:	01c00804 	movi	r7,32
   44e08:	bc400007 	ldb	r17,0(r23)
   44e0c:	003d2b06 	br	442bc <__alt_data_end+0xfffc5abc>
   44e10:	18c03fcc 	andi	r3,r3,255
   44e14:	183e2326 	beq	r3,zero,446a4 <__alt_data_end+0xfffc5ea4>
   44e18:	d9c02785 	stb	r7,158(sp)
   44e1c:	003e2106 	br	446a4 <__alt_data_end+0xfffc5ea4>
   44e20:	bc400007 	ldb	r17,0(r23)
   44e24:	8a430426 	beq	r17,r9,45a38 <___svfprintf_internal_r+0x18cc>
   44e28:	94800414 	ori	r18,r18,16
   44e2c:	003d2306 	br	442bc <__alt_data_end+0xfffc5abc>
   44e30:	18c03fcc 	andi	r3,r3,255
   44e34:	18053f1e 	bne	r3,zero,46334 <___svfprintf_internal_r+0x21c8>
   44e38:	9080080c 	andi	r2,r18,32
   44e3c:	10028926 	beq	r2,zero,45864 <___svfprintf_internal_r+0x16f8>
   44e40:	d9402d17 	ldw	r5,180(sp)
   44e44:	d9002f17 	ldw	r4,188(sp)
   44e48:	28800017 	ldw	r2,0(r5)
   44e4c:	2007d7fa 	srai	r3,r4,31
   44e50:	29400104 	addi	r5,r5,4
   44e54:	d9402d15 	stw	r5,180(sp)
   44e58:	11000015 	stw	r4,0(r2)
   44e5c:	10c00115 	stw	r3,4(r2)
   44e60:	003ced06 	br	44218 <__alt_data_end+0xfffc5a18>
   44e64:	94801014 	ori	r18,r18,64
   44e68:	bc400007 	ldb	r17,0(r23)
   44e6c:	003d1306 	br	442bc <__alt_data_end+0xfffc5abc>
   44e70:	01000174 	movhi	r4,5
   44e74:	21174404 	addi	r4,r4,23824
   44e78:	0039883a 	mov	fp,zero
   44e7c:	d9003a15 	stw	r4,232(sp)
   44e80:	04401e04 	movi	r17,120
   44e84:	003f8206 	br	44c90 <__alt_data_end+0xfffc6490>
   44e88:	18c03fcc 	andi	r3,r3,255
   44e8c:	1805221e 	bne	r3,zero,46318 <___svfprintf_internal_r+0x21ac>
   44e90:	883d9526 	beq	r17,zero,444e8 <__alt_data_end+0xfffc5ce8>
   44e94:	00c00044 	movi	r3,1
   44e98:	d8c02a15 	stw	r3,168(sp)
   44e9c:	dc401405 	stb	r17,80(sp)
   44ea0:	d8002785 	stb	zero,158(sp)
   44ea4:	003f9406 	br	44cf8 <__alt_data_end+0xfffc64f8>
   44ea8:	01000174 	movhi	r4,5
   44eac:	21174404 	addi	r4,r4,23824
   44eb0:	d9003a15 	stw	r4,232(sp)
   44eb4:	d8c02d15 	stw	r3,180(sp)
   44eb8:	1025883a 	mov	r18,r2
   44ebc:	04401e04 	movi	r17,120
   44ec0:	a584b03a 	or	r2,r20,r22
   44ec4:	1000fa1e 	bne	r2,zero,452b0 <___svfprintf_internal_r+0x1144>
   44ec8:	0039883a 	mov	fp,zero
   44ecc:	00800084 	movi	r2,2
   44ed0:	10803fcc 	andi	r2,r2,255
   44ed4:	00c00044 	movi	r3,1
   44ed8:	10c21626 	beq	r2,r3,45734 <___svfprintf_internal_r+0x15c8>
   44edc:	00c00084 	movi	r3,2
   44ee0:	10fe301e 	bne	r2,r3,447a4 <__alt_data_end+0xfffc5fa4>
   44ee4:	003d7606 	br	444c0 <__alt_data_end+0xfffc5cc0>
   44ee8:	d8c02017 	ldw	r3,128(sp)
   44eec:	003e9506 	br	44944 <__alt_data_end+0xfffc6144>
   44ef0:	00801944 	movi	r2,101
   44ef4:	14407c0e 	bge	r2,r17,450e8 <___svfprintf_internal_r+0xf7c>
   44ef8:	d9003617 	ldw	r4,216(sp)
   44efc:	d9403717 	ldw	r5,220(sp)
   44f00:	000d883a 	mov	r6,zero
   44f04:	000f883a 	mov	r7,zero
   44f08:	d8c03d15 	stw	r3,244(sp)
   44f0c:	da003e15 	stw	r8,248(sp)
   44f10:	00517a00 	call	517a0 <__eqdf2>
   44f14:	d8c03d17 	ldw	r3,244(sp)
   44f18:	da003e17 	ldw	r8,248(sp)
   44f1c:	1000f51e 	bne	r2,zero,452f4 <___svfprintf_internal_r+0x1188>
   44f20:	d8801f17 	ldw	r2,124(sp)
   44f24:	01000174 	movhi	r4,5
   44f28:	21174b04 	addi	r4,r4,23852
   44f2c:	18c00044 	addi	r3,r3,1
   44f30:	10800044 	addi	r2,r2,1
   44f34:	41000015 	stw	r4,0(r8)
   44f38:	01000044 	movi	r4,1
   44f3c:	41000115 	stw	r4,4(r8)
   44f40:	d8c02015 	stw	r3,128(sp)
   44f44:	d8801f15 	stw	r2,124(sp)
   44f48:	010001c4 	movi	r4,7
   44f4c:	20826616 	blt	r4,r2,458e8 <___svfprintf_internal_r+0x177c>
   44f50:	42000204 	addi	r8,r8,8
   44f54:	d8802617 	ldw	r2,152(sp)
   44f58:	d9403317 	ldw	r5,204(sp)
   44f5c:	11400216 	blt	r2,r5,44f68 <___svfprintf_internal_r+0xdfc>
   44f60:	9080004c 	andi	r2,r18,1
   44f64:	103ed526 	beq	r2,zero,44abc <__alt_data_end+0xfffc62bc>
   44f68:	d8803817 	ldw	r2,224(sp)
   44f6c:	d9003417 	ldw	r4,208(sp)
   44f70:	d9403817 	ldw	r5,224(sp)
   44f74:	1887883a 	add	r3,r3,r2
   44f78:	d8801f17 	ldw	r2,124(sp)
   44f7c:	41000015 	stw	r4,0(r8)
   44f80:	41400115 	stw	r5,4(r8)
   44f84:	10800044 	addi	r2,r2,1
   44f88:	d8c02015 	stw	r3,128(sp)
   44f8c:	d8801f15 	stw	r2,124(sp)
   44f90:	010001c4 	movi	r4,7
   44f94:	2082af16 	blt	r4,r2,45a54 <___svfprintf_internal_r+0x18e8>
   44f98:	42000204 	addi	r8,r8,8
   44f9c:	d8803317 	ldw	r2,204(sp)
   44fa0:	143fffc4 	addi	r16,r2,-1
   44fa4:	043ec50e 	bge	zero,r16,44abc <__alt_data_end+0xfffc62bc>
   44fa8:	04400404 	movi	r17,16
   44fac:	d8801f17 	ldw	r2,124(sp)
   44fb0:	8c00860e 	bge	r17,r16,451cc <___svfprintf_internal_r+0x1060>
   44fb4:	01400174 	movhi	r5,5
   44fb8:	29574b84 	addi	r5,r5,23854
   44fbc:	d9402b15 	stw	r5,172(sp)
   44fc0:	058001c4 	movi	r22,7
   44fc4:	dd002c17 	ldw	r20,176(sp)
   44fc8:	00000306 	br	44fd8 <___svfprintf_internal_r+0xe6c>
   44fcc:	42000204 	addi	r8,r8,8
   44fd0:	843ffc04 	addi	r16,r16,-16
   44fd4:	8c00800e 	bge	r17,r16,451d8 <___svfprintf_internal_r+0x106c>
   44fd8:	18c00404 	addi	r3,r3,16
   44fdc:	10800044 	addi	r2,r2,1
   44fe0:	45400015 	stw	r21,0(r8)
   44fe4:	44400115 	stw	r17,4(r8)
   44fe8:	d8c02015 	stw	r3,128(sp)
   44fec:	d8801f15 	stw	r2,124(sp)
   44ff0:	b0bff60e 	bge	r22,r2,44fcc <__alt_data_end+0xfffc67cc>
   44ff4:	d9801e04 	addi	r6,sp,120
   44ff8:	a00b883a 	mov	r5,r20
   44ffc:	9809883a 	mov	r4,r19
   45000:	004d9680 	call	4d968 <__ssprint_r>
   45004:	103d3e1e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   45008:	d8c02017 	ldw	r3,128(sp)
   4500c:	d8801f17 	ldw	r2,124(sp)
   45010:	da000404 	addi	r8,sp,16
   45014:	003fee06 	br	44fd0 <__alt_data_end+0xfffc67d0>
   45018:	d9403117 	ldw	r5,196(sp)
   4501c:	d8802a17 	ldw	r2,168(sp)
   45020:	28adc83a 	sub	r22,r5,r2
   45024:	05be650e 	bge	zero,r22,449bc <__alt_data_end+0xfffc61bc>
   45028:	07000404 	movi	fp,16
   4502c:	d8801f17 	ldw	r2,124(sp)
   45030:	e583a20e 	bge	fp,r22,45ebc <___svfprintf_internal_r+0x1d50>
   45034:	01400174 	movhi	r5,5
   45038:	29574b84 	addi	r5,r5,23854
   4503c:	dc403015 	stw	r17,192(sp)
   45040:	d9402b15 	stw	r5,172(sp)
   45044:	b023883a 	mov	r17,r22
   45048:	050001c4 	movi	r20,7
   4504c:	902d883a 	mov	r22,r18
   45050:	8025883a 	mov	r18,r16
   45054:	dc002c17 	ldw	r16,176(sp)
   45058:	00000306 	br	45068 <___svfprintf_internal_r+0xefc>
   4505c:	8c7ffc04 	addi	r17,r17,-16
   45060:	42000204 	addi	r8,r8,8
   45064:	e440110e 	bge	fp,r17,450ac <___svfprintf_internal_r+0xf40>
   45068:	18c00404 	addi	r3,r3,16
   4506c:	10800044 	addi	r2,r2,1
   45070:	45400015 	stw	r21,0(r8)
   45074:	47000115 	stw	fp,4(r8)
   45078:	d8c02015 	stw	r3,128(sp)
   4507c:	d8801f15 	stw	r2,124(sp)
   45080:	a0bff60e 	bge	r20,r2,4505c <__alt_data_end+0xfffc685c>
   45084:	d9801e04 	addi	r6,sp,120
   45088:	800b883a 	mov	r5,r16
   4508c:	9809883a 	mov	r4,r19
   45090:	004d9680 	call	4d968 <__ssprint_r>
   45094:	103d1a1e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   45098:	8c7ffc04 	addi	r17,r17,-16
   4509c:	d8c02017 	ldw	r3,128(sp)
   450a0:	d8801f17 	ldw	r2,124(sp)
   450a4:	da000404 	addi	r8,sp,16
   450a8:	e47fef16 	blt	fp,r17,45068 <__alt_data_end+0xfffc6868>
   450ac:	9021883a 	mov	r16,r18
   450b0:	b025883a 	mov	r18,r22
   450b4:	882d883a 	mov	r22,r17
   450b8:	dc403017 	ldw	r17,192(sp)
   450bc:	d9002b17 	ldw	r4,172(sp)
   450c0:	1d87883a 	add	r3,r3,r22
   450c4:	10800044 	addi	r2,r2,1
   450c8:	41000015 	stw	r4,0(r8)
   450cc:	45800115 	stw	r22,4(r8)
   450d0:	d8c02015 	stw	r3,128(sp)
   450d4:	d8801f15 	stw	r2,124(sp)
   450d8:	010001c4 	movi	r4,7
   450dc:	20819a16 	blt	r4,r2,45748 <___svfprintf_internal_r+0x15dc>
   450e0:	42000204 	addi	r8,r8,8
   450e4:	003e3506 	br	449bc <__alt_data_end+0xfffc61bc>
   450e8:	d9403317 	ldw	r5,204(sp)
   450ec:	00800044 	movi	r2,1
   450f0:	18c00044 	addi	r3,r3,1
   450f4:	1141710e 	bge	r2,r5,456bc <___svfprintf_internal_r+0x1550>
   450f8:	dc401f17 	ldw	r17,124(sp)
   450fc:	00800044 	movi	r2,1
   45100:	40800115 	stw	r2,4(r8)
   45104:	8c400044 	addi	r17,r17,1
   45108:	44000015 	stw	r16,0(r8)
   4510c:	d8c02015 	stw	r3,128(sp)
   45110:	dc401f15 	stw	r17,124(sp)
   45114:	008001c4 	movi	r2,7
   45118:	14417416 	blt	r2,r17,456ec <___svfprintf_internal_r+0x1580>
   4511c:	42000204 	addi	r8,r8,8
   45120:	d8803817 	ldw	r2,224(sp)
   45124:	d9003417 	ldw	r4,208(sp)
   45128:	8c400044 	addi	r17,r17,1
   4512c:	10c7883a 	add	r3,r2,r3
   45130:	40800115 	stw	r2,4(r8)
   45134:	41000015 	stw	r4,0(r8)
   45138:	d8c02015 	stw	r3,128(sp)
   4513c:	dc401f15 	stw	r17,124(sp)
   45140:	008001c4 	movi	r2,7
   45144:	14417216 	blt	r2,r17,45710 <___svfprintf_internal_r+0x15a4>
   45148:	45800204 	addi	r22,r8,8
   4514c:	d9003617 	ldw	r4,216(sp)
   45150:	d9403717 	ldw	r5,220(sp)
   45154:	000d883a 	mov	r6,zero
   45158:	000f883a 	mov	r7,zero
   4515c:	d8c03d15 	stw	r3,244(sp)
   45160:	00517a00 	call	517a0 <__eqdf2>
   45164:	d8c03d17 	ldw	r3,244(sp)
   45168:	1000b326 	beq	r2,zero,45438 <___svfprintf_internal_r+0x12cc>
   4516c:	d9403317 	ldw	r5,204(sp)
   45170:	84000044 	addi	r16,r16,1
   45174:	8c400044 	addi	r17,r17,1
   45178:	28bfffc4 	addi	r2,r5,-1
   4517c:	1887883a 	add	r3,r3,r2
   45180:	b0800115 	stw	r2,4(r22)
   45184:	b4000015 	stw	r16,0(r22)
   45188:	d8c02015 	stw	r3,128(sp)
   4518c:	dc401f15 	stw	r17,124(sp)
   45190:	008001c4 	movi	r2,7
   45194:	1440d216 	blt	r2,r17,454e0 <___svfprintf_internal_r+0x1374>
   45198:	b5800204 	addi	r22,r22,8
   4519c:	d9003b17 	ldw	r4,236(sp)
   451a0:	df0022c4 	addi	fp,sp,139
   451a4:	8c400044 	addi	r17,r17,1
   451a8:	20c7883a 	add	r3,r4,r3
   451ac:	b7000015 	stw	fp,0(r22)
   451b0:	b1000115 	stw	r4,4(r22)
   451b4:	d8c02015 	stw	r3,128(sp)
   451b8:	dc401f15 	stw	r17,124(sp)
   451bc:	008001c4 	movi	r2,7
   451c0:	14400e16 	blt	r2,r17,451fc <___svfprintf_internal_r+0x1090>
   451c4:	b2000204 	addi	r8,r22,8
   451c8:	003e3c06 	br	44abc <__alt_data_end+0xfffc62bc>
   451cc:	01000174 	movhi	r4,5
   451d0:	21174b84 	addi	r4,r4,23854
   451d4:	d9002b15 	stw	r4,172(sp)
   451d8:	d9002b17 	ldw	r4,172(sp)
   451dc:	1c07883a 	add	r3,r3,r16
   451e0:	44000115 	stw	r16,4(r8)
   451e4:	41000015 	stw	r4,0(r8)
   451e8:	10800044 	addi	r2,r2,1
   451ec:	d8c02015 	stw	r3,128(sp)
   451f0:	d8801f15 	stw	r2,124(sp)
   451f4:	010001c4 	movi	r4,7
   451f8:	20be2f0e 	bge	r4,r2,44ab8 <__alt_data_end+0xfffc62b8>
   451fc:	d9402c17 	ldw	r5,176(sp)
   45200:	d9801e04 	addi	r6,sp,120
   45204:	9809883a 	mov	r4,r19
   45208:	004d9680 	call	4d968 <__ssprint_r>
   4520c:	103cbc1e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   45210:	d8c02017 	ldw	r3,128(sp)
   45214:	da000404 	addi	r8,sp,16
   45218:	003e2806 	br	44abc <__alt_data_end+0xfffc62bc>
   4521c:	d9402c17 	ldw	r5,176(sp)
   45220:	d9801e04 	addi	r6,sp,120
   45224:	9809883a 	mov	r4,r19
   45228:	004d9680 	call	4d968 <__ssprint_r>
   4522c:	103e5f26 	beq	r2,zero,44bac <__alt_data_end+0xfffc63ac>
   45230:	003cb306 	br	44500 <__alt_data_end+0xfffc5d00>
   45234:	d9402c17 	ldw	r5,176(sp)
   45238:	d9801e04 	addi	r6,sp,120
   4523c:	9809883a 	mov	r4,r19
   45240:	004d9680 	call	4d968 <__ssprint_r>
   45244:	103cae1e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   45248:	d8c02017 	ldw	r3,128(sp)
   4524c:	da000404 	addi	r8,sp,16
   45250:	003e0d06 	br	44a88 <__alt_data_end+0xfffc6288>
   45254:	d9402c17 	ldw	r5,176(sp)
   45258:	d9801e04 	addi	r6,sp,120
   4525c:	9809883a 	mov	r4,r19
   45260:	004d9680 	call	4d968 <__ssprint_r>
   45264:	103ca61e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   45268:	d8c02017 	ldw	r3,128(sp)
   4526c:	da000404 	addi	r8,sp,16
   45270:	003dc106 	br	44978 <__alt_data_end+0xfffc6178>
   45274:	d9402c17 	ldw	r5,176(sp)
   45278:	d9801e04 	addi	r6,sp,120
   4527c:	9809883a 	mov	r4,r19
   45280:	004d9680 	call	4d968 <__ssprint_r>
   45284:	103c9e1e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   45288:	d8c02017 	ldw	r3,128(sp)
   4528c:	da000404 	addi	r8,sp,16
   45290:	003dc706 	br	449b0 <__alt_data_end+0xfffc61b0>
   45294:	d8802917 	ldw	r2,164(sp)
   45298:	d8002785 	stb	zero,158(sp)
   4529c:	103f0816 	blt	r2,zero,44ec0 <__alt_data_end+0xfffc66c0>
   452a0:	00ffdfc4 	movi	r3,-129
   452a4:	a584b03a 	or	r2,r20,r22
   452a8:	90e4703a 	and	r18,r18,r3
   452ac:	103c8126 	beq	r2,zero,444b4 <__alt_data_end+0xfffc5cb4>
   452b0:	0039883a 	mov	fp,zero
   452b4:	003e7606 	br	44c90 <__alt_data_end+0xfffc6490>
   452b8:	9080040c 	andi	r2,r18,16
   452bc:	10013d26 	beq	r2,zero,457b4 <___svfprintf_internal_r+0x1648>
   452c0:	d9002d17 	ldw	r4,180(sp)
   452c4:	d9402917 	ldw	r5,164(sp)
   452c8:	d8002785 	stb	zero,158(sp)
   452cc:	20800104 	addi	r2,r4,4
   452d0:	25000017 	ldw	r20,0(r4)
   452d4:	002d883a 	mov	r22,zero
   452d8:	28013f16 	blt	r5,zero,457d8 <___svfprintf_internal_r+0x166c>
   452dc:	00ffdfc4 	movi	r3,-129
   452e0:	d8802d15 	stw	r2,180(sp)
   452e4:	90e4703a 	and	r18,r18,r3
   452e8:	a03d2b26 	beq	r20,zero,44798 <__alt_data_end+0xfffc5f98>
   452ec:	0039883a 	mov	fp,zero
   452f0:	003d2e06 	br	447ac <__alt_data_end+0xfffc5fac>
   452f4:	dc402617 	ldw	r17,152(sp)
   452f8:	0441830e 	bge	zero,r17,45908 <___svfprintf_internal_r+0x179c>
   452fc:	dc403217 	ldw	r17,200(sp)
   45300:	d8803317 	ldw	r2,204(sp)
   45304:	1440010e 	bge	r2,r17,4530c <___svfprintf_internal_r+0x11a0>
   45308:	1023883a 	mov	r17,r2
   4530c:	04400a0e 	bge	zero,r17,45338 <___svfprintf_internal_r+0x11cc>
   45310:	d8801f17 	ldw	r2,124(sp)
   45314:	1c47883a 	add	r3,r3,r17
   45318:	44000015 	stw	r16,0(r8)
   4531c:	10800044 	addi	r2,r2,1
   45320:	44400115 	stw	r17,4(r8)
   45324:	d8c02015 	stw	r3,128(sp)
   45328:	d8801f15 	stw	r2,124(sp)
   4532c:	010001c4 	movi	r4,7
   45330:	20827516 	blt	r4,r2,45d08 <___svfprintf_internal_r+0x1b9c>
   45334:	42000204 	addi	r8,r8,8
   45338:	88027b16 	blt	r17,zero,45d28 <___svfprintf_internal_r+0x1bbc>
   4533c:	d9003217 	ldw	r4,200(sp)
   45340:	2463c83a 	sub	r17,r4,r17
   45344:	0440990e 	bge	zero,r17,455ac <___svfprintf_internal_r+0x1440>
   45348:	05800404 	movi	r22,16
   4534c:	d8801f17 	ldw	r2,124(sp)
   45350:	b441530e 	bge	r22,r17,458a0 <___svfprintf_internal_r+0x1734>
   45354:	01000174 	movhi	r4,5
   45358:	21174b84 	addi	r4,r4,23854
   4535c:	d9002b15 	stw	r4,172(sp)
   45360:	070001c4 	movi	fp,7
   45364:	dd002c17 	ldw	r20,176(sp)
   45368:	00000306 	br	45378 <___svfprintf_internal_r+0x120c>
   4536c:	42000204 	addi	r8,r8,8
   45370:	8c7ffc04 	addi	r17,r17,-16
   45374:	b4414d0e 	bge	r22,r17,458ac <___svfprintf_internal_r+0x1740>
   45378:	18c00404 	addi	r3,r3,16
   4537c:	10800044 	addi	r2,r2,1
   45380:	45400015 	stw	r21,0(r8)
   45384:	45800115 	stw	r22,4(r8)
   45388:	d8c02015 	stw	r3,128(sp)
   4538c:	d8801f15 	stw	r2,124(sp)
   45390:	e0bff60e 	bge	fp,r2,4536c <__alt_data_end+0xfffc6b6c>
   45394:	d9801e04 	addi	r6,sp,120
   45398:	a00b883a 	mov	r5,r20
   4539c:	9809883a 	mov	r4,r19
   453a0:	004d9680 	call	4d968 <__ssprint_r>
   453a4:	103c561e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   453a8:	d8c02017 	ldw	r3,128(sp)
   453ac:	d8801f17 	ldw	r2,124(sp)
   453b0:	da000404 	addi	r8,sp,16
   453b4:	003fee06 	br	45370 <__alt_data_end+0xfffc6b70>
   453b8:	d9402c17 	ldw	r5,176(sp)
   453bc:	d9801e04 	addi	r6,sp,120
   453c0:	9809883a 	mov	r4,r19
   453c4:	004d9680 	call	4d968 <__ssprint_r>
   453c8:	103c4d1e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   453cc:	d8c02017 	ldw	r3,128(sp)
   453d0:	df002787 	ldb	fp,158(sp)
   453d4:	da000404 	addi	r8,sp,16
   453d8:	003d5a06 	br	44944 <__alt_data_end+0xfffc6144>
   453dc:	9080040c 	andi	r2,r18,16
   453e0:	10005c26 	beq	r2,zero,45554 <___svfprintf_internal_r+0x13e8>
   453e4:	d9402d17 	ldw	r5,180(sp)
   453e8:	d8c02917 	ldw	r3,164(sp)
   453ec:	d8002785 	stb	zero,158(sp)
   453f0:	28800104 	addi	r2,r5,4
   453f4:	2d000017 	ldw	r20,0(r5)
   453f8:	002d883a 	mov	r22,zero
   453fc:	18005e16 	blt	r3,zero,45578 <___svfprintf_internal_r+0x140c>
   45400:	00ffdfc4 	movi	r3,-129
   45404:	d8802d15 	stw	r2,180(sp)
   45408:	90e4703a 	and	r18,r18,r3
   4540c:	0039883a 	mov	fp,zero
   45410:	a03dfe26 	beq	r20,zero,44c0c <__alt_data_end+0xfffc640c>
   45414:	00800244 	movi	r2,9
   45418:	153cb336 	bltu	r2,r20,446e8 <__alt_data_end+0xfffc5ee8>
   4541c:	a5000c04 	addi	r20,r20,48
   45420:	dc001dc4 	addi	r16,sp,119
   45424:	dd001dc5 	stb	r20,119(sp)
   45428:	d8c02817 	ldw	r3,160(sp)
   4542c:	1c07c83a 	sub	r3,r3,r16
   45430:	d8c02e15 	stw	r3,184(sp)
   45434:	003cf506 	br	4480c <__alt_data_end+0xfffc600c>
   45438:	d8803317 	ldw	r2,204(sp)
   4543c:	143fffc4 	addi	r16,r2,-1
   45440:	043f560e 	bge	zero,r16,4519c <__alt_data_end+0xfffc699c>
   45444:	07000404 	movi	fp,16
   45448:	e403530e 	bge	fp,r16,46198 <___svfprintf_internal_r+0x202c>
   4544c:	01400174 	movhi	r5,5
   45450:	29574b84 	addi	r5,r5,23854
   45454:	d9402b15 	stw	r5,172(sp)
   45458:	01c001c4 	movi	r7,7
   4545c:	dd002c17 	ldw	r20,176(sp)
   45460:	00000306 	br	45470 <___svfprintf_internal_r+0x1304>
   45464:	843ffc04 	addi	r16,r16,-16
   45468:	b5800204 	addi	r22,r22,8
   4546c:	e400130e 	bge	fp,r16,454bc <___svfprintf_internal_r+0x1350>
   45470:	18c00404 	addi	r3,r3,16
   45474:	8c400044 	addi	r17,r17,1
   45478:	b5400015 	stw	r21,0(r22)
   4547c:	b7000115 	stw	fp,4(r22)
   45480:	d8c02015 	stw	r3,128(sp)
   45484:	dc401f15 	stw	r17,124(sp)
   45488:	3c7ff60e 	bge	r7,r17,45464 <__alt_data_end+0xfffc6c64>
   4548c:	d9801e04 	addi	r6,sp,120
   45490:	a00b883a 	mov	r5,r20
   45494:	9809883a 	mov	r4,r19
   45498:	d9c03d15 	stw	r7,244(sp)
   4549c:	004d9680 	call	4d968 <__ssprint_r>
   454a0:	d9c03d17 	ldw	r7,244(sp)
   454a4:	103c161e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   454a8:	843ffc04 	addi	r16,r16,-16
   454ac:	d8c02017 	ldw	r3,128(sp)
   454b0:	dc401f17 	ldw	r17,124(sp)
   454b4:	dd800404 	addi	r22,sp,16
   454b8:	e43fed16 	blt	fp,r16,45470 <__alt_data_end+0xfffc6c70>
   454bc:	d8802b17 	ldw	r2,172(sp)
   454c0:	1c07883a 	add	r3,r3,r16
   454c4:	8c400044 	addi	r17,r17,1
   454c8:	b0800015 	stw	r2,0(r22)
   454cc:	b4000115 	stw	r16,4(r22)
   454d0:	d8c02015 	stw	r3,128(sp)
   454d4:	dc401f15 	stw	r17,124(sp)
   454d8:	008001c4 	movi	r2,7
   454dc:	147f2e0e 	bge	r2,r17,45198 <__alt_data_end+0xfffc6998>
   454e0:	d9402c17 	ldw	r5,176(sp)
   454e4:	d9801e04 	addi	r6,sp,120
   454e8:	9809883a 	mov	r4,r19
   454ec:	004d9680 	call	4d968 <__ssprint_r>
   454f0:	103c031e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   454f4:	d8c02017 	ldw	r3,128(sp)
   454f8:	dc401f17 	ldw	r17,124(sp)
   454fc:	dd800404 	addi	r22,sp,16
   45500:	003f2606 	br	4519c <__alt_data_end+0xfffc699c>
   45504:	9080040c 	andi	r2,r18,16
   45508:	1000c326 	beq	r2,zero,45818 <___svfprintf_internal_r+0x16ac>
   4550c:	d8802d17 	ldw	r2,180(sp)
   45510:	15000017 	ldw	r20,0(r2)
   45514:	10800104 	addi	r2,r2,4
   45518:	d8802d15 	stw	r2,180(sp)
   4551c:	a02dd7fa 	srai	r22,r20,31
   45520:	b005883a 	mov	r2,r22
   45524:	103c680e 	bge	r2,zero,446c8 <__alt_data_end+0xfffc5ec8>
   45528:	0529c83a 	sub	r20,zero,r20
   4552c:	a004c03a 	cmpne	r2,r20,zero
   45530:	05adc83a 	sub	r22,zero,r22
   45534:	b0adc83a 	sub	r22,r22,r2
   45538:	d8802917 	ldw	r2,164(sp)
   4553c:	07000b44 	movi	fp,45
   45540:	df002785 	stb	fp,158(sp)
   45544:	10022e16 	blt	r2,zero,45e00 <___svfprintf_internal_r+0x1c94>
   45548:	00bfdfc4 	movi	r2,-129
   4554c:	90a4703a 	and	r18,r18,r2
   45550:	003c6406 	br	446e4 <__alt_data_end+0xfffc5ee4>
   45554:	9080100c 	andi	r2,r18,64
   45558:	d8002785 	stb	zero,158(sp)
   4555c:	10012526 	beq	r2,zero,459f4 <___svfprintf_internal_r+0x1888>
   45560:	d9002d17 	ldw	r4,180(sp)
   45564:	d9402917 	ldw	r5,164(sp)
   45568:	002d883a 	mov	r22,zero
   4556c:	20800104 	addi	r2,r4,4
   45570:	2500000b 	ldhu	r20,0(r4)
   45574:	283fa20e 	bge	r5,zero,45400 <__alt_data_end+0xfffc6c00>
   45578:	d8802d15 	stw	r2,180(sp)
   4557c:	0039883a 	mov	fp,zero
   45580:	a584b03a 	or	r2,r20,r22
   45584:	103c571e 	bne	r2,zero,446e4 <__alt_data_end+0xfffc5ee4>
   45588:	00800044 	movi	r2,1
   4558c:	003e5006 	br	44ed0 <__alt_data_end+0xfffc66d0>
   45590:	d9402c17 	ldw	r5,176(sp)
   45594:	d9801e04 	addi	r6,sp,120
   45598:	9809883a 	mov	r4,r19
   4559c:	004d9680 	call	4d968 <__ssprint_r>
   455a0:	103bd71e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   455a4:	d8c02017 	ldw	r3,128(sp)
   455a8:	da000404 	addi	r8,sp,16
   455ac:	d9003217 	ldw	r4,200(sp)
   455b0:	d8802617 	ldw	r2,152(sp)
   455b4:	d9403317 	ldw	r5,204(sp)
   455b8:	8123883a 	add	r17,r16,r4
   455bc:	11400216 	blt	r2,r5,455c8 <___svfprintf_internal_r+0x145c>
   455c0:	9100004c 	andi	r4,r18,1
   455c4:	20000d26 	beq	r4,zero,455fc <___svfprintf_internal_r+0x1490>
   455c8:	d9003817 	ldw	r4,224(sp)
   455cc:	d9403417 	ldw	r5,208(sp)
   455d0:	1907883a 	add	r3,r3,r4
   455d4:	d9001f17 	ldw	r4,124(sp)
   455d8:	41400015 	stw	r5,0(r8)
   455dc:	d9403817 	ldw	r5,224(sp)
   455e0:	21000044 	addi	r4,r4,1
   455e4:	d8c02015 	stw	r3,128(sp)
   455e8:	41400115 	stw	r5,4(r8)
   455ec:	d9001f15 	stw	r4,124(sp)
   455f0:	014001c4 	movi	r5,7
   455f4:	2901dc16 	blt	r5,r4,45d68 <___svfprintf_internal_r+0x1bfc>
   455f8:	42000204 	addi	r8,r8,8
   455fc:	d9003317 	ldw	r4,204(sp)
   45600:	8121883a 	add	r16,r16,r4
   45604:	2085c83a 	sub	r2,r4,r2
   45608:	8461c83a 	sub	r16,r16,r17
   4560c:	1400010e 	bge	r2,r16,45614 <___svfprintf_internal_r+0x14a8>
   45610:	1021883a 	mov	r16,r2
   45614:	04000a0e 	bge	zero,r16,45640 <___svfprintf_internal_r+0x14d4>
   45618:	d9001f17 	ldw	r4,124(sp)
   4561c:	1c07883a 	add	r3,r3,r16
   45620:	44400015 	stw	r17,0(r8)
   45624:	21000044 	addi	r4,r4,1
   45628:	44000115 	stw	r16,4(r8)
   4562c:	d8c02015 	stw	r3,128(sp)
   45630:	d9001f15 	stw	r4,124(sp)
   45634:	014001c4 	movi	r5,7
   45638:	2901e616 	blt	r5,r4,45dd4 <___svfprintf_internal_r+0x1c68>
   4563c:	42000204 	addi	r8,r8,8
   45640:	8001f616 	blt	r16,zero,45e1c <___svfprintf_internal_r+0x1cb0>
   45644:	1421c83a 	sub	r16,r2,r16
   45648:	043d1c0e 	bge	zero,r16,44abc <__alt_data_end+0xfffc62bc>
   4564c:	04400404 	movi	r17,16
   45650:	d8801f17 	ldw	r2,124(sp)
   45654:	8c3edd0e 	bge	r17,r16,451cc <__alt_data_end+0xfffc69cc>
   45658:	01400174 	movhi	r5,5
   4565c:	29574b84 	addi	r5,r5,23854
   45660:	d9402b15 	stw	r5,172(sp)
   45664:	058001c4 	movi	r22,7
   45668:	dd002c17 	ldw	r20,176(sp)
   4566c:	00000306 	br	4567c <___svfprintf_internal_r+0x1510>
   45670:	42000204 	addi	r8,r8,8
   45674:	843ffc04 	addi	r16,r16,-16
   45678:	8c3ed70e 	bge	r17,r16,451d8 <__alt_data_end+0xfffc69d8>
   4567c:	18c00404 	addi	r3,r3,16
   45680:	10800044 	addi	r2,r2,1
   45684:	45400015 	stw	r21,0(r8)
   45688:	44400115 	stw	r17,4(r8)
   4568c:	d8c02015 	stw	r3,128(sp)
   45690:	d8801f15 	stw	r2,124(sp)
   45694:	b0bff60e 	bge	r22,r2,45670 <__alt_data_end+0xfffc6e70>
   45698:	d9801e04 	addi	r6,sp,120
   4569c:	a00b883a 	mov	r5,r20
   456a0:	9809883a 	mov	r4,r19
   456a4:	004d9680 	call	4d968 <__ssprint_r>
   456a8:	103b951e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   456ac:	d8c02017 	ldw	r3,128(sp)
   456b0:	d8801f17 	ldw	r2,124(sp)
   456b4:	da000404 	addi	r8,sp,16
   456b8:	003fee06 	br	45674 <__alt_data_end+0xfffc6e74>
   456bc:	9088703a 	and	r4,r18,r2
   456c0:	203e8d1e 	bne	r4,zero,450f8 <__alt_data_end+0xfffc68f8>
   456c4:	dc401f17 	ldw	r17,124(sp)
   456c8:	40800115 	stw	r2,4(r8)
   456cc:	44000015 	stw	r16,0(r8)
   456d0:	8c400044 	addi	r17,r17,1
   456d4:	d8c02015 	stw	r3,128(sp)
   456d8:	dc401f15 	stw	r17,124(sp)
   456dc:	008001c4 	movi	r2,7
   456e0:	147f7f16 	blt	r2,r17,454e0 <__alt_data_end+0xfffc6ce0>
   456e4:	45800204 	addi	r22,r8,8
   456e8:	003eac06 	br	4519c <__alt_data_end+0xfffc699c>
   456ec:	d9402c17 	ldw	r5,176(sp)
   456f0:	d9801e04 	addi	r6,sp,120
   456f4:	9809883a 	mov	r4,r19
   456f8:	004d9680 	call	4d968 <__ssprint_r>
   456fc:	103b801e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   45700:	d8c02017 	ldw	r3,128(sp)
   45704:	dc401f17 	ldw	r17,124(sp)
   45708:	da000404 	addi	r8,sp,16
   4570c:	003e8406 	br	45120 <__alt_data_end+0xfffc6920>
   45710:	d9402c17 	ldw	r5,176(sp)
   45714:	d9801e04 	addi	r6,sp,120
   45718:	9809883a 	mov	r4,r19
   4571c:	004d9680 	call	4d968 <__ssprint_r>
   45720:	103b771e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   45724:	d8c02017 	ldw	r3,128(sp)
   45728:	dc401f17 	ldw	r17,124(sp)
   4572c:	dd800404 	addi	r22,sp,16
   45730:	003e8606 	br	4514c <__alt_data_end+0xfffc694c>
   45734:	0029883a 	mov	r20,zero
   45738:	a5000c04 	addi	r20,r20,48
   4573c:	dc001dc4 	addi	r16,sp,119
   45740:	dd001dc5 	stb	r20,119(sp)
   45744:	003f3806 	br	45428 <__alt_data_end+0xfffc6c28>
   45748:	d9402c17 	ldw	r5,176(sp)
   4574c:	d9801e04 	addi	r6,sp,120
   45750:	9809883a 	mov	r4,r19
   45754:	004d9680 	call	4d968 <__ssprint_r>
   45758:	103b691e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   4575c:	d8c02017 	ldw	r3,128(sp)
   45760:	da000404 	addi	r8,sp,16
   45764:	003c9506 	br	449bc <__alt_data_end+0xfffc61bc>
   45768:	d9003617 	ldw	r4,216(sp)
   4576c:	d9403717 	ldw	r5,220(sp)
   45770:	da003e15 	stw	r8,248(sp)
   45774:	004d6880 	call	4d688 <__fpclassifyd>
   45778:	da003e17 	ldw	r8,248(sp)
   4577c:	1000bd1e 	bne	r2,zero,45a74 <___svfprintf_internal_r+0x1908>
   45780:	008011c4 	movi	r2,71
   45784:	14411e0e 	bge	r2,r17,45c00 <___svfprintf_internal_r+0x1a94>
   45788:	04000174 	movhi	r16,5
   4578c:	84173e04 	addi	r16,r16,23800
   45790:	00c000c4 	movi	r3,3
   45794:	00bfdfc4 	movi	r2,-129
   45798:	d8c02a15 	stw	r3,168(sp)
   4579c:	90a4703a 	and	r18,r18,r2
   457a0:	df002783 	ldbu	fp,158(sp)
   457a4:	d8c02e15 	stw	r3,184(sp)
   457a8:	d8002915 	stw	zero,164(sp)
   457ac:	d8003215 	stw	zero,200(sp)
   457b0:	003c1c06 	br	44824 <__alt_data_end+0xfffc6024>
   457b4:	9080100c 	andi	r2,r18,64
   457b8:	d8002785 	stb	zero,158(sp)
   457bc:	10009426 	beq	r2,zero,45a10 <___svfprintf_internal_r+0x18a4>
   457c0:	d8c02d17 	ldw	r3,180(sp)
   457c4:	d9002917 	ldw	r4,164(sp)
   457c8:	002d883a 	mov	r22,zero
   457cc:	18800104 	addi	r2,r3,4
   457d0:	1d00000b 	ldhu	r20,0(r3)
   457d4:	203ec10e 	bge	r4,zero,452dc <__alt_data_end+0xfffc6adc>
   457d8:	a586b03a 	or	r3,r20,r22
   457dc:	d8802d15 	stw	r2,180(sp)
   457e0:	183ec21e 	bne	r3,zero,452ec <__alt_data_end+0xfffc6aec>
   457e4:	0039883a 	mov	fp,zero
   457e8:	0005883a 	mov	r2,zero
   457ec:	003db806 	br	44ed0 <__alt_data_end+0xfffc66d0>
   457f0:	d8802d17 	ldw	r2,180(sp)
   457f4:	d8c02d17 	ldw	r3,180(sp)
   457f8:	d9002d17 	ldw	r4,180(sp)
   457fc:	10800017 	ldw	r2,0(r2)
   45800:	18c00117 	ldw	r3,4(r3)
   45804:	21000204 	addi	r4,r4,8
   45808:	d8803615 	stw	r2,216(sp)
   4580c:	d8c03715 	stw	r3,220(sp)
   45810:	d9002d15 	stw	r4,180(sp)
   45814:	003b8206 	br	44620 <__alt_data_end+0xfffc5e20>
   45818:	9080100c 	andi	r2,r18,64
   4581c:	10010726 	beq	r2,zero,45c3c <___svfprintf_internal_r+0x1ad0>
   45820:	d8c02d17 	ldw	r3,180(sp)
   45824:	1d00000f 	ldh	r20,0(r3)
   45828:	18c00104 	addi	r3,r3,4
   4582c:	d8c02d15 	stw	r3,180(sp)
   45830:	a02dd7fa 	srai	r22,r20,31
   45834:	b005883a 	mov	r2,r22
   45838:	003ba206 	br	446c4 <__alt_data_end+0xfffc5ec4>
   4583c:	9080100c 	andi	r2,r18,64
   45840:	10010526 	beq	r2,zero,45c58 <___svfprintf_internal_r+0x1aec>
   45844:	d9002d17 	ldw	r4,180(sp)
   45848:	002d883a 	mov	r22,zero
   4584c:	2500000b 	ldhu	r20,0(r4)
   45850:	21000104 	addi	r4,r4,4
   45854:	d9002d15 	stw	r4,180(sp)
   45858:	003cfe06 	br	44c54 <__alt_data_end+0xfffc6454>
   4585c:	bc400007 	ldb	r17,0(r23)
   45860:	003a9606 	br	442bc <__alt_data_end+0xfffc5abc>
   45864:	9080040c 	andi	r2,r18,16
   45868:	10010126 	beq	r2,zero,45c70 <___svfprintf_internal_r+0x1b04>
   4586c:	d9402d17 	ldw	r5,180(sp)
   45870:	d8c02f17 	ldw	r3,188(sp)
   45874:	28800017 	ldw	r2,0(r5)
   45878:	29400104 	addi	r5,r5,4
   4587c:	d9402d15 	stw	r5,180(sp)
   45880:	10c00015 	stw	r3,0(r2)
   45884:	003a6406 	br	44218 <__alt_data_end+0xfffc5a18>
   45888:	d9002917 	ldw	r4,164(sp)
   4588c:	d8002785 	stb	zero,158(sp)
   45890:	203d8d16 	blt	r4,zero,44ec8 <__alt_data_end+0xfffc66c8>
   45894:	00bfdfc4 	movi	r2,-129
   45898:	90a4703a 	and	r18,r18,r2
   4589c:	003b0506 	br	444b4 <__alt_data_end+0xfffc5cb4>
   458a0:	01400174 	movhi	r5,5
   458a4:	29574b84 	addi	r5,r5,23854
   458a8:	d9402b15 	stw	r5,172(sp)
   458ac:	d9402b17 	ldw	r5,172(sp)
   458b0:	1c47883a 	add	r3,r3,r17
   458b4:	10800044 	addi	r2,r2,1
   458b8:	41400015 	stw	r5,0(r8)
   458bc:	44400115 	stw	r17,4(r8)
   458c0:	d8c02015 	stw	r3,128(sp)
   458c4:	d8801f15 	stw	r2,124(sp)
   458c8:	010001c4 	movi	r4,7
   458cc:	20bf3016 	blt	r4,r2,45590 <__alt_data_end+0xfffc6d90>
   458d0:	42000204 	addi	r8,r8,8
   458d4:	003f3506 	br	455ac <__alt_data_end+0xfffc6dac>
   458d8:	01000174 	movhi	r4,5
   458dc:	21174b84 	addi	r4,r4,23854
   458e0:	d9002b15 	stw	r4,172(sp)
   458e4:	003c5e06 	br	44a60 <__alt_data_end+0xfffc6260>
   458e8:	d9402c17 	ldw	r5,176(sp)
   458ec:	d9801e04 	addi	r6,sp,120
   458f0:	9809883a 	mov	r4,r19
   458f4:	004d9680 	call	4d968 <__ssprint_r>
   458f8:	103b011e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   458fc:	d8c02017 	ldw	r3,128(sp)
   45900:	da000404 	addi	r8,sp,16
   45904:	003d9306 	br	44f54 <__alt_data_end+0xfffc6754>
   45908:	d8801f17 	ldw	r2,124(sp)
   4590c:	01400174 	movhi	r5,5
   45910:	01000044 	movi	r4,1
   45914:	18c00044 	addi	r3,r3,1
   45918:	10800044 	addi	r2,r2,1
   4591c:	29574b04 	addi	r5,r5,23852
   45920:	41000115 	stw	r4,4(r8)
   45924:	41400015 	stw	r5,0(r8)
   45928:	d8c02015 	stw	r3,128(sp)
   4592c:	d8801f15 	stw	r2,124(sp)
   45930:	010001c4 	movi	r4,7
   45934:	2080b516 	blt	r4,r2,45c0c <___svfprintf_internal_r+0x1aa0>
   45938:	42000204 	addi	r8,r8,8
   4593c:	8800041e 	bne	r17,zero,45950 <___svfprintf_internal_r+0x17e4>
   45940:	d8803317 	ldw	r2,204(sp)
   45944:	1000021e 	bne	r2,zero,45950 <___svfprintf_internal_r+0x17e4>
   45948:	9080004c 	andi	r2,r18,1
   4594c:	103c5b26 	beq	r2,zero,44abc <__alt_data_end+0xfffc62bc>
   45950:	d9003817 	ldw	r4,224(sp)
   45954:	d8801f17 	ldw	r2,124(sp)
   45958:	d9403417 	ldw	r5,208(sp)
   4595c:	20c7883a 	add	r3,r4,r3
   45960:	10800044 	addi	r2,r2,1
   45964:	41000115 	stw	r4,4(r8)
   45968:	41400015 	stw	r5,0(r8)
   4596c:	d8c02015 	stw	r3,128(sp)
   45970:	d8801f15 	stw	r2,124(sp)
   45974:	010001c4 	movi	r4,7
   45978:	20818016 	blt	r4,r2,45f7c <___svfprintf_internal_r+0x1e10>
   4597c:	42000204 	addi	r8,r8,8
   45980:	0463c83a 	sub	r17,zero,r17
   45984:	0440cb0e 	bge	zero,r17,45cb4 <___svfprintf_internal_r+0x1b48>
   45988:	05800404 	movi	r22,16
   4598c:	b440e80e 	bge	r22,r17,45d30 <___svfprintf_internal_r+0x1bc4>
   45990:	01400174 	movhi	r5,5
   45994:	29574b84 	addi	r5,r5,23854
   45998:	d9402b15 	stw	r5,172(sp)
   4599c:	070001c4 	movi	fp,7
   459a0:	dd002c17 	ldw	r20,176(sp)
   459a4:	00000306 	br	459b4 <___svfprintf_internal_r+0x1848>
   459a8:	42000204 	addi	r8,r8,8
   459ac:	8c7ffc04 	addi	r17,r17,-16
   459b0:	b440e20e 	bge	r22,r17,45d3c <___svfprintf_internal_r+0x1bd0>
   459b4:	18c00404 	addi	r3,r3,16
   459b8:	10800044 	addi	r2,r2,1
   459bc:	45400015 	stw	r21,0(r8)
   459c0:	45800115 	stw	r22,4(r8)
   459c4:	d8c02015 	stw	r3,128(sp)
   459c8:	d8801f15 	stw	r2,124(sp)
   459cc:	e0bff60e 	bge	fp,r2,459a8 <__alt_data_end+0xfffc71a8>
   459d0:	d9801e04 	addi	r6,sp,120
   459d4:	a00b883a 	mov	r5,r20
   459d8:	9809883a 	mov	r4,r19
   459dc:	004d9680 	call	4d968 <__ssprint_r>
   459e0:	103ac71e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   459e4:	d8c02017 	ldw	r3,128(sp)
   459e8:	d8801f17 	ldw	r2,124(sp)
   459ec:	da000404 	addi	r8,sp,16
   459f0:	003fee06 	br	459ac <__alt_data_end+0xfffc71ac>
   459f4:	d8c02d17 	ldw	r3,180(sp)
   459f8:	d9002917 	ldw	r4,164(sp)
   459fc:	002d883a 	mov	r22,zero
   45a00:	18800104 	addi	r2,r3,4
   45a04:	1d000017 	ldw	r20,0(r3)
   45a08:	203e7d0e 	bge	r4,zero,45400 <__alt_data_end+0xfffc6c00>
   45a0c:	003eda06 	br	45578 <__alt_data_end+0xfffc6d78>
   45a10:	d9402d17 	ldw	r5,180(sp)
   45a14:	d8c02917 	ldw	r3,164(sp)
   45a18:	002d883a 	mov	r22,zero
   45a1c:	28800104 	addi	r2,r5,4
   45a20:	2d000017 	ldw	r20,0(r5)
   45a24:	183e2d0e 	bge	r3,zero,452dc <__alt_data_end+0xfffc6adc>
   45a28:	003f6b06 	br	457d8 <__alt_data_end+0xfffc6fd8>
   45a2c:	d8c02d15 	stw	r3,180(sp)
   45a30:	0039883a 	mov	fp,zero
   45a34:	003ed206 	br	45580 <__alt_data_end+0xfffc6d80>
   45a38:	bc400043 	ldbu	r17,1(r23)
   45a3c:	94800814 	ori	r18,r18,32
   45a40:	bdc00044 	addi	r23,r23,1
   45a44:	8c403fcc 	andi	r17,r17,255
   45a48:	8c40201c 	xori	r17,r17,128
   45a4c:	8c7fe004 	addi	r17,r17,-128
   45a50:	003a1a06 	br	442bc <__alt_data_end+0xfffc5abc>
   45a54:	d9402c17 	ldw	r5,176(sp)
   45a58:	d9801e04 	addi	r6,sp,120
   45a5c:	9809883a 	mov	r4,r19
   45a60:	004d9680 	call	4d968 <__ssprint_r>
   45a64:	103aa61e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   45a68:	d8c02017 	ldw	r3,128(sp)
   45a6c:	da000404 	addi	r8,sp,16
   45a70:	003d4a06 	br	44f9c <__alt_data_end+0xfffc679c>
   45a74:	d9002917 	ldw	r4,164(sp)
   45a78:	05bff7c4 	movi	r22,-33
   45a7c:	00bfffc4 	movi	r2,-1
   45a80:	8dac703a 	and	r22,r17,r22
   45a84:	20806a26 	beq	r4,r2,45c30 <___svfprintf_internal_r+0x1ac4>
   45a88:	008011c4 	movi	r2,71
   45a8c:	b0813726 	beq	r22,r2,45f6c <___svfprintf_internal_r+0x1e00>
   45a90:	d9003717 	ldw	r4,220(sp)
   45a94:	90c04014 	ori	r3,r18,256
   45a98:	d8c02b15 	stw	r3,172(sp)
   45a9c:	20015d16 	blt	r4,zero,46014 <___svfprintf_internal_r+0x1ea8>
   45aa0:	dd003717 	ldw	r20,220(sp)
   45aa4:	d8002a05 	stb	zero,168(sp)
   45aa8:	00801984 	movi	r2,102
   45aac:	88814026 	beq	r17,r2,45fb0 <___svfprintf_internal_r+0x1e44>
   45ab0:	00801184 	movi	r2,70
   45ab4:	88817126 	beq	r17,r2,4607c <___svfprintf_internal_r+0x1f10>
   45ab8:	00801144 	movi	r2,69
   45abc:	b0816226 	beq	r22,r2,46048 <___svfprintf_internal_r+0x1edc>
   45ac0:	d8c02917 	ldw	r3,164(sp)
   45ac4:	d8802104 	addi	r2,sp,132
   45ac8:	d8800315 	stw	r2,12(sp)
   45acc:	d9403617 	ldw	r5,216(sp)
   45ad0:	d8802504 	addi	r2,sp,148
   45ad4:	d8800215 	stw	r2,8(sp)
   45ad8:	d8802604 	addi	r2,sp,152
   45adc:	d8c00015 	stw	r3,0(sp)
   45ae0:	d8800115 	stw	r2,4(sp)
   45ae4:	01c00084 	movi	r7,2
   45ae8:	a00d883a 	mov	r6,r20
   45aec:	9809883a 	mov	r4,r19
   45af0:	d8c03d15 	stw	r3,244(sp)
   45af4:	da003e15 	stw	r8,248(sp)
   45af8:	0048a8c0 	call	48a8c <_dtoa_r>
   45afc:	1021883a 	mov	r16,r2
   45b00:	008019c4 	movi	r2,103
   45b04:	d8c03d17 	ldw	r3,244(sp)
   45b08:	da003e17 	ldw	r8,248(sp)
   45b0c:	8880e726 	beq	r17,r2,45eac <___svfprintf_internal_r+0x1d40>
   45b10:	008011c4 	movi	r2,71
   45b14:	8880d426 	beq	r17,r2,45e68 <___svfprintf_internal_r+0x1cfc>
   45b18:	80f9883a 	add	fp,r16,r3
   45b1c:	d9003617 	ldw	r4,216(sp)
   45b20:	000d883a 	mov	r6,zero
   45b24:	000f883a 	mov	r7,zero
   45b28:	a00b883a 	mov	r5,r20
   45b2c:	da003e15 	stw	r8,248(sp)
   45b30:	00517a00 	call	517a0 <__eqdf2>
   45b34:	da003e17 	ldw	r8,248(sp)
   45b38:	1000e426 	beq	r2,zero,45ecc <___svfprintf_internal_r+0x1d60>
   45b3c:	d8802117 	ldw	r2,132(sp)
   45b40:	1700062e 	bgeu	r2,fp,45b5c <___svfprintf_internal_r+0x19f0>
   45b44:	01000c04 	movi	r4,48
   45b48:	10c00044 	addi	r3,r2,1
   45b4c:	d8c02115 	stw	r3,132(sp)
   45b50:	11000005 	stb	r4,0(r2)
   45b54:	d8802117 	ldw	r2,132(sp)
   45b58:	173ffb36 	bltu	r2,fp,45b48 <__alt_data_end+0xfffc7348>
   45b5c:	1405c83a 	sub	r2,r2,r16
   45b60:	d8803315 	stw	r2,204(sp)
   45b64:	008011c4 	movi	r2,71
   45b68:	b080c526 	beq	r22,r2,45e80 <___svfprintf_internal_r+0x1d14>
   45b6c:	00801944 	movi	r2,101
   45b70:	1441d90e 	bge	r2,r17,462d8 <___svfprintf_internal_r+0x216c>
   45b74:	d8c02617 	ldw	r3,152(sp)
   45b78:	00801984 	movi	r2,102
   45b7c:	d8c03215 	stw	r3,200(sp)
   45b80:	88813426 	beq	r17,r2,46054 <___svfprintf_internal_r+0x1ee8>
   45b84:	d8c03217 	ldw	r3,200(sp)
   45b88:	d9003317 	ldw	r4,204(sp)
   45b8c:	19012516 	blt	r3,r4,46024 <___svfprintf_internal_r+0x1eb8>
   45b90:	9480004c 	andi	r18,r18,1
   45b94:	9001841e 	bne	r18,zero,461a8 <___svfprintf_internal_r+0x203c>
   45b98:	1805883a 	mov	r2,r3
   45b9c:	1801cc16 	blt	r3,zero,462d0 <___svfprintf_internal_r+0x2164>
   45ba0:	d8c03217 	ldw	r3,200(sp)
   45ba4:	044019c4 	movi	r17,103
   45ba8:	d8c02e15 	stw	r3,184(sp)
   45bac:	df002a07 	ldb	fp,168(sp)
   45bb0:	e000a61e 	bne	fp,zero,45e4c <___svfprintf_internal_r+0x1ce0>
   45bb4:	df002783 	ldbu	fp,158(sp)
   45bb8:	d8802a15 	stw	r2,168(sp)
   45bbc:	dc802b17 	ldw	r18,172(sp)
   45bc0:	d8002915 	stw	zero,164(sp)
   45bc4:	003b1706 	br	44824 <__alt_data_end+0xfffc6024>
   45bc8:	04000174 	movhi	r16,5
   45bcc:	84173b04 	addi	r16,r16,23788
   45bd0:	003aa606 	br	4466c <__alt_data_end+0xfffc5e6c>
   45bd4:	d9003917 	ldw	r4,228(sp)
   45bd8:	04001004 	movi	r16,64
   45bdc:	800b883a 	mov	r5,r16
   45be0:	004b46c0 	call	4b46c <_malloc_r>
   45be4:	d9002c17 	ldw	r4,176(sp)
   45be8:	20800015 	stw	r2,0(r4)
   45bec:	20800415 	stw	r2,16(r4)
   45bf0:	1001cb26 	beq	r2,zero,46320 <___svfprintf_internal_r+0x21b4>
   45bf4:	d8802c17 	ldw	r2,176(sp)
   45bf8:	14000515 	stw	r16,20(r2)
   45bfc:	00397606 	br	441d8 <__alt_data_end+0xfffc59d8>
   45c00:	04000174 	movhi	r16,5
   45c04:	84173d04 	addi	r16,r16,23796
   45c08:	003ee106 	br	45790 <__alt_data_end+0xfffc6f90>
   45c0c:	d9402c17 	ldw	r5,176(sp)
   45c10:	d9801e04 	addi	r6,sp,120
   45c14:	9809883a 	mov	r4,r19
   45c18:	004d9680 	call	4d968 <__ssprint_r>
   45c1c:	103a381e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   45c20:	dc402617 	ldw	r17,152(sp)
   45c24:	d8c02017 	ldw	r3,128(sp)
   45c28:	da000404 	addi	r8,sp,16
   45c2c:	003f4306 	br	4593c <__alt_data_end+0xfffc713c>
   45c30:	01400184 	movi	r5,6
   45c34:	d9402915 	stw	r5,164(sp)
   45c38:	003f9506 	br	45a90 <__alt_data_end+0xfffc7290>
   45c3c:	d9002d17 	ldw	r4,180(sp)
   45c40:	25000017 	ldw	r20,0(r4)
   45c44:	21000104 	addi	r4,r4,4
   45c48:	d9002d15 	stw	r4,180(sp)
   45c4c:	a02dd7fa 	srai	r22,r20,31
   45c50:	b005883a 	mov	r2,r22
   45c54:	003a9b06 	br	446c4 <__alt_data_end+0xfffc5ec4>
   45c58:	d9402d17 	ldw	r5,180(sp)
   45c5c:	002d883a 	mov	r22,zero
   45c60:	2d000017 	ldw	r20,0(r5)
   45c64:	29400104 	addi	r5,r5,4
   45c68:	d9402d15 	stw	r5,180(sp)
   45c6c:	003bf906 	br	44c54 <__alt_data_end+0xfffc6454>
   45c70:	9480100c 	andi	r18,r18,64
   45c74:	90006e26 	beq	r18,zero,45e30 <___svfprintf_internal_r+0x1cc4>
   45c78:	d9002d17 	ldw	r4,180(sp)
   45c7c:	d9402f17 	ldw	r5,188(sp)
   45c80:	20800017 	ldw	r2,0(r4)
   45c84:	21000104 	addi	r4,r4,4
   45c88:	d9002d15 	stw	r4,180(sp)
   45c8c:	1140000d 	sth	r5,0(r2)
   45c90:	00396106 	br	44218 <__alt_data_end+0xfffc5a18>
   45c94:	d9402c17 	ldw	r5,176(sp)
   45c98:	d9801e04 	addi	r6,sp,120
   45c9c:	9809883a 	mov	r4,r19
   45ca0:	004d9680 	call	4d968 <__ssprint_r>
   45ca4:	103a161e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   45ca8:	d8c02017 	ldw	r3,128(sp)
   45cac:	d8801f17 	ldw	r2,124(sp)
   45cb0:	da000404 	addi	r8,sp,16
   45cb4:	d9403317 	ldw	r5,204(sp)
   45cb8:	10800044 	addi	r2,r2,1
   45cbc:	44000015 	stw	r16,0(r8)
   45cc0:	28c7883a 	add	r3,r5,r3
   45cc4:	003b7706 	br	44aa4 <__alt_data_end+0xfffc62a4>
   45cc8:	8009883a 	mov	r4,r16
   45ccc:	da003e15 	stw	r8,248(sp)
   45cd0:	00440d40 	call	440d4 <strlen>
   45cd4:	d8802e15 	stw	r2,184(sp)
   45cd8:	da003e17 	ldw	r8,248(sp)
   45cdc:	103c280e 	bge	r2,zero,44d80 <__alt_data_end+0xfffc6580>
   45ce0:	0005883a 	mov	r2,zero
   45ce4:	003c2606 	br	44d80 <__alt_data_end+0xfffc6580>
   45ce8:	00bfffc4 	movi	r2,-1
   45cec:	003a0906 	br	44514 <__alt_data_end+0xfffc5d14>
   45cf0:	01000174 	movhi	r4,5
   45cf4:	21174f84 	addi	r4,r4,23870
   45cf8:	d9003515 	stw	r4,212(sp)
   45cfc:	003b0606 	br	44918 <__alt_data_end+0xfffc6118>
   45d00:	013fffc4 	movi	r4,-1
   45d04:	003a2706 	br	445a4 <__alt_data_end+0xfffc5da4>
   45d08:	d9402c17 	ldw	r5,176(sp)
   45d0c:	d9801e04 	addi	r6,sp,120
   45d10:	9809883a 	mov	r4,r19
   45d14:	004d9680 	call	4d968 <__ssprint_r>
   45d18:	1039f91e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   45d1c:	d8c02017 	ldw	r3,128(sp)
   45d20:	da000404 	addi	r8,sp,16
   45d24:	003d8406 	br	45338 <__alt_data_end+0xfffc6b38>
   45d28:	0023883a 	mov	r17,zero
   45d2c:	003d8306 	br	4533c <__alt_data_end+0xfffc6b3c>
   45d30:	01000174 	movhi	r4,5
   45d34:	21174b84 	addi	r4,r4,23854
   45d38:	d9002b15 	stw	r4,172(sp)
   45d3c:	d9002b17 	ldw	r4,172(sp)
   45d40:	1c47883a 	add	r3,r3,r17
   45d44:	10800044 	addi	r2,r2,1
   45d48:	41000015 	stw	r4,0(r8)
   45d4c:	44400115 	stw	r17,4(r8)
   45d50:	d8c02015 	stw	r3,128(sp)
   45d54:	d8801f15 	stw	r2,124(sp)
   45d58:	010001c4 	movi	r4,7
   45d5c:	20bfcd16 	blt	r4,r2,45c94 <__alt_data_end+0xfffc7494>
   45d60:	42000204 	addi	r8,r8,8
   45d64:	003fd306 	br	45cb4 <__alt_data_end+0xfffc74b4>
   45d68:	d9402c17 	ldw	r5,176(sp)
   45d6c:	d9801e04 	addi	r6,sp,120
   45d70:	9809883a 	mov	r4,r19
   45d74:	004d9680 	call	4d968 <__ssprint_r>
   45d78:	1039e11e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   45d7c:	d8802617 	ldw	r2,152(sp)
   45d80:	d8c02017 	ldw	r3,128(sp)
   45d84:	da000404 	addi	r8,sp,16
   45d88:	003e1c06 	br	455fc <__alt_data_end+0xfffc6dfc>
   45d8c:	d8802917 	ldw	r2,164(sp)
   45d90:	00c00184 	movi	r3,6
   45d94:	1880012e 	bgeu	r3,r2,45d9c <___svfprintf_internal_r+0x1c30>
   45d98:	1805883a 	mov	r2,r3
   45d9c:	d8802e15 	stw	r2,184(sp)
   45da0:	1000f316 	blt	r2,zero,46170 <___svfprintf_internal_r+0x2004>
   45da4:	04000174 	movhi	r16,5
   45da8:	d8802a15 	stw	r2,168(sp)
   45dac:	dd002d15 	stw	r20,180(sp)
   45db0:	d8002915 	stw	zero,164(sp)
   45db4:	d8003215 	stw	zero,200(sp)
   45db8:	84174904 	addi	r16,r16,23844
   45dbc:	0039883a 	mov	fp,zero
   45dc0:	003a9f06 	br	44840 <__alt_data_end+0xfffc6040>
   45dc4:	01000174 	movhi	r4,5
   45dc8:	21174f84 	addi	r4,r4,23870
   45dcc:	d9003515 	stw	r4,212(sp)
   45dd0:	003b5f06 	br	44b50 <__alt_data_end+0xfffc6350>
   45dd4:	d9402c17 	ldw	r5,176(sp)
   45dd8:	d9801e04 	addi	r6,sp,120
   45ddc:	9809883a 	mov	r4,r19
   45de0:	004d9680 	call	4d968 <__ssprint_r>
   45de4:	1039c61e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   45de8:	d8802617 	ldw	r2,152(sp)
   45dec:	d9403317 	ldw	r5,204(sp)
   45df0:	d8c02017 	ldw	r3,128(sp)
   45df4:	da000404 	addi	r8,sp,16
   45df8:	2885c83a 	sub	r2,r5,r2
   45dfc:	003e1006 	br	45640 <__alt_data_end+0xfffc6e40>
   45e00:	00800044 	movi	r2,1
   45e04:	10803fcc 	andi	r2,r2,255
   45e08:	00c00044 	movi	r3,1
   45e0c:	10fa3526 	beq	r2,r3,446e4 <__alt_data_end+0xfffc5ee4>
   45e10:	00c00084 	movi	r3,2
   45e14:	10fb9e26 	beq	r2,r3,44c90 <__alt_data_end+0xfffc6490>
   45e18:	003a6406 	br	447ac <__alt_data_end+0xfffc5fac>
   45e1c:	0021883a 	mov	r16,zero
   45e20:	003e0806 	br	45644 <__alt_data_end+0xfffc6e44>
   45e24:	07000b44 	movi	fp,45
   45e28:	df002785 	stb	fp,158(sp)
   45e2c:	003a0b06 	br	4465c <__alt_data_end+0xfffc5e5c>
   45e30:	d8c02d17 	ldw	r3,180(sp)
   45e34:	d9002f17 	ldw	r4,188(sp)
   45e38:	18800017 	ldw	r2,0(r3)
   45e3c:	18c00104 	addi	r3,r3,4
   45e40:	d8c02d15 	stw	r3,180(sp)
   45e44:	11000015 	stw	r4,0(r2)
   45e48:	0038f306 	br	44218 <__alt_data_end+0xfffc5a18>
   45e4c:	00c00b44 	movi	r3,45
   45e50:	d8c02785 	stb	r3,158(sp)
   45e54:	d8802a15 	stw	r2,168(sp)
   45e58:	dc802b17 	ldw	r18,172(sp)
   45e5c:	d8002915 	stw	zero,164(sp)
   45e60:	07000b44 	movi	fp,45
   45e64:	003a7306 	br	44834 <__alt_data_end+0xfffc6034>
   45e68:	9080004c 	andi	r2,r18,1
   45e6c:	1000941e 	bne	r2,zero,460c0 <___svfprintf_internal_r+0x1f54>
   45e70:	d8802117 	ldw	r2,132(sp)
   45e74:	1405c83a 	sub	r2,r2,r16
   45e78:	d8803315 	stw	r2,204(sp)
   45e7c:	b441161e 	bne	r22,r17,462d8 <___svfprintf_internal_r+0x216c>
   45e80:	dd802617 	ldw	r22,152(sp)
   45e84:	00bfff44 	movi	r2,-3
   45e88:	b0801a16 	blt	r22,r2,45ef4 <___svfprintf_internal_r+0x1d88>
   45e8c:	d9402917 	ldw	r5,164(sp)
   45e90:	2d801816 	blt	r5,r22,45ef4 <___svfprintf_internal_r+0x1d88>
   45e94:	dd803215 	stw	r22,200(sp)
   45e98:	003f3a06 	br	45b84 <__alt_data_end+0xfffc7384>
   45e9c:	1025883a 	mov	r18,r2
   45ea0:	0039883a 	mov	fp,zero
   45ea4:	00800084 	movi	r2,2
   45ea8:	003fd606 	br	45e04 <__alt_data_end+0xfffc7604>
   45eac:	9080004c 	andi	r2,r18,1
   45eb0:	103f191e 	bne	r2,zero,45b18 <__alt_data_end+0xfffc7318>
   45eb4:	d8802117 	ldw	r2,132(sp)
   45eb8:	003f2806 	br	45b5c <__alt_data_end+0xfffc735c>
   45ebc:	01000174 	movhi	r4,5
   45ec0:	21174b84 	addi	r4,r4,23854
   45ec4:	d9002b15 	stw	r4,172(sp)
   45ec8:	003c7c06 	br	450bc <__alt_data_end+0xfffc68bc>
   45ecc:	e005883a 	mov	r2,fp
   45ed0:	003f2206 	br	45b5c <__alt_data_end+0xfffc735c>
   45ed4:	d9402917 	ldw	r5,164(sp)
   45ed8:	df002783 	ldbu	fp,158(sp)
   45edc:	dd002d15 	stw	r20,180(sp)
   45ee0:	d9402a15 	stw	r5,168(sp)
   45ee4:	d9402e15 	stw	r5,184(sp)
   45ee8:	d8002915 	stw	zero,164(sp)
   45eec:	d8003215 	stw	zero,200(sp)
   45ef0:	003a4c06 	br	44824 <__alt_data_end+0xfffc6024>
   45ef4:	8c7fff84 	addi	r17,r17,-2
   45ef8:	b5bfffc4 	addi	r22,r22,-1
   45efc:	dd802615 	stw	r22,152(sp)
   45f00:	dc4022c5 	stb	r17,139(sp)
   45f04:	b000c316 	blt	r22,zero,46214 <___svfprintf_internal_r+0x20a8>
   45f08:	00800ac4 	movi	r2,43
   45f0c:	d8802305 	stb	r2,140(sp)
   45f10:	00800244 	movi	r2,9
   45f14:	15806e16 	blt	r2,r22,460d0 <___svfprintf_internal_r+0x1f64>
   45f18:	00800c04 	movi	r2,48
   45f1c:	b5800c04 	addi	r22,r22,48
   45f20:	d8802345 	stb	r2,141(sp)
   45f24:	dd802385 	stb	r22,142(sp)
   45f28:	d88023c4 	addi	r2,sp,143
   45f2c:	df0022c4 	addi	fp,sp,139
   45f30:	d8c03317 	ldw	r3,204(sp)
   45f34:	1739c83a 	sub	fp,r2,fp
   45f38:	d9003317 	ldw	r4,204(sp)
   45f3c:	e0c7883a 	add	r3,fp,r3
   45f40:	df003b15 	stw	fp,236(sp)
   45f44:	d8c02e15 	stw	r3,184(sp)
   45f48:	00800044 	movi	r2,1
   45f4c:	1100b70e 	bge	r2,r4,4622c <___svfprintf_internal_r+0x20c0>
   45f50:	d8c02e17 	ldw	r3,184(sp)
   45f54:	18c00044 	addi	r3,r3,1
   45f58:	d8c02e15 	stw	r3,184(sp)
   45f5c:	1805883a 	mov	r2,r3
   45f60:	1800b016 	blt	r3,zero,46224 <___svfprintf_internal_r+0x20b8>
   45f64:	d8003215 	stw	zero,200(sp)
   45f68:	003f1006 	br	45bac <__alt_data_end+0xfffc73ac>
   45f6c:	d8802917 	ldw	r2,164(sp)
   45f70:	103ec71e 	bne	r2,zero,45a90 <__alt_data_end+0xfffc7290>
   45f74:	dc002915 	stw	r16,164(sp)
   45f78:	003ec506 	br	45a90 <__alt_data_end+0xfffc7290>
   45f7c:	d9402c17 	ldw	r5,176(sp)
   45f80:	d9801e04 	addi	r6,sp,120
   45f84:	9809883a 	mov	r4,r19
   45f88:	004d9680 	call	4d968 <__ssprint_r>
   45f8c:	10395c1e 	bne	r2,zero,44500 <__alt_data_end+0xfffc5d00>
   45f90:	dc402617 	ldw	r17,152(sp)
   45f94:	d8c02017 	ldw	r3,128(sp)
   45f98:	d8801f17 	ldw	r2,124(sp)
   45f9c:	da000404 	addi	r8,sp,16
   45fa0:	003e7706 	br	45980 <__alt_data_end+0xfffc7180>
   45fa4:	582f883a 	mov	r23,r11
   45fa8:	d8002915 	stw	zero,164(sp)
   45fac:	0038c406 	br	442c0 <__alt_data_end+0xfffc5ac0>
   45fb0:	d8c02917 	ldw	r3,164(sp)
   45fb4:	d8802104 	addi	r2,sp,132
   45fb8:	d8800315 	stw	r2,12(sp)
   45fbc:	d9403617 	ldw	r5,216(sp)
   45fc0:	d8802504 	addi	r2,sp,148
   45fc4:	d8800215 	stw	r2,8(sp)
   45fc8:	d8802604 	addi	r2,sp,152
   45fcc:	d8c00015 	stw	r3,0(sp)
   45fd0:	9809883a 	mov	r4,r19
   45fd4:	d8800115 	stw	r2,4(sp)
   45fd8:	01c000c4 	movi	r7,3
   45fdc:	a00d883a 	mov	r6,r20
   45fe0:	da003e15 	stw	r8,248(sp)
   45fe4:	0048a8c0 	call	48a8c <_dtoa_r>
   45fe8:	d9002917 	ldw	r4,164(sp)
   45fec:	da003e17 	ldw	r8,248(sp)
   45ff0:	1021883a 	mov	r16,r2
   45ff4:	1139883a 	add	fp,r2,r4
   45ff8:	2007883a 	mov	r3,r4
   45ffc:	81000007 	ldb	r4,0(r16)
   46000:	00800c04 	movi	r2,48
   46004:	20806f26 	beq	r4,r2,461c4 <___svfprintf_internal_r+0x2058>
   46008:	d8c02617 	ldw	r3,152(sp)
   4600c:	e0f9883a 	add	fp,fp,r3
   46010:	003ec206 	br	45b1c <__alt_data_end+0xfffc731c>
   46014:	00c00b44 	movi	r3,45
   46018:	2520003c 	xorhi	r20,r4,32768
   4601c:	d8c02a05 	stb	r3,168(sp)
   46020:	003ea106 	br	45aa8 <__alt_data_end+0xfffc72a8>
   46024:	d8c03217 	ldw	r3,200(sp)
   46028:	00c0890e 	bge	zero,r3,46250 <___svfprintf_internal_r+0x20e4>
   4602c:	00800044 	movi	r2,1
   46030:	d9003317 	ldw	r4,204(sp)
   46034:	1105883a 	add	r2,r2,r4
   46038:	d8802e15 	stw	r2,184(sp)
   4603c:	10005f16 	blt	r2,zero,461bc <___svfprintf_internal_r+0x2050>
   46040:	044019c4 	movi	r17,103
   46044:	003ed906 	br	45bac <__alt_data_end+0xfffc73ac>
   46048:	d9002917 	ldw	r4,164(sp)
   4604c:	20c00044 	addi	r3,r4,1
   46050:	003e9c06 	br	45ac4 <__alt_data_end+0xfffc72c4>
   46054:	d9002917 	ldw	r4,164(sp)
   46058:	00c0680e 	bge	zero,r3,461fc <___svfprintf_internal_r+0x2090>
   4605c:	2000461e 	bne	r4,zero,46178 <___svfprintf_internal_r+0x200c>
   46060:	9480004c 	andi	r18,r18,1
   46064:	9000441e 	bne	r18,zero,46178 <___svfprintf_internal_r+0x200c>
   46068:	1805883a 	mov	r2,r3
   4606c:	1800a016 	blt	r3,zero,462f0 <___svfprintf_internal_r+0x2184>
   46070:	d8c03217 	ldw	r3,200(sp)
   46074:	d8c02e15 	stw	r3,184(sp)
   46078:	003ecc06 	br	45bac <__alt_data_end+0xfffc73ac>
   4607c:	d9402917 	ldw	r5,164(sp)
   46080:	d8802104 	addi	r2,sp,132
   46084:	d8800315 	stw	r2,12(sp)
   46088:	d9400015 	stw	r5,0(sp)
   4608c:	d8802504 	addi	r2,sp,148
   46090:	d9403617 	ldw	r5,216(sp)
   46094:	d8800215 	stw	r2,8(sp)
   46098:	d8802604 	addi	r2,sp,152
   4609c:	d8800115 	stw	r2,4(sp)
   460a0:	01c000c4 	movi	r7,3
   460a4:	a00d883a 	mov	r6,r20
   460a8:	9809883a 	mov	r4,r19
   460ac:	da003e15 	stw	r8,248(sp)
   460b0:	0048a8c0 	call	48a8c <_dtoa_r>
   460b4:	d8c02917 	ldw	r3,164(sp)
   460b8:	da003e17 	ldw	r8,248(sp)
   460bc:	1021883a 	mov	r16,r2
   460c0:	00801184 	movi	r2,70
   460c4:	80f9883a 	add	fp,r16,r3
   460c8:	88bfcc26 	beq	r17,r2,45ffc <__alt_data_end+0xfffc77fc>
   460cc:	003e9306 	br	45b1c <__alt_data_end+0xfffc731c>
   460d0:	df0022c4 	addi	fp,sp,139
   460d4:	dc002915 	stw	r16,164(sp)
   460d8:	9829883a 	mov	r20,r19
   460dc:	e021883a 	mov	r16,fp
   460e0:	4027883a 	mov	r19,r8
   460e4:	b009883a 	mov	r4,r22
   460e8:	01400284 	movi	r5,10
   460ec:	0043da00 	call	43da0 <__modsi3>
   460f0:	10800c04 	addi	r2,r2,48
   460f4:	843fffc4 	addi	r16,r16,-1
   460f8:	b009883a 	mov	r4,r22
   460fc:	01400284 	movi	r5,10
   46100:	80800005 	stb	r2,0(r16)
   46104:	0043d1c0 	call	43d1c <__divsi3>
   46108:	102d883a 	mov	r22,r2
   4610c:	00800244 	movi	r2,9
   46110:	15bff416 	blt	r2,r22,460e4 <__alt_data_end+0xfffc78e4>
   46114:	9811883a 	mov	r8,r19
   46118:	b0800c04 	addi	r2,r22,48
   4611c:	a027883a 	mov	r19,r20
   46120:	8029883a 	mov	r20,r16
   46124:	a17fffc4 	addi	r5,r20,-1
   46128:	a0bfffc5 	stb	r2,-1(r20)
   4612c:	dc002917 	ldw	r16,164(sp)
   46130:	2f00752e 	bgeu	r5,fp,46308 <___svfprintf_internal_r+0x219c>
   46134:	d9c02384 	addi	r7,sp,142
   46138:	3d0fc83a 	sub	r7,r7,r20
   4613c:	d9002344 	addi	r4,sp,141
   46140:	e1cf883a 	add	r7,fp,r7
   46144:	00000106 	br	4614c <___svfprintf_internal_r+0x1fe0>
   46148:	28800003 	ldbu	r2,0(r5)
   4614c:	20800005 	stb	r2,0(r4)
   46150:	21000044 	addi	r4,r4,1
   46154:	29400044 	addi	r5,r5,1
   46158:	21fffb1e 	bne	r4,r7,46148 <__alt_data_end+0xfffc7948>
   4615c:	d8802304 	addi	r2,sp,140
   46160:	1505c83a 	sub	r2,r2,r20
   46164:	d8c02344 	addi	r3,sp,141
   46168:	1885883a 	add	r2,r3,r2
   4616c:	003f7006 	br	45f30 <__alt_data_end+0xfffc7730>
   46170:	0005883a 	mov	r2,zero
   46174:	003f0b06 	br	45da4 <__alt_data_end+0xfffc75a4>
   46178:	d9002917 	ldw	r4,164(sp)
   4617c:	d8c03217 	ldw	r3,200(sp)
   46180:	20800044 	addi	r2,r4,1
   46184:	1885883a 	add	r2,r3,r2
   46188:	d8802e15 	stw	r2,184(sp)
   4618c:	103e870e 	bge	r2,zero,45bac <__alt_data_end+0xfffc73ac>
   46190:	0005883a 	mov	r2,zero
   46194:	003e8506 	br	45bac <__alt_data_end+0xfffc73ac>
   46198:	01000174 	movhi	r4,5
   4619c:	21174b84 	addi	r4,r4,23854
   461a0:	d9002b15 	stw	r4,172(sp)
   461a4:	003cc506 	br	454bc <__alt_data_end+0xfffc6cbc>
   461a8:	d8c03217 	ldw	r3,200(sp)
   461ac:	18c00044 	addi	r3,r3,1
   461b0:	d8c02e15 	stw	r3,184(sp)
   461b4:	1805883a 	mov	r2,r3
   461b8:	183fa10e 	bge	r3,zero,46040 <__alt_data_end+0xfffc7840>
   461bc:	0005883a 	mov	r2,zero
   461c0:	003f9f06 	br	46040 <__alt_data_end+0xfffc7840>
   461c4:	d9003617 	ldw	r4,216(sp)
   461c8:	000d883a 	mov	r6,zero
   461cc:	000f883a 	mov	r7,zero
   461d0:	a00b883a 	mov	r5,r20
   461d4:	d8c03d15 	stw	r3,244(sp)
   461d8:	da003e15 	stw	r8,248(sp)
   461dc:	00517a00 	call	517a0 <__eqdf2>
   461e0:	d8c03d17 	ldw	r3,244(sp)
   461e4:	da003e17 	ldw	r8,248(sp)
   461e8:	103f8726 	beq	r2,zero,46008 <__alt_data_end+0xfffc7808>
   461ec:	00800044 	movi	r2,1
   461f0:	10c7c83a 	sub	r3,r2,r3
   461f4:	d8c02615 	stw	r3,152(sp)
   461f8:	003f8406 	br	4600c <__alt_data_end+0xfffc780c>
   461fc:	20000e1e 	bne	r4,zero,46238 <___svfprintf_internal_r+0x20cc>
   46200:	9480004c 	andi	r18,r18,1
   46204:	90000c1e 	bne	r18,zero,46238 <___svfprintf_internal_r+0x20cc>
   46208:	00800044 	movi	r2,1
   4620c:	d8802e15 	stw	r2,184(sp)
   46210:	003e6606 	br	45bac <__alt_data_end+0xfffc73ac>
   46214:	00800b44 	movi	r2,45
   46218:	05adc83a 	sub	r22,zero,r22
   4621c:	d8802305 	stb	r2,140(sp)
   46220:	003f3b06 	br	45f10 <__alt_data_end+0xfffc7710>
   46224:	0005883a 	mov	r2,zero
   46228:	003f4e06 	br	45f64 <__alt_data_end+0xfffc7764>
   4622c:	90a4703a 	and	r18,r18,r2
   46230:	903f4a26 	beq	r18,zero,45f5c <__alt_data_end+0xfffc775c>
   46234:	003f4606 	br	45f50 <__alt_data_end+0xfffc7750>
   46238:	d8c02917 	ldw	r3,164(sp)
   4623c:	18c00084 	addi	r3,r3,2
   46240:	d8c02e15 	stw	r3,184(sp)
   46244:	1805883a 	mov	r2,r3
   46248:	183e580e 	bge	r3,zero,45bac <__alt_data_end+0xfffc73ac>
   4624c:	003fd006 	br	46190 <__alt_data_end+0xfffc7990>
   46250:	00800084 	movi	r2,2
   46254:	10c5c83a 	sub	r2,r2,r3
   46258:	003f7506 	br	46030 <__alt_data_end+0xfffc7830>
   4625c:	d8802d17 	ldw	r2,180(sp)
   46260:	d9002d17 	ldw	r4,180(sp)
   46264:	bc400043 	ldbu	r17,1(r23)
   46268:	10800017 	ldw	r2,0(r2)
   4626c:	582f883a 	mov	r23,r11
   46270:	d8802915 	stw	r2,164(sp)
   46274:	20800104 	addi	r2,r4,4
   46278:	d9002917 	ldw	r4,164(sp)
   4627c:	d8802d15 	stw	r2,180(sp)
   46280:	203df00e 	bge	r4,zero,45a44 <__alt_data_end+0xfffc7244>
   46284:	8c403fcc 	andi	r17,r17,255
   46288:	00bfffc4 	movi	r2,-1
   4628c:	8c40201c 	xori	r17,r17,128
   46290:	d8802915 	stw	r2,164(sp)
   46294:	8c7fe004 	addi	r17,r17,-128
   46298:	00380806 	br	442bc <__alt_data_end+0xfffc5abc>
   4629c:	9080004c 	andi	r2,r18,1
   462a0:	0039883a 	mov	fp,zero
   462a4:	10000726 	beq	r2,zero,462c4 <___svfprintf_internal_r+0x2158>
   462a8:	d8c02817 	ldw	r3,160(sp)
   462ac:	dc001dc4 	addi	r16,sp,119
   462b0:	00800c04 	movi	r2,48
   462b4:	1c07c83a 	sub	r3,r3,r16
   462b8:	d8801dc5 	stb	r2,119(sp)
   462bc:	d8c02e15 	stw	r3,184(sp)
   462c0:	00395206 	br	4480c <__alt_data_end+0xfffc600c>
   462c4:	d8002e15 	stw	zero,184(sp)
   462c8:	dc001e04 	addi	r16,sp,120
   462cc:	00394f06 	br	4480c <__alt_data_end+0xfffc600c>
   462d0:	0005883a 	mov	r2,zero
   462d4:	003e3206 	br	45ba0 <__alt_data_end+0xfffc73a0>
   462d8:	dd802617 	ldw	r22,152(sp)
   462dc:	003f0606 	br	45ef8 <__alt_data_end+0xfffc76f8>
   462e0:	d9c02785 	stb	r7,158(sp)
   462e4:	003a5106 	br	44c2c <__alt_data_end+0xfffc642c>
   462e8:	d9c02785 	stb	r7,158(sp)
   462ec:	003a3706 	br	44bcc <__alt_data_end+0xfffc63cc>
   462f0:	0005883a 	mov	r2,zero
   462f4:	003f5e06 	br	46070 <__alt_data_end+0xfffc7870>
   462f8:	d9c02785 	stb	r7,158(sp)
   462fc:	00391706 	br	4475c <__alt_data_end+0xfffc5f5c>
   46300:	d9c02785 	stb	r7,158(sp)
   46304:	0038e606 	br	446a0 <__alt_data_end+0xfffc5ea0>
   46308:	d8802344 	addi	r2,sp,141
   4630c:	003f0806 	br	45f30 <__alt_data_end+0xfffc7730>
   46310:	d9c02785 	stb	r7,158(sp)
   46314:	0038b706 	br	445f4 <__alt_data_end+0xfffc5df4>
   46318:	d9c02785 	stb	r7,158(sp)
   4631c:	003adc06 	br	44e90 <__alt_data_end+0xfffc6690>
   46320:	d9403917 	ldw	r5,228(sp)
   46324:	00800304 	movi	r2,12
   46328:	28800015 	stw	r2,0(r5)
   4632c:	00bfffc4 	movi	r2,-1
   46330:	00387806 	br	44514 <__alt_data_end+0xfffc5d14>
   46334:	d9c02785 	stb	r7,158(sp)
   46338:	003abf06 	br	44e38 <__alt_data_end+0xfffc6638>
   4633c:	d9c02785 	stb	r7,158(sp)
   46340:	003a9b06 	br	44db0 <__alt_data_end+0xfffc65b0>

00046344 <___vfprintf_internal_r>:
   46344:	deffb804 	addi	sp,sp,-288
   46348:	dfc04715 	stw	ra,284(sp)
   4634c:	ddc04515 	stw	r23,276(sp)
   46350:	dd404315 	stw	r21,268(sp)
   46354:	d9002c15 	stw	r4,176(sp)
   46358:	282f883a 	mov	r23,r5
   4635c:	302b883a 	mov	r21,r6
   46360:	d9c02d15 	stw	r7,180(sp)
   46364:	df004615 	stw	fp,280(sp)
   46368:	dd804415 	stw	r22,272(sp)
   4636c:	dd004215 	stw	r20,264(sp)
   46370:	dcc04115 	stw	r19,260(sp)
   46374:	dc804015 	stw	r18,256(sp)
   46378:	dc403f15 	stw	r17,252(sp)
   4637c:	dc003e15 	stw	r16,248(sp)
   46380:	004b2800 	call	4b280 <_localeconv_r>
   46384:	10800017 	ldw	r2,0(r2)
   46388:	1009883a 	mov	r4,r2
   4638c:	d8803415 	stw	r2,208(sp)
   46390:	00440d40 	call	440d4 <strlen>
   46394:	d8803715 	stw	r2,220(sp)
   46398:	d8802c17 	ldw	r2,176(sp)
   4639c:	10000226 	beq	r2,zero,463a8 <___vfprintf_internal_r+0x64>
   463a0:	10800e17 	ldw	r2,56(r2)
   463a4:	1000f926 	beq	r2,zero,4678c <___vfprintf_internal_r+0x448>
   463a8:	b880030b 	ldhu	r2,12(r23)
   463ac:	10c8000c 	andi	r3,r2,8192
   463b0:	1800061e 	bne	r3,zero,463cc <___vfprintf_internal_r+0x88>
   463b4:	b9001917 	ldw	r4,100(r23)
   463b8:	00f7ffc4 	movi	r3,-8193
   463bc:	10880014 	ori	r2,r2,8192
   463c0:	20c6703a 	and	r3,r4,r3
   463c4:	b880030d 	sth	r2,12(r23)
   463c8:	b8c01915 	stw	r3,100(r23)
   463cc:	10c0020c 	andi	r3,r2,8
   463d0:	1800c126 	beq	r3,zero,466d8 <___vfprintf_internal_r+0x394>
   463d4:	b8c00417 	ldw	r3,16(r23)
   463d8:	1800bf26 	beq	r3,zero,466d8 <___vfprintf_internal_r+0x394>
   463dc:	1080068c 	andi	r2,r2,26
   463e0:	00c00284 	movi	r3,10
   463e4:	10c0c426 	beq	r2,r3,466f8 <___vfprintf_internal_r+0x3b4>
   463e8:	d8c00404 	addi	r3,sp,16
   463ec:	05000174 	movhi	r20,5
   463f0:	d9001e04 	addi	r4,sp,120
   463f4:	a5175384 	addi	r20,r20,23886
   463f8:	d8c01e15 	stw	r3,120(sp)
   463fc:	d8002015 	stw	zero,128(sp)
   46400:	d8001f15 	stw	zero,124(sp)
   46404:	d8003315 	stw	zero,204(sp)
   46408:	d8003615 	stw	zero,216(sp)
   4640c:	d8003815 	stw	zero,224(sp)
   46410:	1811883a 	mov	r8,r3
   46414:	d8003915 	stw	zero,228(sp)
   46418:	d8003a15 	stw	zero,232(sp)
   4641c:	d8002f15 	stw	zero,188(sp)
   46420:	d9002815 	stw	r4,160(sp)
   46424:	a8800007 	ldb	r2,0(r21)
   46428:	10027b26 	beq	r2,zero,46e18 <___vfprintf_internal_r+0xad4>
   4642c:	00c00944 	movi	r3,37
   46430:	a821883a 	mov	r16,r21
   46434:	10c0021e 	bne	r2,r3,46440 <___vfprintf_internal_r+0xfc>
   46438:	00001406 	br	4648c <___vfprintf_internal_r+0x148>
   4643c:	10c00326 	beq	r2,r3,4644c <___vfprintf_internal_r+0x108>
   46440:	84000044 	addi	r16,r16,1
   46444:	80800007 	ldb	r2,0(r16)
   46448:	103ffc1e 	bne	r2,zero,4643c <__alt_data_end+0xfffc7c3c>
   4644c:	8563c83a 	sub	r17,r16,r21
   46450:	88000e26 	beq	r17,zero,4648c <___vfprintf_internal_r+0x148>
   46454:	d8c02017 	ldw	r3,128(sp)
   46458:	d8801f17 	ldw	r2,124(sp)
   4645c:	45400015 	stw	r21,0(r8)
   46460:	1c47883a 	add	r3,r3,r17
   46464:	10800044 	addi	r2,r2,1
   46468:	d8c02015 	stw	r3,128(sp)
   4646c:	44400115 	stw	r17,4(r8)
   46470:	d8801f15 	stw	r2,124(sp)
   46474:	00c001c4 	movi	r3,7
   46478:	1880a716 	blt	r3,r2,46718 <___vfprintf_internal_r+0x3d4>
   4647c:	42000204 	addi	r8,r8,8
   46480:	d9402f17 	ldw	r5,188(sp)
   46484:	2c4b883a 	add	r5,r5,r17
   46488:	d9402f15 	stw	r5,188(sp)
   4648c:	80800007 	ldb	r2,0(r16)
   46490:	1000a826 	beq	r2,zero,46734 <___vfprintf_internal_r+0x3f0>
   46494:	84400047 	ldb	r17,1(r16)
   46498:	00bfffc4 	movi	r2,-1
   4649c:	85400044 	addi	r21,r16,1
   464a0:	d8002785 	stb	zero,158(sp)
   464a4:	0007883a 	mov	r3,zero
   464a8:	000f883a 	mov	r7,zero
   464ac:	d8802915 	stw	r2,164(sp)
   464b0:	d8003115 	stw	zero,196(sp)
   464b4:	0025883a 	mov	r18,zero
   464b8:	01401604 	movi	r5,88
   464bc:	01800244 	movi	r6,9
   464c0:	02800a84 	movi	r10,42
   464c4:	02401b04 	movi	r9,108
   464c8:	ad400044 	addi	r21,r21,1
   464cc:	88bff804 	addi	r2,r17,-32
   464d0:	28830436 	bltu	r5,r2,470e4 <___vfprintf_internal_r+0xda0>
   464d4:	100490ba 	slli	r2,r2,2
   464d8:	01000134 	movhi	r4,4
   464dc:	21193b04 	addi	r4,r4,25836
   464e0:	1105883a 	add	r2,r2,r4
   464e4:	10800017 	ldw	r2,0(r2)
   464e8:	1000683a 	jmp	r2
   464ec:	00047004 	movi	zero,4544
   464f0:	000470e4 	muli	zero,zero,4547
   464f4:	000470e4 	muli	zero,zero,4547
   464f8:	00047024 	muli	zero,zero,4544
   464fc:	000470e4 	muli	zero,zero,4547
   46500:	000470e4 	muli	zero,zero,4547
   46504:	000470e4 	muli	zero,zero,4547
   46508:	000470e4 	muli	zero,zero,4547
   4650c:	000470e4 	muli	zero,zero,4547
   46510:	000470e4 	muli	zero,zero,4547
   46514:	00046798 	cmpnei	zero,zero,4510
   46518:	00046f40 	call	46f4 <__reset-0x3b90c>
   4651c:	000470e4 	muli	zero,zero,4547
   46520:	00046660 	cmpeqi	zero,zero,4505
   46524:	000467c0 	call	467c <__reset-0x3b984>
   46528:	000470e4 	muli	zero,zero,4547
   4652c:	00046800 	call	4680 <__reset-0x3b980>
   46530:	0004680c 	andi	zero,zero,4512
   46534:	0004680c 	andi	zero,zero,4512
   46538:	0004680c 	andi	zero,zero,4512
   4653c:	0004680c 	andi	zero,zero,4512
   46540:	0004680c 	andi	zero,zero,4512
   46544:	0004680c 	andi	zero,zero,4512
   46548:	0004680c 	andi	zero,zero,4512
   4654c:	0004680c 	andi	zero,zero,4512
   46550:	0004680c 	andi	zero,zero,4512
   46554:	000470e4 	muli	zero,zero,4547
   46558:	000470e4 	muli	zero,zero,4547
   4655c:	000470e4 	muli	zero,zero,4547
   46560:	000470e4 	muli	zero,zero,4547
   46564:	000470e4 	muli	zero,zero,4547
   46568:	000470e4 	muli	zero,zero,4547
   4656c:	000470e4 	muli	zero,zero,4547
   46570:	000470e4 	muli	zero,zero,4547
   46574:	000470e4 	muli	zero,zero,4547
   46578:	000470e4 	muli	zero,zero,4547
   4657c:	00046840 	call	4684 <__reset-0x3b97c>
   46580:	000468fc 	xorhi	zero,zero,4515
   46584:	000470e4 	muli	zero,zero,4547
   46588:	000468fc 	xorhi	zero,zero,4515
   4658c:	000470e4 	muli	zero,zero,4547
   46590:	000470e4 	muli	zero,zero,4547
   46594:	000470e4 	muli	zero,zero,4547
   46598:	000470e4 	muli	zero,zero,4547
   4659c:	0004699c 	xori	zero,zero,4518
   465a0:	000470e4 	muli	zero,zero,4547
   465a4:	000470e4 	muli	zero,zero,4547
   465a8:	000469a8 	cmpgeui	zero,zero,4518
   465ac:	000470e4 	muli	zero,zero,4547
   465b0:	000470e4 	muli	zero,zero,4547
   465b4:	000470e4 	muli	zero,zero,4547
   465b8:	000470e4 	muli	zero,zero,4547
   465bc:	000470e4 	muli	zero,zero,4547
   465c0:	00046e20 	cmpeqi	zero,zero,4536
   465c4:	000470e4 	muli	zero,zero,4547
   465c8:	000470e4 	muli	zero,zero,4547
   465cc:	00046e80 	call	46e8 <__reset-0x3b918>
   465d0:	000470e4 	muli	zero,zero,4547
   465d4:	000470e4 	muli	zero,zero,4547
   465d8:	000470e4 	muli	zero,zero,4547
   465dc:	000470e4 	muli	zero,zero,4547
   465e0:	000470e4 	muli	zero,zero,4547
   465e4:	000470e4 	muli	zero,zero,4547
   465e8:	000470e4 	muli	zero,zero,4547
   465ec:	000470e4 	muli	zero,zero,4547
   465f0:	000470e4 	muli	zero,zero,4547
   465f4:	000470e4 	muli	zero,zero,4547
   465f8:	00047090 	cmplti	zero,zero,4546
   465fc:	00047030 	cmpltui	zero,zero,4544
   46600:	000468fc 	xorhi	zero,zero,4515
   46604:	000468fc 	xorhi	zero,zero,4515
   46608:	000468fc 	xorhi	zero,zero,4515
   4660c:	00047040 	call	4704 <__reset-0x3b8fc>
   46610:	00047030 	cmpltui	zero,zero,4544
   46614:	000470e4 	muli	zero,zero,4547
   46618:	000470e4 	muli	zero,zero,4547
   4661c:	0004704c 	andi	zero,zero,4545
   46620:	000470e4 	muli	zero,zero,4547
   46624:	0004705c 	xori	zero,zero,4545
   46628:	00046f30 	cmpltui	zero,zero,4540
   4662c:	0004666c 	andhi	zero,zero,4505
   46630:	00046f50 	cmplti	zero,zero,4541
   46634:	000470e4 	muli	zero,zero,4547
   46638:	00046f5c 	xori	zero,zero,4541
   4663c:	000470e4 	muli	zero,zero,4547
   46640:	00046fb8 	rdprs	zero,zero,4542
   46644:	000470e4 	muli	zero,zero,4547
   46648:	000470e4 	muli	zero,zero,4547
   4664c:	00046fc8 	cmpgei	zero,zero,4543
   46650:	d9003117 	ldw	r4,196(sp)
   46654:	d8802d15 	stw	r2,180(sp)
   46658:	0109c83a 	sub	r4,zero,r4
   4665c:	d9003115 	stw	r4,196(sp)
   46660:	94800114 	ori	r18,r18,4
   46664:	ac400007 	ldb	r17,0(r21)
   46668:	003f9706 	br	464c8 <__alt_data_end+0xfffc7cc8>
   4666c:	00800c04 	movi	r2,48
   46670:	d9002d17 	ldw	r4,180(sp)
   46674:	d9402917 	ldw	r5,164(sp)
   46678:	d8802705 	stb	r2,156(sp)
   4667c:	00801e04 	movi	r2,120
   46680:	d8802745 	stb	r2,157(sp)
   46684:	d8002785 	stb	zero,158(sp)
   46688:	20c00104 	addi	r3,r4,4
   4668c:	24c00017 	ldw	r19,0(r4)
   46690:	002d883a 	mov	r22,zero
   46694:	90800094 	ori	r2,r18,2
   46698:	28029a16 	blt	r5,zero,47104 <___vfprintf_internal_r+0xdc0>
   4669c:	00bfdfc4 	movi	r2,-129
   466a0:	90a4703a 	and	r18,r18,r2
   466a4:	d8c02d15 	stw	r3,180(sp)
   466a8:	94800094 	ori	r18,r18,2
   466ac:	9802871e 	bne	r19,zero,470cc <___vfprintf_internal_r+0xd88>
   466b0:	00800174 	movhi	r2,5
   466b4:	10974404 	addi	r2,r2,23824
   466b8:	d8803915 	stw	r2,228(sp)
   466bc:	04401e04 	movi	r17,120
   466c0:	d8802917 	ldw	r2,164(sp)
   466c4:	0039883a 	mov	fp,zero
   466c8:	1001e926 	beq	r2,zero,46e70 <___vfprintf_internal_r+0xb2c>
   466cc:	0027883a 	mov	r19,zero
   466d0:	002d883a 	mov	r22,zero
   466d4:	00020506 	br	46eec <___vfprintf_internal_r+0xba8>
   466d8:	d9002c17 	ldw	r4,176(sp)
   466dc:	b80b883a 	mov	r5,r23
   466e0:	00487380 	call	48738 <__swsetup_r>
   466e4:	1005ac1e 	bne	r2,zero,47d98 <___vfprintf_internal_r+0x1a54>
   466e8:	b880030b 	ldhu	r2,12(r23)
   466ec:	00c00284 	movi	r3,10
   466f0:	1080068c 	andi	r2,r2,26
   466f4:	10ff3c1e 	bne	r2,r3,463e8 <__alt_data_end+0xfffc7be8>
   466f8:	b880038f 	ldh	r2,14(r23)
   466fc:	103f3a16 	blt	r2,zero,463e8 <__alt_data_end+0xfffc7be8>
   46700:	d9c02d17 	ldw	r7,180(sp)
   46704:	d9002c17 	ldw	r4,176(sp)
   46708:	a80d883a 	mov	r6,r21
   4670c:	b80b883a 	mov	r5,r23
   46710:	00485580 	call	48558 <__sbprintf>
   46714:	00001106 	br	4675c <___vfprintf_internal_r+0x418>
   46718:	d9002c17 	ldw	r4,176(sp)
   4671c:	d9801e04 	addi	r6,sp,120
   46720:	b80b883a 	mov	r5,r23
   46724:	004ee700 	call	4ee70 <__sprint_r>
   46728:	1000081e 	bne	r2,zero,4674c <___vfprintf_internal_r+0x408>
   4672c:	da000404 	addi	r8,sp,16
   46730:	003f5306 	br	46480 <__alt_data_end+0xfffc7c80>
   46734:	d8802017 	ldw	r2,128(sp)
   46738:	10000426 	beq	r2,zero,4674c <___vfprintf_internal_r+0x408>
   4673c:	d9002c17 	ldw	r4,176(sp)
   46740:	d9801e04 	addi	r6,sp,120
   46744:	b80b883a 	mov	r5,r23
   46748:	004ee700 	call	4ee70 <__sprint_r>
   4674c:	b880030b 	ldhu	r2,12(r23)
   46750:	1080100c 	andi	r2,r2,64
   46754:	1005901e 	bne	r2,zero,47d98 <___vfprintf_internal_r+0x1a54>
   46758:	d8802f17 	ldw	r2,188(sp)
   4675c:	dfc04717 	ldw	ra,284(sp)
   46760:	df004617 	ldw	fp,280(sp)
   46764:	ddc04517 	ldw	r23,276(sp)
   46768:	dd804417 	ldw	r22,272(sp)
   4676c:	dd404317 	ldw	r21,268(sp)
   46770:	dd004217 	ldw	r20,264(sp)
   46774:	dcc04117 	ldw	r19,260(sp)
   46778:	dc804017 	ldw	r18,256(sp)
   4677c:	dc403f17 	ldw	r17,252(sp)
   46780:	dc003e17 	ldw	r16,248(sp)
   46784:	dec04804 	addi	sp,sp,288
   46788:	f800283a 	ret
   4678c:	d9002c17 	ldw	r4,176(sp)
   46790:	004a70c0 	call	4a70c <__sinit>
   46794:	003f0406 	br	463a8 <__alt_data_end+0xfffc7ba8>
   46798:	d8802d17 	ldw	r2,180(sp)
   4679c:	d9002d17 	ldw	r4,180(sp)
   467a0:	10800017 	ldw	r2,0(r2)
   467a4:	d8803115 	stw	r2,196(sp)
   467a8:	20800104 	addi	r2,r4,4
   467ac:	d9003117 	ldw	r4,196(sp)
   467b0:	203fa716 	blt	r4,zero,46650 <__alt_data_end+0xfffc7e50>
   467b4:	d8802d15 	stw	r2,180(sp)
   467b8:	ac400007 	ldb	r17,0(r21)
   467bc:	003f4206 	br	464c8 <__alt_data_end+0xfffc7cc8>
   467c0:	ac400007 	ldb	r17,0(r21)
   467c4:	aac00044 	addi	r11,r21,1
   467c8:	8a872826 	beq	r17,r10,4846c <___vfprintf_internal_r+0x2128>
   467cc:	88bff404 	addi	r2,r17,-48
   467d0:	0009883a 	mov	r4,zero
   467d4:	30867d36 	bltu	r6,r2,481cc <___vfprintf_internal_r+0x1e88>
   467d8:	5c400007 	ldb	r17,0(r11)
   467dc:	210002a4 	muli	r4,r4,10
   467e0:	5d400044 	addi	r21,r11,1
   467e4:	a817883a 	mov	r11,r21
   467e8:	2089883a 	add	r4,r4,r2
   467ec:	88bff404 	addi	r2,r17,-48
   467f0:	30bff92e 	bgeu	r6,r2,467d8 <__alt_data_end+0xfffc7fd8>
   467f4:	2005c916 	blt	r4,zero,47f1c <___vfprintf_internal_r+0x1bd8>
   467f8:	d9002915 	stw	r4,164(sp)
   467fc:	003f3306 	br	464cc <__alt_data_end+0xfffc7ccc>
   46800:	94802014 	ori	r18,r18,128
   46804:	ac400007 	ldb	r17,0(r21)
   46808:	003f2f06 	br	464c8 <__alt_data_end+0xfffc7cc8>
   4680c:	a809883a 	mov	r4,r21
   46810:	d8003115 	stw	zero,196(sp)
   46814:	88bff404 	addi	r2,r17,-48
   46818:	0017883a 	mov	r11,zero
   4681c:	24400007 	ldb	r17,0(r4)
   46820:	5ac002a4 	muli	r11,r11,10
   46824:	ad400044 	addi	r21,r21,1
   46828:	a809883a 	mov	r4,r21
   4682c:	12d7883a 	add	r11,r2,r11
   46830:	88bff404 	addi	r2,r17,-48
   46834:	30bff92e 	bgeu	r6,r2,4681c <__alt_data_end+0xfffc801c>
   46838:	dac03115 	stw	r11,196(sp)
   4683c:	003f2306 	br	464cc <__alt_data_end+0xfffc7ccc>
   46840:	18c03fcc 	andi	r3,r3,255
   46844:	18072b1e 	bne	r3,zero,484f4 <___vfprintf_internal_r+0x21b0>
   46848:	94800414 	ori	r18,r18,16
   4684c:	9080080c 	andi	r2,r18,32
   46850:	10037b26 	beq	r2,zero,47640 <___vfprintf_internal_r+0x12fc>
   46854:	d9402d17 	ldw	r5,180(sp)
   46858:	28800117 	ldw	r2,4(r5)
   4685c:	2cc00017 	ldw	r19,0(r5)
   46860:	29400204 	addi	r5,r5,8
   46864:	d9402d15 	stw	r5,180(sp)
   46868:	102d883a 	mov	r22,r2
   4686c:	10044b16 	blt	r2,zero,4799c <___vfprintf_internal_r+0x1658>
   46870:	d9402917 	ldw	r5,164(sp)
   46874:	df002783 	ldbu	fp,158(sp)
   46878:	2803bc16 	blt	r5,zero,4776c <___vfprintf_internal_r+0x1428>
   4687c:	00ffdfc4 	movi	r3,-129
   46880:	9d84b03a 	or	r2,r19,r22
   46884:	90e4703a 	and	r18,r18,r3
   46888:	10017726 	beq	r2,zero,46e68 <___vfprintf_internal_r+0xb24>
   4688c:	b0038326 	beq	r22,zero,4769c <___vfprintf_internal_r+0x1358>
   46890:	dc402a15 	stw	r17,168(sp)
   46894:	dc001e04 	addi	r16,sp,120
   46898:	b023883a 	mov	r17,r22
   4689c:	402d883a 	mov	r22,r8
   468a0:	9809883a 	mov	r4,r19
   468a4:	880b883a 	mov	r5,r17
   468a8:	01800284 	movi	r6,10
   468ac:	000f883a 	mov	r7,zero
   468b0:	00512680 	call	51268 <__umoddi3>
   468b4:	10800c04 	addi	r2,r2,48
   468b8:	843fffc4 	addi	r16,r16,-1
   468bc:	9809883a 	mov	r4,r19
   468c0:	880b883a 	mov	r5,r17
   468c4:	80800005 	stb	r2,0(r16)
   468c8:	01800284 	movi	r6,10
   468cc:	000f883a 	mov	r7,zero
   468d0:	0050cf00 	call	50cf0 <__udivdi3>
   468d4:	1027883a 	mov	r19,r2
   468d8:	10c4b03a 	or	r2,r2,r3
   468dc:	1823883a 	mov	r17,r3
   468e0:	103fef1e 	bne	r2,zero,468a0 <__alt_data_end+0xfffc80a0>
   468e4:	d8c02817 	ldw	r3,160(sp)
   468e8:	dc402a17 	ldw	r17,168(sp)
   468ec:	b011883a 	mov	r8,r22
   468f0:	1c07c83a 	sub	r3,r3,r16
   468f4:	d8c02e15 	stw	r3,184(sp)
   468f8:	00005906 	br	46a60 <___vfprintf_internal_r+0x71c>
   468fc:	18c03fcc 	andi	r3,r3,255
   46900:	1806fa1e 	bne	r3,zero,484ec <___vfprintf_internal_r+0x21a8>
   46904:	9080020c 	andi	r2,r18,8
   46908:	10048a26 	beq	r2,zero,47b34 <___vfprintf_internal_r+0x17f0>
   4690c:	d8c02d17 	ldw	r3,180(sp)
   46910:	d9002d17 	ldw	r4,180(sp)
   46914:	d9402d17 	ldw	r5,180(sp)
   46918:	18c00017 	ldw	r3,0(r3)
   4691c:	21000117 	ldw	r4,4(r4)
   46920:	29400204 	addi	r5,r5,8
   46924:	d8c03615 	stw	r3,216(sp)
   46928:	d9003815 	stw	r4,224(sp)
   4692c:	d9402d15 	stw	r5,180(sp)
   46930:	d9003617 	ldw	r4,216(sp)
   46934:	d9403817 	ldw	r5,224(sp)
   46938:	da003d15 	stw	r8,244(sp)
   4693c:	04000044 	movi	r16,1
   46940:	004d6880 	call	4d688 <__fpclassifyd>
   46944:	da003d17 	ldw	r8,244(sp)
   46948:	14041f1e 	bne	r2,r16,479c8 <___vfprintf_internal_r+0x1684>
   4694c:	d9003617 	ldw	r4,216(sp)
   46950:	d9403817 	ldw	r5,224(sp)
   46954:	000d883a 	mov	r6,zero
   46958:	000f883a 	mov	r7,zero
   4695c:	00519040 	call	51904 <__ledf2>
   46960:	da003d17 	ldw	r8,244(sp)
   46964:	1005be16 	blt	r2,zero,48060 <___vfprintf_internal_r+0x1d1c>
   46968:	df002783 	ldbu	fp,158(sp)
   4696c:	008011c4 	movi	r2,71
   46970:	1445330e 	bge	r2,r17,47e40 <___vfprintf_internal_r+0x1afc>
   46974:	04000174 	movhi	r16,5
   46978:	84173c04 	addi	r16,r16,23792
   4697c:	00c000c4 	movi	r3,3
   46980:	00bfdfc4 	movi	r2,-129
   46984:	d8c02a15 	stw	r3,168(sp)
   46988:	90a4703a 	and	r18,r18,r2
   4698c:	d8c02e15 	stw	r3,184(sp)
   46990:	d8002915 	stw	zero,164(sp)
   46994:	d8003215 	stw	zero,200(sp)
   46998:	00003706 	br	46a78 <___vfprintf_internal_r+0x734>
   4699c:	94800214 	ori	r18,r18,8
   469a0:	ac400007 	ldb	r17,0(r21)
   469a4:	003ec806 	br	464c8 <__alt_data_end+0xfffc7cc8>
   469a8:	18c03fcc 	andi	r3,r3,255
   469ac:	1806db1e 	bne	r3,zero,4851c <___vfprintf_internal_r+0x21d8>
   469b0:	94800414 	ori	r18,r18,16
   469b4:	9080080c 	andi	r2,r18,32
   469b8:	1002d826 	beq	r2,zero,4751c <___vfprintf_internal_r+0x11d8>
   469bc:	d9402d17 	ldw	r5,180(sp)
   469c0:	d8c02917 	ldw	r3,164(sp)
   469c4:	d8002785 	stb	zero,158(sp)
   469c8:	28800204 	addi	r2,r5,8
   469cc:	2cc00017 	ldw	r19,0(r5)
   469d0:	2d800117 	ldw	r22,4(r5)
   469d4:	18048f16 	blt	r3,zero,47c14 <___vfprintf_internal_r+0x18d0>
   469d8:	013fdfc4 	movi	r4,-129
   469dc:	9d86b03a 	or	r3,r19,r22
   469e0:	d8802d15 	stw	r2,180(sp)
   469e4:	9124703a 	and	r18,r18,r4
   469e8:	1802d91e 	bne	r3,zero,47550 <___vfprintf_internal_r+0x120c>
   469ec:	d8c02917 	ldw	r3,164(sp)
   469f0:	0039883a 	mov	fp,zero
   469f4:	1805c326 	beq	r3,zero,48104 <___vfprintf_internal_r+0x1dc0>
   469f8:	0027883a 	mov	r19,zero
   469fc:	002d883a 	mov	r22,zero
   46a00:	dc001e04 	addi	r16,sp,120
   46a04:	9806d0fa 	srli	r3,r19,3
   46a08:	b008977a 	slli	r4,r22,29
   46a0c:	b02cd0fa 	srli	r22,r22,3
   46a10:	9cc001cc 	andi	r19,r19,7
   46a14:	98800c04 	addi	r2,r19,48
   46a18:	843fffc4 	addi	r16,r16,-1
   46a1c:	20e6b03a 	or	r19,r4,r3
   46a20:	80800005 	stb	r2,0(r16)
   46a24:	9d86b03a 	or	r3,r19,r22
   46a28:	183ff61e 	bne	r3,zero,46a04 <__alt_data_end+0xfffc8204>
   46a2c:	90c0004c 	andi	r3,r18,1
   46a30:	18013b26 	beq	r3,zero,46f20 <___vfprintf_internal_r+0xbdc>
   46a34:	10803fcc 	andi	r2,r2,255
   46a38:	1080201c 	xori	r2,r2,128
   46a3c:	10bfe004 	addi	r2,r2,-128
   46a40:	00c00c04 	movi	r3,48
   46a44:	10c13626 	beq	r2,r3,46f20 <___vfprintf_internal_r+0xbdc>
   46a48:	80ffffc5 	stb	r3,-1(r16)
   46a4c:	d8c02817 	ldw	r3,160(sp)
   46a50:	80bfffc4 	addi	r2,r16,-1
   46a54:	1021883a 	mov	r16,r2
   46a58:	1887c83a 	sub	r3,r3,r2
   46a5c:	d8c02e15 	stw	r3,184(sp)
   46a60:	d8802e17 	ldw	r2,184(sp)
   46a64:	d9002917 	ldw	r4,164(sp)
   46a68:	1100010e 	bge	r2,r4,46a70 <___vfprintf_internal_r+0x72c>
   46a6c:	2005883a 	mov	r2,r4
   46a70:	d8802a15 	stw	r2,168(sp)
   46a74:	d8003215 	stw	zero,200(sp)
   46a78:	e7003fcc 	andi	fp,fp,255
   46a7c:	e700201c 	xori	fp,fp,128
   46a80:	e73fe004 	addi	fp,fp,-128
   46a84:	e0000326 	beq	fp,zero,46a94 <___vfprintf_internal_r+0x750>
   46a88:	d8c02a17 	ldw	r3,168(sp)
   46a8c:	18c00044 	addi	r3,r3,1
   46a90:	d8c02a15 	stw	r3,168(sp)
   46a94:	90c0008c 	andi	r3,r18,2
   46a98:	d8c02b15 	stw	r3,172(sp)
   46a9c:	18000326 	beq	r3,zero,46aac <___vfprintf_internal_r+0x768>
   46aa0:	d8c02a17 	ldw	r3,168(sp)
   46aa4:	18c00084 	addi	r3,r3,2
   46aa8:	d8c02a15 	stw	r3,168(sp)
   46aac:	90c0210c 	andi	r3,r18,132
   46ab0:	d8c03015 	stw	r3,192(sp)
   46ab4:	1801a31e 	bne	r3,zero,47144 <___vfprintf_internal_r+0xe00>
   46ab8:	d9003117 	ldw	r4,196(sp)
   46abc:	d8c02a17 	ldw	r3,168(sp)
   46ac0:	20e7c83a 	sub	r19,r4,r3
   46ac4:	04c19f0e 	bge	zero,r19,47144 <___vfprintf_internal_r+0xe00>
   46ac8:	02400404 	movi	r9,16
   46acc:	d8c02017 	ldw	r3,128(sp)
   46ad0:	d8801f17 	ldw	r2,124(sp)
   46ad4:	4cc50d0e 	bge	r9,r19,47f0c <___vfprintf_internal_r+0x1bc8>
   46ad8:	01400174 	movhi	r5,5
   46adc:	29575784 	addi	r5,r5,23902
   46ae0:	dc403b15 	stw	r17,236(sp)
   46ae4:	d9403515 	stw	r5,212(sp)
   46ae8:	9823883a 	mov	r17,r19
   46aec:	482d883a 	mov	r22,r9
   46af0:	9027883a 	mov	r19,r18
   46af4:	070001c4 	movi	fp,7
   46af8:	8025883a 	mov	r18,r16
   46afc:	dc002c17 	ldw	r16,176(sp)
   46b00:	00000306 	br	46b10 <___vfprintf_internal_r+0x7cc>
   46b04:	8c7ffc04 	addi	r17,r17,-16
   46b08:	42000204 	addi	r8,r8,8
   46b0c:	b440130e 	bge	r22,r17,46b5c <___vfprintf_internal_r+0x818>
   46b10:	01000174 	movhi	r4,5
   46b14:	18c00404 	addi	r3,r3,16
   46b18:	10800044 	addi	r2,r2,1
   46b1c:	21175784 	addi	r4,r4,23902
   46b20:	41000015 	stw	r4,0(r8)
   46b24:	45800115 	stw	r22,4(r8)
   46b28:	d8c02015 	stw	r3,128(sp)
   46b2c:	d8801f15 	stw	r2,124(sp)
   46b30:	e0bff40e 	bge	fp,r2,46b04 <__alt_data_end+0xfffc8304>
   46b34:	d9801e04 	addi	r6,sp,120
   46b38:	b80b883a 	mov	r5,r23
   46b3c:	8009883a 	mov	r4,r16
   46b40:	004ee700 	call	4ee70 <__sprint_r>
   46b44:	103f011e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   46b48:	8c7ffc04 	addi	r17,r17,-16
   46b4c:	d8c02017 	ldw	r3,128(sp)
   46b50:	d8801f17 	ldw	r2,124(sp)
   46b54:	da000404 	addi	r8,sp,16
   46b58:	b47fed16 	blt	r22,r17,46b10 <__alt_data_end+0xfffc8310>
   46b5c:	9021883a 	mov	r16,r18
   46b60:	9825883a 	mov	r18,r19
   46b64:	8827883a 	mov	r19,r17
   46b68:	dc403b17 	ldw	r17,236(sp)
   46b6c:	d9403517 	ldw	r5,212(sp)
   46b70:	98c7883a 	add	r3,r19,r3
   46b74:	10800044 	addi	r2,r2,1
   46b78:	41400015 	stw	r5,0(r8)
   46b7c:	44c00115 	stw	r19,4(r8)
   46b80:	d8c02015 	stw	r3,128(sp)
   46b84:	d8801f15 	stw	r2,124(sp)
   46b88:	010001c4 	movi	r4,7
   46b8c:	2082a316 	blt	r4,r2,4761c <___vfprintf_internal_r+0x12d8>
   46b90:	df002787 	ldb	fp,158(sp)
   46b94:	42000204 	addi	r8,r8,8
   46b98:	e0000c26 	beq	fp,zero,46bcc <___vfprintf_internal_r+0x888>
   46b9c:	d8801f17 	ldw	r2,124(sp)
   46ba0:	d9002784 	addi	r4,sp,158
   46ba4:	18c00044 	addi	r3,r3,1
   46ba8:	10800044 	addi	r2,r2,1
   46bac:	41000015 	stw	r4,0(r8)
   46bb0:	01000044 	movi	r4,1
   46bb4:	41000115 	stw	r4,4(r8)
   46bb8:	d8c02015 	stw	r3,128(sp)
   46bbc:	d8801f15 	stw	r2,124(sp)
   46bc0:	010001c4 	movi	r4,7
   46bc4:	20823c16 	blt	r4,r2,474b8 <___vfprintf_internal_r+0x1174>
   46bc8:	42000204 	addi	r8,r8,8
   46bcc:	d8802b17 	ldw	r2,172(sp)
   46bd0:	10000c26 	beq	r2,zero,46c04 <___vfprintf_internal_r+0x8c0>
   46bd4:	d8801f17 	ldw	r2,124(sp)
   46bd8:	d9002704 	addi	r4,sp,156
   46bdc:	18c00084 	addi	r3,r3,2
   46be0:	10800044 	addi	r2,r2,1
   46be4:	41000015 	stw	r4,0(r8)
   46be8:	01000084 	movi	r4,2
   46bec:	41000115 	stw	r4,4(r8)
   46bf0:	d8c02015 	stw	r3,128(sp)
   46bf4:	d8801f15 	stw	r2,124(sp)
   46bf8:	010001c4 	movi	r4,7
   46bfc:	20823616 	blt	r4,r2,474d8 <___vfprintf_internal_r+0x1194>
   46c00:	42000204 	addi	r8,r8,8
   46c04:	d9003017 	ldw	r4,192(sp)
   46c08:	00802004 	movi	r2,128
   46c0c:	20819926 	beq	r4,r2,47274 <___vfprintf_internal_r+0xf30>
   46c10:	d9402917 	ldw	r5,164(sp)
   46c14:	d8802e17 	ldw	r2,184(sp)
   46c18:	28adc83a 	sub	r22,r5,r2
   46c1c:	0580310e 	bge	zero,r22,46ce4 <___vfprintf_internal_r+0x9a0>
   46c20:	07000404 	movi	fp,16
   46c24:	d8801f17 	ldw	r2,124(sp)
   46c28:	e584140e 	bge	fp,r22,47c7c <___vfprintf_internal_r+0x1938>
   46c2c:	01400174 	movhi	r5,5
   46c30:	29575384 	addi	r5,r5,23886
   46c34:	dc402915 	stw	r17,164(sp)
   46c38:	d9402b15 	stw	r5,172(sp)
   46c3c:	b023883a 	mov	r17,r22
   46c40:	04c001c4 	movi	r19,7
   46c44:	a82d883a 	mov	r22,r21
   46c48:	902b883a 	mov	r21,r18
   46c4c:	8025883a 	mov	r18,r16
   46c50:	dc002c17 	ldw	r16,176(sp)
   46c54:	00000306 	br	46c64 <___vfprintf_internal_r+0x920>
   46c58:	8c7ffc04 	addi	r17,r17,-16
   46c5c:	42000204 	addi	r8,r8,8
   46c60:	e440110e 	bge	fp,r17,46ca8 <___vfprintf_internal_r+0x964>
   46c64:	18c00404 	addi	r3,r3,16
   46c68:	10800044 	addi	r2,r2,1
   46c6c:	45000015 	stw	r20,0(r8)
   46c70:	47000115 	stw	fp,4(r8)
   46c74:	d8c02015 	stw	r3,128(sp)
   46c78:	d8801f15 	stw	r2,124(sp)
   46c7c:	98bff60e 	bge	r19,r2,46c58 <__alt_data_end+0xfffc8458>
   46c80:	d9801e04 	addi	r6,sp,120
   46c84:	b80b883a 	mov	r5,r23
   46c88:	8009883a 	mov	r4,r16
   46c8c:	004ee700 	call	4ee70 <__sprint_r>
   46c90:	103eae1e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   46c94:	8c7ffc04 	addi	r17,r17,-16
   46c98:	d8c02017 	ldw	r3,128(sp)
   46c9c:	d8801f17 	ldw	r2,124(sp)
   46ca0:	da000404 	addi	r8,sp,16
   46ca4:	e47fef16 	blt	fp,r17,46c64 <__alt_data_end+0xfffc8464>
   46ca8:	9021883a 	mov	r16,r18
   46cac:	a825883a 	mov	r18,r21
   46cb0:	b02b883a 	mov	r21,r22
   46cb4:	882d883a 	mov	r22,r17
   46cb8:	dc402917 	ldw	r17,164(sp)
   46cbc:	d9002b17 	ldw	r4,172(sp)
   46cc0:	1d87883a 	add	r3,r3,r22
   46cc4:	10800044 	addi	r2,r2,1
   46cc8:	41000015 	stw	r4,0(r8)
   46ccc:	45800115 	stw	r22,4(r8)
   46cd0:	d8c02015 	stw	r3,128(sp)
   46cd4:	d8801f15 	stw	r2,124(sp)
   46cd8:	010001c4 	movi	r4,7
   46cdc:	2081ee16 	blt	r4,r2,47498 <___vfprintf_internal_r+0x1154>
   46ce0:	42000204 	addi	r8,r8,8
   46ce4:	9080400c 	andi	r2,r18,256
   46ce8:	1001181e 	bne	r2,zero,4714c <___vfprintf_internal_r+0xe08>
   46cec:	d9402e17 	ldw	r5,184(sp)
   46cf0:	d8801f17 	ldw	r2,124(sp)
   46cf4:	44000015 	stw	r16,0(r8)
   46cf8:	1947883a 	add	r3,r3,r5
   46cfc:	10800044 	addi	r2,r2,1
   46d00:	41400115 	stw	r5,4(r8)
   46d04:	d8c02015 	stw	r3,128(sp)
   46d08:	d8801f15 	stw	r2,124(sp)
   46d0c:	010001c4 	movi	r4,7
   46d10:	2081d316 	blt	r4,r2,47460 <___vfprintf_internal_r+0x111c>
   46d14:	42000204 	addi	r8,r8,8
   46d18:	9480010c 	andi	r18,r18,4
   46d1c:	90003226 	beq	r18,zero,46de8 <___vfprintf_internal_r+0xaa4>
   46d20:	d9403117 	ldw	r5,196(sp)
   46d24:	d8802a17 	ldw	r2,168(sp)
   46d28:	28a1c83a 	sub	r16,r5,r2
   46d2c:	04002e0e 	bge	zero,r16,46de8 <___vfprintf_internal_r+0xaa4>
   46d30:	04400404 	movi	r17,16
   46d34:	d8801f17 	ldw	r2,124(sp)
   46d38:	8c04a20e 	bge	r17,r16,47fc4 <___vfprintf_internal_r+0x1c80>
   46d3c:	01400174 	movhi	r5,5
   46d40:	29575784 	addi	r5,r5,23902
   46d44:	d9403515 	stw	r5,212(sp)
   46d48:	048001c4 	movi	r18,7
   46d4c:	dcc02c17 	ldw	r19,176(sp)
   46d50:	00000306 	br	46d60 <___vfprintf_internal_r+0xa1c>
   46d54:	843ffc04 	addi	r16,r16,-16
   46d58:	42000204 	addi	r8,r8,8
   46d5c:	8c00130e 	bge	r17,r16,46dac <___vfprintf_internal_r+0xa68>
   46d60:	01000174 	movhi	r4,5
   46d64:	18c00404 	addi	r3,r3,16
   46d68:	10800044 	addi	r2,r2,1
   46d6c:	21175784 	addi	r4,r4,23902
   46d70:	41000015 	stw	r4,0(r8)
   46d74:	44400115 	stw	r17,4(r8)
   46d78:	d8c02015 	stw	r3,128(sp)
   46d7c:	d8801f15 	stw	r2,124(sp)
   46d80:	90bff40e 	bge	r18,r2,46d54 <__alt_data_end+0xfffc8554>
   46d84:	d9801e04 	addi	r6,sp,120
   46d88:	b80b883a 	mov	r5,r23
   46d8c:	9809883a 	mov	r4,r19
   46d90:	004ee700 	call	4ee70 <__sprint_r>
   46d94:	103e6d1e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   46d98:	843ffc04 	addi	r16,r16,-16
   46d9c:	d8c02017 	ldw	r3,128(sp)
   46da0:	d8801f17 	ldw	r2,124(sp)
   46da4:	da000404 	addi	r8,sp,16
   46da8:	8c3fed16 	blt	r17,r16,46d60 <__alt_data_end+0xfffc8560>
   46dac:	d9403517 	ldw	r5,212(sp)
   46db0:	1c07883a 	add	r3,r3,r16
   46db4:	10800044 	addi	r2,r2,1
   46db8:	41400015 	stw	r5,0(r8)
   46dbc:	44000115 	stw	r16,4(r8)
   46dc0:	d8c02015 	stw	r3,128(sp)
   46dc4:	d8801f15 	stw	r2,124(sp)
   46dc8:	010001c4 	movi	r4,7
   46dcc:	2080060e 	bge	r4,r2,46de8 <___vfprintf_internal_r+0xaa4>
   46dd0:	d9002c17 	ldw	r4,176(sp)
   46dd4:	d9801e04 	addi	r6,sp,120
   46dd8:	b80b883a 	mov	r5,r23
   46ddc:	004ee700 	call	4ee70 <__sprint_r>
   46de0:	103e5a1e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   46de4:	d8c02017 	ldw	r3,128(sp)
   46de8:	d8803117 	ldw	r2,196(sp)
   46dec:	d9002a17 	ldw	r4,168(sp)
   46df0:	1100010e 	bge	r2,r4,46df8 <___vfprintf_internal_r+0xab4>
   46df4:	2005883a 	mov	r2,r4
   46df8:	d9402f17 	ldw	r5,188(sp)
   46dfc:	288b883a 	add	r5,r5,r2
   46e00:	d9402f15 	stw	r5,188(sp)
   46e04:	18019e1e 	bne	r3,zero,47480 <___vfprintf_internal_r+0x113c>
   46e08:	a8800007 	ldb	r2,0(r21)
   46e0c:	d8001f15 	stw	zero,124(sp)
   46e10:	da000404 	addi	r8,sp,16
   46e14:	103d851e 	bne	r2,zero,4642c <__alt_data_end+0xfffc7c2c>
   46e18:	a821883a 	mov	r16,r21
   46e1c:	003d9b06 	br	4648c <__alt_data_end+0xfffc7c8c>
   46e20:	18c03fcc 	andi	r3,r3,255
   46e24:	1805c11e 	bne	r3,zero,4852c <___vfprintf_internal_r+0x21e8>
   46e28:	94800414 	ori	r18,r18,16
   46e2c:	9080080c 	andi	r2,r18,32
   46e30:	10020c26 	beq	r2,zero,47664 <___vfprintf_internal_r+0x1320>
   46e34:	d8802d17 	ldw	r2,180(sp)
   46e38:	d9002917 	ldw	r4,164(sp)
   46e3c:	d8002785 	stb	zero,158(sp)
   46e40:	10c00204 	addi	r3,r2,8
   46e44:	14c00017 	ldw	r19,0(r2)
   46e48:	15800117 	ldw	r22,4(r2)
   46e4c:	20040f16 	blt	r4,zero,47e8c <___vfprintf_internal_r+0x1b48>
   46e50:	013fdfc4 	movi	r4,-129
   46e54:	9d84b03a 	or	r2,r19,r22
   46e58:	d8c02d15 	stw	r3,180(sp)
   46e5c:	9124703a 	and	r18,r18,r4
   46e60:	0039883a 	mov	fp,zero
   46e64:	103e891e 	bne	r2,zero,4688c <__alt_data_end+0xfffc808c>
   46e68:	d9002917 	ldw	r4,164(sp)
   46e6c:	2002c11e 	bne	r4,zero,47974 <___vfprintf_internal_r+0x1630>
   46e70:	d8002915 	stw	zero,164(sp)
   46e74:	d8002e15 	stw	zero,184(sp)
   46e78:	dc001e04 	addi	r16,sp,120
   46e7c:	003ef806 	br	46a60 <__alt_data_end+0xfffc8260>
   46e80:	18c03fcc 	andi	r3,r3,255
   46e84:	18059d1e 	bne	r3,zero,484fc <___vfprintf_internal_r+0x21b8>
   46e88:	01400174 	movhi	r5,5
   46e8c:	29573f04 	addi	r5,r5,23804
   46e90:	d9403915 	stw	r5,228(sp)
   46e94:	9080080c 	andi	r2,r18,32
   46e98:	10005226 	beq	r2,zero,46fe4 <___vfprintf_internal_r+0xca0>
   46e9c:	d8802d17 	ldw	r2,180(sp)
   46ea0:	14c00017 	ldw	r19,0(r2)
   46ea4:	15800117 	ldw	r22,4(r2)
   46ea8:	10800204 	addi	r2,r2,8
   46eac:	d8802d15 	stw	r2,180(sp)
   46eb0:	9080004c 	andi	r2,r18,1
   46eb4:	10019026 	beq	r2,zero,474f8 <___vfprintf_internal_r+0x11b4>
   46eb8:	9d84b03a 	or	r2,r19,r22
   46ebc:	10036926 	beq	r2,zero,47c64 <___vfprintf_internal_r+0x1920>
   46ec0:	d8c02917 	ldw	r3,164(sp)
   46ec4:	00800c04 	movi	r2,48
   46ec8:	d8802705 	stb	r2,156(sp)
   46ecc:	dc402745 	stb	r17,157(sp)
   46ed0:	d8002785 	stb	zero,158(sp)
   46ed4:	90800094 	ori	r2,r18,2
   46ed8:	18045d16 	blt	r3,zero,48050 <___vfprintf_internal_r+0x1d0c>
   46edc:	00bfdfc4 	movi	r2,-129
   46ee0:	90a4703a 	and	r18,r18,r2
   46ee4:	94800094 	ori	r18,r18,2
   46ee8:	0039883a 	mov	fp,zero
   46eec:	d9003917 	ldw	r4,228(sp)
   46ef0:	dc001e04 	addi	r16,sp,120
   46ef4:	988003cc 	andi	r2,r19,15
   46ef8:	b006973a 	slli	r3,r22,28
   46efc:	2085883a 	add	r2,r4,r2
   46f00:	9826d13a 	srli	r19,r19,4
   46f04:	10800003 	ldbu	r2,0(r2)
   46f08:	b02cd13a 	srli	r22,r22,4
   46f0c:	843fffc4 	addi	r16,r16,-1
   46f10:	1ce6b03a 	or	r19,r3,r19
   46f14:	80800005 	stb	r2,0(r16)
   46f18:	9d84b03a 	or	r2,r19,r22
   46f1c:	103ff51e 	bne	r2,zero,46ef4 <__alt_data_end+0xfffc86f4>
   46f20:	d8c02817 	ldw	r3,160(sp)
   46f24:	1c07c83a 	sub	r3,r3,r16
   46f28:	d8c02e15 	stw	r3,184(sp)
   46f2c:	003ecc06 	br	46a60 <__alt_data_end+0xfffc8260>
   46f30:	18c03fcc 	andi	r3,r3,255
   46f34:	183e9f26 	beq	r3,zero,469b4 <__alt_data_end+0xfffc81b4>
   46f38:	d9c02785 	stb	r7,158(sp)
   46f3c:	003e9d06 	br	469b4 <__alt_data_end+0xfffc81b4>
   46f40:	00c00044 	movi	r3,1
   46f44:	01c00ac4 	movi	r7,43
   46f48:	ac400007 	ldb	r17,0(r21)
   46f4c:	003d5e06 	br	464c8 <__alt_data_end+0xfffc7cc8>
   46f50:	94800814 	ori	r18,r18,32
   46f54:	ac400007 	ldb	r17,0(r21)
   46f58:	003d5b06 	br	464c8 <__alt_data_end+0xfffc7cc8>
   46f5c:	d8c02d17 	ldw	r3,180(sp)
   46f60:	d8002785 	stb	zero,158(sp)
   46f64:	1c000017 	ldw	r16,0(r3)
   46f68:	1cc00104 	addi	r19,r3,4
   46f6c:	80041926 	beq	r16,zero,47fd4 <___vfprintf_internal_r+0x1c90>
   46f70:	d9002917 	ldw	r4,164(sp)
   46f74:	2003d016 	blt	r4,zero,47eb8 <___vfprintf_internal_r+0x1b74>
   46f78:	200d883a 	mov	r6,r4
   46f7c:	000b883a 	mov	r5,zero
   46f80:	8009883a 	mov	r4,r16
   46f84:	da003d15 	stw	r8,244(sp)
   46f88:	004bc780 	call	4bc78 <memchr>
   46f8c:	da003d17 	ldw	r8,244(sp)
   46f90:	10045426 	beq	r2,zero,480e4 <___vfprintf_internal_r+0x1da0>
   46f94:	1405c83a 	sub	r2,r2,r16
   46f98:	d8802e15 	stw	r2,184(sp)
   46f9c:	1003cc16 	blt	r2,zero,47ed0 <___vfprintf_internal_r+0x1b8c>
   46fa0:	df002783 	ldbu	fp,158(sp)
   46fa4:	d8802a15 	stw	r2,168(sp)
   46fa8:	dcc02d15 	stw	r19,180(sp)
   46fac:	d8002915 	stw	zero,164(sp)
   46fb0:	d8003215 	stw	zero,200(sp)
   46fb4:	003eb006 	br	46a78 <__alt_data_end+0xfffc8278>
   46fb8:	18c03fcc 	andi	r3,r3,255
   46fbc:	183f9b26 	beq	r3,zero,46e2c <__alt_data_end+0xfffc862c>
   46fc0:	d9c02785 	stb	r7,158(sp)
   46fc4:	003f9906 	br	46e2c <__alt_data_end+0xfffc862c>
   46fc8:	18c03fcc 	andi	r3,r3,255
   46fcc:	1805551e 	bne	r3,zero,48524 <___vfprintf_internal_r+0x21e0>
   46fd0:	01400174 	movhi	r5,5
   46fd4:	29574404 	addi	r5,r5,23824
   46fd8:	d9403915 	stw	r5,228(sp)
   46fdc:	9080080c 	andi	r2,r18,32
   46fe0:	103fae1e 	bne	r2,zero,46e9c <__alt_data_end+0xfffc869c>
   46fe4:	9080040c 	andi	r2,r18,16
   46fe8:	1002de26 	beq	r2,zero,47b64 <___vfprintf_internal_r+0x1820>
   46fec:	d8c02d17 	ldw	r3,180(sp)
   46ff0:	002d883a 	mov	r22,zero
   46ff4:	1cc00017 	ldw	r19,0(r3)
   46ff8:	18c00104 	addi	r3,r3,4
   46ffc:	d8c02d15 	stw	r3,180(sp)
   47000:	003fab06 	br	46eb0 <__alt_data_end+0xfffc86b0>
   47004:	38803fcc 	andi	r2,r7,255
   47008:	1080201c 	xori	r2,r2,128
   4700c:	10bfe004 	addi	r2,r2,-128
   47010:	1002d21e 	bne	r2,zero,47b5c <___vfprintf_internal_r+0x1818>
   47014:	00c00044 	movi	r3,1
   47018:	01c00804 	movi	r7,32
   4701c:	ac400007 	ldb	r17,0(r21)
   47020:	003d2906 	br	464c8 <__alt_data_end+0xfffc7cc8>
   47024:	94800054 	ori	r18,r18,1
   47028:	ac400007 	ldb	r17,0(r21)
   4702c:	003d2606 	br	464c8 <__alt_data_end+0xfffc7cc8>
   47030:	18c03fcc 	andi	r3,r3,255
   47034:	183e0526 	beq	r3,zero,4684c <__alt_data_end+0xfffc804c>
   47038:	d9c02785 	stb	r7,158(sp)
   4703c:	003e0306 	br	4684c <__alt_data_end+0xfffc804c>
   47040:	94801014 	ori	r18,r18,64
   47044:	ac400007 	ldb	r17,0(r21)
   47048:	003d1f06 	br	464c8 <__alt_data_end+0xfffc7cc8>
   4704c:	ac400007 	ldb	r17,0(r21)
   47050:	8a438726 	beq	r17,r9,47e70 <___vfprintf_internal_r+0x1b2c>
   47054:	94800414 	ori	r18,r18,16
   47058:	003d1b06 	br	464c8 <__alt_data_end+0xfffc7cc8>
   4705c:	18c03fcc 	andi	r3,r3,255
   47060:	1805341e 	bne	r3,zero,48534 <___vfprintf_internal_r+0x21f0>
   47064:	9080080c 	andi	r2,r18,32
   47068:	1002cd26 	beq	r2,zero,47ba0 <___vfprintf_internal_r+0x185c>
   4706c:	d9402d17 	ldw	r5,180(sp)
   47070:	d9002f17 	ldw	r4,188(sp)
   47074:	28800017 	ldw	r2,0(r5)
   47078:	2007d7fa 	srai	r3,r4,31
   4707c:	29400104 	addi	r5,r5,4
   47080:	d9402d15 	stw	r5,180(sp)
   47084:	11000015 	stw	r4,0(r2)
   47088:	10c00115 	stw	r3,4(r2)
   4708c:	003ce506 	br	46424 <__alt_data_end+0xfffc7c24>
   47090:	d8c02d17 	ldw	r3,180(sp)
   47094:	d9002d17 	ldw	r4,180(sp)
   47098:	d8002785 	stb	zero,158(sp)
   4709c:	18800017 	ldw	r2,0(r3)
   470a0:	21000104 	addi	r4,r4,4
   470a4:	00c00044 	movi	r3,1
   470a8:	d8c02a15 	stw	r3,168(sp)
   470ac:	d8801405 	stb	r2,80(sp)
   470b0:	d9002d15 	stw	r4,180(sp)
   470b4:	d8c02e15 	stw	r3,184(sp)
   470b8:	d8002915 	stw	zero,164(sp)
   470bc:	d8003215 	stw	zero,200(sp)
   470c0:	dc001404 	addi	r16,sp,80
   470c4:	0039883a 	mov	fp,zero
   470c8:	003e7206 	br	46a94 <__alt_data_end+0xfffc8294>
   470cc:	01000174 	movhi	r4,5
   470d0:	21174404 	addi	r4,r4,23824
   470d4:	0039883a 	mov	fp,zero
   470d8:	d9003915 	stw	r4,228(sp)
   470dc:	04401e04 	movi	r17,120
   470e0:	003f8206 	br	46eec <__alt_data_end+0xfffc86ec>
   470e4:	18c03fcc 	andi	r3,r3,255
   470e8:	1805061e 	bne	r3,zero,48504 <___vfprintf_internal_r+0x21c0>
   470ec:	883d9126 	beq	r17,zero,46734 <__alt_data_end+0xfffc7f34>
   470f0:	00c00044 	movi	r3,1
   470f4:	d8c02a15 	stw	r3,168(sp)
   470f8:	dc401405 	stb	r17,80(sp)
   470fc:	d8002785 	stb	zero,158(sp)
   47100:	003fec06 	br	470b4 <__alt_data_end+0xfffc88b4>
   47104:	01400174 	movhi	r5,5
   47108:	29574404 	addi	r5,r5,23824
   4710c:	d9403915 	stw	r5,228(sp)
   47110:	d8c02d15 	stw	r3,180(sp)
   47114:	1025883a 	mov	r18,r2
   47118:	04401e04 	movi	r17,120
   4711c:	9d84b03a 	or	r2,r19,r22
   47120:	1000fc1e 	bne	r2,zero,47514 <___vfprintf_internal_r+0x11d0>
   47124:	0039883a 	mov	fp,zero
   47128:	00800084 	movi	r2,2
   4712c:	10803fcc 	andi	r2,r2,255
   47130:	00c00044 	movi	r3,1
   47134:	10c20f26 	beq	r2,r3,47974 <___vfprintf_internal_r+0x1630>
   47138:	00c00084 	movi	r3,2
   4713c:	10fd6326 	beq	r2,r3,466cc <__alt_data_end+0xfffc7ecc>
   47140:	003e2d06 	br	469f8 <__alt_data_end+0xfffc81f8>
   47144:	d8c02017 	ldw	r3,128(sp)
   47148:	003e9306 	br	46b98 <__alt_data_end+0xfffc8398>
   4714c:	00801944 	movi	r2,101
   47150:	14407e0e 	bge	r2,r17,4734c <___vfprintf_internal_r+0x1008>
   47154:	d9003617 	ldw	r4,216(sp)
   47158:	d9403817 	ldw	r5,224(sp)
   4715c:	000d883a 	mov	r6,zero
   47160:	000f883a 	mov	r7,zero
   47164:	d8c03c15 	stw	r3,240(sp)
   47168:	da003d15 	stw	r8,244(sp)
   4716c:	00517a00 	call	517a0 <__eqdf2>
   47170:	d8c03c17 	ldw	r3,240(sp)
   47174:	da003d17 	ldw	r8,244(sp)
   47178:	1000f71e 	bne	r2,zero,47558 <___vfprintf_internal_r+0x1214>
   4717c:	d8801f17 	ldw	r2,124(sp)
   47180:	01000174 	movhi	r4,5
   47184:	21174b04 	addi	r4,r4,23852
   47188:	18c00044 	addi	r3,r3,1
   4718c:	10800044 	addi	r2,r2,1
   47190:	41000015 	stw	r4,0(r8)
   47194:	01000044 	movi	r4,1
   47198:	41000115 	stw	r4,4(r8)
   4719c:	d8c02015 	stw	r3,128(sp)
   471a0:	d8801f15 	stw	r2,124(sp)
   471a4:	010001c4 	movi	r4,7
   471a8:	2082b816 	blt	r4,r2,47c8c <___vfprintf_internal_r+0x1948>
   471ac:	42000204 	addi	r8,r8,8
   471b0:	d8802617 	ldw	r2,152(sp)
   471b4:	d9403317 	ldw	r5,204(sp)
   471b8:	11400216 	blt	r2,r5,471c4 <___vfprintf_internal_r+0xe80>
   471bc:	9080004c 	andi	r2,r18,1
   471c0:	103ed526 	beq	r2,zero,46d18 <__alt_data_end+0xfffc8518>
   471c4:	d8803717 	ldw	r2,220(sp)
   471c8:	d9003417 	ldw	r4,208(sp)
   471cc:	d9403717 	ldw	r5,220(sp)
   471d0:	1887883a 	add	r3,r3,r2
   471d4:	d8801f17 	ldw	r2,124(sp)
   471d8:	41000015 	stw	r4,0(r8)
   471dc:	41400115 	stw	r5,4(r8)
   471e0:	10800044 	addi	r2,r2,1
   471e4:	d8c02015 	stw	r3,128(sp)
   471e8:	d8801f15 	stw	r2,124(sp)
   471ec:	010001c4 	movi	r4,7
   471f0:	20832916 	blt	r4,r2,47e98 <___vfprintf_internal_r+0x1b54>
   471f4:	42000204 	addi	r8,r8,8
   471f8:	d8803317 	ldw	r2,204(sp)
   471fc:	143fffc4 	addi	r16,r2,-1
   47200:	043ec50e 	bge	zero,r16,46d18 <__alt_data_end+0xfffc8518>
   47204:	04400404 	movi	r17,16
   47208:	d8801f17 	ldw	r2,124(sp)
   4720c:	8c00880e 	bge	r17,r16,47430 <___vfprintf_internal_r+0x10ec>
   47210:	01400174 	movhi	r5,5
   47214:	29575384 	addi	r5,r5,23886
   47218:	d9402b15 	stw	r5,172(sp)
   4721c:	058001c4 	movi	r22,7
   47220:	dcc02c17 	ldw	r19,176(sp)
   47224:	00000306 	br	47234 <___vfprintf_internal_r+0xef0>
   47228:	42000204 	addi	r8,r8,8
   4722c:	843ffc04 	addi	r16,r16,-16
   47230:	8c00820e 	bge	r17,r16,4743c <___vfprintf_internal_r+0x10f8>
   47234:	18c00404 	addi	r3,r3,16
   47238:	10800044 	addi	r2,r2,1
   4723c:	45000015 	stw	r20,0(r8)
   47240:	44400115 	stw	r17,4(r8)
   47244:	d8c02015 	stw	r3,128(sp)
   47248:	d8801f15 	stw	r2,124(sp)
   4724c:	b0bff60e 	bge	r22,r2,47228 <__alt_data_end+0xfffc8a28>
   47250:	d9801e04 	addi	r6,sp,120
   47254:	b80b883a 	mov	r5,r23
   47258:	9809883a 	mov	r4,r19
   4725c:	004ee700 	call	4ee70 <__sprint_r>
   47260:	103d3a1e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   47264:	d8c02017 	ldw	r3,128(sp)
   47268:	d8801f17 	ldw	r2,124(sp)
   4726c:	da000404 	addi	r8,sp,16
   47270:	003fee06 	br	4722c <__alt_data_end+0xfffc8a2c>
   47274:	d9403117 	ldw	r5,196(sp)
   47278:	d8802a17 	ldw	r2,168(sp)
   4727c:	28adc83a 	sub	r22,r5,r2
   47280:	05be630e 	bge	zero,r22,46c10 <__alt_data_end+0xfffc8410>
   47284:	07000404 	movi	fp,16
   47288:	d8801f17 	ldw	r2,124(sp)
   4728c:	e5838f0e 	bge	fp,r22,480cc <___vfprintf_internal_r+0x1d88>
   47290:	01400174 	movhi	r5,5
   47294:	29575384 	addi	r5,r5,23886
   47298:	dc403015 	stw	r17,192(sp)
   4729c:	d9402b15 	stw	r5,172(sp)
   472a0:	b023883a 	mov	r17,r22
   472a4:	04c001c4 	movi	r19,7
   472a8:	a82d883a 	mov	r22,r21
   472ac:	902b883a 	mov	r21,r18
   472b0:	8025883a 	mov	r18,r16
   472b4:	dc002c17 	ldw	r16,176(sp)
   472b8:	00000306 	br	472c8 <___vfprintf_internal_r+0xf84>
   472bc:	8c7ffc04 	addi	r17,r17,-16
   472c0:	42000204 	addi	r8,r8,8
   472c4:	e440110e 	bge	fp,r17,4730c <___vfprintf_internal_r+0xfc8>
   472c8:	18c00404 	addi	r3,r3,16
   472cc:	10800044 	addi	r2,r2,1
   472d0:	45000015 	stw	r20,0(r8)
   472d4:	47000115 	stw	fp,4(r8)
   472d8:	d8c02015 	stw	r3,128(sp)
   472dc:	d8801f15 	stw	r2,124(sp)
   472e0:	98bff60e 	bge	r19,r2,472bc <__alt_data_end+0xfffc8abc>
   472e4:	d9801e04 	addi	r6,sp,120
   472e8:	b80b883a 	mov	r5,r23
   472ec:	8009883a 	mov	r4,r16
   472f0:	004ee700 	call	4ee70 <__sprint_r>
   472f4:	103d151e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   472f8:	8c7ffc04 	addi	r17,r17,-16
   472fc:	d8c02017 	ldw	r3,128(sp)
   47300:	d8801f17 	ldw	r2,124(sp)
   47304:	da000404 	addi	r8,sp,16
   47308:	e47fef16 	blt	fp,r17,472c8 <__alt_data_end+0xfffc8ac8>
   4730c:	9021883a 	mov	r16,r18
   47310:	a825883a 	mov	r18,r21
   47314:	b02b883a 	mov	r21,r22
   47318:	882d883a 	mov	r22,r17
   4731c:	dc403017 	ldw	r17,192(sp)
   47320:	d9002b17 	ldw	r4,172(sp)
   47324:	1d87883a 	add	r3,r3,r22
   47328:	10800044 	addi	r2,r2,1
   4732c:	41000015 	stw	r4,0(r8)
   47330:	45800115 	stw	r22,4(r8)
   47334:	d8c02015 	stw	r3,128(sp)
   47338:	d8801f15 	stw	r2,124(sp)
   4733c:	010001c4 	movi	r4,7
   47340:	20818e16 	blt	r4,r2,4797c <___vfprintf_internal_r+0x1638>
   47344:	42000204 	addi	r8,r8,8
   47348:	003e3106 	br	46c10 <__alt_data_end+0xfffc8410>
   4734c:	d9403317 	ldw	r5,204(sp)
   47350:	00800044 	movi	r2,1
   47354:	18c00044 	addi	r3,r3,1
   47358:	1141530e 	bge	r2,r5,478a8 <___vfprintf_internal_r+0x1564>
   4735c:	dc401f17 	ldw	r17,124(sp)
   47360:	00800044 	movi	r2,1
   47364:	40800115 	stw	r2,4(r8)
   47368:	8c400044 	addi	r17,r17,1
   4736c:	44000015 	stw	r16,0(r8)
   47370:	d8c02015 	stw	r3,128(sp)
   47374:	dc401f15 	stw	r17,124(sp)
   47378:	008001c4 	movi	r2,7
   4737c:	14416b16 	blt	r2,r17,4792c <___vfprintf_internal_r+0x15e8>
   47380:	42000204 	addi	r8,r8,8
   47384:	d8803717 	ldw	r2,220(sp)
   47388:	d9003417 	ldw	r4,208(sp)
   4738c:	8c400044 	addi	r17,r17,1
   47390:	10c7883a 	add	r3,r2,r3
   47394:	40800115 	stw	r2,4(r8)
   47398:	41000015 	stw	r4,0(r8)
   4739c:	d8c02015 	stw	r3,128(sp)
   473a0:	dc401f15 	stw	r17,124(sp)
   473a4:	008001c4 	movi	r2,7
   473a8:	14416916 	blt	r2,r17,47950 <___vfprintf_internal_r+0x160c>
   473ac:	45800204 	addi	r22,r8,8
   473b0:	d9003617 	ldw	r4,216(sp)
   473b4:	d9403817 	ldw	r5,224(sp)
   473b8:	000d883a 	mov	r6,zero
   473bc:	000f883a 	mov	r7,zero
   473c0:	d8c03c15 	stw	r3,240(sp)
   473c4:	00517a00 	call	517a0 <__eqdf2>
   473c8:	d8c03c17 	ldw	r3,240(sp)
   473cc:	1000bc26 	beq	r2,zero,476c0 <___vfprintf_internal_r+0x137c>
   473d0:	d9403317 	ldw	r5,204(sp)
   473d4:	84000044 	addi	r16,r16,1
   473d8:	8c400044 	addi	r17,r17,1
   473dc:	28bfffc4 	addi	r2,r5,-1
   473e0:	1887883a 	add	r3,r3,r2
   473e4:	b0800115 	stw	r2,4(r22)
   473e8:	b4000015 	stw	r16,0(r22)
   473ec:	d8c02015 	stw	r3,128(sp)
   473f0:	dc401f15 	stw	r17,124(sp)
   473f4:	008001c4 	movi	r2,7
   473f8:	14414316 	blt	r2,r17,47908 <___vfprintf_internal_r+0x15c4>
   473fc:	b5800204 	addi	r22,r22,8
   47400:	d9003a17 	ldw	r4,232(sp)
   47404:	df0022c4 	addi	fp,sp,139
   47408:	8c400044 	addi	r17,r17,1
   4740c:	20c7883a 	add	r3,r4,r3
   47410:	b7000015 	stw	fp,0(r22)
   47414:	b1000115 	stw	r4,4(r22)
   47418:	d8c02015 	stw	r3,128(sp)
   4741c:	dc401f15 	stw	r17,124(sp)
   47420:	008001c4 	movi	r2,7
   47424:	14400e16 	blt	r2,r17,47460 <___vfprintf_internal_r+0x111c>
   47428:	b2000204 	addi	r8,r22,8
   4742c:	003e3a06 	br	46d18 <__alt_data_end+0xfffc8518>
   47430:	01000174 	movhi	r4,5
   47434:	21175384 	addi	r4,r4,23886
   47438:	d9002b15 	stw	r4,172(sp)
   4743c:	d9002b17 	ldw	r4,172(sp)
   47440:	1c07883a 	add	r3,r3,r16
   47444:	44000115 	stw	r16,4(r8)
   47448:	41000015 	stw	r4,0(r8)
   4744c:	10800044 	addi	r2,r2,1
   47450:	d8c02015 	stw	r3,128(sp)
   47454:	d8801f15 	stw	r2,124(sp)
   47458:	010001c4 	movi	r4,7
   4745c:	20be2d0e 	bge	r4,r2,46d14 <__alt_data_end+0xfffc8514>
   47460:	d9002c17 	ldw	r4,176(sp)
   47464:	d9801e04 	addi	r6,sp,120
   47468:	b80b883a 	mov	r5,r23
   4746c:	004ee700 	call	4ee70 <__sprint_r>
   47470:	103cb61e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   47474:	d8c02017 	ldw	r3,128(sp)
   47478:	da000404 	addi	r8,sp,16
   4747c:	003e2606 	br	46d18 <__alt_data_end+0xfffc8518>
   47480:	d9002c17 	ldw	r4,176(sp)
   47484:	d9801e04 	addi	r6,sp,120
   47488:	b80b883a 	mov	r5,r23
   4748c:	004ee700 	call	4ee70 <__sprint_r>
   47490:	103e5d26 	beq	r2,zero,46e08 <__alt_data_end+0xfffc8608>
   47494:	003cad06 	br	4674c <__alt_data_end+0xfffc7f4c>
   47498:	d9002c17 	ldw	r4,176(sp)
   4749c:	d9801e04 	addi	r6,sp,120
   474a0:	b80b883a 	mov	r5,r23
   474a4:	004ee700 	call	4ee70 <__sprint_r>
   474a8:	103ca81e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   474ac:	d8c02017 	ldw	r3,128(sp)
   474b0:	da000404 	addi	r8,sp,16
   474b4:	003e0b06 	br	46ce4 <__alt_data_end+0xfffc84e4>
   474b8:	d9002c17 	ldw	r4,176(sp)
   474bc:	d9801e04 	addi	r6,sp,120
   474c0:	b80b883a 	mov	r5,r23
   474c4:	004ee700 	call	4ee70 <__sprint_r>
   474c8:	103ca01e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   474cc:	d8c02017 	ldw	r3,128(sp)
   474d0:	da000404 	addi	r8,sp,16
   474d4:	003dbd06 	br	46bcc <__alt_data_end+0xfffc83cc>
   474d8:	d9002c17 	ldw	r4,176(sp)
   474dc:	d9801e04 	addi	r6,sp,120
   474e0:	b80b883a 	mov	r5,r23
   474e4:	004ee700 	call	4ee70 <__sprint_r>
   474e8:	103c981e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   474ec:	d8c02017 	ldw	r3,128(sp)
   474f0:	da000404 	addi	r8,sp,16
   474f4:	003dc306 	br	46c04 <__alt_data_end+0xfffc8404>
   474f8:	d8802917 	ldw	r2,164(sp)
   474fc:	d8002785 	stb	zero,158(sp)
   47500:	103f0616 	blt	r2,zero,4711c <__alt_data_end+0xfffc891c>
   47504:	00ffdfc4 	movi	r3,-129
   47508:	9d84b03a 	or	r2,r19,r22
   4750c:	90e4703a 	and	r18,r18,r3
   47510:	103c6b26 	beq	r2,zero,466c0 <__alt_data_end+0xfffc7ec0>
   47514:	0039883a 	mov	fp,zero
   47518:	003e7406 	br	46eec <__alt_data_end+0xfffc86ec>
   4751c:	9080040c 	andi	r2,r18,16
   47520:	1001b326 	beq	r2,zero,47bf0 <___vfprintf_internal_r+0x18ac>
   47524:	d9002d17 	ldw	r4,180(sp)
   47528:	d9402917 	ldw	r5,164(sp)
   4752c:	d8002785 	stb	zero,158(sp)
   47530:	20800104 	addi	r2,r4,4
   47534:	24c00017 	ldw	r19,0(r4)
   47538:	002d883a 	mov	r22,zero
   4753c:	2801b516 	blt	r5,zero,47c14 <___vfprintf_internal_r+0x18d0>
   47540:	00ffdfc4 	movi	r3,-129
   47544:	d8802d15 	stw	r2,180(sp)
   47548:	90e4703a 	and	r18,r18,r3
   4754c:	983d2726 	beq	r19,zero,469ec <__alt_data_end+0xfffc81ec>
   47550:	0039883a 	mov	fp,zero
   47554:	003d2a06 	br	46a00 <__alt_data_end+0xfffc8200>
   47558:	dc402617 	ldw	r17,152(sp)
   4755c:	0441d30e 	bge	zero,r17,47cac <___vfprintf_internal_r+0x1968>
   47560:	dc403217 	ldw	r17,200(sp)
   47564:	d8803317 	ldw	r2,204(sp)
   47568:	1440010e 	bge	r2,r17,47570 <___vfprintf_internal_r+0x122c>
   4756c:	1023883a 	mov	r17,r2
   47570:	04400a0e 	bge	zero,r17,4759c <___vfprintf_internal_r+0x1258>
   47574:	d8801f17 	ldw	r2,124(sp)
   47578:	1c47883a 	add	r3,r3,r17
   4757c:	44000015 	stw	r16,0(r8)
   47580:	10800044 	addi	r2,r2,1
   47584:	44400115 	stw	r17,4(r8)
   47588:	d8c02015 	stw	r3,128(sp)
   4758c:	d8801f15 	stw	r2,124(sp)
   47590:	010001c4 	movi	r4,7
   47594:	20826516 	blt	r4,r2,47f2c <___vfprintf_internal_r+0x1be8>
   47598:	42000204 	addi	r8,r8,8
   4759c:	88026116 	blt	r17,zero,47f24 <___vfprintf_internal_r+0x1be0>
   475a0:	d9003217 	ldw	r4,200(sp)
   475a4:	2463c83a 	sub	r17,r4,r17
   475a8:	04407b0e 	bge	zero,r17,47798 <___vfprintf_internal_r+0x1454>
   475ac:	05800404 	movi	r22,16
   475b0:	d8801f17 	ldw	r2,124(sp)
   475b4:	b4419d0e 	bge	r22,r17,47c2c <___vfprintf_internal_r+0x18e8>
   475b8:	01000174 	movhi	r4,5
   475bc:	21175384 	addi	r4,r4,23886
   475c0:	d9002b15 	stw	r4,172(sp)
   475c4:	070001c4 	movi	fp,7
   475c8:	dcc02c17 	ldw	r19,176(sp)
   475cc:	00000306 	br	475dc <___vfprintf_internal_r+0x1298>
   475d0:	42000204 	addi	r8,r8,8
   475d4:	8c7ffc04 	addi	r17,r17,-16
   475d8:	b441970e 	bge	r22,r17,47c38 <___vfprintf_internal_r+0x18f4>
   475dc:	18c00404 	addi	r3,r3,16
   475e0:	10800044 	addi	r2,r2,1
   475e4:	45000015 	stw	r20,0(r8)
   475e8:	45800115 	stw	r22,4(r8)
   475ec:	d8c02015 	stw	r3,128(sp)
   475f0:	d8801f15 	stw	r2,124(sp)
   475f4:	e0bff60e 	bge	fp,r2,475d0 <__alt_data_end+0xfffc8dd0>
   475f8:	d9801e04 	addi	r6,sp,120
   475fc:	b80b883a 	mov	r5,r23
   47600:	9809883a 	mov	r4,r19
   47604:	004ee700 	call	4ee70 <__sprint_r>
   47608:	103c501e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   4760c:	d8c02017 	ldw	r3,128(sp)
   47610:	d8801f17 	ldw	r2,124(sp)
   47614:	da000404 	addi	r8,sp,16
   47618:	003fee06 	br	475d4 <__alt_data_end+0xfffc8dd4>
   4761c:	d9002c17 	ldw	r4,176(sp)
   47620:	d9801e04 	addi	r6,sp,120
   47624:	b80b883a 	mov	r5,r23
   47628:	004ee700 	call	4ee70 <__sprint_r>
   4762c:	103c471e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   47630:	d8c02017 	ldw	r3,128(sp)
   47634:	df002787 	ldb	fp,158(sp)
   47638:	da000404 	addi	r8,sp,16
   4763c:	003d5606 	br	46b98 <__alt_data_end+0xfffc8398>
   47640:	9080040c 	andi	r2,r18,16
   47644:	10016126 	beq	r2,zero,47bcc <___vfprintf_internal_r+0x1888>
   47648:	d8802d17 	ldw	r2,180(sp)
   4764c:	14c00017 	ldw	r19,0(r2)
   47650:	10800104 	addi	r2,r2,4
   47654:	d8802d15 	stw	r2,180(sp)
   47658:	982dd7fa 	srai	r22,r19,31
   4765c:	b005883a 	mov	r2,r22
   47660:	003c8206 	br	4686c <__alt_data_end+0xfffc806c>
   47664:	9080040c 	andi	r2,r18,16
   47668:	10003526 	beq	r2,zero,47740 <___vfprintf_internal_r+0x13fc>
   4766c:	d9402d17 	ldw	r5,180(sp)
   47670:	d8c02917 	ldw	r3,164(sp)
   47674:	d8002785 	stb	zero,158(sp)
   47678:	28800104 	addi	r2,r5,4
   4767c:	2cc00017 	ldw	r19,0(r5)
   47680:	002d883a 	mov	r22,zero
   47684:	18003716 	blt	r3,zero,47764 <___vfprintf_internal_r+0x1420>
   47688:	00ffdfc4 	movi	r3,-129
   4768c:	d8802d15 	stw	r2,180(sp)
   47690:	90e4703a 	and	r18,r18,r3
   47694:	0039883a 	mov	fp,zero
   47698:	983df326 	beq	r19,zero,46e68 <__alt_data_end+0xfffc8668>
   4769c:	00800244 	movi	r2,9
   476a0:	14fc7b36 	bltu	r2,r19,46890 <__alt_data_end+0xfffc8090>
   476a4:	d8c02817 	ldw	r3,160(sp)
   476a8:	dc001dc4 	addi	r16,sp,119
   476ac:	9cc00c04 	addi	r19,r19,48
   476b0:	1c07c83a 	sub	r3,r3,r16
   476b4:	dcc01dc5 	stb	r19,119(sp)
   476b8:	d8c02e15 	stw	r3,184(sp)
   476bc:	003ce806 	br	46a60 <__alt_data_end+0xfffc8260>
   476c0:	d8803317 	ldw	r2,204(sp)
   476c4:	143fffc4 	addi	r16,r2,-1
   476c8:	043f4d0e 	bge	zero,r16,47400 <__alt_data_end+0xfffc8c00>
   476cc:	07000404 	movi	fp,16
   476d0:	e400810e 	bge	fp,r16,478d8 <___vfprintf_internal_r+0x1594>
   476d4:	01400174 	movhi	r5,5
   476d8:	29575384 	addi	r5,r5,23886
   476dc:	d9402b15 	stw	r5,172(sp)
   476e0:	01c001c4 	movi	r7,7
   476e4:	dcc02c17 	ldw	r19,176(sp)
   476e8:	00000306 	br	476f8 <___vfprintf_internal_r+0x13b4>
   476ec:	b5800204 	addi	r22,r22,8
   476f0:	843ffc04 	addi	r16,r16,-16
   476f4:	e4007b0e 	bge	fp,r16,478e4 <___vfprintf_internal_r+0x15a0>
   476f8:	18c00404 	addi	r3,r3,16
   476fc:	8c400044 	addi	r17,r17,1
   47700:	b5000015 	stw	r20,0(r22)
   47704:	b7000115 	stw	fp,4(r22)
   47708:	d8c02015 	stw	r3,128(sp)
   4770c:	dc401f15 	stw	r17,124(sp)
   47710:	3c7ff60e 	bge	r7,r17,476ec <__alt_data_end+0xfffc8eec>
   47714:	d9801e04 	addi	r6,sp,120
   47718:	b80b883a 	mov	r5,r23
   4771c:	9809883a 	mov	r4,r19
   47720:	d9c03c15 	stw	r7,240(sp)
   47724:	004ee700 	call	4ee70 <__sprint_r>
   47728:	d9c03c17 	ldw	r7,240(sp)
   4772c:	103c071e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   47730:	d8c02017 	ldw	r3,128(sp)
   47734:	dc401f17 	ldw	r17,124(sp)
   47738:	dd800404 	addi	r22,sp,16
   4773c:	003fec06 	br	476f0 <__alt_data_end+0xfffc8ef0>
   47740:	9080100c 	andi	r2,r18,64
   47744:	d8002785 	stb	zero,158(sp)
   47748:	10010e26 	beq	r2,zero,47b84 <___vfprintf_internal_r+0x1840>
   4774c:	d9002d17 	ldw	r4,180(sp)
   47750:	d9402917 	ldw	r5,164(sp)
   47754:	002d883a 	mov	r22,zero
   47758:	20800104 	addi	r2,r4,4
   4775c:	24c0000b 	ldhu	r19,0(r4)
   47760:	283fc90e 	bge	r5,zero,47688 <__alt_data_end+0xfffc8e88>
   47764:	d8802d15 	stw	r2,180(sp)
   47768:	0039883a 	mov	fp,zero
   4776c:	9d84b03a 	or	r2,r19,r22
   47770:	103c461e 	bne	r2,zero,4688c <__alt_data_end+0xfffc808c>
   47774:	00800044 	movi	r2,1
   47778:	003e6c06 	br	4712c <__alt_data_end+0xfffc892c>
   4777c:	d9002c17 	ldw	r4,176(sp)
   47780:	d9801e04 	addi	r6,sp,120
   47784:	b80b883a 	mov	r5,r23
   47788:	004ee700 	call	4ee70 <__sprint_r>
   4778c:	103bef1e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   47790:	d8c02017 	ldw	r3,128(sp)
   47794:	da000404 	addi	r8,sp,16
   47798:	d9003217 	ldw	r4,200(sp)
   4779c:	d8802617 	ldw	r2,152(sp)
   477a0:	d9403317 	ldw	r5,204(sp)
   477a4:	8123883a 	add	r17,r16,r4
   477a8:	11400216 	blt	r2,r5,477b4 <___vfprintf_internal_r+0x1470>
   477ac:	9100004c 	andi	r4,r18,1
   477b0:	20000d26 	beq	r4,zero,477e8 <___vfprintf_internal_r+0x14a4>
   477b4:	d9003717 	ldw	r4,220(sp)
   477b8:	d9403417 	ldw	r5,208(sp)
   477bc:	1907883a 	add	r3,r3,r4
   477c0:	d9001f17 	ldw	r4,124(sp)
   477c4:	41400015 	stw	r5,0(r8)
   477c8:	d9403717 	ldw	r5,220(sp)
   477cc:	21000044 	addi	r4,r4,1
   477d0:	d8c02015 	stw	r3,128(sp)
   477d4:	41400115 	stw	r5,4(r8)
   477d8:	d9001f15 	stw	r4,124(sp)
   477dc:	014001c4 	movi	r5,7
   477e0:	2901e816 	blt	r5,r4,47f84 <___vfprintf_internal_r+0x1c40>
   477e4:	42000204 	addi	r8,r8,8
   477e8:	d9003317 	ldw	r4,204(sp)
   477ec:	8121883a 	add	r16,r16,r4
   477f0:	2085c83a 	sub	r2,r4,r2
   477f4:	8461c83a 	sub	r16,r16,r17
   477f8:	1400010e 	bge	r2,r16,47800 <___vfprintf_internal_r+0x14bc>
   477fc:	1021883a 	mov	r16,r2
   47800:	04000a0e 	bge	zero,r16,4782c <___vfprintf_internal_r+0x14e8>
   47804:	d9001f17 	ldw	r4,124(sp)
   47808:	1c07883a 	add	r3,r3,r16
   4780c:	44400015 	stw	r17,0(r8)
   47810:	21000044 	addi	r4,r4,1
   47814:	44000115 	stw	r16,4(r8)
   47818:	d8c02015 	stw	r3,128(sp)
   4781c:	d9001f15 	stw	r4,124(sp)
   47820:	014001c4 	movi	r5,7
   47824:	2901fb16 	blt	r5,r4,48014 <___vfprintf_internal_r+0x1cd0>
   47828:	42000204 	addi	r8,r8,8
   4782c:	8001f716 	blt	r16,zero,4800c <___vfprintf_internal_r+0x1cc8>
   47830:	1421c83a 	sub	r16,r2,r16
   47834:	043d380e 	bge	zero,r16,46d18 <__alt_data_end+0xfffc8518>
   47838:	04400404 	movi	r17,16
   4783c:	d8801f17 	ldw	r2,124(sp)
   47840:	8c3efb0e 	bge	r17,r16,47430 <__alt_data_end+0xfffc8c30>
   47844:	01400174 	movhi	r5,5
   47848:	29575384 	addi	r5,r5,23886
   4784c:	d9402b15 	stw	r5,172(sp)
   47850:	058001c4 	movi	r22,7
   47854:	dcc02c17 	ldw	r19,176(sp)
   47858:	00000306 	br	47868 <___vfprintf_internal_r+0x1524>
   4785c:	42000204 	addi	r8,r8,8
   47860:	843ffc04 	addi	r16,r16,-16
   47864:	8c3ef50e 	bge	r17,r16,4743c <__alt_data_end+0xfffc8c3c>
   47868:	18c00404 	addi	r3,r3,16
   4786c:	10800044 	addi	r2,r2,1
   47870:	45000015 	stw	r20,0(r8)
   47874:	44400115 	stw	r17,4(r8)
   47878:	d8c02015 	stw	r3,128(sp)
   4787c:	d8801f15 	stw	r2,124(sp)
   47880:	b0bff60e 	bge	r22,r2,4785c <__alt_data_end+0xfffc905c>
   47884:	d9801e04 	addi	r6,sp,120
   47888:	b80b883a 	mov	r5,r23
   4788c:	9809883a 	mov	r4,r19
   47890:	004ee700 	call	4ee70 <__sprint_r>
   47894:	103bad1e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   47898:	d8c02017 	ldw	r3,128(sp)
   4789c:	d8801f17 	ldw	r2,124(sp)
   478a0:	da000404 	addi	r8,sp,16
   478a4:	003fee06 	br	47860 <__alt_data_end+0xfffc9060>
   478a8:	9088703a 	and	r4,r18,r2
   478ac:	203eab1e 	bne	r4,zero,4735c <__alt_data_end+0xfffc8b5c>
   478b0:	dc401f17 	ldw	r17,124(sp)
   478b4:	40800115 	stw	r2,4(r8)
   478b8:	44000015 	stw	r16,0(r8)
   478bc:	8c400044 	addi	r17,r17,1
   478c0:	d8c02015 	stw	r3,128(sp)
   478c4:	dc401f15 	stw	r17,124(sp)
   478c8:	008001c4 	movi	r2,7
   478cc:	14400e16 	blt	r2,r17,47908 <___vfprintf_internal_r+0x15c4>
   478d0:	45800204 	addi	r22,r8,8
   478d4:	003eca06 	br	47400 <__alt_data_end+0xfffc8c00>
   478d8:	01000174 	movhi	r4,5
   478dc:	21175384 	addi	r4,r4,23886
   478e0:	d9002b15 	stw	r4,172(sp)
   478e4:	d8802b17 	ldw	r2,172(sp)
   478e8:	1c07883a 	add	r3,r3,r16
   478ec:	8c400044 	addi	r17,r17,1
   478f0:	b0800015 	stw	r2,0(r22)
   478f4:	b4000115 	stw	r16,4(r22)
   478f8:	d8c02015 	stw	r3,128(sp)
   478fc:	dc401f15 	stw	r17,124(sp)
   47900:	008001c4 	movi	r2,7
   47904:	147ebd0e 	bge	r2,r17,473fc <__alt_data_end+0xfffc8bfc>
   47908:	d9002c17 	ldw	r4,176(sp)
   4790c:	d9801e04 	addi	r6,sp,120
   47910:	b80b883a 	mov	r5,r23
   47914:	004ee700 	call	4ee70 <__sprint_r>
   47918:	103b8c1e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   4791c:	d8c02017 	ldw	r3,128(sp)
   47920:	dc401f17 	ldw	r17,124(sp)
   47924:	dd800404 	addi	r22,sp,16
   47928:	003eb506 	br	47400 <__alt_data_end+0xfffc8c00>
   4792c:	d9002c17 	ldw	r4,176(sp)
   47930:	d9801e04 	addi	r6,sp,120
   47934:	b80b883a 	mov	r5,r23
   47938:	004ee700 	call	4ee70 <__sprint_r>
   4793c:	103b831e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   47940:	d8c02017 	ldw	r3,128(sp)
   47944:	dc401f17 	ldw	r17,124(sp)
   47948:	da000404 	addi	r8,sp,16
   4794c:	003e8d06 	br	47384 <__alt_data_end+0xfffc8b84>
   47950:	d9002c17 	ldw	r4,176(sp)
   47954:	d9801e04 	addi	r6,sp,120
   47958:	b80b883a 	mov	r5,r23
   4795c:	004ee700 	call	4ee70 <__sprint_r>
   47960:	103b7a1e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   47964:	d8c02017 	ldw	r3,128(sp)
   47968:	dc401f17 	ldw	r17,124(sp)
   4796c:	dd800404 	addi	r22,sp,16
   47970:	003e8f06 	br	473b0 <__alt_data_end+0xfffc8bb0>
   47974:	0027883a 	mov	r19,zero
   47978:	003f4a06 	br	476a4 <__alt_data_end+0xfffc8ea4>
   4797c:	d9002c17 	ldw	r4,176(sp)
   47980:	d9801e04 	addi	r6,sp,120
   47984:	b80b883a 	mov	r5,r23
   47988:	004ee700 	call	4ee70 <__sprint_r>
   4798c:	103b6f1e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   47990:	d8c02017 	ldw	r3,128(sp)
   47994:	da000404 	addi	r8,sp,16
   47998:	003c9d06 	br	46c10 <__alt_data_end+0xfffc8410>
   4799c:	04e7c83a 	sub	r19,zero,r19
   479a0:	9804c03a 	cmpne	r2,r19,zero
   479a4:	05adc83a 	sub	r22,zero,r22
   479a8:	b0adc83a 	sub	r22,r22,r2
   479ac:	d8802917 	ldw	r2,164(sp)
   479b0:	07000b44 	movi	fp,45
   479b4:	df002785 	stb	fp,158(sp)
   479b8:	10017b16 	blt	r2,zero,47fa8 <___vfprintf_internal_r+0x1c64>
   479bc:	00bfdfc4 	movi	r2,-129
   479c0:	90a4703a 	and	r18,r18,r2
   479c4:	003bb106 	br	4688c <__alt_data_end+0xfffc808c>
   479c8:	d9003617 	ldw	r4,216(sp)
   479cc:	d9403817 	ldw	r5,224(sp)
   479d0:	da003d15 	stw	r8,244(sp)
   479d4:	004d6880 	call	4d688 <__fpclassifyd>
   479d8:	da003d17 	ldw	r8,244(sp)
   479dc:	1000f026 	beq	r2,zero,47da0 <___vfprintf_internal_r+0x1a5c>
   479e0:	d9002917 	ldw	r4,164(sp)
   479e4:	05bff7c4 	movi	r22,-33
   479e8:	00bfffc4 	movi	r2,-1
   479ec:	8dac703a 	and	r22,r17,r22
   479f0:	20820026 	beq	r4,r2,481f4 <___vfprintf_internal_r+0x1eb0>
   479f4:	008011c4 	movi	r2,71
   479f8:	b081f726 	beq	r22,r2,481d8 <___vfprintf_internal_r+0x1e94>
   479fc:	d9003817 	ldw	r4,224(sp)
   47a00:	90c04014 	ori	r3,r18,256
   47a04:	d8c02b15 	stw	r3,172(sp)
   47a08:	20021516 	blt	r4,zero,48260 <___vfprintf_internal_r+0x1f1c>
   47a0c:	dcc03817 	ldw	r19,224(sp)
   47a10:	d8002a05 	stb	zero,168(sp)
   47a14:	00801984 	movi	r2,102
   47a18:	8881f926 	beq	r17,r2,48200 <___vfprintf_internal_r+0x1ebc>
   47a1c:	00801184 	movi	r2,70
   47a20:	88821c26 	beq	r17,r2,48294 <___vfprintf_internal_r+0x1f50>
   47a24:	00801144 	movi	r2,69
   47a28:	b081ef26 	beq	r22,r2,481e8 <___vfprintf_internal_r+0x1ea4>
   47a2c:	d8c02917 	ldw	r3,164(sp)
   47a30:	d8802104 	addi	r2,sp,132
   47a34:	d8800315 	stw	r2,12(sp)
   47a38:	d9403617 	ldw	r5,216(sp)
   47a3c:	d8802504 	addi	r2,sp,148
   47a40:	d9002c17 	ldw	r4,176(sp)
   47a44:	d8800215 	stw	r2,8(sp)
   47a48:	d8802604 	addi	r2,sp,152
   47a4c:	d8c00015 	stw	r3,0(sp)
   47a50:	d8800115 	stw	r2,4(sp)
   47a54:	01c00084 	movi	r7,2
   47a58:	980d883a 	mov	r6,r19
   47a5c:	d8c03c15 	stw	r3,240(sp)
   47a60:	da003d15 	stw	r8,244(sp)
   47a64:	0048a8c0 	call	48a8c <_dtoa_r>
   47a68:	1021883a 	mov	r16,r2
   47a6c:	008019c4 	movi	r2,103
   47a70:	d8c03c17 	ldw	r3,240(sp)
   47a74:	da003d17 	ldw	r8,244(sp)
   47a78:	88817126 	beq	r17,r2,48040 <___vfprintf_internal_r+0x1cfc>
   47a7c:	008011c4 	movi	r2,71
   47a80:	88829226 	beq	r17,r2,484cc <___vfprintf_internal_r+0x2188>
   47a84:	80f9883a 	add	fp,r16,r3
   47a88:	d9003617 	ldw	r4,216(sp)
   47a8c:	000d883a 	mov	r6,zero
   47a90:	000f883a 	mov	r7,zero
   47a94:	980b883a 	mov	r5,r19
   47a98:	da003d15 	stw	r8,244(sp)
   47a9c:	00517a00 	call	517a0 <__eqdf2>
   47aa0:	da003d17 	ldw	r8,244(sp)
   47aa4:	10018d26 	beq	r2,zero,480dc <___vfprintf_internal_r+0x1d98>
   47aa8:	d8802117 	ldw	r2,132(sp)
   47aac:	1700062e 	bgeu	r2,fp,47ac8 <___vfprintf_internal_r+0x1784>
   47ab0:	01000c04 	movi	r4,48
   47ab4:	10c00044 	addi	r3,r2,1
   47ab8:	d8c02115 	stw	r3,132(sp)
   47abc:	11000005 	stb	r4,0(r2)
   47ac0:	d8802117 	ldw	r2,132(sp)
   47ac4:	173ffb36 	bltu	r2,fp,47ab4 <__alt_data_end+0xfffc92b4>
   47ac8:	1405c83a 	sub	r2,r2,r16
   47acc:	d8803315 	stw	r2,204(sp)
   47ad0:	008011c4 	movi	r2,71
   47ad4:	b0817626 	beq	r22,r2,480b0 <___vfprintf_internal_r+0x1d6c>
   47ad8:	00801944 	movi	r2,101
   47adc:	1442810e 	bge	r2,r17,484e4 <___vfprintf_internal_r+0x21a0>
   47ae0:	d8c02617 	ldw	r3,152(sp)
   47ae4:	00801984 	movi	r2,102
   47ae8:	d8c03215 	stw	r3,200(sp)
   47aec:	8881fe26 	beq	r17,r2,482e8 <___vfprintf_internal_r+0x1fa4>
   47af0:	d8c03217 	ldw	r3,200(sp)
   47af4:	d9003317 	ldw	r4,204(sp)
   47af8:	1901dd16 	blt	r3,r4,48270 <___vfprintf_internal_r+0x1f2c>
   47afc:	9480004c 	andi	r18,r18,1
   47b00:	90022b1e 	bne	r18,zero,483b0 <___vfprintf_internal_r+0x206c>
   47b04:	1805883a 	mov	r2,r3
   47b08:	18028016 	blt	r3,zero,4850c <___vfprintf_internal_r+0x21c8>
   47b0c:	d8c03217 	ldw	r3,200(sp)
   47b10:	044019c4 	movi	r17,103
   47b14:	d8c02e15 	stw	r3,184(sp)
   47b18:	df002a07 	ldb	fp,168(sp)
   47b1c:	e001531e 	bne	fp,zero,4806c <___vfprintf_internal_r+0x1d28>
   47b20:	df002783 	ldbu	fp,158(sp)
   47b24:	d8802a15 	stw	r2,168(sp)
   47b28:	dc802b17 	ldw	r18,172(sp)
   47b2c:	d8002915 	stw	zero,164(sp)
   47b30:	003bd106 	br	46a78 <__alt_data_end+0xfffc8278>
   47b34:	d8802d17 	ldw	r2,180(sp)
   47b38:	d8c02d17 	ldw	r3,180(sp)
   47b3c:	d9002d17 	ldw	r4,180(sp)
   47b40:	10800017 	ldw	r2,0(r2)
   47b44:	18c00117 	ldw	r3,4(r3)
   47b48:	21000204 	addi	r4,r4,8
   47b4c:	d8803615 	stw	r2,216(sp)
   47b50:	d8c03815 	stw	r3,224(sp)
   47b54:	d9002d15 	stw	r4,180(sp)
   47b58:	003b7506 	br	46930 <__alt_data_end+0xfffc8130>
   47b5c:	ac400007 	ldb	r17,0(r21)
   47b60:	003a5906 	br	464c8 <__alt_data_end+0xfffc7cc8>
   47b64:	9080100c 	andi	r2,r18,64
   47b68:	1000a826 	beq	r2,zero,47e0c <___vfprintf_internal_r+0x1ac8>
   47b6c:	d9002d17 	ldw	r4,180(sp)
   47b70:	002d883a 	mov	r22,zero
   47b74:	24c0000b 	ldhu	r19,0(r4)
   47b78:	21000104 	addi	r4,r4,4
   47b7c:	d9002d15 	stw	r4,180(sp)
   47b80:	003ccb06 	br	46eb0 <__alt_data_end+0xfffc86b0>
   47b84:	d8c02d17 	ldw	r3,180(sp)
   47b88:	d9002917 	ldw	r4,164(sp)
   47b8c:	002d883a 	mov	r22,zero
   47b90:	18800104 	addi	r2,r3,4
   47b94:	1cc00017 	ldw	r19,0(r3)
   47b98:	203ebb0e 	bge	r4,zero,47688 <__alt_data_end+0xfffc8e88>
   47b9c:	003ef106 	br	47764 <__alt_data_end+0xfffc8f64>
   47ba0:	9080040c 	andi	r2,r18,16
   47ba4:	1000921e 	bne	r2,zero,47df0 <___vfprintf_internal_r+0x1aac>
   47ba8:	9480100c 	andi	r18,r18,64
   47bac:	90013926 	beq	r18,zero,48094 <___vfprintf_internal_r+0x1d50>
   47bb0:	d9002d17 	ldw	r4,180(sp)
   47bb4:	d9402f17 	ldw	r5,188(sp)
   47bb8:	20800017 	ldw	r2,0(r4)
   47bbc:	21000104 	addi	r4,r4,4
   47bc0:	d9002d15 	stw	r4,180(sp)
   47bc4:	1140000d 	sth	r5,0(r2)
   47bc8:	003a1606 	br	46424 <__alt_data_end+0xfffc7c24>
   47bcc:	9080100c 	andi	r2,r18,64
   47bd0:	10008026 	beq	r2,zero,47dd4 <___vfprintf_internal_r+0x1a90>
   47bd4:	d8c02d17 	ldw	r3,180(sp)
   47bd8:	1cc0000f 	ldh	r19,0(r3)
   47bdc:	18c00104 	addi	r3,r3,4
   47be0:	d8c02d15 	stw	r3,180(sp)
   47be4:	982dd7fa 	srai	r22,r19,31
   47be8:	b005883a 	mov	r2,r22
   47bec:	003b1f06 	br	4686c <__alt_data_end+0xfffc806c>
   47bf0:	9080100c 	andi	r2,r18,64
   47bf4:	d8002785 	stb	zero,158(sp)
   47bf8:	10008a1e 	bne	r2,zero,47e24 <___vfprintf_internal_r+0x1ae0>
   47bfc:	d9402d17 	ldw	r5,180(sp)
   47c00:	d8c02917 	ldw	r3,164(sp)
   47c04:	002d883a 	mov	r22,zero
   47c08:	28800104 	addi	r2,r5,4
   47c0c:	2cc00017 	ldw	r19,0(r5)
   47c10:	183e4b0e 	bge	r3,zero,47540 <__alt_data_end+0xfffc8d40>
   47c14:	9d86b03a 	or	r3,r19,r22
   47c18:	d8802d15 	stw	r2,180(sp)
   47c1c:	183e4c1e 	bne	r3,zero,47550 <__alt_data_end+0xfffc8d50>
   47c20:	0039883a 	mov	fp,zero
   47c24:	0005883a 	mov	r2,zero
   47c28:	003d4006 	br	4712c <__alt_data_end+0xfffc892c>
   47c2c:	01400174 	movhi	r5,5
   47c30:	29575384 	addi	r5,r5,23886
   47c34:	d9402b15 	stw	r5,172(sp)
   47c38:	d9402b17 	ldw	r5,172(sp)
   47c3c:	1c47883a 	add	r3,r3,r17
   47c40:	10800044 	addi	r2,r2,1
   47c44:	41400015 	stw	r5,0(r8)
   47c48:	44400115 	stw	r17,4(r8)
   47c4c:	d8c02015 	stw	r3,128(sp)
   47c50:	d8801f15 	stw	r2,124(sp)
   47c54:	010001c4 	movi	r4,7
   47c58:	20bec816 	blt	r4,r2,4777c <__alt_data_end+0xfffc8f7c>
   47c5c:	42000204 	addi	r8,r8,8
   47c60:	003ecd06 	br	47798 <__alt_data_end+0xfffc8f98>
   47c64:	d9002917 	ldw	r4,164(sp)
   47c68:	d8002785 	stb	zero,158(sp)
   47c6c:	203d2d16 	blt	r4,zero,47124 <__alt_data_end+0xfffc8924>
   47c70:	00bfdfc4 	movi	r2,-129
   47c74:	90a4703a 	and	r18,r18,r2
   47c78:	003a9106 	br	466c0 <__alt_data_end+0xfffc7ec0>
   47c7c:	01000174 	movhi	r4,5
   47c80:	21175384 	addi	r4,r4,23886
   47c84:	d9002b15 	stw	r4,172(sp)
   47c88:	003c0c06 	br	46cbc <__alt_data_end+0xfffc84bc>
   47c8c:	d9002c17 	ldw	r4,176(sp)
   47c90:	d9801e04 	addi	r6,sp,120
   47c94:	b80b883a 	mov	r5,r23
   47c98:	004ee700 	call	4ee70 <__sprint_r>
   47c9c:	103aab1e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   47ca0:	d8c02017 	ldw	r3,128(sp)
   47ca4:	da000404 	addi	r8,sp,16
   47ca8:	003d4106 	br	471b0 <__alt_data_end+0xfffc89b0>
   47cac:	d8801f17 	ldw	r2,124(sp)
   47cb0:	01400174 	movhi	r5,5
   47cb4:	01000044 	movi	r4,1
   47cb8:	18c00044 	addi	r3,r3,1
   47cbc:	10800044 	addi	r2,r2,1
   47cc0:	29574b04 	addi	r5,r5,23852
   47cc4:	41000115 	stw	r4,4(r8)
   47cc8:	41400015 	stw	r5,0(r8)
   47ccc:	d8c02015 	stw	r3,128(sp)
   47cd0:	d8801f15 	stw	r2,124(sp)
   47cd4:	010001c4 	movi	r4,7
   47cd8:	20805c16 	blt	r4,r2,47e4c <___vfprintf_internal_r+0x1b08>
   47cdc:	42000204 	addi	r8,r8,8
   47ce0:	8800041e 	bne	r17,zero,47cf4 <___vfprintf_internal_r+0x19b0>
   47ce4:	d8803317 	ldw	r2,204(sp)
   47ce8:	1000021e 	bne	r2,zero,47cf4 <___vfprintf_internal_r+0x19b0>
   47cec:	9080004c 	andi	r2,r18,1
   47cf0:	103c0926 	beq	r2,zero,46d18 <__alt_data_end+0xfffc8518>
   47cf4:	d9003717 	ldw	r4,220(sp)
   47cf8:	d8801f17 	ldw	r2,124(sp)
   47cfc:	d9403417 	ldw	r5,208(sp)
   47d00:	20c7883a 	add	r3,r4,r3
   47d04:	10800044 	addi	r2,r2,1
   47d08:	41000115 	stw	r4,4(r8)
   47d0c:	41400015 	stw	r5,0(r8)
   47d10:	d8c02015 	stw	r3,128(sp)
   47d14:	d8801f15 	stw	r2,124(sp)
   47d18:	010001c4 	movi	r4,7
   47d1c:	20812116 	blt	r4,r2,481a4 <___vfprintf_internal_r+0x1e60>
   47d20:	42000204 	addi	r8,r8,8
   47d24:	0463c83a 	sub	r17,zero,r17
   47d28:	0440730e 	bge	zero,r17,47ef8 <___vfprintf_internal_r+0x1bb4>
   47d2c:	05800404 	movi	r22,16
   47d30:	b440860e 	bge	r22,r17,47f4c <___vfprintf_internal_r+0x1c08>
   47d34:	01400174 	movhi	r5,5
   47d38:	29575384 	addi	r5,r5,23886
   47d3c:	d9402b15 	stw	r5,172(sp)
   47d40:	070001c4 	movi	fp,7
   47d44:	dcc02c17 	ldw	r19,176(sp)
   47d48:	00000306 	br	47d58 <___vfprintf_internal_r+0x1a14>
   47d4c:	42000204 	addi	r8,r8,8
   47d50:	8c7ffc04 	addi	r17,r17,-16
   47d54:	b440800e 	bge	r22,r17,47f58 <___vfprintf_internal_r+0x1c14>
   47d58:	18c00404 	addi	r3,r3,16
   47d5c:	10800044 	addi	r2,r2,1
   47d60:	45000015 	stw	r20,0(r8)
   47d64:	45800115 	stw	r22,4(r8)
   47d68:	d8c02015 	stw	r3,128(sp)
   47d6c:	d8801f15 	stw	r2,124(sp)
   47d70:	e0bff60e 	bge	fp,r2,47d4c <__alt_data_end+0xfffc954c>
   47d74:	d9801e04 	addi	r6,sp,120
   47d78:	b80b883a 	mov	r5,r23
   47d7c:	9809883a 	mov	r4,r19
   47d80:	004ee700 	call	4ee70 <__sprint_r>
   47d84:	103a711e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   47d88:	d8c02017 	ldw	r3,128(sp)
   47d8c:	d8801f17 	ldw	r2,124(sp)
   47d90:	da000404 	addi	r8,sp,16
   47d94:	003fee06 	br	47d50 <__alt_data_end+0xfffc9550>
   47d98:	00bfffc4 	movi	r2,-1
   47d9c:	003a6f06 	br	4675c <__alt_data_end+0xfffc7f5c>
   47da0:	008011c4 	movi	r2,71
   47da4:	1440b816 	blt	r2,r17,48088 <___vfprintf_internal_r+0x1d44>
   47da8:	04000174 	movhi	r16,5
   47dac:	84173d04 	addi	r16,r16,23796
   47db0:	00c000c4 	movi	r3,3
   47db4:	00bfdfc4 	movi	r2,-129
   47db8:	d8c02a15 	stw	r3,168(sp)
   47dbc:	90a4703a 	and	r18,r18,r2
   47dc0:	df002783 	ldbu	fp,158(sp)
   47dc4:	d8c02e15 	stw	r3,184(sp)
   47dc8:	d8002915 	stw	zero,164(sp)
   47dcc:	d8003215 	stw	zero,200(sp)
   47dd0:	003b2906 	br	46a78 <__alt_data_end+0xfffc8278>
   47dd4:	d9002d17 	ldw	r4,180(sp)
   47dd8:	24c00017 	ldw	r19,0(r4)
   47ddc:	21000104 	addi	r4,r4,4
   47de0:	d9002d15 	stw	r4,180(sp)
   47de4:	982dd7fa 	srai	r22,r19,31
   47de8:	b005883a 	mov	r2,r22
   47dec:	003a9f06 	br	4686c <__alt_data_end+0xfffc806c>
   47df0:	d9402d17 	ldw	r5,180(sp)
   47df4:	d8c02f17 	ldw	r3,188(sp)
   47df8:	28800017 	ldw	r2,0(r5)
   47dfc:	29400104 	addi	r5,r5,4
   47e00:	d9402d15 	stw	r5,180(sp)
   47e04:	10c00015 	stw	r3,0(r2)
   47e08:	00398606 	br	46424 <__alt_data_end+0xfffc7c24>
   47e0c:	d9402d17 	ldw	r5,180(sp)
   47e10:	002d883a 	mov	r22,zero
   47e14:	2cc00017 	ldw	r19,0(r5)
   47e18:	29400104 	addi	r5,r5,4
   47e1c:	d9402d15 	stw	r5,180(sp)
   47e20:	003c2306 	br	46eb0 <__alt_data_end+0xfffc86b0>
   47e24:	d8c02d17 	ldw	r3,180(sp)
   47e28:	d9002917 	ldw	r4,164(sp)
   47e2c:	002d883a 	mov	r22,zero
   47e30:	18800104 	addi	r2,r3,4
   47e34:	1cc0000b 	ldhu	r19,0(r3)
   47e38:	203dc10e 	bge	r4,zero,47540 <__alt_data_end+0xfffc8d40>
   47e3c:	003f7506 	br	47c14 <__alt_data_end+0xfffc9414>
   47e40:	04000174 	movhi	r16,5
   47e44:	84173b04 	addi	r16,r16,23788
   47e48:	003acc06 	br	4697c <__alt_data_end+0xfffc817c>
   47e4c:	d9002c17 	ldw	r4,176(sp)
   47e50:	d9801e04 	addi	r6,sp,120
   47e54:	b80b883a 	mov	r5,r23
   47e58:	004ee700 	call	4ee70 <__sprint_r>
   47e5c:	103a3b1e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   47e60:	dc402617 	ldw	r17,152(sp)
   47e64:	d8c02017 	ldw	r3,128(sp)
   47e68:	da000404 	addi	r8,sp,16
   47e6c:	003f9c06 	br	47ce0 <__alt_data_end+0xfffc94e0>
   47e70:	ac400043 	ldbu	r17,1(r21)
   47e74:	94800814 	ori	r18,r18,32
   47e78:	ad400044 	addi	r21,r21,1
   47e7c:	8c403fcc 	andi	r17,r17,255
   47e80:	8c40201c 	xori	r17,r17,128
   47e84:	8c7fe004 	addi	r17,r17,-128
   47e88:	00398f06 	br	464c8 <__alt_data_end+0xfffc7cc8>
   47e8c:	d8c02d15 	stw	r3,180(sp)
   47e90:	0039883a 	mov	fp,zero
   47e94:	003e3506 	br	4776c <__alt_data_end+0xfffc8f6c>
   47e98:	d9002c17 	ldw	r4,176(sp)
   47e9c:	d9801e04 	addi	r6,sp,120
   47ea0:	b80b883a 	mov	r5,r23
   47ea4:	004ee700 	call	4ee70 <__sprint_r>
   47ea8:	103a281e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   47eac:	d8c02017 	ldw	r3,128(sp)
   47eb0:	da000404 	addi	r8,sp,16
   47eb4:	003cd006 	br	471f8 <__alt_data_end+0xfffc89f8>
   47eb8:	8009883a 	mov	r4,r16
   47ebc:	da003d15 	stw	r8,244(sp)
   47ec0:	00440d40 	call	440d4 <strlen>
   47ec4:	d8802e15 	stw	r2,184(sp)
   47ec8:	da003d17 	ldw	r8,244(sp)
   47ecc:	103c340e 	bge	r2,zero,46fa0 <__alt_data_end+0xfffc87a0>
   47ed0:	0005883a 	mov	r2,zero
   47ed4:	003c3206 	br	46fa0 <__alt_data_end+0xfffc87a0>
   47ed8:	d9002c17 	ldw	r4,176(sp)
   47edc:	d9801e04 	addi	r6,sp,120
   47ee0:	b80b883a 	mov	r5,r23
   47ee4:	004ee700 	call	4ee70 <__sprint_r>
   47ee8:	103a181e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   47eec:	d8c02017 	ldw	r3,128(sp)
   47ef0:	d8801f17 	ldw	r2,124(sp)
   47ef4:	da000404 	addi	r8,sp,16
   47ef8:	d9403317 	ldw	r5,204(sp)
   47efc:	10800044 	addi	r2,r2,1
   47f00:	44000015 	stw	r16,0(r8)
   47f04:	28c7883a 	add	r3,r5,r3
   47f08:	003b7d06 	br	46d00 <__alt_data_end+0xfffc8500>
   47f0c:	01000174 	movhi	r4,5
   47f10:	21175784 	addi	r4,r4,23902
   47f14:	d9003515 	stw	r4,212(sp)
   47f18:	003b1406 	br	46b6c <__alt_data_end+0xfffc836c>
   47f1c:	013fffc4 	movi	r4,-1
   47f20:	003a3506 	br	467f8 <__alt_data_end+0xfffc7ff8>
   47f24:	0023883a 	mov	r17,zero
   47f28:	003d9d06 	br	475a0 <__alt_data_end+0xfffc8da0>
   47f2c:	d9002c17 	ldw	r4,176(sp)
   47f30:	d9801e04 	addi	r6,sp,120
   47f34:	b80b883a 	mov	r5,r23
   47f38:	004ee700 	call	4ee70 <__sprint_r>
   47f3c:	103a031e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   47f40:	d8c02017 	ldw	r3,128(sp)
   47f44:	da000404 	addi	r8,sp,16
   47f48:	003d9406 	br	4759c <__alt_data_end+0xfffc8d9c>
   47f4c:	01000174 	movhi	r4,5
   47f50:	21175384 	addi	r4,r4,23886
   47f54:	d9002b15 	stw	r4,172(sp)
   47f58:	d9002b17 	ldw	r4,172(sp)
   47f5c:	1c47883a 	add	r3,r3,r17
   47f60:	10800044 	addi	r2,r2,1
   47f64:	41000015 	stw	r4,0(r8)
   47f68:	44400115 	stw	r17,4(r8)
   47f6c:	d8c02015 	stw	r3,128(sp)
   47f70:	d8801f15 	stw	r2,124(sp)
   47f74:	010001c4 	movi	r4,7
   47f78:	20bfd716 	blt	r4,r2,47ed8 <__alt_data_end+0xfffc96d8>
   47f7c:	42000204 	addi	r8,r8,8
   47f80:	003fdd06 	br	47ef8 <__alt_data_end+0xfffc96f8>
   47f84:	d9002c17 	ldw	r4,176(sp)
   47f88:	d9801e04 	addi	r6,sp,120
   47f8c:	b80b883a 	mov	r5,r23
   47f90:	004ee700 	call	4ee70 <__sprint_r>
   47f94:	1039ed1e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   47f98:	d8802617 	ldw	r2,152(sp)
   47f9c:	d8c02017 	ldw	r3,128(sp)
   47fa0:	da000404 	addi	r8,sp,16
   47fa4:	003e1006 	br	477e8 <__alt_data_end+0xfffc8fe8>
   47fa8:	00800044 	movi	r2,1
   47fac:	10803fcc 	andi	r2,r2,255
   47fb0:	00c00044 	movi	r3,1
   47fb4:	10fa3526 	beq	r2,r3,4688c <__alt_data_end+0xfffc808c>
   47fb8:	00c00084 	movi	r3,2
   47fbc:	10fbcb26 	beq	r2,r3,46eec <__alt_data_end+0xfffc86ec>
   47fc0:	003a8f06 	br	46a00 <__alt_data_end+0xfffc8200>
   47fc4:	01000174 	movhi	r4,5
   47fc8:	21175784 	addi	r4,r4,23902
   47fcc:	d9003515 	stw	r4,212(sp)
   47fd0:	003b7606 	br	46dac <__alt_data_end+0xfffc85ac>
   47fd4:	d8802917 	ldw	r2,164(sp)
   47fd8:	00c00184 	movi	r3,6
   47fdc:	1880012e 	bgeu	r3,r2,47fe4 <___vfprintf_internal_r+0x1ca0>
   47fe0:	1805883a 	mov	r2,r3
   47fe4:	d8802e15 	stw	r2,184(sp)
   47fe8:	1000ef16 	blt	r2,zero,483a8 <___vfprintf_internal_r+0x2064>
   47fec:	04000174 	movhi	r16,5
   47ff0:	d8802a15 	stw	r2,168(sp)
   47ff4:	dcc02d15 	stw	r19,180(sp)
   47ff8:	d8002915 	stw	zero,164(sp)
   47ffc:	d8003215 	stw	zero,200(sp)
   48000:	84174904 	addi	r16,r16,23844
   48004:	0039883a 	mov	fp,zero
   48008:	003aa206 	br	46a94 <__alt_data_end+0xfffc8294>
   4800c:	0021883a 	mov	r16,zero
   48010:	003e0706 	br	47830 <__alt_data_end+0xfffc9030>
   48014:	d9002c17 	ldw	r4,176(sp)
   48018:	d9801e04 	addi	r6,sp,120
   4801c:	b80b883a 	mov	r5,r23
   48020:	004ee700 	call	4ee70 <__sprint_r>
   48024:	1039c91e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   48028:	d8802617 	ldw	r2,152(sp)
   4802c:	d9403317 	ldw	r5,204(sp)
   48030:	d8c02017 	ldw	r3,128(sp)
   48034:	da000404 	addi	r8,sp,16
   48038:	2885c83a 	sub	r2,r5,r2
   4803c:	003dfb06 	br	4782c <__alt_data_end+0xfffc902c>
   48040:	9080004c 	andi	r2,r18,1
   48044:	103e8f1e 	bne	r2,zero,47a84 <__alt_data_end+0xfffc9284>
   48048:	d8802117 	ldw	r2,132(sp)
   4804c:	003e9e06 	br	47ac8 <__alt_data_end+0xfffc92c8>
   48050:	1025883a 	mov	r18,r2
   48054:	0039883a 	mov	fp,zero
   48058:	00800084 	movi	r2,2
   4805c:	003fd306 	br	47fac <__alt_data_end+0xfffc97ac>
   48060:	07000b44 	movi	fp,45
   48064:	df002785 	stb	fp,158(sp)
   48068:	003a4006 	br	4696c <__alt_data_end+0xfffc816c>
   4806c:	00c00b44 	movi	r3,45
   48070:	d8c02785 	stb	r3,158(sp)
   48074:	d8802a15 	stw	r2,168(sp)
   48078:	dc802b17 	ldw	r18,172(sp)
   4807c:	d8002915 	stw	zero,164(sp)
   48080:	07000b44 	movi	fp,45
   48084:	003a8006 	br	46a88 <__alt_data_end+0xfffc8288>
   48088:	04000174 	movhi	r16,5
   4808c:	84173e04 	addi	r16,r16,23800
   48090:	003f4706 	br	47db0 <__alt_data_end+0xfffc95b0>
   48094:	d8c02d17 	ldw	r3,180(sp)
   48098:	d9002f17 	ldw	r4,188(sp)
   4809c:	18800017 	ldw	r2,0(r3)
   480a0:	18c00104 	addi	r3,r3,4
   480a4:	d8c02d15 	stw	r3,180(sp)
   480a8:	11000015 	stw	r4,0(r2)
   480ac:	0038dd06 	br	46424 <__alt_data_end+0xfffc7c24>
   480b0:	dd802617 	ldw	r22,152(sp)
   480b4:	00bfff44 	movi	r2,-3
   480b8:	b0801c16 	blt	r22,r2,4812c <___vfprintf_internal_r+0x1de8>
   480bc:	d9402917 	ldw	r5,164(sp)
   480c0:	2d801a16 	blt	r5,r22,4812c <___vfprintf_internal_r+0x1de8>
   480c4:	dd803215 	stw	r22,200(sp)
   480c8:	003e8906 	br	47af0 <__alt_data_end+0xfffc92f0>
   480cc:	01000174 	movhi	r4,5
   480d0:	21175384 	addi	r4,r4,23886
   480d4:	d9002b15 	stw	r4,172(sp)
   480d8:	003c9106 	br	47320 <__alt_data_end+0xfffc8b20>
   480dc:	e005883a 	mov	r2,fp
   480e0:	003e7906 	br	47ac8 <__alt_data_end+0xfffc92c8>
   480e4:	d9402917 	ldw	r5,164(sp)
   480e8:	df002783 	ldbu	fp,158(sp)
   480ec:	dcc02d15 	stw	r19,180(sp)
   480f0:	d9402a15 	stw	r5,168(sp)
   480f4:	d9402e15 	stw	r5,184(sp)
   480f8:	d8002915 	stw	zero,164(sp)
   480fc:	d8003215 	stw	zero,200(sp)
   48100:	003a5d06 	br	46a78 <__alt_data_end+0xfffc8278>
   48104:	9080004c 	andi	r2,r18,1
   48108:	0039883a 	mov	fp,zero
   4810c:	10000426 	beq	r2,zero,48120 <___vfprintf_internal_r+0x1ddc>
   48110:	00800c04 	movi	r2,48
   48114:	dc001dc4 	addi	r16,sp,119
   48118:	d8801dc5 	stb	r2,119(sp)
   4811c:	003b8006 	br	46f20 <__alt_data_end+0xfffc8720>
   48120:	d8002e15 	stw	zero,184(sp)
   48124:	dc001e04 	addi	r16,sp,120
   48128:	003a4d06 	br	46a60 <__alt_data_end+0xfffc8260>
   4812c:	8c7fff84 	addi	r17,r17,-2
   48130:	b5bfffc4 	addi	r22,r22,-1
   48134:	dd802615 	stw	r22,152(sp)
   48138:	dc4022c5 	stb	r17,139(sp)
   4813c:	b000bf16 	blt	r22,zero,4843c <___vfprintf_internal_r+0x20f8>
   48140:	00800ac4 	movi	r2,43
   48144:	d8802305 	stb	r2,140(sp)
   48148:	00800244 	movi	r2,9
   4814c:	15807016 	blt	r2,r22,48310 <___vfprintf_internal_r+0x1fcc>
   48150:	00800c04 	movi	r2,48
   48154:	b5800c04 	addi	r22,r22,48
   48158:	d8802345 	stb	r2,141(sp)
   4815c:	dd802385 	stb	r22,142(sp)
   48160:	d88023c4 	addi	r2,sp,143
   48164:	df0022c4 	addi	fp,sp,139
   48168:	d8c03317 	ldw	r3,204(sp)
   4816c:	1739c83a 	sub	fp,r2,fp
   48170:	d9003317 	ldw	r4,204(sp)
   48174:	e0c7883a 	add	r3,fp,r3
   48178:	df003a15 	stw	fp,232(sp)
   4817c:	d8c02e15 	stw	r3,184(sp)
   48180:	00800044 	movi	r2,1
   48184:	1100b30e 	bge	r2,r4,48454 <___vfprintf_internal_r+0x2110>
   48188:	d8c02e17 	ldw	r3,184(sp)
   4818c:	18c00044 	addi	r3,r3,1
   48190:	d8c02e15 	stw	r3,184(sp)
   48194:	1805883a 	mov	r2,r3
   48198:	1800ac16 	blt	r3,zero,4844c <___vfprintf_internal_r+0x2108>
   4819c:	d8003215 	stw	zero,200(sp)
   481a0:	003e5d06 	br	47b18 <__alt_data_end+0xfffc9318>
   481a4:	d9002c17 	ldw	r4,176(sp)
   481a8:	d9801e04 	addi	r6,sp,120
   481ac:	b80b883a 	mov	r5,r23
   481b0:	004ee700 	call	4ee70 <__sprint_r>
   481b4:	1039651e 	bne	r2,zero,4674c <__alt_data_end+0xfffc7f4c>
   481b8:	dc402617 	ldw	r17,152(sp)
   481bc:	d8c02017 	ldw	r3,128(sp)
   481c0:	d8801f17 	ldw	r2,124(sp)
   481c4:	da000404 	addi	r8,sp,16
   481c8:	003ed606 	br	47d24 <__alt_data_end+0xfffc9524>
   481cc:	582b883a 	mov	r21,r11
   481d0:	d8002915 	stw	zero,164(sp)
   481d4:	0038bd06 	br	464cc <__alt_data_end+0xfffc7ccc>
   481d8:	d8802917 	ldw	r2,164(sp)
   481dc:	103e071e 	bne	r2,zero,479fc <__alt_data_end+0xfffc91fc>
   481e0:	dc002915 	stw	r16,164(sp)
   481e4:	003e0506 	br	479fc <__alt_data_end+0xfffc91fc>
   481e8:	d9002917 	ldw	r4,164(sp)
   481ec:	20c00044 	addi	r3,r4,1
   481f0:	003e0f06 	br	47a30 <__alt_data_end+0xfffc9230>
   481f4:	01400184 	movi	r5,6
   481f8:	d9402915 	stw	r5,164(sp)
   481fc:	003dff06 	br	479fc <__alt_data_end+0xfffc91fc>
   48200:	d8802104 	addi	r2,sp,132
   48204:	d8800315 	stw	r2,12(sp)
   48208:	d8802504 	addi	r2,sp,148
   4820c:	d8800215 	stw	r2,8(sp)
   48210:	d8802604 	addi	r2,sp,152
   48214:	d8800115 	stw	r2,4(sp)
   48218:	d8802917 	ldw	r2,164(sp)
   4821c:	d9403617 	ldw	r5,216(sp)
   48220:	d9002c17 	ldw	r4,176(sp)
   48224:	d8800015 	stw	r2,0(sp)
   48228:	01c000c4 	movi	r7,3
   4822c:	980d883a 	mov	r6,r19
   48230:	da003d15 	stw	r8,244(sp)
   48234:	0048a8c0 	call	48a8c <_dtoa_r>
   48238:	d8c02917 	ldw	r3,164(sp)
   4823c:	da003d17 	ldw	r8,244(sp)
   48240:	1021883a 	mov	r16,r2
   48244:	10f9883a 	add	fp,r2,r3
   48248:	81000007 	ldb	r4,0(r16)
   4824c:	00800c04 	movi	r2,48
   48250:	20805e26 	beq	r4,r2,483cc <___vfprintf_internal_r+0x2088>
   48254:	d8c02617 	ldw	r3,152(sp)
   48258:	e0f9883a 	add	fp,fp,r3
   4825c:	003e0a06 	br	47a88 <__alt_data_end+0xfffc9288>
   48260:	00c00b44 	movi	r3,45
   48264:	24e0003c 	xorhi	r19,r4,32768
   48268:	d8c02a05 	stb	r3,168(sp)
   4826c:	003de906 	br	47a14 <__alt_data_end+0xfffc9214>
   48270:	d8c03217 	ldw	r3,200(sp)
   48274:	00c07a0e 	bge	zero,r3,48460 <___vfprintf_internal_r+0x211c>
   48278:	00800044 	movi	r2,1
   4827c:	d9003317 	ldw	r4,204(sp)
   48280:	1105883a 	add	r2,r2,r4
   48284:	d8802e15 	stw	r2,184(sp)
   48288:	10004e16 	blt	r2,zero,483c4 <___vfprintf_internal_r+0x2080>
   4828c:	044019c4 	movi	r17,103
   48290:	003e2106 	br	47b18 <__alt_data_end+0xfffc9318>
   48294:	d9002917 	ldw	r4,164(sp)
   48298:	d8802104 	addi	r2,sp,132
   4829c:	d8800315 	stw	r2,12(sp)
   482a0:	d9000015 	stw	r4,0(sp)
   482a4:	d8802504 	addi	r2,sp,148
   482a8:	d9403617 	ldw	r5,216(sp)
   482ac:	d9002c17 	ldw	r4,176(sp)
   482b0:	d8800215 	stw	r2,8(sp)
   482b4:	d8802604 	addi	r2,sp,152
   482b8:	d8800115 	stw	r2,4(sp)
   482bc:	01c000c4 	movi	r7,3
   482c0:	980d883a 	mov	r6,r19
   482c4:	da003d15 	stw	r8,244(sp)
   482c8:	0048a8c0 	call	48a8c <_dtoa_r>
   482cc:	d8c02917 	ldw	r3,164(sp)
   482d0:	da003d17 	ldw	r8,244(sp)
   482d4:	1021883a 	mov	r16,r2
   482d8:	00801184 	movi	r2,70
   482dc:	80f9883a 	add	fp,r16,r3
   482e0:	88bfd926 	beq	r17,r2,48248 <__alt_data_end+0xfffc9a48>
   482e4:	003de806 	br	47a88 <__alt_data_end+0xfffc9288>
   482e8:	d9002917 	ldw	r4,164(sp)
   482ec:	00c04d0e 	bge	zero,r3,48424 <___vfprintf_internal_r+0x20e0>
   482f0:	2000441e 	bne	r4,zero,48404 <___vfprintf_internal_r+0x20c0>
   482f4:	9480004c 	andi	r18,r18,1
   482f8:	9000421e 	bne	r18,zero,48404 <___vfprintf_internal_r+0x20c0>
   482fc:	1805883a 	mov	r2,r3
   48300:	18007016 	blt	r3,zero,484c4 <___vfprintf_internal_r+0x2180>
   48304:	d8c03217 	ldw	r3,200(sp)
   48308:	d8c02e15 	stw	r3,184(sp)
   4830c:	003e0206 	br	47b18 <__alt_data_end+0xfffc9318>
   48310:	df0022c4 	addi	fp,sp,139
   48314:	dc002915 	stw	r16,164(sp)
   48318:	4027883a 	mov	r19,r8
   4831c:	e021883a 	mov	r16,fp
   48320:	b009883a 	mov	r4,r22
   48324:	01400284 	movi	r5,10
   48328:	0043da00 	call	43da0 <__modsi3>
   4832c:	10800c04 	addi	r2,r2,48
   48330:	843fffc4 	addi	r16,r16,-1
   48334:	b009883a 	mov	r4,r22
   48338:	01400284 	movi	r5,10
   4833c:	80800005 	stb	r2,0(r16)
   48340:	0043d1c0 	call	43d1c <__divsi3>
   48344:	102d883a 	mov	r22,r2
   48348:	00800244 	movi	r2,9
   4834c:	15bff416 	blt	r2,r22,48320 <__alt_data_end+0xfffc9b20>
   48350:	9811883a 	mov	r8,r19
   48354:	b0800c04 	addi	r2,r22,48
   48358:	8027883a 	mov	r19,r16
   4835c:	997fffc4 	addi	r5,r19,-1
   48360:	98bfffc5 	stb	r2,-1(r19)
   48364:	dc002917 	ldw	r16,164(sp)
   48368:	2f006a2e 	bgeu	r5,fp,48514 <___vfprintf_internal_r+0x21d0>
   4836c:	d9c02384 	addi	r7,sp,142
   48370:	3ccfc83a 	sub	r7,r7,r19
   48374:	d9002344 	addi	r4,sp,141
   48378:	e1cf883a 	add	r7,fp,r7
   4837c:	00000106 	br	48384 <___vfprintf_internal_r+0x2040>
   48380:	28800003 	ldbu	r2,0(r5)
   48384:	20800005 	stb	r2,0(r4)
   48388:	21000044 	addi	r4,r4,1
   4838c:	29400044 	addi	r5,r5,1
   48390:	393ffb1e 	bne	r7,r4,48380 <__alt_data_end+0xfffc9b80>
   48394:	d8802304 	addi	r2,sp,140
   48398:	14c5c83a 	sub	r2,r2,r19
   4839c:	d8c02344 	addi	r3,sp,141
   483a0:	1885883a 	add	r2,r3,r2
   483a4:	003f7006 	br	48168 <__alt_data_end+0xfffc9968>
   483a8:	0005883a 	mov	r2,zero
   483ac:	003f0f06 	br	47fec <__alt_data_end+0xfffc97ec>
   483b0:	d8c03217 	ldw	r3,200(sp)
   483b4:	18c00044 	addi	r3,r3,1
   483b8:	d8c02e15 	stw	r3,184(sp)
   483bc:	1805883a 	mov	r2,r3
   483c0:	183fb20e 	bge	r3,zero,4828c <__alt_data_end+0xfffc9a8c>
   483c4:	0005883a 	mov	r2,zero
   483c8:	003fb006 	br	4828c <__alt_data_end+0xfffc9a8c>
   483cc:	d9003617 	ldw	r4,216(sp)
   483d0:	000d883a 	mov	r6,zero
   483d4:	000f883a 	mov	r7,zero
   483d8:	980b883a 	mov	r5,r19
   483dc:	d8c03c15 	stw	r3,240(sp)
   483e0:	da003d15 	stw	r8,244(sp)
   483e4:	00517a00 	call	517a0 <__eqdf2>
   483e8:	d8c03c17 	ldw	r3,240(sp)
   483ec:	da003d17 	ldw	r8,244(sp)
   483f0:	103f9826 	beq	r2,zero,48254 <__alt_data_end+0xfffc9a54>
   483f4:	00800044 	movi	r2,1
   483f8:	10c7c83a 	sub	r3,r2,r3
   483fc:	d8c02615 	stw	r3,152(sp)
   48400:	003f9506 	br	48258 <__alt_data_end+0xfffc9a58>
   48404:	d9002917 	ldw	r4,164(sp)
   48408:	d8c03217 	ldw	r3,200(sp)
   4840c:	20800044 	addi	r2,r4,1
   48410:	1885883a 	add	r2,r3,r2
   48414:	d8802e15 	stw	r2,184(sp)
   48418:	103dbf0e 	bge	r2,zero,47b18 <__alt_data_end+0xfffc9318>
   4841c:	0005883a 	mov	r2,zero
   48420:	003dbd06 	br	47b18 <__alt_data_end+0xfffc9318>
   48424:	2000211e 	bne	r4,zero,484ac <___vfprintf_internal_r+0x2168>
   48428:	9480004c 	andi	r18,r18,1
   4842c:	90001f1e 	bne	r18,zero,484ac <___vfprintf_internal_r+0x2168>
   48430:	00800044 	movi	r2,1
   48434:	d8802e15 	stw	r2,184(sp)
   48438:	003db706 	br	47b18 <__alt_data_end+0xfffc9318>
   4843c:	00800b44 	movi	r2,45
   48440:	05adc83a 	sub	r22,zero,r22
   48444:	d8802305 	stb	r2,140(sp)
   48448:	003f3f06 	br	48148 <__alt_data_end+0xfffc9948>
   4844c:	0005883a 	mov	r2,zero
   48450:	003f5206 	br	4819c <__alt_data_end+0xfffc999c>
   48454:	90a4703a 	and	r18,r18,r2
   48458:	903f4e26 	beq	r18,zero,48194 <__alt_data_end+0xfffc9994>
   4845c:	003f4a06 	br	48188 <__alt_data_end+0xfffc9988>
   48460:	00800084 	movi	r2,2
   48464:	10c5c83a 	sub	r2,r2,r3
   48468:	003f8406 	br	4827c <__alt_data_end+0xfffc9a7c>
   4846c:	d8802d17 	ldw	r2,180(sp)
   48470:	d9002d17 	ldw	r4,180(sp)
   48474:	ac400043 	ldbu	r17,1(r21)
   48478:	10800017 	ldw	r2,0(r2)
   4847c:	582b883a 	mov	r21,r11
   48480:	d8802915 	stw	r2,164(sp)
   48484:	20800104 	addi	r2,r4,4
   48488:	d9002917 	ldw	r4,164(sp)
   4848c:	d8802d15 	stw	r2,180(sp)
   48490:	203e7a0e 	bge	r4,zero,47e7c <__alt_data_end+0xfffc967c>
   48494:	8c403fcc 	andi	r17,r17,255
   48498:	00bfffc4 	movi	r2,-1
   4849c:	8c40201c 	xori	r17,r17,128
   484a0:	d8802915 	stw	r2,164(sp)
   484a4:	8c7fe004 	addi	r17,r17,-128
   484a8:	00380706 	br	464c8 <__alt_data_end+0xfffc7cc8>
   484ac:	d8c02917 	ldw	r3,164(sp)
   484b0:	18c00084 	addi	r3,r3,2
   484b4:	d8c02e15 	stw	r3,184(sp)
   484b8:	1805883a 	mov	r2,r3
   484bc:	183d960e 	bge	r3,zero,47b18 <__alt_data_end+0xfffc9318>
   484c0:	003fd606 	br	4841c <__alt_data_end+0xfffc9c1c>
   484c4:	0005883a 	mov	r2,zero
   484c8:	003f8e06 	br	48304 <__alt_data_end+0xfffc9b04>
   484cc:	9080004c 	andi	r2,r18,1
   484d0:	103f811e 	bne	r2,zero,482d8 <__alt_data_end+0xfffc9ad8>
   484d4:	d8802117 	ldw	r2,132(sp)
   484d8:	1405c83a 	sub	r2,r2,r16
   484dc:	d8803315 	stw	r2,204(sp)
   484e0:	b47ef326 	beq	r22,r17,480b0 <__alt_data_end+0xfffc98b0>
   484e4:	dd802617 	ldw	r22,152(sp)
   484e8:	003f1106 	br	48130 <__alt_data_end+0xfffc9930>
   484ec:	d9c02785 	stb	r7,158(sp)
   484f0:	00390406 	br	46904 <__alt_data_end+0xfffc8104>
   484f4:	d9c02785 	stb	r7,158(sp)
   484f8:	0038d306 	br	46848 <__alt_data_end+0xfffc8048>
   484fc:	d9c02785 	stb	r7,158(sp)
   48500:	003a6106 	br	46e88 <__alt_data_end+0xfffc8688>
   48504:	d9c02785 	stb	r7,158(sp)
   48508:	003af806 	br	470ec <__alt_data_end+0xfffc88ec>
   4850c:	0005883a 	mov	r2,zero
   48510:	003d7e06 	br	47b0c <__alt_data_end+0xfffc930c>
   48514:	d8802344 	addi	r2,sp,141
   48518:	003f1306 	br	48168 <__alt_data_end+0xfffc9968>
   4851c:	d9c02785 	stb	r7,158(sp)
   48520:	00392306 	br	469b0 <__alt_data_end+0xfffc81b0>
   48524:	d9c02785 	stb	r7,158(sp)
   48528:	003aa906 	br	46fd0 <__alt_data_end+0xfffc87d0>
   4852c:	d9c02785 	stb	r7,158(sp)
   48530:	003a3d06 	br	46e28 <__alt_data_end+0xfffc8628>
   48534:	d9c02785 	stb	r7,158(sp)
   48538:	003aca06 	br	47064 <__alt_data_end+0xfffc8864>

0004853c <__vfprintf_internal>:
   4853c:	00800174 	movhi	r2,5
   48540:	109ea804 	addi	r2,r2,31392
   48544:	300f883a 	mov	r7,r6
   48548:	280d883a 	mov	r6,r5
   4854c:	200b883a 	mov	r5,r4
   48550:	11000017 	ldw	r4,0(r2)
   48554:	00463441 	jmpi	46344 <___vfprintf_internal_r>

00048558 <__sbprintf>:
   48558:	2880030b 	ldhu	r2,12(r5)
   4855c:	2ac01917 	ldw	r11,100(r5)
   48560:	2a80038b 	ldhu	r10,14(r5)
   48564:	2a400717 	ldw	r9,28(r5)
   48568:	2a000917 	ldw	r8,36(r5)
   4856c:	defee204 	addi	sp,sp,-1144
   48570:	00c10004 	movi	r3,1024
   48574:	dc011a15 	stw	r16,1128(sp)
   48578:	10bfff4c 	andi	r2,r2,65533
   4857c:	2821883a 	mov	r16,r5
   48580:	d8cb883a 	add	r5,sp,r3
   48584:	dc811c15 	stw	r18,1136(sp)
   48588:	dc411b15 	stw	r17,1132(sp)
   4858c:	dfc11d15 	stw	ra,1140(sp)
   48590:	2025883a 	mov	r18,r4
   48594:	d881030d 	sth	r2,1036(sp)
   48598:	dac11915 	stw	r11,1124(sp)
   4859c:	da81038d 	sth	r10,1038(sp)
   485a0:	da410715 	stw	r9,1052(sp)
   485a4:	da010915 	stw	r8,1060(sp)
   485a8:	dec10015 	stw	sp,1024(sp)
   485ac:	dec10415 	stw	sp,1040(sp)
   485b0:	d8c10215 	stw	r3,1032(sp)
   485b4:	d8c10515 	stw	r3,1044(sp)
   485b8:	d8010615 	stw	zero,1048(sp)
   485bc:	00463440 	call	46344 <___vfprintf_internal_r>
   485c0:	1023883a 	mov	r17,r2
   485c4:	10000416 	blt	r2,zero,485d8 <__sbprintf+0x80>
   485c8:	d9410004 	addi	r5,sp,1024
   485cc:	9009883a 	mov	r4,r18
   485d0:	004a3300 	call	4a330 <_fflush_r>
   485d4:	10000d1e 	bne	r2,zero,4860c <__sbprintf+0xb4>
   485d8:	d881030b 	ldhu	r2,1036(sp)
   485dc:	1080100c 	andi	r2,r2,64
   485e0:	10000326 	beq	r2,zero,485f0 <__sbprintf+0x98>
   485e4:	8080030b 	ldhu	r2,12(r16)
   485e8:	10801014 	ori	r2,r2,64
   485ec:	8080030d 	sth	r2,12(r16)
   485f0:	8805883a 	mov	r2,r17
   485f4:	dfc11d17 	ldw	ra,1140(sp)
   485f8:	dc811c17 	ldw	r18,1136(sp)
   485fc:	dc411b17 	ldw	r17,1132(sp)
   48600:	dc011a17 	ldw	r16,1128(sp)
   48604:	dec11e04 	addi	sp,sp,1144
   48608:	f800283a 	ret
   4860c:	047fffc4 	movi	r17,-1
   48610:	003ff106 	br	485d8 <__alt_data_end+0xfffc9dd8>

00048614 <_vsnprintf_r>:
   48614:	30003716 	blt	r6,zero,486f4 <_vsnprintf_r+0xe0>
   48618:	deffe404 	addi	sp,sp,-112
   4861c:	00c08204 	movi	r3,520
   48620:	dc001a15 	stw	r16,104(sp)
   48624:	3005883a 	mov	r2,r6
   48628:	dfc01b15 	stw	ra,108(sp)
   4862c:	d8c0030d 	sth	r3,12(sp)
   48630:	d9400015 	stw	r5,0(sp)
   48634:	d9400415 	stw	r5,16(sp)
   48638:	380d883a 	mov	r6,r7
   4863c:	2021883a 	mov	r16,r4
   48640:	10001326 	beq	r2,zero,48690 <_vsnprintf_r+0x7c>
   48644:	00c00174 	movhi	r3,5
   48648:	18dea804 	addi	r3,r3,31392
   4864c:	19000017 	ldw	r4,0(r3)
   48650:	d9c01c17 	ldw	r7,112(sp)
   48654:	10bfffc4 	addi	r2,r2,-1
   48658:	d8800215 	stw	r2,8(sp)
   4865c:	d8800515 	stw	r2,20(sp)
   48660:	d80b883a 	mov	r5,sp
   48664:	00bfffc4 	movi	r2,-1
   48668:	d880038d 	sth	r2,14(sp)
   4866c:	004416c0 	call	4416c <___svfprintf_internal_r>
   48670:	00ffffc4 	movi	r3,-1
   48674:	10c01616 	blt	r2,r3,486d0 <_vsnprintf_r+0xbc>
   48678:	d8c00017 	ldw	r3,0(sp)
   4867c:	18000005 	stb	zero,0(r3)
   48680:	dfc01b17 	ldw	ra,108(sp)
   48684:	dc001a17 	ldw	r16,104(sp)
   48688:	dec01c04 	addi	sp,sp,112
   4868c:	f800283a 	ret
   48690:	00800174 	movhi	r2,5
   48694:	109ea804 	addi	r2,r2,31392
   48698:	11000017 	ldw	r4,0(r2)
   4869c:	d9c01c17 	ldw	r7,112(sp)
   486a0:	00bfffc4 	movi	r2,-1
   486a4:	d80b883a 	mov	r5,sp
   486a8:	d8000215 	stw	zero,8(sp)
   486ac:	d8000515 	stw	zero,20(sp)
   486b0:	d880038d 	sth	r2,14(sp)
   486b4:	004416c0 	call	4416c <___svfprintf_internal_r>
   486b8:	00ffffc4 	movi	r3,-1
   486bc:	10c00716 	blt	r2,r3,486dc <_vsnprintf_r+0xc8>
   486c0:	dfc01b17 	ldw	ra,108(sp)
   486c4:	dc001a17 	ldw	r16,104(sp)
   486c8:	dec01c04 	addi	sp,sp,112
   486cc:	f800283a 	ret
   486d0:	00c022c4 	movi	r3,139
   486d4:	80c00015 	stw	r3,0(r16)
   486d8:	003fe706 	br	48678 <__alt_data_end+0xfffc9e78>
   486dc:	00c022c4 	movi	r3,139
   486e0:	80c00015 	stw	r3,0(r16)
   486e4:	dfc01b17 	ldw	ra,108(sp)
   486e8:	dc001a17 	ldw	r16,104(sp)
   486ec:	dec01c04 	addi	sp,sp,112
   486f0:	f800283a 	ret
   486f4:	008022c4 	movi	r2,139
   486f8:	20800015 	stw	r2,0(r4)
   486fc:	00bfffc4 	movi	r2,-1
   48700:	f800283a 	ret

00048704 <vsnprintf>:
   48704:	defffe04 	addi	sp,sp,-8
   48708:	00800174 	movhi	r2,5
   4870c:	d9c00015 	stw	r7,0(sp)
   48710:	109ea804 	addi	r2,r2,31392
   48714:	300f883a 	mov	r7,r6
   48718:	280d883a 	mov	r6,r5
   4871c:	200b883a 	mov	r5,r4
   48720:	11000017 	ldw	r4,0(r2)
   48724:	dfc00115 	stw	ra,4(sp)
   48728:	00486140 	call	48614 <_vsnprintf_r>
   4872c:	dfc00117 	ldw	ra,4(sp)
   48730:	dec00204 	addi	sp,sp,8
   48734:	f800283a 	ret

00048738 <__swsetup_r>:
   48738:	00800174 	movhi	r2,5
   4873c:	defffd04 	addi	sp,sp,-12
   48740:	109ea804 	addi	r2,r2,31392
   48744:	dc400115 	stw	r17,4(sp)
   48748:	2023883a 	mov	r17,r4
   4874c:	11000017 	ldw	r4,0(r2)
   48750:	dc000015 	stw	r16,0(sp)
   48754:	dfc00215 	stw	ra,8(sp)
   48758:	2821883a 	mov	r16,r5
   4875c:	20000226 	beq	r4,zero,48768 <__swsetup_r+0x30>
   48760:	20800e17 	ldw	r2,56(r4)
   48764:	10003126 	beq	r2,zero,4882c <__swsetup_r+0xf4>
   48768:	8080030b 	ldhu	r2,12(r16)
   4876c:	10c0020c 	andi	r3,r2,8
   48770:	1009883a 	mov	r4,r2
   48774:	18000f26 	beq	r3,zero,487b4 <__swsetup_r+0x7c>
   48778:	80c00417 	ldw	r3,16(r16)
   4877c:	18001526 	beq	r3,zero,487d4 <__swsetup_r+0x9c>
   48780:	1100004c 	andi	r4,r2,1
   48784:	20001c1e 	bne	r4,zero,487f8 <__swsetup_r+0xc0>
   48788:	1080008c 	andi	r2,r2,2
   4878c:	1000291e 	bne	r2,zero,48834 <__swsetup_r+0xfc>
   48790:	80800517 	ldw	r2,20(r16)
   48794:	80800215 	stw	r2,8(r16)
   48798:	18001c26 	beq	r3,zero,4880c <__swsetup_r+0xd4>
   4879c:	0005883a 	mov	r2,zero
   487a0:	dfc00217 	ldw	ra,8(sp)
   487a4:	dc400117 	ldw	r17,4(sp)
   487a8:	dc000017 	ldw	r16,0(sp)
   487ac:	dec00304 	addi	sp,sp,12
   487b0:	f800283a 	ret
   487b4:	2080040c 	andi	r2,r4,16
   487b8:	10002e26 	beq	r2,zero,48874 <__swsetup_r+0x13c>
   487bc:	2080010c 	andi	r2,r4,4
   487c0:	10001e1e 	bne	r2,zero,4883c <__swsetup_r+0x104>
   487c4:	80c00417 	ldw	r3,16(r16)
   487c8:	20800214 	ori	r2,r4,8
   487cc:	8080030d 	sth	r2,12(r16)
   487d0:	183feb1e 	bne	r3,zero,48780 <__alt_data_end+0xfffc9f80>
   487d4:	1100a00c 	andi	r4,r2,640
   487d8:	01408004 	movi	r5,512
   487dc:	217fe826 	beq	r4,r5,48780 <__alt_data_end+0xfffc9f80>
   487e0:	800b883a 	mov	r5,r16
   487e4:	8809883a 	mov	r4,r17
   487e8:	004b2b00 	call	4b2b0 <__smakebuf_r>
   487ec:	8080030b 	ldhu	r2,12(r16)
   487f0:	80c00417 	ldw	r3,16(r16)
   487f4:	003fe206 	br	48780 <__alt_data_end+0xfffc9f80>
   487f8:	80800517 	ldw	r2,20(r16)
   487fc:	80000215 	stw	zero,8(r16)
   48800:	0085c83a 	sub	r2,zero,r2
   48804:	80800615 	stw	r2,24(r16)
   48808:	183fe41e 	bne	r3,zero,4879c <__alt_data_end+0xfffc9f9c>
   4880c:	80c0030b 	ldhu	r3,12(r16)
   48810:	0005883a 	mov	r2,zero
   48814:	1900200c 	andi	r4,r3,128
   48818:	203fe126 	beq	r4,zero,487a0 <__alt_data_end+0xfffc9fa0>
   4881c:	18c01014 	ori	r3,r3,64
   48820:	80c0030d 	sth	r3,12(r16)
   48824:	00bfffc4 	movi	r2,-1
   48828:	003fdd06 	br	487a0 <__alt_data_end+0xfffc9fa0>
   4882c:	004a70c0 	call	4a70c <__sinit>
   48830:	003fcd06 	br	48768 <__alt_data_end+0xfffc9f68>
   48834:	0005883a 	mov	r2,zero
   48838:	003fd606 	br	48794 <__alt_data_end+0xfffc9f94>
   4883c:	81400c17 	ldw	r5,48(r16)
   48840:	28000626 	beq	r5,zero,4885c <__swsetup_r+0x124>
   48844:	80801004 	addi	r2,r16,64
   48848:	28800326 	beq	r5,r2,48858 <__swsetup_r+0x120>
   4884c:	8809883a 	mov	r4,r17
   48850:	004a8800 	call	4a880 <_free_r>
   48854:	8100030b 	ldhu	r4,12(r16)
   48858:	80000c15 	stw	zero,48(r16)
   4885c:	80c00417 	ldw	r3,16(r16)
   48860:	00bff6c4 	movi	r2,-37
   48864:	1108703a 	and	r4,r2,r4
   48868:	80000115 	stw	zero,4(r16)
   4886c:	80c00015 	stw	r3,0(r16)
   48870:	003fd506 	br	487c8 <__alt_data_end+0xfffc9fc8>
   48874:	00800244 	movi	r2,9
   48878:	88800015 	stw	r2,0(r17)
   4887c:	20801014 	ori	r2,r4,64
   48880:	8080030d 	sth	r2,12(r16)
   48884:	00bfffc4 	movi	r2,-1
   48888:	003fc506 	br	487a0 <__alt_data_end+0xfffc9fa0>

0004888c <quorem>:
   4888c:	defff704 	addi	sp,sp,-36
   48890:	dc800215 	stw	r18,8(sp)
   48894:	20800417 	ldw	r2,16(r4)
   48898:	2c800417 	ldw	r18,16(r5)
   4889c:	dfc00815 	stw	ra,32(sp)
   488a0:	ddc00715 	stw	r23,28(sp)
   488a4:	dd800615 	stw	r22,24(sp)
   488a8:	dd400515 	stw	r21,20(sp)
   488ac:	dd000415 	stw	r20,16(sp)
   488b0:	dcc00315 	stw	r19,12(sp)
   488b4:	dc400115 	stw	r17,4(sp)
   488b8:	dc000015 	stw	r16,0(sp)
   488bc:	14807116 	blt	r2,r18,48a84 <quorem+0x1f8>
   488c0:	94bfffc4 	addi	r18,r18,-1
   488c4:	94ad883a 	add	r22,r18,r18
   488c8:	b5ad883a 	add	r22,r22,r22
   488cc:	2c400504 	addi	r17,r5,20
   488d0:	8da9883a 	add	r20,r17,r22
   488d4:	25400504 	addi	r21,r4,20
   488d8:	282f883a 	mov	r23,r5
   488dc:	adad883a 	add	r22,r21,r22
   488e0:	a1400017 	ldw	r5,0(r20)
   488e4:	2021883a 	mov	r16,r4
   488e8:	b1000017 	ldw	r4,0(r22)
   488ec:	29400044 	addi	r5,r5,1
   488f0:	0043e140 	call	43e14 <__udivsi3>
   488f4:	1027883a 	mov	r19,r2
   488f8:	10002c26 	beq	r2,zero,489ac <quorem+0x120>
   488fc:	a813883a 	mov	r9,r21
   48900:	880b883a 	mov	r5,r17
   48904:	0009883a 	mov	r4,zero
   48908:	000d883a 	mov	r6,zero
   4890c:	2a000017 	ldw	r8,0(r5)
   48910:	49c00017 	ldw	r7,0(r9)
   48914:	29400104 	addi	r5,r5,4
   48918:	40bfffcc 	andi	r2,r8,65535
   4891c:	14c5383a 	mul	r2,r2,r19
   48920:	4010d43a 	srli	r8,r8,16
   48924:	38ffffcc 	andi	r3,r7,65535
   48928:	1105883a 	add	r2,r2,r4
   4892c:	1008d43a 	srli	r4,r2,16
   48930:	44d1383a 	mul	r8,r8,r19
   48934:	198d883a 	add	r6,r3,r6
   48938:	10ffffcc 	andi	r3,r2,65535
   4893c:	30c7c83a 	sub	r3,r6,r3
   48940:	380ed43a 	srli	r7,r7,16
   48944:	4105883a 	add	r2,r8,r4
   48948:	180dd43a 	srai	r6,r3,16
   4894c:	113fffcc 	andi	r4,r2,65535
   48950:	390fc83a 	sub	r7,r7,r4
   48954:	398d883a 	add	r6,r7,r6
   48958:	300e943a 	slli	r7,r6,16
   4895c:	18ffffcc 	andi	r3,r3,65535
   48960:	1008d43a 	srli	r4,r2,16
   48964:	38ceb03a 	or	r7,r7,r3
   48968:	49c00015 	stw	r7,0(r9)
   4896c:	300dd43a 	srai	r6,r6,16
   48970:	4a400104 	addi	r9,r9,4
   48974:	a17fe52e 	bgeu	r20,r5,4890c <__alt_data_end+0xfffca10c>
   48978:	b0800017 	ldw	r2,0(r22)
   4897c:	10000b1e 	bne	r2,zero,489ac <quorem+0x120>
   48980:	b0bfff04 	addi	r2,r22,-4
   48984:	a880082e 	bgeu	r21,r2,489a8 <quorem+0x11c>
   48988:	b0ffff17 	ldw	r3,-4(r22)
   4898c:	18000326 	beq	r3,zero,4899c <quorem+0x110>
   48990:	00000506 	br	489a8 <quorem+0x11c>
   48994:	10c00017 	ldw	r3,0(r2)
   48998:	1800031e 	bne	r3,zero,489a8 <quorem+0x11c>
   4899c:	10bfff04 	addi	r2,r2,-4
   489a0:	94bfffc4 	addi	r18,r18,-1
   489a4:	a8bffb36 	bltu	r21,r2,48994 <__alt_data_end+0xfffca194>
   489a8:	84800415 	stw	r18,16(r16)
   489ac:	b80b883a 	mov	r5,r23
   489b0:	8009883a 	mov	r4,r16
   489b4:	004c9f00 	call	4c9f0 <__mcmp>
   489b8:	10002616 	blt	r2,zero,48a54 <quorem+0x1c8>
   489bc:	9cc00044 	addi	r19,r19,1
   489c0:	a805883a 	mov	r2,r21
   489c4:	000b883a 	mov	r5,zero
   489c8:	11000017 	ldw	r4,0(r2)
   489cc:	89800017 	ldw	r6,0(r17)
   489d0:	10800104 	addi	r2,r2,4
   489d4:	20ffffcc 	andi	r3,r4,65535
   489d8:	194b883a 	add	r5,r3,r5
   489dc:	30ffffcc 	andi	r3,r6,65535
   489e0:	28c7c83a 	sub	r3,r5,r3
   489e4:	300cd43a 	srli	r6,r6,16
   489e8:	2008d43a 	srli	r4,r4,16
   489ec:	180bd43a 	srai	r5,r3,16
   489f0:	18ffffcc 	andi	r3,r3,65535
   489f4:	2189c83a 	sub	r4,r4,r6
   489f8:	2149883a 	add	r4,r4,r5
   489fc:	200c943a 	slli	r6,r4,16
   48a00:	8c400104 	addi	r17,r17,4
   48a04:	200bd43a 	srai	r5,r4,16
   48a08:	30c6b03a 	or	r3,r6,r3
   48a0c:	10ffff15 	stw	r3,-4(r2)
   48a10:	a47fed2e 	bgeu	r20,r17,489c8 <__alt_data_end+0xfffca1c8>
   48a14:	9485883a 	add	r2,r18,r18
   48a18:	1085883a 	add	r2,r2,r2
   48a1c:	a887883a 	add	r3,r21,r2
   48a20:	18800017 	ldw	r2,0(r3)
   48a24:	10000b1e 	bne	r2,zero,48a54 <quorem+0x1c8>
   48a28:	18bfff04 	addi	r2,r3,-4
   48a2c:	a880082e 	bgeu	r21,r2,48a50 <quorem+0x1c4>
   48a30:	18ffff17 	ldw	r3,-4(r3)
   48a34:	18000326 	beq	r3,zero,48a44 <quorem+0x1b8>
   48a38:	00000506 	br	48a50 <quorem+0x1c4>
   48a3c:	10c00017 	ldw	r3,0(r2)
   48a40:	1800031e 	bne	r3,zero,48a50 <quorem+0x1c4>
   48a44:	10bfff04 	addi	r2,r2,-4
   48a48:	94bfffc4 	addi	r18,r18,-1
   48a4c:	a8bffb36 	bltu	r21,r2,48a3c <__alt_data_end+0xfffca23c>
   48a50:	84800415 	stw	r18,16(r16)
   48a54:	9805883a 	mov	r2,r19
   48a58:	dfc00817 	ldw	ra,32(sp)
   48a5c:	ddc00717 	ldw	r23,28(sp)
   48a60:	dd800617 	ldw	r22,24(sp)
   48a64:	dd400517 	ldw	r21,20(sp)
   48a68:	dd000417 	ldw	r20,16(sp)
   48a6c:	dcc00317 	ldw	r19,12(sp)
   48a70:	dc800217 	ldw	r18,8(sp)
   48a74:	dc400117 	ldw	r17,4(sp)
   48a78:	dc000017 	ldw	r16,0(sp)
   48a7c:	dec00904 	addi	sp,sp,36
   48a80:	f800283a 	ret
   48a84:	0005883a 	mov	r2,zero
   48a88:	003ff306 	br	48a58 <__alt_data_end+0xfffca258>

00048a8c <_dtoa_r>:
   48a8c:	20801017 	ldw	r2,64(r4)
   48a90:	deffde04 	addi	sp,sp,-136
   48a94:	df002015 	stw	fp,128(sp)
   48a98:	dcc01b15 	stw	r19,108(sp)
   48a9c:	dc801a15 	stw	r18,104(sp)
   48aa0:	dc401915 	stw	r17,100(sp)
   48aa4:	dc001815 	stw	r16,96(sp)
   48aa8:	dfc02115 	stw	ra,132(sp)
   48aac:	ddc01f15 	stw	r23,124(sp)
   48ab0:	dd801e15 	stw	r22,120(sp)
   48ab4:	dd401d15 	stw	r21,116(sp)
   48ab8:	dd001c15 	stw	r20,112(sp)
   48abc:	d9c00315 	stw	r7,12(sp)
   48ac0:	2039883a 	mov	fp,r4
   48ac4:	3023883a 	mov	r17,r6
   48ac8:	2825883a 	mov	r18,r5
   48acc:	dc002417 	ldw	r16,144(sp)
   48ad0:	3027883a 	mov	r19,r6
   48ad4:	10000826 	beq	r2,zero,48af8 <_dtoa_r+0x6c>
   48ad8:	21801117 	ldw	r6,68(r4)
   48adc:	00c00044 	movi	r3,1
   48ae0:	100b883a 	mov	r5,r2
   48ae4:	1986983a 	sll	r3,r3,r6
   48ae8:	11800115 	stw	r6,4(r2)
   48aec:	10c00215 	stw	r3,8(r2)
   48af0:	004c1d00 	call	4c1d0 <_Bfree>
   48af4:	e0001015 	stw	zero,64(fp)
   48af8:	88002e16 	blt	r17,zero,48bb4 <_dtoa_r+0x128>
   48afc:	80000015 	stw	zero,0(r16)
   48b00:	889ffc2c 	andhi	r2,r17,32752
   48b04:	00dffc34 	movhi	r3,32752
   48b08:	10c01c26 	beq	r2,r3,48b7c <_dtoa_r+0xf0>
   48b0c:	000d883a 	mov	r6,zero
   48b10:	000f883a 	mov	r7,zero
   48b14:	9009883a 	mov	r4,r18
   48b18:	980b883a 	mov	r5,r19
   48b1c:	00517a00 	call	517a0 <__eqdf2>
   48b20:	10002b1e 	bne	r2,zero,48bd0 <_dtoa_r+0x144>
   48b24:	d9c02317 	ldw	r7,140(sp)
   48b28:	00800044 	movi	r2,1
   48b2c:	38800015 	stw	r2,0(r7)
   48b30:	d8802517 	ldw	r2,148(sp)
   48b34:	10019e26 	beq	r2,zero,491b0 <_dtoa_r+0x724>
   48b38:	d8c02517 	ldw	r3,148(sp)
   48b3c:	00800174 	movhi	r2,5
   48b40:	10974b44 	addi	r2,r2,23853
   48b44:	18800015 	stw	r2,0(r3)
   48b48:	10bfffc4 	addi	r2,r2,-1
   48b4c:	dfc02117 	ldw	ra,132(sp)
   48b50:	df002017 	ldw	fp,128(sp)
   48b54:	ddc01f17 	ldw	r23,124(sp)
   48b58:	dd801e17 	ldw	r22,120(sp)
   48b5c:	dd401d17 	ldw	r21,116(sp)
   48b60:	dd001c17 	ldw	r20,112(sp)
   48b64:	dcc01b17 	ldw	r19,108(sp)
   48b68:	dc801a17 	ldw	r18,104(sp)
   48b6c:	dc401917 	ldw	r17,100(sp)
   48b70:	dc001817 	ldw	r16,96(sp)
   48b74:	dec02204 	addi	sp,sp,136
   48b78:	f800283a 	ret
   48b7c:	d8c02317 	ldw	r3,140(sp)
   48b80:	0089c3c4 	movi	r2,9999
   48b84:	18800015 	stw	r2,0(r3)
   48b88:	90017726 	beq	r18,zero,49168 <_dtoa_r+0x6dc>
   48b8c:	00800174 	movhi	r2,5
   48b90:	10975f04 	addi	r2,r2,23932
   48b94:	d9002517 	ldw	r4,148(sp)
   48b98:	203fec26 	beq	r4,zero,48b4c <__alt_data_end+0xfffca34c>
   48b9c:	10c000c7 	ldb	r3,3(r2)
   48ba0:	1801781e 	bne	r3,zero,49184 <_dtoa_r+0x6f8>
   48ba4:	10c000c4 	addi	r3,r2,3
   48ba8:	d9802517 	ldw	r6,148(sp)
   48bac:	30c00015 	stw	r3,0(r6)
   48bb0:	003fe606 	br	48b4c <__alt_data_end+0xfffca34c>
   48bb4:	04e00034 	movhi	r19,32768
   48bb8:	9cffffc4 	addi	r19,r19,-1
   48bbc:	00800044 	movi	r2,1
   48bc0:	8ce6703a 	and	r19,r17,r19
   48bc4:	80800015 	stw	r2,0(r16)
   48bc8:	9823883a 	mov	r17,r19
   48bcc:	003fcc06 	br	48b00 <__alt_data_end+0xfffca300>
   48bd0:	d8800204 	addi	r2,sp,8
   48bd4:	d8800015 	stw	r2,0(sp)
   48bd8:	d9c00104 	addi	r7,sp,4
   48bdc:	900b883a 	mov	r5,r18
   48be0:	980d883a 	mov	r6,r19
   48be4:	e009883a 	mov	r4,fp
   48be8:	8820d53a 	srli	r16,r17,20
   48bec:	004cdbc0 	call	4cdbc <__d2b>
   48bf0:	d8800915 	stw	r2,36(sp)
   48bf4:	8001651e 	bne	r16,zero,4918c <_dtoa_r+0x700>
   48bf8:	dd800217 	ldw	r22,8(sp)
   48bfc:	dc000117 	ldw	r16,4(sp)
   48c00:	00800804 	movi	r2,32
   48c04:	b421883a 	add	r16,r22,r16
   48c08:	80c10c84 	addi	r3,r16,1074
   48c0c:	10c2d10e 	bge	r2,r3,49754 <_dtoa_r+0xcc8>
   48c10:	00801004 	movi	r2,64
   48c14:	81010484 	addi	r4,r16,1042
   48c18:	10c7c83a 	sub	r3,r2,r3
   48c1c:	9108d83a 	srl	r4,r18,r4
   48c20:	88e2983a 	sll	r17,r17,r3
   48c24:	2448b03a 	or	r4,r4,r17
   48c28:	0052b680 	call	52b68 <__floatunsidf>
   48c2c:	017f8434 	movhi	r5,65040
   48c30:	01800044 	movi	r6,1
   48c34:	1009883a 	mov	r4,r2
   48c38:	194b883a 	add	r5,r3,r5
   48c3c:	843fffc4 	addi	r16,r16,-1
   48c40:	d9801115 	stw	r6,68(sp)
   48c44:	000d883a 	mov	r6,zero
   48c48:	01cffe34 	movhi	r7,16376
   48c4c:	00521100 	call	52110 <__subdf3>
   48c50:	0198dbf4 	movhi	r6,25455
   48c54:	01cff4f4 	movhi	r7,16339
   48c58:	3190d844 	addi	r6,r6,17249
   48c5c:	39e1e9c4 	addi	r7,r7,-30809
   48c60:	1009883a 	mov	r4,r2
   48c64:	180b883a 	mov	r5,r3
   48c68:	00519f80 	call	519f8 <__muldf3>
   48c6c:	01a2d874 	movhi	r6,35681
   48c70:	01cff1f4 	movhi	r7,16327
   48c74:	31b22cc4 	addi	r6,r6,-14157
   48c78:	39e28a04 	addi	r7,r7,-30168
   48c7c:	180b883a 	mov	r5,r3
   48c80:	1009883a 	mov	r4,r2
   48c84:	004286c0 	call	4286c <__adddf3>
   48c88:	8009883a 	mov	r4,r16
   48c8c:	1029883a 	mov	r20,r2
   48c90:	1823883a 	mov	r17,r3
   48c94:	0052a8c0 	call	52a8c <__floatsidf>
   48c98:	019427f4 	movhi	r6,20639
   48c9c:	01cff4f4 	movhi	r7,16339
   48ca0:	319e7ec4 	addi	r6,r6,31227
   48ca4:	39d104c4 	addi	r7,r7,17427
   48ca8:	1009883a 	mov	r4,r2
   48cac:	180b883a 	mov	r5,r3
   48cb0:	00519f80 	call	519f8 <__muldf3>
   48cb4:	100d883a 	mov	r6,r2
   48cb8:	180f883a 	mov	r7,r3
   48cbc:	a009883a 	mov	r4,r20
   48cc0:	880b883a 	mov	r5,r17
   48cc4:	004286c0 	call	4286c <__adddf3>
   48cc8:	1009883a 	mov	r4,r2
   48ccc:	180b883a 	mov	r5,r3
   48cd0:	1029883a 	mov	r20,r2
   48cd4:	1823883a 	mov	r17,r3
   48cd8:	0052a0c0 	call	52a0c <__fixdfsi>
   48cdc:	000d883a 	mov	r6,zero
   48ce0:	000f883a 	mov	r7,zero
   48ce4:	a009883a 	mov	r4,r20
   48ce8:	880b883a 	mov	r5,r17
   48cec:	d8800515 	stw	r2,20(sp)
   48cf0:	00519040 	call	51904 <__ledf2>
   48cf4:	10028716 	blt	r2,zero,49714 <_dtoa_r+0xc88>
   48cf8:	d8c00517 	ldw	r3,20(sp)
   48cfc:	00800584 	movi	r2,22
   48d00:	10c27536 	bltu	r2,r3,496d8 <_dtoa_r+0xc4c>
   48d04:	180490fa 	slli	r2,r3,3
   48d08:	00c00174 	movhi	r3,5
   48d0c:	18d77b04 	addi	r3,r3,24044
   48d10:	1885883a 	add	r2,r3,r2
   48d14:	11000017 	ldw	r4,0(r2)
   48d18:	11400117 	ldw	r5,4(r2)
   48d1c:	900d883a 	mov	r6,r18
   48d20:	980f883a 	mov	r7,r19
   48d24:	00518280 	call	51828 <__gedf2>
   48d28:	00828d0e 	bge	zero,r2,49760 <_dtoa_r+0xcd4>
   48d2c:	d9000517 	ldw	r4,20(sp)
   48d30:	d8000e15 	stw	zero,56(sp)
   48d34:	213fffc4 	addi	r4,r4,-1
   48d38:	d9000515 	stw	r4,20(sp)
   48d3c:	b42dc83a 	sub	r22,r22,r16
   48d40:	b5bfffc4 	addi	r22,r22,-1
   48d44:	b0026f16 	blt	r22,zero,49704 <_dtoa_r+0xc78>
   48d48:	d8000815 	stw	zero,32(sp)
   48d4c:	d9c00517 	ldw	r7,20(sp)
   48d50:	38026416 	blt	r7,zero,496e4 <_dtoa_r+0xc58>
   48d54:	b1ed883a 	add	r22,r22,r7
   48d58:	d9c00d15 	stw	r7,52(sp)
   48d5c:	d8000a15 	stw	zero,40(sp)
   48d60:	d9800317 	ldw	r6,12(sp)
   48d64:	00800244 	movi	r2,9
   48d68:	11811436 	bltu	r2,r6,491bc <_dtoa_r+0x730>
   48d6c:	00800144 	movi	r2,5
   48d70:	1184e10e 	bge	r2,r6,4a0f8 <_dtoa_r+0x166c>
   48d74:	31bfff04 	addi	r6,r6,-4
   48d78:	d9800315 	stw	r6,12(sp)
   48d7c:	0023883a 	mov	r17,zero
   48d80:	d9800317 	ldw	r6,12(sp)
   48d84:	008000c4 	movi	r2,3
   48d88:	30836726 	beq	r6,r2,49b28 <_dtoa_r+0x109c>
   48d8c:	1183410e 	bge	r2,r6,49a94 <_dtoa_r+0x1008>
   48d90:	d9c00317 	ldw	r7,12(sp)
   48d94:	00800104 	movi	r2,4
   48d98:	38827c26 	beq	r7,r2,4978c <_dtoa_r+0xd00>
   48d9c:	00800144 	movi	r2,5
   48da0:	3884c41e 	bne	r7,r2,4a0b4 <_dtoa_r+0x1628>
   48da4:	00800044 	movi	r2,1
   48da8:	d8800b15 	stw	r2,44(sp)
   48dac:	d8c00517 	ldw	r3,20(sp)
   48db0:	d9002217 	ldw	r4,136(sp)
   48db4:	1907883a 	add	r3,r3,r4
   48db8:	19800044 	addi	r6,r3,1
   48dbc:	d8c00c15 	stw	r3,48(sp)
   48dc0:	d9800615 	stw	r6,24(sp)
   48dc4:	0183a40e 	bge	zero,r6,49c58 <_dtoa_r+0x11cc>
   48dc8:	d9800617 	ldw	r6,24(sp)
   48dcc:	3021883a 	mov	r16,r6
   48dd0:	e0001115 	stw	zero,68(fp)
   48dd4:	008005c4 	movi	r2,23
   48dd8:	1184c92e 	bgeu	r2,r6,4a100 <_dtoa_r+0x1674>
   48ddc:	00c00044 	movi	r3,1
   48de0:	00800104 	movi	r2,4
   48de4:	1085883a 	add	r2,r2,r2
   48de8:	11000504 	addi	r4,r2,20
   48dec:	180b883a 	mov	r5,r3
   48df0:	18c00044 	addi	r3,r3,1
   48df4:	313ffb2e 	bgeu	r6,r4,48de4 <__alt_data_end+0xfffca5e4>
   48df8:	e1401115 	stw	r5,68(fp)
   48dfc:	e009883a 	mov	r4,fp
   48e00:	004c1280 	call	4c128 <_Balloc>
   48e04:	d8800715 	stw	r2,28(sp)
   48e08:	e0801015 	stw	r2,64(fp)
   48e0c:	00800384 	movi	r2,14
   48e10:	1400f736 	bltu	r2,r16,491f0 <_dtoa_r+0x764>
   48e14:	8800f626 	beq	r17,zero,491f0 <_dtoa_r+0x764>
   48e18:	d9c00517 	ldw	r7,20(sp)
   48e1c:	01c39a0e 	bge	zero,r7,49c88 <_dtoa_r+0x11fc>
   48e20:	388003cc 	andi	r2,r7,15
   48e24:	100490fa 	slli	r2,r2,3
   48e28:	382bd13a 	srai	r21,r7,4
   48e2c:	00c00174 	movhi	r3,5
   48e30:	18d77b04 	addi	r3,r3,24044
   48e34:	1885883a 	add	r2,r3,r2
   48e38:	a8c0040c 	andi	r3,r21,16
   48e3c:	12400017 	ldw	r9,0(r2)
   48e40:	12000117 	ldw	r8,4(r2)
   48e44:	18037926 	beq	r3,zero,49c2c <_dtoa_r+0x11a0>
   48e48:	00800174 	movhi	r2,5
   48e4c:	10977104 	addi	r2,r2,24004
   48e50:	11800817 	ldw	r6,32(r2)
   48e54:	11c00917 	ldw	r7,36(r2)
   48e58:	9009883a 	mov	r4,r18
   48e5c:	980b883a 	mov	r5,r19
   48e60:	da001715 	stw	r8,92(sp)
   48e64:	da401615 	stw	r9,88(sp)
   48e68:	00431180 	call	43118 <__divdf3>
   48e6c:	da001717 	ldw	r8,92(sp)
   48e70:	da401617 	ldw	r9,88(sp)
   48e74:	ad4003cc 	andi	r21,r21,15
   48e78:	040000c4 	movi	r16,3
   48e7c:	1023883a 	mov	r17,r2
   48e80:	1829883a 	mov	r20,r3
   48e84:	a8001126 	beq	r21,zero,48ecc <_dtoa_r+0x440>
   48e88:	05c00174 	movhi	r23,5
   48e8c:	bdd77104 	addi	r23,r23,24004
   48e90:	4805883a 	mov	r2,r9
   48e94:	4007883a 	mov	r3,r8
   48e98:	a980004c 	andi	r6,r21,1
   48e9c:	1009883a 	mov	r4,r2
   48ea0:	a82bd07a 	srai	r21,r21,1
   48ea4:	180b883a 	mov	r5,r3
   48ea8:	30000426 	beq	r6,zero,48ebc <_dtoa_r+0x430>
   48eac:	b9800017 	ldw	r6,0(r23)
   48eb0:	b9c00117 	ldw	r7,4(r23)
   48eb4:	84000044 	addi	r16,r16,1
   48eb8:	00519f80 	call	519f8 <__muldf3>
   48ebc:	bdc00204 	addi	r23,r23,8
   48ec0:	a83ff51e 	bne	r21,zero,48e98 <__alt_data_end+0xfffca698>
   48ec4:	1013883a 	mov	r9,r2
   48ec8:	1811883a 	mov	r8,r3
   48ecc:	480d883a 	mov	r6,r9
   48ed0:	400f883a 	mov	r7,r8
   48ed4:	8809883a 	mov	r4,r17
   48ed8:	a00b883a 	mov	r5,r20
   48edc:	00431180 	call	43118 <__divdf3>
   48ee0:	d8800f15 	stw	r2,60(sp)
   48ee4:	d8c01015 	stw	r3,64(sp)
   48ee8:	d8c00e17 	ldw	r3,56(sp)
   48eec:	18000626 	beq	r3,zero,48f08 <_dtoa_r+0x47c>
   48ef0:	d9000f17 	ldw	r4,60(sp)
   48ef4:	d9401017 	ldw	r5,64(sp)
   48ef8:	000d883a 	mov	r6,zero
   48efc:	01cffc34 	movhi	r7,16368
   48f00:	00519040 	call	51904 <__ledf2>
   48f04:	10040b16 	blt	r2,zero,49f34 <_dtoa_r+0x14a8>
   48f08:	8009883a 	mov	r4,r16
   48f0c:	0052a8c0 	call	52a8c <__floatsidf>
   48f10:	d9800f17 	ldw	r6,60(sp)
   48f14:	d9c01017 	ldw	r7,64(sp)
   48f18:	1009883a 	mov	r4,r2
   48f1c:	180b883a 	mov	r5,r3
   48f20:	00519f80 	call	519f8 <__muldf3>
   48f24:	000d883a 	mov	r6,zero
   48f28:	01d00734 	movhi	r7,16412
   48f2c:	1009883a 	mov	r4,r2
   48f30:	180b883a 	mov	r5,r3
   48f34:	004286c0 	call	4286c <__adddf3>
   48f38:	1021883a 	mov	r16,r2
   48f3c:	d8800617 	ldw	r2,24(sp)
   48f40:	047f3034 	movhi	r17,64704
   48f44:	1c63883a 	add	r17,r3,r17
   48f48:	10031826 	beq	r2,zero,49bac <_dtoa_r+0x1120>
   48f4c:	d8c00517 	ldw	r3,20(sp)
   48f50:	db000617 	ldw	r12,24(sp)
   48f54:	d8c01315 	stw	r3,76(sp)
   48f58:	d9000b17 	ldw	r4,44(sp)
   48f5c:	20038f26 	beq	r4,zero,49d9c <_dtoa_r+0x1310>
   48f60:	60bfffc4 	addi	r2,r12,-1
   48f64:	100490fa 	slli	r2,r2,3
   48f68:	00c00174 	movhi	r3,5
   48f6c:	18d77b04 	addi	r3,r3,24044
   48f70:	1885883a 	add	r2,r3,r2
   48f74:	11800017 	ldw	r6,0(r2)
   48f78:	11c00117 	ldw	r7,4(r2)
   48f7c:	d8800717 	ldw	r2,28(sp)
   48f80:	0009883a 	mov	r4,zero
   48f84:	014ff834 	movhi	r5,16352
   48f88:	db001615 	stw	r12,88(sp)
   48f8c:	15c00044 	addi	r23,r2,1
   48f90:	00431180 	call	43118 <__divdf3>
   48f94:	800d883a 	mov	r6,r16
   48f98:	880f883a 	mov	r7,r17
   48f9c:	1009883a 	mov	r4,r2
   48fa0:	180b883a 	mov	r5,r3
   48fa4:	00521100 	call	52110 <__subdf3>
   48fa8:	d9401017 	ldw	r5,64(sp)
   48fac:	d9000f17 	ldw	r4,60(sp)
   48fb0:	102b883a 	mov	r21,r2
   48fb4:	d8c01215 	stw	r3,72(sp)
   48fb8:	0052a0c0 	call	52a0c <__fixdfsi>
   48fbc:	1009883a 	mov	r4,r2
   48fc0:	1029883a 	mov	r20,r2
   48fc4:	0052a8c0 	call	52a8c <__floatsidf>
   48fc8:	d9000f17 	ldw	r4,60(sp)
   48fcc:	d9401017 	ldw	r5,64(sp)
   48fd0:	100d883a 	mov	r6,r2
   48fd4:	180f883a 	mov	r7,r3
   48fd8:	00521100 	call	52110 <__subdf3>
   48fdc:	1823883a 	mov	r17,r3
   48fe0:	d8c00717 	ldw	r3,28(sp)
   48fe4:	d9401217 	ldw	r5,72(sp)
   48fe8:	a2000c04 	addi	r8,r20,48
   48fec:	1021883a 	mov	r16,r2
   48ff0:	1a000005 	stb	r8,0(r3)
   48ff4:	800d883a 	mov	r6,r16
   48ff8:	880f883a 	mov	r7,r17
   48ffc:	a809883a 	mov	r4,r21
   49000:	4029883a 	mov	r20,r8
   49004:	00518280 	call	51828 <__gedf2>
   49008:	00841d16 	blt	zero,r2,4a080 <_dtoa_r+0x15f4>
   4900c:	800d883a 	mov	r6,r16
   49010:	880f883a 	mov	r7,r17
   49014:	0009883a 	mov	r4,zero
   49018:	014ffc34 	movhi	r5,16368
   4901c:	00521100 	call	52110 <__subdf3>
   49020:	d9401217 	ldw	r5,72(sp)
   49024:	100d883a 	mov	r6,r2
   49028:	180f883a 	mov	r7,r3
   4902c:	a809883a 	mov	r4,r21
   49030:	00518280 	call	51828 <__gedf2>
   49034:	db001617 	ldw	r12,88(sp)
   49038:	00840e16 	blt	zero,r2,4a074 <_dtoa_r+0x15e8>
   4903c:	00800044 	movi	r2,1
   49040:	13006b0e 	bge	r2,r12,491f0 <_dtoa_r+0x764>
   49044:	d9000717 	ldw	r4,28(sp)
   49048:	dd800f15 	stw	r22,60(sp)
   4904c:	dcc01015 	stw	r19,64(sp)
   49050:	2319883a 	add	r12,r4,r12
   49054:	dcc01217 	ldw	r19,72(sp)
   49058:	602d883a 	mov	r22,r12
   4905c:	dc801215 	stw	r18,72(sp)
   49060:	b825883a 	mov	r18,r23
   49064:	00000906 	br	4908c <_dtoa_r+0x600>
   49068:	00521100 	call	52110 <__subdf3>
   4906c:	a80d883a 	mov	r6,r21
   49070:	980f883a 	mov	r7,r19
   49074:	1009883a 	mov	r4,r2
   49078:	180b883a 	mov	r5,r3
   4907c:	00519040 	call	51904 <__ledf2>
   49080:	1003e816 	blt	r2,zero,4a024 <_dtoa_r+0x1598>
   49084:	b825883a 	mov	r18,r23
   49088:	bd83e926 	beq	r23,r22,4a030 <_dtoa_r+0x15a4>
   4908c:	a809883a 	mov	r4,r21
   49090:	980b883a 	mov	r5,r19
   49094:	000d883a 	mov	r6,zero
   49098:	01d00934 	movhi	r7,16420
   4909c:	00519f80 	call	519f8 <__muldf3>
   490a0:	000d883a 	mov	r6,zero
   490a4:	01d00934 	movhi	r7,16420
   490a8:	8009883a 	mov	r4,r16
   490ac:	880b883a 	mov	r5,r17
   490b0:	102b883a 	mov	r21,r2
   490b4:	1827883a 	mov	r19,r3
   490b8:	00519f80 	call	519f8 <__muldf3>
   490bc:	180b883a 	mov	r5,r3
   490c0:	1009883a 	mov	r4,r2
   490c4:	1821883a 	mov	r16,r3
   490c8:	1023883a 	mov	r17,r2
   490cc:	0052a0c0 	call	52a0c <__fixdfsi>
   490d0:	1009883a 	mov	r4,r2
   490d4:	1029883a 	mov	r20,r2
   490d8:	0052a8c0 	call	52a8c <__floatsidf>
   490dc:	8809883a 	mov	r4,r17
   490e0:	800b883a 	mov	r5,r16
   490e4:	100d883a 	mov	r6,r2
   490e8:	180f883a 	mov	r7,r3
   490ec:	00521100 	call	52110 <__subdf3>
   490f0:	a5000c04 	addi	r20,r20,48
   490f4:	a80d883a 	mov	r6,r21
   490f8:	980f883a 	mov	r7,r19
   490fc:	1009883a 	mov	r4,r2
   49100:	180b883a 	mov	r5,r3
   49104:	95000005 	stb	r20,0(r18)
   49108:	1021883a 	mov	r16,r2
   4910c:	1823883a 	mov	r17,r3
   49110:	00519040 	call	51904 <__ledf2>
   49114:	bdc00044 	addi	r23,r23,1
   49118:	800d883a 	mov	r6,r16
   4911c:	880f883a 	mov	r7,r17
   49120:	0009883a 	mov	r4,zero
   49124:	014ffc34 	movhi	r5,16368
   49128:	103fcf0e 	bge	r2,zero,49068 <__alt_data_end+0xfffca868>
   4912c:	d8c01317 	ldw	r3,76(sp)
   49130:	d8c00515 	stw	r3,20(sp)
   49134:	d9400917 	ldw	r5,36(sp)
   49138:	e009883a 	mov	r4,fp
   4913c:	004c1d00 	call	4c1d0 <_Bfree>
   49140:	d9000517 	ldw	r4,20(sp)
   49144:	d9802317 	ldw	r6,140(sp)
   49148:	d9c02517 	ldw	r7,148(sp)
   4914c:	b8000005 	stb	zero,0(r23)
   49150:	20800044 	addi	r2,r4,1
   49154:	30800015 	stw	r2,0(r6)
   49158:	3802aa26 	beq	r7,zero,49c04 <_dtoa_r+0x1178>
   4915c:	3dc00015 	stw	r23,0(r7)
   49160:	d8800717 	ldw	r2,28(sp)
   49164:	003e7906 	br	48b4c <__alt_data_end+0xfffca34c>
   49168:	00800434 	movhi	r2,16
   4916c:	10bfffc4 	addi	r2,r2,-1
   49170:	88a2703a 	and	r17,r17,r2
   49174:	883e851e 	bne	r17,zero,48b8c <__alt_data_end+0xfffca38c>
   49178:	00800174 	movhi	r2,5
   4917c:	10975c04 	addi	r2,r2,23920
   49180:	003e8406 	br	48b94 <__alt_data_end+0xfffca394>
   49184:	10c00204 	addi	r3,r2,8
   49188:	003e8706 	br	48ba8 <__alt_data_end+0xfffca3a8>
   4918c:	01400434 	movhi	r5,16
   49190:	297fffc4 	addi	r5,r5,-1
   49194:	994a703a 	and	r5,r19,r5
   49198:	9009883a 	mov	r4,r18
   4919c:	843f0044 	addi	r16,r16,-1023
   491a0:	294ffc34 	orhi	r5,r5,16368
   491a4:	dd800217 	ldw	r22,8(sp)
   491a8:	d8001115 	stw	zero,68(sp)
   491ac:	003ea506 	br	48c44 <__alt_data_end+0xfffca444>
   491b0:	00800174 	movhi	r2,5
   491b4:	10974b04 	addi	r2,r2,23852
   491b8:	003e6406 	br	48b4c <__alt_data_end+0xfffca34c>
   491bc:	e0001115 	stw	zero,68(fp)
   491c0:	000b883a 	mov	r5,zero
   491c4:	e009883a 	mov	r4,fp
   491c8:	004c1280 	call	4c128 <_Balloc>
   491cc:	01bfffc4 	movi	r6,-1
   491d0:	01c00044 	movi	r7,1
   491d4:	d8800715 	stw	r2,28(sp)
   491d8:	d9800c15 	stw	r6,48(sp)
   491dc:	e0801015 	stw	r2,64(fp)
   491e0:	d8000315 	stw	zero,12(sp)
   491e4:	d9c00b15 	stw	r7,44(sp)
   491e8:	d9800615 	stw	r6,24(sp)
   491ec:	d8002215 	stw	zero,136(sp)
   491f0:	d8800117 	ldw	r2,4(sp)
   491f4:	10008916 	blt	r2,zero,4941c <_dtoa_r+0x990>
   491f8:	d9000517 	ldw	r4,20(sp)
   491fc:	00c00384 	movi	r3,14
   49200:	19008616 	blt	r3,r4,4941c <_dtoa_r+0x990>
   49204:	200490fa 	slli	r2,r4,3
   49208:	00c00174 	movhi	r3,5
   4920c:	d9802217 	ldw	r6,136(sp)
   49210:	18d77b04 	addi	r3,r3,24044
   49214:	1885883a 	add	r2,r3,r2
   49218:	14000017 	ldw	r16,0(r2)
   4921c:	14400117 	ldw	r17,4(r2)
   49220:	30016316 	blt	r6,zero,497b0 <_dtoa_r+0xd24>
   49224:	800d883a 	mov	r6,r16
   49228:	880f883a 	mov	r7,r17
   4922c:	9009883a 	mov	r4,r18
   49230:	980b883a 	mov	r5,r19
   49234:	00431180 	call	43118 <__divdf3>
   49238:	180b883a 	mov	r5,r3
   4923c:	1009883a 	mov	r4,r2
   49240:	0052a0c0 	call	52a0c <__fixdfsi>
   49244:	1009883a 	mov	r4,r2
   49248:	102b883a 	mov	r21,r2
   4924c:	0052a8c0 	call	52a8c <__floatsidf>
   49250:	800d883a 	mov	r6,r16
   49254:	880f883a 	mov	r7,r17
   49258:	1009883a 	mov	r4,r2
   4925c:	180b883a 	mov	r5,r3
   49260:	00519f80 	call	519f8 <__muldf3>
   49264:	100d883a 	mov	r6,r2
   49268:	180f883a 	mov	r7,r3
   4926c:	9009883a 	mov	r4,r18
   49270:	980b883a 	mov	r5,r19
   49274:	00521100 	call	52110 <__subdf3>
   49278:	d9c00717 	ldw	r7,28(sp)
   4927c:	1009883a 	mov	r4,r2
   49280:	a8800c04 	addi	r2,r21,48
   49284:	38800005 	stb	r2,0(r7)
   49288:	3dc00044 	addi	r23,r7,1
   4928c:	d9c00617 	ldw	r7,24(sp)
   49290:	01800044 	movi	r6,1
   49294:	180b883a 	mov	r5,r3
   49298:	2005883a 	mov	r2,r4
   4929c:	39803826 	beq	r7,r6,49380 <_dtoa_r+0x8f4>
   492a0:	000d883a 	mov	r6,zero
   492a4:	01d00934 	movhi	r7,16420
   492a8:	00519f80 	call	519f8 <__muldf3>
   492ac:	000d883a 	mov	r6,zero
   492b0:	000f883a 	mov	r7,zero
   492b4:	1009883a 	mov	r4,r2
   492b8:	180b883a 	mov	r5,r3
   492bc:	1025883a 	mov	r18,r2
   492c0:	1827883a 	mov	r19,r3
   492c4:	00517a00 	call	517a0 <__eqdf2>
   492c8:	103f9a26 	beq	r2,zero,49134 <__alt_data_end+0xfffca934>
   492cc:	d9c00617 	ldw	r7,24(sp)
   492d0:	d8c00717 	ldw	r3,28(sp)
   492d4:	b829883a 	mov	r20,r23
   492d8:	38bfffc4 	addi	r2,r7,-1
   492dc:	18ad883a 	add	r22,r3,r2
   492e0:	00000a06 	br	4930c <_dtoa_r+0x880>
   492e4:	00519f80 	call	519f8 <__muldf3>
   492e8:	000d883a 	mov	r6,zero
   492ec:	000f883a 	mov	r7,zero
   492f0:	1009883a 	mov	r4,r2
   492f4:	180b883a 	mov	r5,r3
   492f8:	1025883a 	mov	r18,r2
   492fc:	1827883a 	mov	r19,r3
   49300:	b829883a 	mov	r20,r23
   49304:	00517a00 	call	517a0 <__eqdf2>
   49308:	103f8a26 	beq	r2,zero,49134 <__alt_data_end+0xfffca934>
   4930c:	800d883a 	mov	r6,r16
   49310:	880f883a 	mov	r7,r17
   49314:	9009883a 	mov	r4,r18
   49318:	980b883a 	mov	r5,r19
   4931c:	00431180 	call	43118 <__divdf3>
   49320:	180b883a 	mov	r5,r3
   49324:	1009883a 	mov	r4,r2
   49328:	0052a0c0 	call	52a0c <__fixdfsi>
   4932c:	1009883a 	mov	r4,r2
   49330:	102b883a 	mov	r21,r2
   49334:	0052a8c0 	call	52a8c <__floatsidf>
   49338:	800d883a 	mov	r6,r16
   4933c:	880f883a 	mov	r7,r17
   49340:	1009883a 	mov	r4,r2
   49344:	180b883a 	mov	r5,r3
   49348:	00519f80 	call	519f8 <__muldf3>
   4934c:	100d883a 	mov	r6,r2
   49350:	180f883a 	mov	r7,r3
   49354:	9009883a 	mov	r4,r18
   49358:	980b883a 	mov	r5,r19
   4935c:	00521100 	call	52110 <__subdf3>
   49360:	aa000c04 	addi	r8,r21,48
   49364:	a2000005 	stb	r8,0(r20)
   49368:	000d883a 	mov	r6,zero
   4936c:	01d00934 	movhi	r7,16420
   49370:	1009883a 	mov	r4,r2
   49374:	180b883a 	mov	r5,r3
   49378:	a5c00044 	addi	r23,r20,1
   4937c:	b53fd91e 	bne	r22,r20,492e4 <__alt_data_end+0xfffcaae4>
   49380:	100d883a 	mov	r6,r2
   49384:	180f883a 	mov	r7,r3
   49388:	1009883a 	mov	r4,r2
   4938c:	180b883a 	mov	r5,r3
   49390:	004286c0 	call	4286c <__adddf3>
   49394:	100d883a 	mov	r6,r2
   49398:	180f883a 	mov	r7,r3
   4939c:	8009883a 	mov	r4,r16
   493a0:	880b883a 	mov	r5,r17
   493a4:	1027883a 	mov	r19,r2
   493a8:	1825883a 	mov	r18,r3
   493ac:	00519040 	call	51904 <__ledf2>
   493b0:	10000816 	blt	r2,zero,493d4 <_dtoa_r+0x948>
   493b4:	980d883a 	mov	r6,r19
   493b8:	900f883a 	mov	r7,r18
   493bc:	8009883a 	mov	r4,r16
   493c0:	880b883a 	mov	r5,r17
   493c4:	00517a00 	call	517a0 <__eqdf2>
   493c8:	103f5a1e 	bne	r2,zero,49134 <__alt_data_end+0xfffca934>
   493cc:	ad40004c 	andi	r21,r21,1
   493d0:	a83f5826 	beq	r21,zero,49134 <__alt_data_end+0xfffca934>
   493d4:	bd3fffc3 	ldbu	r20,-1(r23)
   493d8:	b8bfffc4 	addi	r2,r23,-1
   493dc:	1007883a 	mov	r3,r2
   493e0:	01400e44 	movi	r5,57
   493e4:	d9800717 	ldw	r6,28(sp)
   493e8:	00000506 	br	49400 <_dtoa_r+0x974>
   493ec:	18ffffc4 	addi	r3,r3,-1
   493f0:	11824726 	beq	r2,r6,49d10 <_dtoa_r+0x1284>
   493f4:	1d000003 	ldbu	r20,0(r3)
   493f8:	102f883a 	mov	r23,r2
   493fc:	10bfffc4 	addi	r2,r2,-1
   49400:	a1003fcc 	andi	r4,r20,255
   49404:	2100201c 	xori	r4,r4,128
   49408:	213fe004 	addi	r4,r4,-128
   4940c:	217ff726 	beq	r4,r5,493ec <__alt_data_end+0xfffcabec>
   49410:	a2000044 	addi	r8,r20,1
   49414:	12000005 	stb	r8,0(r2)
   49418:	003f4606 	br	49134 <__alt_data_end+0xfffca934>
   4941c:	d9000b17 	ldw	r4,44(sp)
   49420:	2000c826 	beq	r4,zero,49744 <_dtoa_r+0xcb8>
   49424:	d9800317 	ldw	r6,12(sp)
   49428:	00c00044 	movi	r3,1
   4942c:	1980f90e 	bge	r3,r6,49814 <_dtoa_r+0xd88>
   49430:	d8800617 	ldw	r2,24(sp)
   49434:	d8c00a17 	ldw	r3,40(sp)
   49438:	157fffc4 	addi	r21,r2,-1
   4943c:	1d41f316 	blt	r3,r21,49c0c <_dtoa_r+0x1180>
   49440:	1d6bc83a 	sub	r21,r3,r21
   49444:	d9c00617 	ldw	r7,24(sp)
   49448:	3802aa16 	blt	r7,zero,49ef4 <_dtoa_r+0x1468>
   4944c:	dd000817 	ldw	r20,32(sp)
   49450:	d8800617 	ldw	r2,24(sp)
   49454:	d8c00817 	ldw	r3,32(sp)
   49458:	01400044 	movi	r5,1
   4945c:	e009883a 	mov	r4,fp
   49460:	1887883a 	add	r3,r3,r2
   49464:	d8c00815 	stw	r3,32(sp)
   49468:	b0ad883a 	add	r22,r22,r2
   4946c:	004c5340 	call	4c534 <__i2b>
   49470:	1023883a 	mov	r17,r2
   49474:	a0000826 	beq	r20,zero,49498 <_dtoa_r+0xa0c>
   49478:	0580070e 	bge	zero,r22,49498 <_dtoa_r+0xa0c>
   4947c:	a005883a 	mov	r2,r20
   49480:	b500b916 	blt	r22,r20,49768 <_dtoa_r+0xcdc>
   49484:	d9000817 	ldw	r4,32(sp)
   49488:	a0a9c83a 	sub	r20,r20,r2
   4948c:	b0adc83a 	sub	r22,r22,r2
   49490:	2089c83a 	sub	r4,r4,r2
   49494:	d9000815 	stw	r4,32(sp)
   49498:	d9800a17 	ldw	r6,40(sp)
   4949c:	0181810e 	bge	zero,r6,49aa4 <_dtoa_r+0x1018>
   494a0:	d9c00b17 	ldw	r7,44(sp)
   494a4:	3800b326 	beq	r7,zero,49774 <_dtoa_r+0xce8>
   494a8:	a800b226 	beq	r21,zero,49774 <_dtoa_r+0xce8>
   494ac:	880b883a 	mov	r5,r17
   494b0:	a80d883a 	mov	r6,r21
   494b4:	e009883a 	mov	r4,fp
   494b8:	004c7680 	call	4c768 <__pow5mult>
   494bc:	d9800917 	ldw	r6,36(sp)
   494c0:	100b883a 	mov	r5,r2
   494c4:	e009883a 	mov	r4,fp
   494c8:	1023883a 	mov	r17,r2
   494cc:	004c5700 	call	4c570 <__multiply>
   494d0:	1021883a 	mov	r16,r2
   494d4:	d8800a17 	ldw	r2,40(sp)
   494d8:	d9400917 	ldw	r5,36(sp)
   494dc:	e009883a 	mov	r4,fp
   494e0:	1545c83a 	sub	r2,r2,r21
   494e4:	d8800a15 	stw	r2,40(sp)
   494e8:	004c1d00 	call	4c1d0 <_Bfree>
   494ec:	d8c00a17 	ldw	r3,40(sp)
   494f0:	18009f1e 	bne	r3,zero,49770 <_dtoa_r+0xce4>
   494f4:	05c00044 	movi	r23,1
   494f8:	e009883a 	mov	r4,fp
   494fc:	b80b883a 	mov	r5,r23
   49500:	004c5340 	call	4c534 <__i2b>
   49504:	d9000d17 	ldw	r4,52(sp)
   49508:	102b883a 	mov	r21,r2
   4950c:	2000ce26 	beq	r4,zero,49848 <_dtoa_r+0xdbc>
   49510:	200d883a 	mov	r6,r4
   49514:	100b883a 	mov	r5,r2
   49518:	e009883a 	mov	r4,fp
   4951c:	004c7680 	call	4c768 <__pow5mult>
   49520:	d9800317 	ldw	r6,12(sp)
   49524:	102b883a 	mov	r21,r2
   49528:	b981810e 	bge	r23,r6,49b30 <_dtoa_r+0x10a4>
   4952c:	0027883a 	mov	r19,zero
   49530:	a8800417 	ldw	r2,16(r21)
   49534:	05c00804 	movi	r23,32
   49538:	10800104 	addi	r2,r2,4
   4953c:	1085883a 	add	r2,r2,r2
   49540:	1085883a 	add	r2,r2,r2
   49544:	a885883a 	add	r2,r21,r2
   49548:	11000017 	ldw	r4,0(r2)
   4954c:	004c41c0 	call	4c41c <__hi0bits>
   49550:	b885c83a 	sub	r2,r23,r2
   49554:	1585883a 	add	r2,r2,r22
   49558:	108007cc 	andi	r2,r2,31
   4955c:	1000b326 	beq	r2,zero,4982c <_dtoa_r+0xda0>
   49560:	00c00804 	movi	r3,32
   49564:	1887c83a 	sub	r3,r3,r2
   49568:	01000104 	movi	r4,4
   4956c:	20c2cd0e 	bge	r4,r3,4a0a4 <_dtoa_r+0x1618>
   49570:	00c00704 	movi	r3,28
   49574:	1885c83a 	sub	r2,r3,r2
   49578:	d8c00817 	ldw	r3,32(sp)
   4957c:	a0a9883a 	add	r20,r20,r2
   49580:	b0ad883a 	add	r22,r22,r2
   49584:	1887883a 	add	r3,r3,r2
   49588:	d8c00815 	stw	r3,32(sp)
   4958c:	d9800817 	ldw	r6,32(sp)
   49590:	0180040e 	bge	zero,r6,495a4 <_dtoa_r+0xb18>
   49594:	800b883a 	mov	r5,r16
   49598:	e009883a 	mov	r4,fp
   4959c:	004c8a80 	call	4c8a8 <__lshift>
   495a0:	1021883a 	mov	r16,r2
   495a4:	0580050e 	bge	zero,r22,495bc <_dtoa_r+0xb30>
   495a8:	a80b883a 	mov	r5,r21
   495ac:	b00d883a 	mov	r6,r22
   495b0:	e009883a 	mov	r4,fp
   495b4:	004c8a80 	call	4c8a8 <__lshift>
   495b8:	102b883a 	mov	r21,r2
   495bc:	d9c00e17 	ldw	r7,56(sp)
   495c0:	3801211e 	bne	r7,zero,49a48 <_dtoa_r+0xfbc>
   495c4:	d9800617 	ldw	r6,24(sp)
   495c8:	0181380e 	bge	zero,r6,49aac <_dtoa_r+0x1020>
   495cc:	d8c00b17 	ldw	r3,44(sp)
   495d0:	1800ab1e 	bne	r3,zero,49880 <_dtoa_r+0xdf4>
   495d4:	dc800717 	ldw	r18,28(sp)
   495d8:	dcc00617 	ldw	r19,24(sp)
   495dc:	9029883a 	mov	r20,r18
   495e0:	00000206 	br	495ec <_dtoa_r+0xb60>
   495e4:	004c1f80 	call	4c1f8 <__multadd>
   495e8:	1021883a 	mov	r16,r2
   495ec:	a80b883a 	mov	r5,r21
   495f0:	8009883a 	mov	r4,r16
   495f4:	004888c0 	call	4888c <quorem>
   495f8:	10800c04 	addi	r2,r2,48
   495fc:	90800005 	stb	r2,0(r18)
   49600:	94800044 	addi	r18,r18,1
   49604:	9507c83a 	sub	r3,r18,r20
   49608:	000f883a 	mov	r7,zero
   4960c:	01800284 	movi	r6,10
   49610:	800b883a 	mov	r5,r16
   49614:	e009883a 	mov	r4,fp
   49618:	1cfff216 	blt	r3,r19,495e4 <__alt_data_end+0xfffcade4>
   4961c:	1011883a 	mov	r8,r2
   49620:	d8800617 	ldw	r2,24(sp)
   49624:	0082370e 	bge	zero,r2,49f04 <_dtoa_r+0x1478>
   49628:	d9000717 	ldw	r4,28(sp)
   4962c:	0025883a 	mov	r18,zero
   49630:	20af883a 	add	r23,r4,r2
   49634:	01800044 	movi	r6,1
   49638:	800b883a 	mov	r5,r16
   4963c:	e009883a 	mov	r4,fp
   49640:	da001715 	stw	r8,92(sp)
   49644:	004c8a80 	call	4c8a8 <__lshift>
   49648:	a80b883a 	mov	r5,r21
   4964c:	1009883a 	mov	r4,r2
   49650:	d8800915 	stw	r2,36(sp)
   49654:	004c9f00 	call	4c9f0 <__mcmp>
   49658:	da001717 	ldw	r8,92(sp)
   4965c:	0081800e 	bge	zero,r2,49c60 <_dtoa_r+0x11d4>
   49660:	b93fffc3 	ldbu	r4,-1(r23)
   49664:	b8bfffc4 	addi	r2,r23,-1
   49668:	1007883a 	mov	r3,r2
   4966c:	01800e44 	movi	r6,57
   49670:	d9c00717 	ldw	r7,28(sp)
   49674:	00000506 	br	4968c <_dtoa_r+0xc00>
   49678:	18ffffc4 	addi	r3,r3,-1
   4967c:	11c12326 	beq	r2,r7,49b0c <_dtoa_r+0x1080>
   49680:	19000003 	ldbu	r4,0(r3)
   49684:	102f883a 	mov	r23,r2
   49688:	10bfffc4 	addi	r2,r2,-1
   4968c:	21403fcc 	andi	r5,r4,255
   49690:	2940201c 	xori	r5,r5,128
   49694:	297fe004 	addi	r5,r5,-128
   49698:	29bff726 	beq	r5,r6,49678 <__alt_data_end+0xfffcae78>
   4969c:	21000044 	addi	r4,r4,1
   496a0:	11000005 	stb	r4,0(r2)
   496a4:	a80b883a 	mov	r5,r21
   496a8:	e009883a 	mov	r4,fp
   496ac:	004c1d00 	call	4c1d0 <_Bfree>
   496b0:	883ea026 	beq	r17,zero,49134 <__alt_data_end+0xfffca934>
   496b4:	90000426 	beq	r18,zero,496c8 <_dtoa_r+0xc3c>
   496b8:	94400326 	beq	r18,r17,496c8 <_dtoa_r+0xc3c>
   496bc:	900b883a 	mov	r5,r18
   496c0:	e009883a 	mov	r4,fp
   496c4:	004c1d00 	call	4c1d0 <_Bfree>
   496c8:	880b883a 	mov	r5,r17
   496cc:	e009883a 	mov	r4,fp
   496d0:	004c1d00 	call	4c1d0 <_Bfree>
   496d4:	003e9706 	br	49134 <__alt_data_end+0xfffca934>
   496d8:	01800044 	movi	r6,1
   496dc:	d9800e15 	stw	r6,56(sp)
   496e0:	003d9606 	br	48d3c <__alt_data_end+0xfffca53c>
   496e4:	d8800817 	ldw	r2,32(sp)
   496e8:	d8c00517 	ldw	r3,20(sp)
   496ec:	d8000d15 	stw	zero,52(sp)
   496f0:	10c5c83a 	sub	r2,r2,r3
   496f4:	00c9c83a 	sub	r4,zero,r3
   496f8:	d8800815 	stw	r2,32(sp)
   496fc:	d9000a15 	stw	r4,40(sp)
   49700:	003d9706 	br	48d60 <__alt_data_end+0xfffca560>
   49704:	05adc83a 	sub	r22,zero,r22
   49708:	dd800815 	stw	r22,32(sp)
   4970c:	002d883a 	mov	r22,zero
   49710:	003d8e06 	br	48d4c <__alt_data_end+0xfffca54c>
   49714:	d9000517 	ldw	r4,20(sp)
   49718:	0052a8c0 	call	52a8c <__floatsidf>
   4971c:	100d883a 	mov	r6,r2
   49720:	180f883a 	mov	r7,r3
   49724:	a009883a 	mov	r4,r20
   49728:	880b883a 	mov	r5,r17
   4972c:	00517a00 	call	517a0 <__eqdf2>
   49730:	103d7126 	beq	r2,zero,48cf8 <__alt_data_end+0xfffca4f8>
   49734:	d9c00517 	ldw	r7,20(sp)
   49738:	39ffffc4 	addi	r7,r7,-1
   4973c:	d9c00515 	stw	r7,20(sp)
   49740:	003d6d06 	br	48cf8 <__alt_data_end+0xfffca4f8>
   49744:	dd400a17 	ldw	r21,40(sp)
   49748:	dd000817 	ldw	r20,32(sp)
   4974c:	0023883a 	mov	r17,zero
   49750:	003f4806 	br	49474 <__alt_data_end+0xfffcac74>
   49754:	10e3c83a 	sub	r17,r2,r3
   49758:	9448983a 	sll	r4,r18,r17
   4975c:	003d3206 	br	48c28 <__alt_data_end+0xfffca428>
   49760:	d8000e15 	stw	zero,56(sp)
   49764:	003d7506 	br	48d3c <__alt_data_end+0xfffca53c>
   49768:	b005883a 	mov	r2,r22
   4976c:	003f4506 	br	49484 <__alt_data_end+0xfffcac84>
   49770:	dc000915 	stw	r16,36(sp)
   49774:	d9800a17 	ldw	r6,40(sp)
   49778:	d9400917 	ldw	r5,36(sp)
   4977c:	e009883a 	mov	r4,fp
   49780:	004c7680 	call	4c768 <__pow5mult>
   49784:	1021883a 	mov	r16,r2
   49788:	003f5a06 	br	494f4 <__alt_data_end+0xfffcacf4>
   4978c:	01c00044 	movi	r7,1
   49790:	d9c00b15 	stw	r7,44(sp)
   49794:	d8802217 	ldw	r2,136(sp)
   49798:	0081280e 	bge	zero,r2,49c3c <_dtoa_r+0x11b0>
   4979c:	100d883a 	mov	r6,r2
   497a0:	1021883a 	mov	r16,r2
   497a4:	d8800c15 	stw	r2,48(sp)
   497a8:	d8800615 	stw	r2,24(sp)
   497ac:	003d8806 	br	48dd0 <__alt_data_end+0xfffca5d0>
   497b0:	d8800617 	ldw	r2,24(sp)
   497b4:	00be9b16 	blt	zero,r2,49224 <__alt_data_end+0xfffcaa24>
   497b8:	10010f1e 	bne	r2,zero,49bf8 <_dtoa_r+0x116c>
   497bc:	880b883a 	mov	r5,r17
   497c0:	000d883a 	mov	r6,zero
   497c4:	01d00534 	movhi	r7,16404
   497c8:	8009883a 	mov	r4,r16
   497cc:	00519f80 	call	519f8 <__muldf3>
   497d0:	900d883a 	mov	r6,r18
   497d4:	980f883a 	mov	r7,r19
   497d8:	1009883a 	mov	r4,r2
   497dc:	180b883a 	mov	r5,r3
   497e0:	00518280 	call	51828 <__gedf2>
   497e4:	002b883a 	mov	r21,zero
   497e8:	0023883a 	mov	r17,zero
   497ec:	1000bf16 	blt	r2,zero,49aec <_dtoa_r+0x1060>
   497f0:	d9802217 	ldw	r6,136(sp)
   497f4:	ddc00717 	ldw	r23,28(sp)
   497f8:	018c303a 	nor	r6,zero,r6
   497fc:	d9800515 	stw	r6,20(sp)
   49800:	a80b883a 	mov	r5,r21
   49804:	e009883a 	mov	r4,fp
   49808:	004c1d00 	call	4c1d0 <_Bfree>
   4980c:	883e4926 	beq	r17,zero,49134 <__alt_data_end+0xfffca934>
   49810:	003fad06 	br	496c8 <__alt_data_end+0xfffcaec8>
   49814:	d9c01117 	ldw	r7,68(sp)
   49818:	3801bc26 	beq	r7,zero,49f0c <_dtoa_r+0x1480>
   4981c:	10810cc4 	addi	r2,r2,1075
   49820:	dd400a17 	ldw	r21,40(sp)
   49824:	dd000817 	ldw	r20,32(sp)
   49828:	003f0a06 	br	49454 <__alt_data_end+0xfffcac54>
   4982c:	00800704 	movi	r2,28
   49830:	d9000817 	ldw	r4,32(sp)
   49834:	a0a9883a 	add	r20,r20,r2
   49838:	b0ad883a 	add	r22,r22,r2
   4983c:	2089883a 	add	r4,r4,r2
   49840:	d9000815 	stw	r4,32(sp)
   49844:	003f5106 	br	4958c <__alt_data_end+0xfffcad8c>
   49848:	d8c00317 	ldw	r3,12(sp)
   4984c:	b8c1fc0e 	bge	r23,r3,4a040 <_dtoa_r+0x15b4>
   49850:	0027883a 	mov	r19,zero
   49854:	b805883a 	mov	r2,r23
   49858:	003f3e06 	br	49554 <__alt_data_end+0xfffcad54>
   4985c:	880b883a 	mov	r5,r17
   49860:	e009883a 	mov	r4,fp
   49864:	000f883a 	mov	r7,zero
   49868:	01800284 	movi	r6,10
   4986c:	004c1f80 	call	4c1f8 <__multadd>
   49870:	d9000c17 	ldw	r4,48(sp)
   49874:	1023883a 	mov	r17,r2
   49878:	0102040e 	bge	zero,r4,4a08c <_dtoa_r+0x1600>
   4987c:	d9000615 	stw	r4,24(sp)
   49880:	0500050e 	bge	zero,r20,49898 <_dtoa_r+0xe0c>
   49884:	880b883a 	mov	r5,r17
   49888:	a00d883a 	mov	r6,r20
   4988c:	e009883a 	mov	r4,fp
   49890:	004c8a80 	call	4c8a8 <__lshift>
   49894:	1023883a 	mov	r17,r2
   49898:	9801241e 	bne	r19,zero,49d2c <_dtoa_r+0x12a0>
   4989c:	8829883a 	mov	r20,r17
   498a0:	d9000617 	ldw	r4,24(sp)
   498a4:	dcc00717 	ldw	r19,28(sp)
   498a8:	9480004c 	andi	r18,r18,1
   498ac:	20bfffc4 	addi	r2,r4,-1
   498b0:	9885883a 	add	r2,r19,r2
   498b4:	d8800415 	stw	r2,16(sp)
   498b8:	dc800615 	stw	r18,24(sp)
   498bc:	a80b883a 	mov	r5,r21
   498c0:	8009883a 	mov	r4,r16
   498c4:	004888c0 	call	4888c <quorem>
   498c8:	880b883a 	mov	r5,r17
   498cc:	8009883a 	mov	r4,r16
   498d0:	102f883a 	mov	r23,r2
   498d4:	004c9f00 	call	4c9f0 <__mcmp>
   498d8:	a80b883a 	mov	r5,r21
   498dc:	a00d883a 	mov	r6,r20
   498e0:	e009883a 	mov	r4,fp
   498e4:	102d883a 	mov	r22,r2
   498e8:	004ca500 	call	4ca50 <__mdiff>
   498ec:	1007883a 	mov	r3,r2
   498f0:	10800317 	ldw	r2,12(r2)
   498f4:	bc800c04 	addi	r18,r23,48
   498f8:	180b883a 	mov	r5,r3
   498fc:	10004e1e 	bne	r2,zero,49a38 <_dtoa_r+0xfac>
   49900:	8009883a 	mov	r4,r16
   49904:	d8c01615 	stw	r3,88(sp)
   49908:	004c9f00 	call	4c9f0 <__mcmp>
   4990c:	d8c01617 	ldw	r3,88(sp)
   49910:	e009883a 	mov	r4,fp
   49914:	d8801615 	stw	r2,88(sp)
   49918:	180b883a 	mov	r5,r3
   4991c:	004c1d00 	call	4c1d0 <_Bfree>
   49920:	d8801617 	ldw	r2,88(sp)
   49924:	1000041e 	bne	r2,zero,49938 <_dtoa_r+0xeac>
   49928:	d9800317 	ldw	r6,12(sp)
   4992c:	3000021e 	bne	r6,zero,49938 <_dtoa_r+0xeac>
   49930:	d8c00617 	ldw	r3,24(sp)
   49934:	18003726 	beq	r3,zero,49a14 <_dtoa_r+0xf88>
   49938:	b0002016 	blt	r22,zero,499bc <_dtoa_r+0xf30>
   4993c:	b000041e 	bne	r22,zero,49950 <_dtoa_r+0xec4>
   49940:	d9000317 	ldw	r4,12(sp)
   49944:	2000021e 	bne	r4,zero,49950 <_dtoa_r+0xec4>
   49948:	d8c00617 	ldw	r3,24(sp)
   4994c:	18001b26 	beq	r3,zero,499bc <_dtoa_r+0xf30>
   49950:	00810716 	blt	zero,r2,49d70 <_dtoa_r+0x12e4>
   49954:	d8c00417 	ldw	r3,16(sp)
   49958:	9d800044 	addi	r22,r19,1
   4995c:	9c800005 	stb	r18,0(r19)
   49960:	b02f883a 	mov	r23,r22
   49964:	98c10626 	beq	r19,r3,49d80 <_dtoa_r+0x12f4>
   49968:	800b883a 	mov	r5,r16
   4996c:	000f883a 	mov	r7,zero
   49970:	01800284 	movi	r6,10
   49974:	e009883a 	mov	r4,fp
   49978:	004c1f80 	call	4c1f8 <__multadd>
   4997c:	1021883a 	mov	r16,r2
   49980:	000f883a 	mov	r7,zero
   49984:	01800284 	movi	r6,10
   49988:	880b883a 	mov	r5,r17
   4998c:	e009883a 	mov	r4,fp
   49990:	8d002526 	beq	r17,r20,49a28 <_dtoa_r+0xf9c>
   49994:	004c1f80 	call	4c1f8 <__multadd>
   49998:	a00b883a 	mov	r5,r20
   4999c:	000f883a 	mov	r7,zero
   499a0:	01800284 	movi	r6,10
   499a4:	e009883a 	mov	r4,fp
   499a8:	1023883a 	mov	r17,r2
   499ac:	004c1f80 	call	4c1f8 <__multadd>
   499b0:	1029883a 	mov	r20,r2
   499b4:	b027883a 	mov	r19,r22
   499b8:	003fc006 	br	498bc <__alt_data_end+0xfffcb0bc>
   499bc:	9011883a 	mov	r8,r18
   499c0:	00800e0e 	bge	zero,r2,499fc <_dtoa_r+0xf70>
   499c4:	800b883a 	mov	r5,r16
   499c8:	01800044 	movi	r6,1
   499cc:	e009883a 	mov	r4,fp
   499d0:	da001715 	stw	r8,92(sp)
   499d4:	004c8a80 	call	4c8a8 <__lshift>
   499d8:	a80b883a 	mov	r5,r21
   499dc:	1009883a 	mov	r4,r2
   499e0:	1021883a 	mov	r16,r2
   499e4:	004c9f00 	call	4c9f0 <__mcmp>
   499e8:	da001717 	ldw	r8,92(sp)
   499ec:	0081960e 	bge	zero,r2,4a048 <_dtoa_r+0x15bc>
   499f0:	00800e44 	movi	r2,57
   499f4:	40817026 	beq	r8,r2,49fb8 <_dtoa_r+0x152c>
   499f8:	ba000c44 	addi	r8,r23,49
   499fc:	8825883a 	mov	r18,r17
   49a00:	9dc00044 	addi	r23,r19,1
   49a04:	9a000005 	stb	r8,0(r19)
   49a08:	a023883a 	mov	r17,r20
   49a0c:	dc000915 	stw	r16,36(sp)
   49a10:	003f2406 	br	496a4 <__alt_data_end+0xfffcaea4>
   49a14:	00800e44 	movi	r2,57
   49a18:	9011883a 	mov	r8,r18
   49a1c:	90816626 	beq	r18,r2,49fb8 <_dtoa_r+0x152c>
   49a20:	05bff516 	blt	zero,r22,499f8 <__alt_data_end+0xfffcb1f8>
   49a24:	003ff506 	br	499fc <__alt_data_end+0xfffcb1fc>
   49a28:	004c1f80 	call	4c1f8 <__multadd>
   49a2c:	1023883a 	mov	r17,r2
   49a30:	1029883a 	mov	r20,r2
   49a34:	003fdf06 	br	499b4 <__alt_data_end+0xfffcb1b4>
   49a38:	e009883a 	mov	r4,fp
   49a3c:	004c1d00 	call	4c1d0 <_Bfree>
   49a40:	00800044 	movi	r2,1
   49a44:	003fbc06 	br	49938 <__alt_data_end+0xfffcb138>
   49a48:	a80b883a 	mov	r5,r21
   49a4c:	8009883a 	mov	r4,r16
   49a50:	004c9f00 	call	4c9f0 <__mcmp>
   49a54:	103edb0e 	bge	r2,zero,495c4 <__alt_data_end+0xfffcadc4>
   49a58:	800b883a 	mov	r5,r16
   49a5c:	000f883a 	mov	r7,zero
   49a60:	01800284 	movi	r6,10
   49a64:	e009883a 	mov	r4,fp
   49a68:	004c1f80 	call	4c1f8 <__multadd>
   49a6c:	1021883a 	mov	r16,r2
   49a70:	d8800517 	ldw	r2,20(sp)
   49a74:	d8c00b17 	ldw	r3,44(sp)
   49a78:	10bfffc4 	addi	r2,r2,-1
   49a7c:	d8800515 	stw	r2,20(sp)
   49a80:	183f761e 	bne	r3,zero,4985c <__alt_data_end+0xfffcb05c>
   49a84:	d9000c17 	ldw	r4,48(sp)
   49a88:	0101730e 	bge	zero,r4,4a058 <_dtoa_r+0x15cc>
   49a8c:	d9000615 	stw	r4,24(sp)
   49a90:	003ed006 	br	495d4 <__alt_data_end+0xfffcadd4>
   49a94:	00800084 	movi	r2,2
   49a98:	3081861e 	bne	r6,r2,4a0b4 <_dtoa_r+0x1628>
   49a9c:	d8000b15 	stw	zero,44(sp)
   49aa0:	003f3c06 	br	49794 <__alt_data_end+0xfffcaf94>
   49aa4:	dc000917 	ldw	r16,36(sp)
   49aa8:	003e9206 	br	494f4 <__alt_data_end+0xfffcacf4>
   49aac:	d9c00317 	ldw	r7,12(sp)
   49ab0:	00800084 	movi	r2,2
   49ab4:	11fec50e 	bge	r2,r7,495cc <__alt_data_end+0xfffcadcc>
   49ab8:	d9000617 	ldw	r4,24(sp)
   49abc:	20013c1e 	bne	r4,zero,49fb0 <_dtoa_r+0x1524>
   49ac0:	a80b883a 	mov	r5,r21
   49ac4:	000f883a 	mov	r7,zero
   49ac8:	01800144 	movi	r6,5
   49acc:	e009883a 	mov	r4,fp
   49ad0:	004c1f80 	call	4c1f8 <__multadd>
   49ad4:	100b883a 	mov	r5,r2
   49ad8:	8009883a 	mov	r4,r16
   49adc:	102b883a 	mov	r21,r2
   49ae0:	004c9f00 	call	4c9f0 <__mcmp>
   49ae4:	dc000915 	stw	r16,36(sp)
   49ae8:	00bf410e 	bge	zero,r2,497f0 <__alt_data_end+0xfffcaff0>
   49aec:	d9c00717 	ldw	r7,28(sp)
   49af0:	00800c44 	movi	r2,49
   49af4:	38800005 	stb	r2,0(r7)
   49af8:	d8800517 	ldw	r2,20(sp)
   49afc:	3dc00044 	addi	r23,r7,1
   49b00:	10800044 	addi	r2,r2,1
   49b04:	d8800515 	stw	r2,20(sp)
   49b08:	003f3d06 	br	49800 <__alt_data_end+0xfffcb000>
   49b0c:	d9800517 	ldw	r6,20(sp)
   49b10:	d9c00717 	ldw	r7,28(sp)
   49b14:	00800c44 	movi	r2,49
   49b18:	31800044 	addi	r6,r6,1
   49b1c:	d9800515 	stw	r6,20(sp)
   49b20:	38800005 	stb	r2,0(r7)
   49b24:	003edf06 	br	496a4 <__alt_data_end+0xfffcaea4>
   49b28:	d8000b15 	stw	zero,44(sp)
   49b2c:	003c9f06 	br	48dac <__alt_data_end+0xfffca5ac>
   49b30:	903e7e1e 	bne	r18,zero,4952c <__alt_data_end+0xfffcad2c>
   49b34:	00800434 	movhi	r2,16
   49b38:	10bfffc4 	addi	r2,r2,-1
   49b3c:	9884703a 	and	r2,r19,r2
   49b40:	1000ea1e 	bne	r2,zero,49eec <_dtoa_r+0x1460>
   49b44:	9cdffc2c 	andhi	r19,r19,32752
   49b48:	9800e826 	beq	r19,zero,49eec <_dtoa_r+0x1460>
   49b4c:	d9c00817 	ldw	r7,32(sp)
   49b50:	b5800044 	addi	r22,r22,1
   49b54:	04c00044 	movi	r19,1
   49b58:	39c00044 	addi	r7,r7,1
   49b5c:	d9c00815 	stw	r7,32(sp)
   49b60:	d8800d17 	ldw	r2,52(sp)
   49b64:	103e721e 	bne	r2,zero,49530 <__alt_data_end+0xfffcad30>
   49b68:	00800044 	movi	r2,1
   49b6c:	003e7906 	br	49554 <__alt_data_end+0xfffcad54>
   49b70:	8009883a 	mov	r4,r16
   49b74:	0052a8c0 	call	52a8c <__floatsidf>
   49b78:	d9800f17 	ldw	r6,60(sp)
   49b7c:	d9c01017 	ldw	r7,64(sp)
   49b80:	1009883a 	mov	r4,r2
   49b84:	180b883a 	mov	r5,r3
   49b88:	00519f80 	call	519f8 <__muldf3>
   49b8c:	000d883a 	mov	r6,zero
   49b90:	01d00734 	movhi	r7,16412
   49b94:	1009883a 	mov	r4,r2
   49b98:	180b883a 	mov	r5,r3
   49b9c:	004286c0 	call	4286c <__adddf3>
   49ba0:	047f3034 	movhi	r17,64704
   49ba4:	1021883a 	mov	r16,r2
   49ba8:	1c63883a 	add	r17,r3,r17
   49bac:	d9000f17 	ldw	r4,60(sp)
   49bb0:	d9401017 	ldw	r5,64(sp)
   49bb4:	000d883a 	mov	r6,zero
   49bb8:	01d00534 	movhi	r7,16404
   49bbc:	00521100 	call	52110 <__subdf3>
   49bc0:	800d883a 	mov	r6,r16
   49bc4:	880f883a 	mov	r7,r17
   49bc8:	1009883a 	mov	r4,r2
   49bcc:	180b883a 	mov	r5,r3
   49bd0:	102b883a 	mov	r21,r2
   49bd4:	1829883a 	mov	r20,r3
   49bd8:	00518280 	call	51828 <__gedf2>
   49bdc:	00806c16 	blt	zero,r2,49d90 <_dtoa_r+0x1304>
   49be0:	89e0003c 	xorhi	r7,r17,32768
   49be4:	800d883a 	mov	r6,r16
   49be8:	a809883a 	mov	r4,r21
   49bec:	a00b883a 	mov	r5,r20
   49bf0:	00519040 	call	51904 <__ledf2>
   49bf4:	103d7e0e 	bge	r2,zero,491f0 <__alt_data_end+0xfffca9f0>
   49bf8:	002b883a 	mov	r21,zero
   49bfc:	0023883a 	mov	r17,zero
   49c00:	003efb06 	br	497f0 <__alt_data_end+0xfffcaff0>
   49c04:	d8800717 	ldw	r2,28(sp)
   49c08:	003bd006 	br	48b4c <__alt_data_end+0xfffca34c>
   49c0c:	d9000a17 	ldw	r4,40(sp)
   49c10:	d9800d17 	ldw	r6,52(sp)
   49c14:	dd400a15 	stw	r21,40(sp)
   49c18:	a905c83a 	sub	r2,r21,r4
   49c1c:	308d883a 	add	r6,r6,r2
   49c20:	d9800d15 	stw	r6,52(sp)
   49c24:	002b883a 	mov	r21,zero
   49c28:	003e0606 	br	49444 <__alt_data_end+0xfffcac44>
   49c2c:	9023883a 	mov	r17,r18
   49c30:	9829883a 	mov	r20,r19
   49c34:	04000084 	movi	r16,2
   49c38:	003c9206 	br	48e84 <__alt_data_end+0xfffca684>
   49c3c:	04000044 	movi	r16,1
   49c40:	dc000c15 	stw	r16,48(sp)
   49c44:	dc000615 	stw	r16,24(sp)
   49c48:	dc002215 	stw	r16,136(sp)
   49c4c:	e0001115 	stw	zero,68(fp)
   49c50:	000b883a 	mov	r5,zero
   49c54:	003c6906 	br	48dfc <__alt_data_end+0xfffca5fc>
   49c58:	3021883a 	mov	r16,r6
   49c5c:	003ffb06 	br	49c4c <__alt_data_end+0xfffcb44c>
   49c60:	1000021e 	bne	r2,zero,49c6c <_dtoa_r+0x11e0>
   49c64:	4200004c 	andi	r8,r8,1
   49c68:	403e7d1e 	bne	r8,zero,49660 <__alt_data_end+0xfffcae60>
   49c6c:	01000c04 	movi	r4,48
   49c70:	00000106 	br	49c78 <_dtoa_r+0x11ec>
   49c74:	102f883a 	mov	r23,r2
   49c78:	b8bfffc4 	addi	r2,r23,-1
   49c7c:	10c00007 	ldb	r3,0(r2)
   49c80:	193ffc26 	beq	r3,r4,49c74 <__alt_data_end+0xfffcb474>
   49c84:	003e8706 	br	496a4 <__alt_data_end+0xfffcaea4>
   49c88:	d8800517 	ldw	r2,20(sp)
   49c8c:	00a3c83a 	sub	r17,zero,r2
   49c90:	8800a426 	beq	r17,zero,49f24 <_dtoa_r+0x1498>
   49c94:	888003cc 	andi	r2,r17,15
   49c98:	100490fa 	slli	r2,r2,3
   49c9c:	00c00174 	movhi	r3,5
   49ca0:	18d77b04 	addi	r3,r3,24044
   49ca4:	1885883a 	add	r2,r3,r2
   49ca8:	11800017 	ldw	r6,0(r2)
   49cac:	11c00117 	ldw	r7,4(r2)
   49cb0:	9009883a 	mov	r4,r18
   49cb4:	980b883a 	mov	r5,r19
   49cb8:	8823d13a 	srai	r17,r17,4
   49cbc:	00519f80 	call	519f8 <__muldf3>
   49cc0:	d8800f15 	stw	r2,60(sp)
   49cc4:	d8c01015 	stw	r3,64(sp)
   49cc8:	8800e826 	beq	r17,zero,4a06c <_dtoa_r+0x15e0>
   49ccc:	05000174 	movhi	r20,5
   49cd0:	a5177104 	addi	r20,r20,24004
   49cd4:	04000084 	movi	r16,2
   49cd8:	8980004c 	andi	r6,r17,1
   49cdc:	1009883a 	mov	r4,r2
   49ce0:	8823d07a 	srai	r17,r17,1
   49ce4:	180b883a 	mov	r5,r3
   49ce8:	30000426 	beq	r6,zero,49cfc <_dtoa_r+0x1270>
   49cec:	a1800017 	ldw	r6,0(r20)
   49cf0:	a1c00117 	ldw	r7,4(r20)
   49cf4:	84000044 	addi	r16,r16,1
   49cf8:	00519f80 	call	519f8 <__muldf3>
   49cfc:	a5000204 	addi	r20,r20,8
   49d00:	883ff51e 	bne	r17,zero,49cd8 <__alt_data_end+0xfffcb4d8>
   49d04:	d8800f15 	stw	r2,60(sp)
   49d08:	d8c01015 	stw	r3,64(sp)
   49d0c:	003c7606 	br	48ee8 <__alt_data_end+0xfffca6e8>
   49d10:	00c00c04 	movi	r3,48
   49d14:	10c00005 	stb	r3,0(r2)
   49d18:	d8c00517 	ldw	r3,20(sp)
   49d1c:	bd3fffc3 	ldbu	r20,-1(r23)
   49d20:	18c00044 	addi	r3,r3,1
   49d24:	d8c00515 	stw	r3,20(sp)
   49d28:	003db906 	br	49410 <__alt_data_end+0xfffcac10>
   49d2c:	89400117 	ldw	r5,4(r17)
   49d30:	e009883a 	mov	r4,fp
   49d34:	004c1280 	call	4c128 <_Balloc>
   49d38:	89800417 	ldw	r6,16(r17)
   49d3c:	89400304 	addi	r5,r17,12
   49d40:	11000304 	addi	r4,r2,12
   49d44:	31800084 	addi	r6,r6,2
   49d48:	318d883a 	add	r6,r6,r6
   49d4c:	318d883a 	add	r6,r6,r6
   49d50:	1027883a 	mov	r19,r2
   49d54:	004bd5c0 	call	4bd5c <memcpy>
   49d58:	01800044 	movi	r6,1
   49d5c:	980b883a 	mov	r5,r19
   49d60:	e009883a 	mov	r4,fp
   49d64:	004c8a80 	call	4c8a8 <__lshift>
   49d68:	1029883a 	mov	r20,r2
   49d6c:	003ecc06 	br	498a0 <__alt_data_end+0xfffcb0a0>
   49d70:	00800e44 	movi	r2,57
   49d74:	90809026 	beq	r18,r2,49fb8 <_dtoa_r+0x152c>
   49d78:	92000044 	addi	r8,r18,1
   49d7c:	003f1f06 	br	499fc <__alt_data_end+0xfffcb1fc>
   49d80:	9011883a 	mov	r8,r18
   49d84:	8825883a 	mov	r18,r17
   49d88:	a023883a 	mov	r17,r20
   49d8c:	003e2906 	br	49634 <__alt_data_end+0xfffcae34>
   49d90:	002b883a 	mov	r21,zero
   49d94:	0023883a 	mov	r17,zero
   49d98:	003f5406 	br	49aec <__alt_data_end+0xfffcb2ec>
   49d9c:	61bfffc4 	addi	r6,r12,-1
   49da0:	300490fa 	slli	r2,r6,3
   49da4:	00c00174 	movhi	r3,5
   49da8:	18d77b04 	addi	r3,r3,24044
   49dac:	1885883a 	add	r2,r3,r2
   49db0:	11000017 	ldw	r4,0(r2)
   49db4:	11400117 	ldw	r5,4(r2)
   49db8:	d8800717 	ldw	r2,28(sp)
   49dbc:	880f883a 	mov	r7,r17
   49dc0:	d9801215 	stw	r6,72(sp)
   49dc4:	800d883a 	mov	r6,r16
   49dc8:	db001615 	stw	r12,88(sp)
   49dcc:	15c00044 	addi	r23,r2,1
   49dd0:	00519f80 	call	519f8 <__muldf3>
   49dd4:	d9401017 	ldw	r5,64(sp)
   49dd8:	d9000f17 	ldw	r4,60(sp)
   49ddc:	d8c01515 	stw	r3,84(sp)
   49de0:	d8801415 	stw	r2,80(sp)
   49de4:	0052a0c0 	call	52a0c <__fixdfsi>
   49de8:	1009883a 	mov	r4,r2
   49dec:	1021883a 	mov	r16,r2
   49df0:	0052a8c0 	call	52a8c <__floatsidf>
   49df4:	d9000f17 	ldw	r4,60(sp)
   49df8:	d9401017 	ldw	r5,64(sp)
   49dfc:	100d883a 	mov	r6,r2
   49e00:	180f883a 	mov	r7,r3
   49e04:	00521100 	call	52110 <__subdf3>
   49e08:	1829883a 	mov	r20,r3
   49e0c:	d8c00717 	ldw	r3,28(sp)
   49e10:	84000c04 	addi	r16,r16,48
   49e14:	1023883a 	mov	r17,r2
   49e18:	1c000005 	stb	r16,0(r3)
   49e1c:	db001617 	ldw	r12,88(sp)
   49e20:	00800044 	movi	r2,1
   49e24:	60802226 	beq	r12,r2,49eb0 <_dtoa_r+0x1424>
   49e28:	d9c00717 	ldw	r7,28(sp)
   49e2c:	8805883a 	mov	r2,r17
   49e30:	b82b883a 	mov	r21,r23
   49e34:	3b19883a 	add	r12,r7,r12
   49e38:	6023883a 	mov	r17,r12
   49e3c:	a007883a 	mov	r3,r20
   49e40:	dc800f15 	stw	r18,60(sp)
   49e44:	000d883a 	mov	r6,zero
   49e48:	01d00934 	movhi	r7,16420
   49e4c:	1009883a 	mov	r4,r2
   49e50:	180b883a 	mov	r5,r3
   49e54:	00519f80 	call	519f8 <__muldf3>
   49e58:	180b883a 	mov	r5,r3
   49e5c:	1009883a 	mov	r4,r2
   49e60:	1829883a 	mov	r20,r3
   49e64:	1025883a 	mov	r18,r2
   49e68:	0052a0c0 	call	52a0c <__fixdfsi>
   49e6c:	1009883a 	mov	r4,r2
   49e70:	1021883a 	mov	r16,r2
   49e74:	0052a8c0 	call	52a8c <__floatsidf>
   49e78:	100d883a 	mov	r6,r2
   49e7c:	180f883a 	mov	r7,r3
   49e80:	9009883a 	mov	r4,r18
   49e84:	a00b883a 	mov	r5,r20
   49e88:	84000c04 	addi	r16,r16,48
   49e8c:	00521100 	call	52110 <__subdf3>
   49e90:	ad400044 	addi	r21,r21,1
   49e94:	ac3fffc5 	stb	r16,-1(r21)
   49e98:	ac7fea1e 	bne	r21,r17,49e44 <__alt_data_end+0xfffcb644>
   49e9c:	1023883a 	mov	r17,r2
   49ea0:	d8801217 	ldw	r2,72(sp)
   49ea4:	dc800f17 	ldw	r18,60(sp)
   49ea8:	1829883a 	mov	r20,r3
   49eac:	b8af883a 	add	r23,r23,r2
   49eb0:	d9001417 	ldw	r4,80(sp)
   49eb4:	d9401517 	ldw	r5,84(sp)
   49eb8:	000d883a 	mov	r6,zero
   49ebc:	01cff834 	movhi	r7,16352
   49ec0:	004286c0 	call	4286c <__adddf3>
   49ec4:	880d883a 	mov	r6,r17
   49ec8:	a00f883a 	mov	r7,r20
   49ecc:	1009883a 	mov	r4,r2
   49ed0:	180b883a 	mov	r5,r3
   49ed4:	00519040 	call	51904 <__ledf2>
   49ed8:	10003e0e 	bge	r2,zero,49fd4 <_dtoa_r+0x1548>
   49edc:	d9001317 	ldw	r4,76(sp)
   49ee0:	bd3fffc3 	ldbu	r20,-1(r23)
   49ee4:	d9000515 	stw	r4,20(sp)
   49ee8:	003d3b06 	br	493d8 <__alt_data_end+0xfffcabd8>
   49eec:	0027883a 	mov	r19,zero
   49ef0:	003f1b06 	br	49b60 <__alt_data_end+0xfffcb360>
   49ef4:	d8800817 	ldw	r2,32(sp)
   49ef8:	11e9c83a 	sub	r20,r2,r7
   49efc:	0005883a 	mov	r2,zero
   49f00:	003d5406 	br	49454 <__alt_data_end+0xfffcac54>
   49f04:	00800044 	movi	r2,1
   49f08:	003dc706 	br	49628 <__alt_data_end+0xfffcae28>
   49f0c:	d8c00217 	ldw	r3,8(sp)
   49f10:	00800d84 	movi	r2,54
   49f14:	dd400a17 	ldw	r21,40(sp)
   49f18:	10c5c83a 	sub	r2,r2,r3
   49f1c:	dd000817 	ldw	r20,32(sp)
   49f20:	003d4c06 	br	49454 <__alt_data_end+0xfffcac54>
   49f24:	dc800f15 	stw	r18,60(sp)
   49f28:	dcc01015 	stw	r19,64(sp)
   49f2c:	04000084 	movi	r16,2
   49f30:	003bed06 	br	48ee8 <__alt_data_end+0xfffca6e8>
   49f34:	d9000617 	ldw	r4,24(sp)
   49f38:	203f0d26 	beq	r4,zero,49b70 <__alt_data_end+0xfffcb370>
   49f3c:	d9800c17 	ldw	r6,48(sp)
   49f40:	01bcab0e 	bge	zero,r6,491f0 <__alt_data_end+0xfffca9f0>
   49f44:	d9401017 	ldw	r5,64(sp)
   49f48:	d9000f17 	ldw	r4,60(sp)
   49f4c:	000d883a 	mov	r6,zero
   49f50:	01d00934 	movhi	r7,16420
   49f54:	00519f80 	call	519f8 <__muldf3>
   49f58:	81000044 	addi	r4,r16,1
   49f5c:	d8800f15 	stw	r2,60(sp)
   49f60:	d8c01015 	stw	r3,64(sp)
   49f64:	0052a8c0 	call	52a8c <__floatsidf>
   49f68:	d9800f17 	ldw	r6,60(sp)
   49f6c:	d9c01017 	ldw	r7,64(sp)
   49f70:	1009883a 	mov	r4,r2
   49f74:	180b883a 	mov	r5,r3
   49f78:	00519f80 	call	519f8 <__muldf3>
   49f7c:	01d00734 	movhi	r7,16412
   49f80:	000d883a 	mov	r6,zero
   49f84:	1009883a 	mov	r4,r2
   49f88:	180b883a 	mov	r5,r3
   49f8c:	004286c0 	call	4286c <__adddf3>
   49f90:	d9c00517 	ldw	r7,20(sp)
   49f94:	047f3034 	movhi	r17,64704
   49f98:	1021883a 	mov	r16,r2
   49f9c:	39ffffc4 	addi	r7,r7,-1
   49fa0:	d9c01315 	stw	r7,76(sp)
   49fa4:	1c63883a 	add	r17,r3,r17
   49fa8:	db000c17 	ldw	r12,48(sp)
   49fac:	003bea06 	br	48f58 <__alt_data_end+0xfffca758>
   49fb0:	dc000915 	stw	r16,36(sp)
   49fb4:	003e0e06 	br	497f0 <__alt_data_end+0xfffcaff0>
   49fb8:	01000e44 	movi	r4,57
   49fbc:	8825883a 	mov	r18,r17
   49fc0:	9dc00044 	addi	r23,r19,1
   49fc4:	99000005 	stb	r4,0(r19)
   49fc8:	a023883a 	mov	r17,r20
   49fcc:	dc000915 	stw	r16,36(sp)
   49fd0:	003da406 	br	49664 <__alt_data_end+0xfffcae64>
   49fd4:	d9801417 	ldw	r6,80(sp)
   49fd8:	d9c01517 	ldw	r7,84(sp)
   49fdc:	0009883a 	mov	r4,zero
   49fe0:	014ff834 	movhi	r5,16352
   49fe4:	00521100 	call	52110 <__subdf3>
   49fe8:	880d883a 	mov	r6,r17
   49fec:	a00f883a 	mov	r7,r20
   49ff0:	1009883a 	mov	r4,r2
   49ff4:	180b883a 	mov	r5,r3
   49ff8:	00518280 	call	51828 <__gedf2>
   49ffc:	00bc7c0e 	bge	zero,r2,491f0 <__alt_data_end+0xfffca9f0>
   4a000:	01000c04 	movi	r4,48
   4a004:	00000106 	br	4a00c <_dtoa_r+0x1580>
   4a008:	102f883a 	mov	r23,r2
   4a00c:	b8bfffc4 	addi	r2,r23,-1
   4a010:	10c00007 	ldb	r3,0(r2)
   4a014:	193ffc26 	beq	r3,r4,4a008 <__alt_data_end+0xfffcb808>
   4a018:	d9801317 	ldw	r6,76(sp)
   4a01c:	d9800515 	stw	r6,20(sp)
   4a020:	003c4406 	br	49134 <__alt_data_end+0xfffca934>
   4a024:	d9801317 	ldw	r6,76(sp)
   4a028:	d9800515 	stw	r6,20(sp)
   4a02c:	003cea06 	br	493d8 <__alt_data_end+0xfffcabd8>
   4a030:	dd800f17 	ldw	r22,60(sp)
   4a034:	dcc01017 	ldw	r19,64(sp)
   4a038:	dc801217 	ldw	r18,72(sp)
   4a03c:	003c6c06 	br	491f0 <__alt_data_end+0xfffca9f0>
   4a040:	903e031e 	bne	r18,zero,49850 <__alt_data_end+0xfffcb050>
   4a044:	003ebb06 	br	49b34 <__alt_data_end+0xfffcb334>
   4a048:	103e6c1e 	bne	r2,zero,499fc <__alt_data_end+0xfffcb1fc>
   4a04c:	4080004c 	andi	r2,r8,1
   4a050:	103e6a26 	beq	r2,zero,499fc <__alt_data_end+0xfffcb1fc>
   4a054:	003e6606 	br	499f0 <__alt_data_end+0xfffcb1f0>
   4a058:	d8c00317 	ldw	r3,12(sp)
   4a05c:	00800084 	movi	r2,2
   4a060:	10c02916 	blt	r2,r3,4a108 <_dtoa_r+0x167c>
   4a064:	d9000c17 	ldw	r4,48(sp)
   4a068:	003e8806 	br	49a8c <__alt_data_end+0xfffcb28c>
   4a06c:	04000084 	movi	r16,2
   4a070:	003b9d06 	br	48ee8 <__alt_data_end+0xfffca6e8>
   4a074:	d9001317 	ldw	r4,76(sp)
   4a078:	d9000515 	stw	r4,20(sp)
   4a07c:	003cd606 	br	493d8 <__alt_data_end+0xfffcabd8>
   4a080:	d8801317 	ldw	r2,76(sp)
   4a084:	d8800515 	stw	r2,20(sp)
   4a088:	003c2a06 	br	49134 <__alt_data_end+0xfffca934>
   4a08c:	d9800317 	ldw	r6,12(sp)
   4a090:	00800084 	movi	r2,2
   4a094:	11801516 	blt	r2,r6,4a0ec <_dtoa_r+0x1660>
   4a098:	d9c00c17 	ldw	r7,48(sp)
   4a09c:	d9c00615 	stw	r7,24(sp)
   4a0a0:	003df706 	br	49880 <__alt_data_end+0xfffcb080>
   4a0a4:	193d3926 	beq	r3,r4,4958c <__alt_data_end+0xfffcad8c>
   4a0a8:	00c00f04 	movi	r3,60
   4a0ac:	1885c83a 	sub	r2,r3,r2
   4a0b0:	003ddf06 	br	49830 <__alt_data_end+0xfffcb030>
   4a0b4:	e009883a 	mov	r4,fp
   4a0b8:	e0001115 	stw	zero,68(fp)
   4a0bc:	000b883a 	mov	r5,zero
   4a0c0:	004c1280 	call	4c128 <_Balloc>
   4a0c4:	d8800715 	stw	r2,28(sp)
   4a0c8:	d8c00717 	ldw	r3,28(sp)
   4a0cc:	00bfffc4 	movi	r2,-1
   4a0d0:	01000044 	movi	r4,1
   4a0d4:	d8800c15 	stw	r2,48(sp)
   4a0d8:	e0c01015 	stw	r3,64(fp)
   4a0dc:	d9000b15 	stw	r4,44(sp)
   4a0e0:	d8800615 	stw	r2,24(sp)
   4a0e4:	d8002215 	stw	zero,136(sp)
   4a0e8:	003c4106 	br	491f0 <__alt_data_end+0xfffca9f0>
   4a0ec:	d8c00c17 	ldw	r3,48(sp)
   4a0f0:	d8c00615 	stw	r3,24(sp)
   4a0f4:	003e7006 	br	49ab8 <__alt_data_end+0xfffcb2b8>
   4a0f8:	04400044 	movi	r17,1
   4a0fc:	003b2006 	br	48d80 <__alt_data_end+0xfffca580>
   4a100:	000b883a 	mov	r5,zero
   4a104:	003b3d06 	br	48dfc <__alt_data_end+0xfffca5fc>
   4a108:	d8800c17 	ldw	r2,48(sp)
   4a10c:	d8800615 	stw	r2,24(sp)
   4a110:	003e6906 	br	49ab8 <__alt_data_end+0xfffcb2b8>

0004a114 <__sflush_r>:
   4a114:	2880030b 	ldhu	r2,12(r5)
   4a118:	defffb04 	addi	sp,sp,-20
   4a11c:	dcc00315 	stw	r19,12(sp)
   4a120:	dc400115 	stw	r17,4(sp)
   4a124:	dfc00415 	stw	ra,16(sp)
   4a128:	dc800215 	stw	r18,8(sp)
   4a12c:	dc000015 	stw	r16,0(sp)
   4a130:	10c0020c 	andi	r3,r2,8
   4a134:	2823883a 	mov	r17,r5
   4a138:	2027883a 	mov	r19,r4
   4a13c:	1800311e 	bne	r3,zero,4a204 <__sflush_r+0xf0>
   4a140:	28c00117 	ldw	r3,4(r5)
   4a144:	10820014 	ori	r2,r2,2048
   4a148:	2880030d 	sth	r2,12(r5)
   4a14c:	00c04b0e 	bge	zero,r3,4a27c <__sflush_r+0x168>
   4a150:	8a000a17 	ldw	r8,40(r17)
   4a154:	40002326 	beq	r8,zero,4a1e4 <__sflush_r+0xd0>
   4a158:	9c000017 	ldw	r16,0(r19)
   4a15c:	10c4000c 	andi	r3,r2,4096
   4a160:	98000015 	stw	zero,0(r19)
   4a164:	18004826 	beq	r3,zero,4a288 <__sflush_r+0x174>
   4a168:	89801417 	ldw	r6,80(r17)
   4a16c:	10c0010c 	andi	r3,r2,4
   4a170:	18000626 	beq	r3,zero,4a18c <__sflush_r+0x78>
   4a174:	88c00117 	ldw	r3,4(r17)
   4a178:	88800c17 	ldw	r2,48(r17)
   4a17c:	30cdc83a 	sub	r6,r6,r3
   4a180:	10000226 	beq	r2,zero,4a18c <__sflush_r+0x78>
   4a184:	88800f17 	ldw	r2,60(r17)
   4a188:	308dc83a 	sub	r6,r6,r2
   4a18c:	89400717 	ldw	r5,28(r17)
   4a190:	000f883a 	mov	r7,zero
   4a194:	9809883a 	mov	r4,r19
   4a198:	403ee83a 	callr	r8
   4a19c:	00ffffc4 	movi	r3,-1
   4a1a0:	10c04426 	beq	r2,r3,4a2b4 <__sflush_r+0x1a0>
   4a1a4:	88c0030b 	ldhu	r3,12(r17)
   4a1a8:	89000417 	ldw	r4,16(r17)
   4a1ac:	88000115 	stw	zero,4(r17)
   4a1b0:	197dffcc 	andi	r5,r3,63487
   4a1b4:	8940030d 	sth	r5,12(r17)
   4a1b8:	89000015 	stw	r4,0(r17)
   4a1bc:	18c4000c 	andi	r3,r3,4096
   4a1c0:	18002c1e 	bne	r3,zero,4a274 <__sflush_r+0x160>
   4a1c4:	89400c17 	ldw	r5,48(r17)
   4a1c8:	9c000015 	stw	r16,0(r19)
   4a1cc:	28000526 	beq	r5,zero,4a1e4 <__sflush_r+0xd0>
   4a1d0:	88801004 	addi	r2,r17,64
   4a1d4:	28800226 	beq	r5,r2,4a1e0 <__sflush_r+0xcc>
   4a1d8:	9809883a 	mov	r4,r19
   4a1dc:	004a8800 	call	4a880 <_free_r>
   4a1e0:	88000c15 	stw	zero,48(r17)
   4a1e4:	0005883a 	mov	r2,zero
   4a1e8:	dfc00417 	ldw	ra,16(sp)
   4a1ec:	dcc00317 	ldw	r19,12(sp)
   4a1f0:	dc800217 	ldw	r18,8(sp)
   4a1f4:	dc400117 	ldw	r17,4(sp)
   4a1f8:	dc000017 	ldw	r16,0(sp)
   4a1fc:	dec00504 	addi	sp,sp,20
   4a200:	f800283a 	ret
   4a204:	2c800417 	ldw	r18,16(r5)
   4a208:	903ff626 	beq	r18,zero,4a1e4 <__alt_data_end+0xfffcb9e4>
   4a20c:	2c000017 	ldw	r16,0(r5)
   4a210:	108000cc 	andi	r2,r2,3
   4a214:	2c800015 	stw	r18,0(r5)
   4a218:	84a1c83a 	sub	r16,r16,r18
   4a21c:	1000131e 	bne	r2,zero,4a26c <__sflush_r+0x158>
   4a220:	28800517 	ldw	r2,20(r5)
   4a224:	88800215 	stw	r2,8(r17)
   4a228:	04000316 	blt	zero,r16,4a238 <__sflush_r+0x124>
   4a22c:	003fed06 	br	4a1e4 <__alt_data_end+0xfffcb9e4>
   4a230:	90a5883a 	add	r18,r18,r2
   4a234:	043feb0e 	bge	zero,r16,4a1e4 <__alt_data_end+0xfffcb9e4>
   4a238:	88800917 	ldw	r2,36(r17)
   4a23c:	89400717 	ldw	r5,28(r17)
   4a240:	800f883a 	mov	r7,r16
   4a244:	900d883a 	mov	r6,r18
   4a248:	9809883a 	mov	r4,r19
   4a24c:	103ee83a 	callr	r2
   4a250:	80a1c83a 	sub	r16,r16,r2
   4a254:	00bff616 	blt	zero,r2,4a230 <__alt_data_end+0xfffcba30>
   4a258:	88c0030b 	ldhu	r3,12(r17)
   4a25c:	00bfffc4 	movi	r2,-1
   4a260:	18c01014 	ori	r3,r3,64
   4a264:	88c0030d 	sth	r3,12(r17)
   4a268:	003fdf06 	br	4a1e8 <__alt_data_end+0xfffcb9e8>
   4a26c:	0005883a 	mov	r2,zero
   4a270:	003fec06 	br	4a224 <__alt_data_end+0xfffcba24>
   4a274:	88801415 	stw	r2,80(r17)
   4a278:	003fd206 	br	4a1c4 <__alt_data_end+0xfffcb9c4>
   4a27c:	28c00f17 	ldw	r3,60(r5)
   4a280:	00ffb316 	blt	zero,r3,4a150 <__alt_data_end+0xfffcb950>
   4a284:	003fd706 	br	4a1e4 <__alt_data_end+0xfffcb9e4>
   4a288:	89400717 	ldw	r5,28(r17)
   4a28c:	000d883a 	mov	r6,zero
   4a290:	01c00044 	movi	r7,1
   4a294:	9809883a 	mov	r4,r19
   4a298:	403ee83a 	callr	r8
   4a29c:	100d883a 	mov	r6,r2
   4a2a0:	00bfffc4 	movi	r2,-1
   4a2a4:	30801426 	beq	r6,r2,4a2f8 <__sflush_r+0x1e4>
   4a2a8:	8880030b 	ldhu	r2,12(r17)
   4a2ac:	8a000a17 	ldw	r8,40(r17)
   4a2b0:	003fae06 	br	4a16c <__alt_data_end+0xfffcb96c>
   4a2b4:	98c00017 	ldw	r3,0(r19)
   4a2b8:	183fba26 	beq	r3,zero,4a1a4 <__alt_data_end+0xfffcb9a4>
   4a2bc:	01000744 	movi	r4,29
   4a2c0:	19000626 	beq	r3,r4,4a2dc <__sflush_r+0x1c8>
   4a2c4:	01000584 	movi	r4,22
   4a2c8:	19000426 	beq	r3,r4,4a2dc <__sflush_r+0x1c8>
   4a2cc:	88c0030b 	ldhu	r3,12(r17)
   4a2d0:	18c01014 	ori	r3,r3,64
   4a2d4:	88c0030d 	sth	r3,12(r17)
   4a2d8:	003fc306 	br	4a1e8 <__alt_data_end+0xfffcb9e8>
   4a2dc:	8880030b 	ldhu	r2,12(r17)
   4a2e0:	88c00417 	ldw	r3,16(r17)
   4a2e4:	88000115 	stw	zero,4(r17)
   4a2e8:	10bdffcc 	andi	r2,r2,63487
   4a2ec:	8880030d 	sth	r2,12(r17)
   4a2f0:	88c00015 	stw	r3,0(r17)
   4a2f4:	003fb306 	br	4a1c4 <__alt_data_end+0xfffcb9c4>
   4a2f8:	98800017 	ldw	r2,0(r19)
   4a2fc:	103fea26 	beq	r2,zero,4a2a8 <__alt_data_end+0xfffcbaa8>
   4a300:	00c00744 	movi	r3,29
   4a304:	10c00226 	beq	r2,r3,4a310 <__sflush_r+0x1fc>
   4a308:	00c00584 	movi	r3,22
   4a30c:	10c0031e 	bne	r2,r3,4a31c <__sflush_r+0x208>
   4a310:	9c000015 	stw	r16,0(r19)
   4a314:	0005883a 	mov	r2,zero
   4a318:	003fb306 	br	4a1e8 <__alt_data_end+0xfffcb9e8>
   4a31c:	88c0030b 	ldhu	r3,12(r17)
   4a320:	3005883a 	mov	r2,r6
   4a324:	18c01014 	ori	r3,r3,64
   4a328:	88c0030d 	sth	r3,12(r17)
   4a32c:	003fae06 	br	4a1e8 <__alt_data_end+0xfffcb9e8>

0004a330 <_fflush_r>:
   4a330:	defffd04 	addi	sp,sp,-12
   4a334:	dc000115 	stw	r16,4(sp)
   4a338:	dfc00215 	stw	ra,8(sp)
   4a33c:	2021883a 	mov	r16,r4
   4a340:	20000226 	beq	r4,zero,4a34c <_fflush_r+0x1c>
   4a344:	20800e17 	ldw	r2,56(r4)
   4a348:	10000c26 	beq	r2,zero,4a37c <_fflush_r+0x4c>
   4a34c:	2880030f 	ldh	r2,12(r5)
   4a350:	1000051e 	bne	r2,zero,4a368 <_fflush_r+0x38>
   4a354:	0005883a 	mov	r2,zero
   4a358:	dfc00217 	ldw	ra,8(sp)
   4a35c:	dc000117 	ldw	r16,4(sp)
   4a360:	dec00304 	addi	sp,sp,12
   4a364:	f800283a 	ret
   4a368:	8009883a 	mov	r4,r16
   4a36c:	dfc00217 	ldw	ra,8(sp)
   4a370:	dc000117 	ldw	r16,4(sp)
   4a374:	dec00304 	addi	sp,sp,12
   4a378:	004a1141 	jmpi	4a114 <__sflush_r>
   4a37c:	d9400015 	stw	r5,0(sp)
   4a380:	004a70c0 	call	4a70c <__sinit>
   4a384:	d9400017 	ldw	r5,0(sp)
   4a388:	003ff006 	br	4a34c <__alt_data_end+0xfffcbb4c>

0004a38c <fflush>:
   4a38c:	20000526 	beq	r4,zero,4a3a4 <fflush+0x18>
   4a390:	00800174 	movhi	r2,5
   4a394:	109ea804 	addi	r2,r2,31392
   4a398:	200b883a 	mov	r5,r4
   4a39c:	11000017 	ldw	r4,0(r2)
   4a3a0:	004a3301 	jmpi	4a330 <_fflush_r>
   4a3a4:	00800174 	movhi	r2,5
   4a3a8:	109ea704 	addi	r2,r2,31388
   4a3ac:	11000017 	ldw	r4,0(r2)
   4a3b0:	01400174 	movhi	r5,5
   4a3b4:	2968cc04 	addi	r5,r5,-23760
   4a3b8:	004b1101 	jmpi	4b110 <_fwalk_reent>

0004a3bc <__fp_unlock>:
   4a3bc:	0005883a 	mov	r2,zero
   4a3c0:	f800283a 	ret

0004a3c4 <_cleanup_r>:
   4a3c4:	01400174 	movhi	r5,5
   4a3c8:	29414d04 	addi	r5,r5,1332
   4a3cc:	004b1101 	jmpi	4b110 <_fwalk_reent>

0004a3d0 <__sinit.part.1>:
   4a3d0:	defff704 	addi	sp,sp,-36
   4a3d4:	00c00174 	movhi	r3,5
   4a3d8:	dfc00815 	stw	ra,32(sp)
   4a3dc:	ddc00715 	stw	r23,28(sp)
   4a3e0:	dd800615 	stw	r22,24(sp)
   4a3e4:	dd400515 	stw	r21,20(sp)
   4a3e8:	dd000415 	stw	r20,16(sp)
   4a3ec:	dcc00315 	stw	r19,12(sp)
   4a3f0:	dc800215 	stw	r18,8(sp)
   4a3f4:	dc400115 	stw	r17,4(sp)
   4a3f8:	dc000015 	stw	r16,0(sp)
   4a3fc:	18e8f104 	addi	r3,r3,-23612
   4a400:	24000117 	ldw	r16,4(r4)
   4a404:	20c00f15 	stw	r3,60(r4)
   4a408:	2080bb04 	addi	r2,r4,748
   4a40c:	00c000c4 	movi	r3,3
   4a410:	20c0b915 	stw	r3,740(r4)
   4a414:	2080ba15 	stw	r2,744(r4)
   4a418:	2000b815 	stw	zero,736(r4)
   4a41c:	05c00204 	movi	r23,8
   4a420:	00800104 	movi	r2,4
   4a424:	2025883a 	mov	r18,r4
   4a428:	b80d883a 	mov	r6,r23
   4a42c:	81001704 	addi	r4,r16,92
   4a430:	000b883a 	mov	r5,zero
   4a434:	80000015 	stw	zero,0(r16)
   4a438:	80000115 	stw	zero,4(r16)
   4a43c:	80000215 	stw	zero,8(r16)
   4a440:	8080030d 	sth	r2,12(r16)
   4a444:	80001915 	stw	zero,100(r16)
   4a448:	8000038d 	sth	zero,14(r16)
   4a44c:	80000415 	stw	zero,16(r16)
   4a450:	80000515 	stw	zero,20(r16)
   4a454:	80000615 	stw	zero,24(r16)
   4a458:	004c0000 	call	4c000 <memset>
   4a45c:	05800174 	movhi	r22,5
   4a460:	94400217 	ldw	r17,8(r18)
   4a464:	05400174 	movhi	r21,5
   4a468:	05000174 	movhi	r20,5
   4a46c:	04c00174 	movhi	r19,5
   4a470:	b5b5d404 	addi	r22,r22,-10416
   4a474:	ad75eb04 	addi	r21,r21,-10324
   4a478:	a5360a04 	addi	r20,r20,-10200
   4a47c:	9cf62104 	addi	r19,r19,-10108
   4a480:	85800815 	stw	r22,32(r16)
   4a484:	85400915 	stw	r21,36(r16)
   4a488:	85000a15 	stw	r20,40(r16)
   4a48c:	84c00b15 	stw	r19,44(r16)
   4a490:	84000715 	stw	r16,28(r16)
   4a494:	00800284 	movi	r2,10
   4a498:	8880030d 	sth	r2,12(r17)
   4a49c:	00800044 	movi	r2,1
   4a4a0:	b80d883a 	mov	r6,r23
   4a4a4:	89001704 	addi	r4,r17,92
   4a4a8:	000b883a 	mov	r5,zero
   4a4ac:	88000015 	stw	zero,0(r17)
   4a4b0:	88000115 	stw	zero,4(r17)
   4a4b4:	88000215 	stw	zero,8(r17)
   4a4b8:	88001915 	stw	zero,100(r17)
   4a4bc:	8880038d 	sth	r2,14(r17)
   4a4c0:	88000415 	stw	zero,16(r17)
   4a4c4:	88000515 	stw	zero,20(r17)
   4a4c8:	88000615 	stw	zero,24(r17)
   4a4cc:	004c0000 	call	4c000 <memset>
   4a4d0:	94000317 	ldw	r16,12(r18)
   4a4d4:	00800484 	movi	r2,18
   4a4d8:	8c400715 	stw	r17,28(r17)
   4a4dc:	8d800815 	stw	r22,32(r17)
   4a4e0:	8d400915 	stw	r21,36(r17)
   4a4e4:	8d000a15 	stw	r20,40(r17)
   4a4e8:	8cc00b15 	stw	r19,44(r17)
   4a4ec:	8080030d 	sth	r2,12(r16)
   4a4f0:	00800084 	movi	r2,2
   4a4f4:	80000015 	stw	zero,0(r16)
   4a4f8:	80000115 	stw	zero,4(r16)
   4a4fc:	80000215 	stw	zero,8(r16)
   4a500:	80001915 	stw	zero,100(r16)
   4a504:	8080038d 	sth	r2,14(r16)
   4a508:	80000415 	stw	zero,16(r16)
   4a50c:	80000515 	stw	zero,20(r16)
   4a510:	80000615 	stw	zero,24(r16)
   4a514:	b80d883a 	mov	r6,r23
   4a518:	000b883a 	mov	r5,zero
   4a51c:	81001704 	addi	r4,r16,92
   4a520:	004c0000 	call	4c000 <memset>
   4a524:	00800044 	movi	r2,1
   4a528:	84000715 	stw	r16,28(r16)
   4a52c:	85800815 	stw	r22,32(r16)
   4a530:	85400915 	stw	r21,36(r16)
   4a534:	85000a15 	stw	r20,40(r16)
   4a538:	84c00b15 	stw	r19,44(r16)
   4a53c:	90800e15 	stw	r2,56(r18)
   4a540:	dfc00817 	ldw	ra,32(sp)
   4a544:	ddc00717 	ldw	r23,28(sp)
   4a548:	dd800617 	ldw	r22,24(sp)
   4a54c:	dd400517 	ldw	r21,20(sp)
   4a550:	dd000417 	ldw	r20,16(sp)
   4a554:	dcc00317 	ldw	r19,12(sp)
   4a558:	dc800217 	ldw	r18,8(sp)
   4a55c:	dc400117 	ldw	r17,4(sp)
   4a560:	dc000017 	ldw	r16,0(sp)
   4a564:	dec00904 	addi	sp,sp,36
   4a568:	f800283a 	ret

0004a56c <__fp_lock>:
   4a56c:	0005883a 	mov	r2,zero
   4a570:	f800283a 	ret

0004a574 <__sfmoreglue>:
   4a574:	defffc04 	addi	sp,sp,-16
   4a578:	dc400115 	stw	r17,4(sp)
   4a57c:	2c7fffc4 	addi	r17,r5,-1
   4a580:	8c401a24 	muli	r17,r17,104
   4a584:	dc800215 	stw	r18,8(sp)
   4a588:	2825883a 	mov	r18,r5
   4a58c:	89401d04 	addi	r5,r17,116
   4a590:	dc000015 	stw	r16,0(sp)
   4a594:	dfc00315 	stw	ra,12(sp)
   4a598:	004b46c0 	call	4b46c <_malloc_r>
   4a59c:	1021883a 	mov	r16,r2
   4a5a0:	10000726 	beq	r2,zero,4a5c0 <__sfmoreglue+0x4c>
   4a5a4:	11000304 	addi	r4,r2,12
   4a5a8:	10000015 	stw	zero,0(r2)
   4a5ac:	14800115 	stw	r18,4(r2)
   4a5b0:	11000215 	stw	r4,8(r2)
   4a5b4:	89801a04 	addi	r6,r17,104
   4a5b8:	000b883a 	mov	r5,zero
   4a5bc:	004c0000 	call	4c000 <memset>
   4a5c0:	8005883a 	mov	r2,r16
   4a5c4:	dfc00317 	ldw	ra,12(sp)
   4a5c8:	dc800217 	ldw	r18,8(sp)
   4a5cc:	dc400117 	ldw	r17,4(sp)
   4a5d0:	dc000017 	ldw	r16,0(sp)
   4a5d4:	dec00404 	addi	sp,sp,16
   4a5d8:	f800283a 	ret

0004a5dc <__sfp>:
   4a5dc:	defffb04 	addi	sp,sp,-20
   4a5e0:	dc000015 	stw	r16,0(sp)
   4a5e4:	04000174 	movhi	r16,5
   4a5e8:	841ea704 	addi	r16,r16,31388
   4a5ec:	dcc00315 	stw	r19,12(sp)
   4a5f0:	2027883a 	mov	r19,r4
   4a5f4:	81000017 	ldw	r4,0(r16)
   4a5f8:	dfc00415 	stw	ra,16(sp)
   4a5fc:	dc800215 	stw	r18,8(sp)
   4a600:	20800e17 	ldw	r2,56(r4)
   4a604:	dc400115 	stw	r17,4(sp)
   4a608:	1000021e 	bne	r2,zero,4a614 <__sfp+0x38>
   4a60c:	004a3d00 	call	4a3d0 <__sinit.part.1>
   4a610:	81000017 	ldw	r4,0(r16)
   4a614:	2480b804 	addi	r18,r4,736
   4a618:	047fffc4 	movi	r17,-1
   4a61c:	91000117 	ldw	r4,4(r18)
   4a620:	94000217 	ldw	r16,8(r18)
   4a624:	213fffc4 	addi	r4,r4,-1
   4a628:	20000a16 	blt	r4,zero,4a654 <__sfp+0x78>
   4a62c:	8080030f 	ldh	r2,12(r16)
   4a630:	10000c26 	beq	r2,zero,4a664 <__sfp+0x88>
   4a634:	80c01d04 	addi	r3,r16,116
   4a638:	00000206 	br	4a644 <__sfp+0x68>
   4a63c:	18bfe60f 	ldh	r2,-104(r3)
   4a640:	10000826 	beq	r2,zero,4a664 <__sfp+0x88>
   4a644:	213fffc4 	addi	r4,r4,-1
   4a648:	1c3ffd04 	addi	r16,r3,-12
   4a64c:	18c01a04 	addi	r3,r3,104
   4a650:	247ffa1e 	bne	r4,r17,4a63c <__alt_data_end+0xfffcbe3c>
   4a654:	90800017 	ldw	r2,0(r18)
   4a658:	10001d26 	beq	r2,zero,4a6d0 <__sfp+0xf4>
   4a65c:	1025883a 	mov	r18,r2
   4a660:	003fee06 	br	4a61c <__alt_data_end+0xfffcbe1c>
   4a664:	00bfffc4 	movi	r2,-1
   4a668:	8080038d 	sth	r2,14(r16)
   4a66c:	00800044 	movi	r2,1
   4a670:	8080030d 	sth	r2,12(r16)
   4a674:	80001915 	stw	zero,100(r16)
   4a678:	80000015 	stw	zero,0(r16)
   4a67c:	80000215 	stw	zero,8(r16)
   4a680:	80000115 	stw	zero,4(r16)
   4a684:	80000415 	stw	zero,16(r16)
   4a688:	80000515 	stw	zero,20(r16)
   4a68c:	80000615 	stw	zero,24(r16)
   4a690:	01800204 	movi	r6,8
   4a694:	000b883a 	mov	r5,zero
   4a698:	81001704 	addi	r4,r16,92
   4a69c:	004c0000 	call	4c000 <memset>
   4a6a0:	8005883a 	mov	r2,r16
   4a6a4:	80000c15 	stw	zero,48(r16)
   4a6a8:	80000d15 	stw	zero,52(r16)
   4a6ac:	80001115 	stw	zero,68(r16)
   4a6b0:	80001215 	stw	zero,72(r16)
   4a6b4:	dfc00417 	ldw	ra,16(sp)
   4a6b8:	dcc00317 	ldw	r19,12(sp)
   4a6bc:	dc800217 	ldw	r18,8(sp)
   4a6c0:	dc400117 	ldw	r17,4(sp)
   4a6c4:	dc000017 	ldw	r16,0(sp)
   4a6c8:	dec00504 	addi	sp,sp,20
   4a6cc:	f800283a 	ret
   4a6d0:	01400104 	movi	r5,4
   4a6d4:	9809883a 	mov	r4,r19
   4a6d8:	004a5740 	call	4a574 <__sfmoreglue>
   4a6dc:	90800015 	stw	r2,0(r18)
   4a6e0:	103fde1e 	bne	r2,zero,4a65c <__alt_data_end+0xfffcbe5c>
   4a6e4:	00800304 	movi	r2,12
   4a6e8:	98800015 	stw	r2,0(r19)
   4a6ec:	0005883a 	mov	r2,zero
   4a6f0:	003ff006 	br	4a6b4 <__alt_data_end+0xfffcbeb4>

0004a6f4 <_cleanup>:
   4a6f4:	00800174 	movhi	r2,5
   4a6f8:	109ea704 	addi	r2,r2,31388
   4a6fc:	11000017 	ldw	r4,0(r2)
   4a700:	01400174 	movhi	r5,5
   4a704:	29414d04 	addi	r5,r5,1332
   4a708:	004b1101 	jmpi	4b110 <_fwalk_reent>

0004a70c <__sinit>:
   4a70c:	20800e17 	ldw	r2,56(r4)
   4a710:	10000126 	beq	r2,zero,4a718 <__sinit+0xc>
   4a714:	f800283a 	ret
   4a718:	004a3d01 	jmpi	4a3d0 <__sinit.part.1>

0004a71c <__sfp_lock_acquire>:
   4a71c:	f800283a 	ret

0004a720 <__sfp_lock_release>:
   4a720:	f800283a 	ret

0004a724 <__sinit_lock_acquire>:
   4a724:	f800283a 	ret

0004a728 <__sinit_lock_release>:
   4a728:	f800283a 	ret

0004a72c <__fp_lock_all>:
   4a72c:	00800174 	movhi	r2,5
   4a730:	109ea804 	addi	r2,r2,31392
   4a734:	11000017 	ldw	r4,0(r2)
   4a738:	01400174 	movhi	r5,5
   4a73c:	29695b04 	addi	r5,r5,-23188
   4a740:	004b04c1 	jmpi	4b04c <_fwalk>

0004a744 <__fp_unlock_all>:
   4a744:	00800174 	movhi	r2,5
   4a748:	109ea804 	addi	r2,r2,31392
   4a74c:	11000017 	ldw	r4,0(r2)
   4a750:	01400174 	movhi	r5,5
   4a754:	2968ef04 	addi	r5,r5,-23620
   4a758:	004b04c1 	jmpi	4b04c <_fwalk>

0004a75c <_malloc_trim_r>:
   4a75c:	defffb04 	addi	sp,sp,-20
   4a760:	dcc00315 	stw	r19,12(sp)
   4a764:	04c00174 	movhi	r19,5
   4a768:	dc800215 	stw	r18,8(sp)
   4a76c:	dc400115 	stw	r17,4(sp)
   4a770:	dc000015 	stw	r16,0(sp)
   4a774:	dfc00415 	stw	ra,16(sp)
   4a778:	2821883a 	mov	r16,r5
   4a77c:	9cd92304 	addi	r19,r19,25740
   4a780:	2025883a 	mov	r18,r4
   4a784:	005342c0 	call	5342c <__malloc_lock>
   4a788:	98800217 	ldw	r2,8(r19)
   4a78c:	14400117 	ldw	r17,4(r2)
   4a790:	00bfff04 	movi	r2,-4
   4a794:	88a2703a 	and	r17,r17,r2
   4a798:	8c21c83a 	sub	r16,r17,r16
   4a79c:	8403fbc4 	addi	r16,r16,4079
   4a7a0:	8020d33a 	srli	r16,r16,12
   4a7a4:	0083ffc4 	movi	r2,4095
   4a7a8:	843fffc4 	addi	r16,r16,-1
   4a7ac:	8020933a 	slli	r16,r16,12
   4a7b0:	1400060e 	bge	r2,r16,4a7cc <_malloc_trim_r+0x70>
   4a7b4:	000b883a 	mov	r5,zero
   4a7b8:	9009883a 	mov	r4,r18
   4a7bc:	004d6fc0 	call	4d6fc <_sbrk_r>
   4a7c0:	98c00217 	ldw	r3,8(r19)
   4a7c4:	1c47883a 	add	r3,r3,r17
   4a7c8:	10c00a26 	beq	r2,r3,4a7f4 <_malloc_trim_r+0x98>
   4a7cc:	9009883a 	mov	r4,r18
   4a7d0:	00534500 	call	53450 <__malloc_unlock>
   4a7d4:	0005883a 	mov	r2,zero
   4a7d8:	dfc00417 	ldw	ra,16(sp)
   4a7dc:	dcc00317 	ldw	r19,12(sp)
   4a7e0:	dc800217 	ldw	r18,8(sp)
   4a7e4:	dc400117 	ldw	r17,4(sp)
   4a7e8:	dc000017 	ldw	r16,0(sp)
   4a7ec:	dec00504 	addi	sp,sp,20
   4a7f0:	f800283a 	ret
   4a7f4:	040bc83a 	sub	r5,zero,r16
   4a7f8:	9009883a 	mov	r4,r18
   4a7fc:	004d6fc0 	call	4d6fc <_sbrk_r>
   4a800:	00ffffc4 	movi	r3,-1
   4a804:	10c00d26 	beq	r2,r3,4a83c <_malloc_trim_r+0xe0>
   4a808:	00c001b4 	movhi	r3,6
   4a80c:	18e5b404 	addi	r3,r3,-26928
   4a810:	18800017 	ldw	r2,0(r3)
   4a814:	99000217 	ldw	r4,8(r19)
   4a818:	8c23c83a 	sub	r17,r17,r16
   4a81c:	8c400054 	ori	r17,r17,1
   4a820:	1421c83a 	sub	r16,r2,r16
   4a824:	24400115 	stw	r17,4(r4)
   4a828:	9009883a 	mov	r4,r18
   4a82c:	1c000015 	stw	r16,0(r3)
   4a830:	00534500 	call	53450 <__malloc_unlock>
   4a834:	00800044 	movi	r2,1
   4a838:	003fe706 	br	4a7d8 <__alt_data_end+0xfffcbfd8>
   4a83c:	000b883a 	mov	r5,zero
   4a840:	9009883a 	mov	r4,r18
   4a844:	004d6fc0 	call	4d6fc <_sbrk_r>
   4a848:	99000217 	ldw	r4,8(r19)
   4a84c:	014003c4 	movi	r5,15
   4a850:	1107c83a 	sub	r3,r2,r4
   4a854:	28ffdd0e 	bge	r5,r3,4a7cc <__alt_data_end+0xfffcbfcc>
   4a858:	01400174 	movhi	r5,5
   4a85c:	295eaa04 	addi	r5,r5,31400
   4a860:	29400017 	ldw	r5,0(r5)
   4a864:	18c00054 	ori	r3,r3,1
   4a868:	20c00115 	stw	r3,4(r4)
   4a86c:	00c001b4 	movhi	r3,6
   4a870:	1145c83a 	sub	r2,r2,r5
   4a874:	18e5b404 	addi	r3,r3,-26928
   4a878:	18800015 	stw	r2,0(r3)
   4a87c:	003fd306 	br	4a7cc <__alt_data_end+0xfffcbfcc>

0004a880 <_free_r>:
   4a880:	28004126 	beq	r5,zero,4a988 <_free_r+0x108>
   4a884:	defffd04 	addi	sp,sp,-12
   4a888:	dc400115 	stw	r17,4(sp)
   4a88c:	dc000015 	stw	r16,0(sp)
   4a890:	2023883a 	mov	r17,r4
   4a894:	2821883a 	mov	r16,r5
   4a898:	dfc00215 	stw	ra,8(sp)
   4a89c:	005342c0 	call	5342c <__malloc_lock>
   4a8a0:	81ffff17 	ldw	r7,-4(r16)
   4a8a4:	00bfff84 	movi	r2,-2
   4a8a8:	01000174 	movhi	r4,5
   4a8ac:	81bffe04 	addi	r6,r16,-8
   4a8b0:	3884703a 	and	r2,r7,r2
   4a8b4:	21192304 	addi	r4,r4,25740
   4a8b8:	308b883a 	add	r5,r6,r2
   4a8bc:	2a400117 	ldw	r9,4(r5)
   4a8c0:	22000217 	ldw	r8,8(r4)
   4a8c4:	00ffff04 	movi	r3,-4
   4a8c8:	48c6703a 	and	r3,r9,r3
   4a8cc:	2a005726 	beq	r5,r8,4aa2c <_free_r+0x1ac>
   4a8d0:	28c00115 	stw	r3,4(r5)
   4a8d4:	39c0004c 	andi	r7,r7,1
   4a8d8:	3800091e 	bne	r7,zero,4a900 <_free_r+0x80>
   4a8dc:	823ffe17 	ldw	r8,-8(r16)
   4a8e0:	22400204 	addi	r9,r4,8
   4a8e4:	320dc83a 	sub	r6,r6,r8
   4a8e8:	31c00217 	ldw	r7,8(r6)
   4a8ec:	1205883a 	add	r2,r2,r8
   4a8f0:	3a406526 	beq	r7,r9,4aa88 <_free_r+0x208>
   4a8f4:	32000317 	ldw	r8,12(r6)
   4a8f8:	3a000315 	stw	r8,12(r7)
   4a8fc:	41c00215 	stw	r7,8(r8)
   4a900:	28cf883a 	add	r7,r5,r3
   4a904:	39c00117 	ldw	r7,4(r7)
   4a908:	39c0004c 	andi	r7,r7,1
   4a90c:	38003a26 	beq	r7,zero,4a9f8 <_free_r+0x178>
   4a910:	10c00054 	ori	r3,r2,1
   4a914:	30c00115 	stw	r3,4(r6)
   4a918:	3087883a 	add	r3,r6,r2
   4a91c:	18800015 	stw	r2,0(r3)
   4a920:	00c07fc4 	movi	r3,511
   4a924:	18801936 	bltu	r3,r2,4a98c <_free_r+0x10c>
   4a928:	1004d0fa 	srli	r2,r2,3
   4a92c:	01c00044 	movi	r7,1
   4a930:	21400117 	ldw	r5,4(r4)
   4a934:	10c00044 	addi	r3,r2,1
   4a938:	18c7883a 	add	r3,r3,r3
   4a93c:	1005d0ba 	srai	r2,r2,2
   4a940:	18c7883a 	add	r3,r3,r3
   4a944:	18c7883a 	add	r3,r3,r3
   4a948:	1907883a 	add	r3,r3,r4
   4a94c:	3884983a 	sll	r2,r7,r2
   4a950:	19c00017 	ldw	r7,0(r3)
   4a954:	1a3ffe04 	addi	r8,r3,-8
   4a958:	1144b03a 	or	r2,r2,r5
   4a95c:	32000315 	stw	r8,12(r6)
   4a960:	31c00215 	stw	r7,8(r6)
   4a964:	20800115 	stw	r2,4(r4)
   4a968:	19800015 	stw	r6,0(r3)
   4a96c:	39800315 	stw	r6,12(r7)
   4a970:	8809883a 	mov	r4,r17
   4a974:	dfc00217 	ldw	ra,8(sp)
   4a978:	dc400117 	ldw	r17,4(sp)
   4a97c:	dc000017 	ldw	r16,0(sp)
   4a980:	dec00304 	addi	sp,sp,12
   4a984:	00534501 	jmpi	53450 <__malloc_unlock>
   4a988:	f800283a 	ret
   4a98c:	100ad27a 	srli	r5,r2,9
   4a990:	00c00104 	movi	r3,4
   4a994:	19404a36 	bltu	r3,r5,4aac0 <_free_r+0x240>
   4a998:	100ad1ba 	srli	r5,r2,6
   4a99c:	28c00e44 	addi	r3,r5,57
   4a9a0:	18c7883a 	add	r3,r3,r3
   4a9a4:	29400e04 	addi	r5,r5,56
   4a9a8:	18c7883a 	add	r3,r3,r3
   4a9ac:	18c7883a 	add	r3,r3,r3
   4a9b0:	1909883a 	add	r4,r3,r4
   4a9b4:	20c00017 	ldw	r3,0(r4)
   4a9b8:	01c00174 	movhi	r7,5
   4a9bc:	213ffe04 	addi	r4,r4,-8
   4a9c0:	39d92304 	addi	r7,r7,25740
   4a9c4:	20c04426 	beq	r4,r3,4aad8 <_free_r+0x258>
   4a9c8:	01ffff04 	movi	r7,-4
   4a9cc:	19400117 	ldw	r5,4(r3)
   4a9d0:	29ca703a 	and	r5,r5,r7
   4a9d4:	1140022e 	bgeu	r2,r5,4a9e0 <_free_r+0x160>
   4a9d8:	18c00217 	ldw	r3,8(r3)
   4a9dc:	20fffb1e 	bne	r4,r3,4a9cc <__alt_data_end+0xfffcc1cc>
   4a9e0:	19000317 	ldw	r4,12(r3)
   4a9e4:	31000315 	stw	r4,12(r6)
   4a9e8:	30c00215 	stw	r3,8(r6)
   4a9ec:	21800215 	stw	r6,8(r4)
   4a9f0:	19800315 	stw	r6,12(r3)
   4a9f4:	003fde06 	br	4a970 <__alt_data_end+0xfffcc170>
   4a9f8:	29c00217 	ldw	r7,8(r5)
   4a9fc:	10c5883a 	add	r2,r2,r3
   4aa00:	00c00174 	movhi	r3,5
   4aa04:	18d92504 	addi	r3,r3,25748
   4aa08:	38c03b26 	beq	r7,r3,4aaf8 <_free_r+0x278>
   4aa0c:	2a000317 	ldw	r8,12(r5)
   4aa10:	11400054 	ori	r5,r2,1
   4aa14:	3087883a 	add	r3,r6,r2
   4aa18:	3a000315 	stw	r8,12(r7)
   4aa1c:	41c00215 	stw	r7,8(r8)
   4aa20:	31400115 	stw	r5,4(r6)
   4aa24:	18800015 	stw	r2,0(r3)
   4aa28:	003fbd06 	br	4a920 <__alt_data_end+0xfffcc120>
   4aa2c:	39c0004c 	andi	r7,r7,1
   4aa30:	10c5883a 	add	r2,r2,r3
   4aa34:	3800071e 	bne	r7,zero,4aa54 <_free_r+0x1d4>
   4aa38:	81fffe17 	ldw	r7,-8(r16)
   4aa3c:	31cdc83a 	sub	r6,r6,r7
   4aa40:	30c00317 	ldw	r3,12(r6)
   4aa44:	31400217 	ldw	r5,8(r6)
   4aa48:	11c5883a 	add	r2,r2,r7
   4aa4c:	28c00315 	stw	r3,12(r5)
   4aa50:	19400215 	stw	r5,8(r3)
   4aa54:	10c00054 	ori	r3,r2,1
   4aa58:	30c00115 	stw	r3,4(r6)
   4aa5c:	00c00174 	movhi	r3,5
   4aa60:	18deab04 	addi	r3,r3,31404
   4aa64:	18c00017 	ldw	r3,0(r3)
   4aa68:	21800215 	stw	r6,8(r4)
   4aa6c:	10ffc036 	bltu	r2,r3,4a970 <__alt_data_end+0xfffcc170>
   4aa70:	008001b4 	movhi	r2,6
   4aa74:	10a5ab04 	addi	r2,r2,-26964
   4aa78:	11400017 	ldw	r5,0(r2)
   4aa7c:	8809883a 	mov	r4,r17
   4aa80:	004a75c0 	call	4a75c <_malloc_trim_r>
   4aa84:	003fba06 	br	4a970 <__alt_data_end+0xfffcc170>
   4aa88:	28c9883a 	add	r4,r5,r3
   4aa8c:	21000117 	ldw	r4,4(r4)
   4aa90:	2100004c 	andi	r4,r4,1
   4aa94:	2000391e 	bne	r4,zero,4ab7c <_free_r+0x2fc>
   4aa98:	29c00217 	ldw	r7,8(r5)
   4aa9c:	29000317 	ldw	r4,12(r5)
   4aaa0:	1885883a 	add	r2,r3,r2
   4aaa4:	10c00054 	ori	r3,r2,1
   4aaa8:	39000315 	stw	r4,12(r7)
   4aaac:	21c00215 	stw	r7,8(r4)
   4aab0:	30c00115 	stw	r3,4(r6)
   4aab4:	308d883a 	add	r6,r6,r2
   4aab8:	30800015 	stw	r2,0(r6)
   4aabc:	003fac06 	br	4a970 <__alt_data_end+0xfffcc170>
   4aac0:	00c00504 	movi	r3,20
   4aac4:	19401536 	bltu	r3,r5,4ab1c <_free_r+0x29c>
   4aac8:	28c01704 	addi	r3,r5,92
   4aacc:	18c7883a 	add	r3,r3,r3
   4aad0:	294016c4 	addi	r5,r5,91
   4aad4:	003fb406 	br	4a9a8 <__alt_data_end+0xfffcc1a8>
   4aad8:	280bd0ba 	srai	r5,r5,2
   4aadc:	00c00044 	movi	r3,1
   4aae0:	38800117 	ldw	r2,4(r7)
   4aae4:	194a983a 	sll	r5,r3,r5
   4aae8:	2007883a 	mov	r3,r4
   4aaec:	2884b03a 	or	r2,r5,r2
   4aaf0:	38800115 	stw	r2,4(r7)
   4aaf4:	003fbb06 	br	4a9e4 <__alt_data_end+0xfffcc1e4>
   4aaf8:	21800515 	stw	r6,20(r4)
   4aafc:	21800415 	stw	r6,16(r4)
   4ab00:	10c00054 	ori	r3,r2,1
   4ab04:	31c00315 	stw	r7,12(r6)
   4ab08:	31c00215 	stw	r7,8(r6)
   4ab0c:	30c00115 	stw	r3,4(r6)
   4ab10:	308d883a 	add	r6,r6,r2
   4ab14:	30800015 	stw	r2,0(r6)
   4ab18:	003f9506 	br	4a970 <__alt_data_end+0xfffcc170>
   4ab1c:	00c01504 	movi	r3,84
   4ab20:	19400536 	bltu	r3,r5,4ab38 <_free_r+0x2b8>
   4ab24:	100ad33a 	srli	r5,r2,12
   4ab28:	28c01bc4 	addi	r3,r5,111
   4ab2c:	18c7883a 	add	r3,r3,r3
   4ab30:	29401b84 	addi	r5,r5,110
   4ab34:	003f9c06 	br	4a9a8 <__alt_data_end+0xfffcc1a8>
   4ab38:	00c05504 	movi	r3,340
   4ab3c:	19400536 	bltu	r3,r5,4ab54 <_free_r+0x2d4>
   4ab40:	100ad3fa 	srli	r5,r2,15
   4ab44:	28c01e04 	addi	r3,r5,120
   4ab48:	18c7883a 	add	r3,r3,r3
   4ab4c:	29401dc4 	addi	r5,r5,119
   4ab50:	003f9506 	br	4a9a8 <__alt_data_end+0xfffcc1a8>
   4ab54:	00c15504 	movi	r3,1364
   4ab58:	19400536 	bltu	r3,r5,4ab70 <_free_r+0x2f0>
   4ab5c:	100ad4ba 	srli	r5,r2,18
   4ab60:	28c01f44 	addi	r3,r5,125
   4ab64:	18c7883a 	add	r3,r3,r3
   4ab68:	29401f04 	addi	r5,r5,124
   4ab6c:	003f8e06 	br	4a9a8 <__alt_data_end+0xfffcc1a8>
   4ab70:	00c03f84 	movi	r3,254
   4ab74:	01401f84 	movi	r5,126
   4ab78:	003f8b06 	br	4a9a8 <__alt_data_end+0xfffcc1a8>
   4ab7c:	10c00054 	ori	r3,r2,1
   4ab80:	30c00115 	stw	r3,4(r6)
   4ab84:	308d883a 	add	r6,r6,r2
   4ab88:	30800015 	stw	r2,0(r6)
   4ab8c:	003f7806 	br	4a970 <__alt_data_end+0xfffcc170>

0004ab90 <__sfvwrite_r>:
   4ab90:	30800217 	ldw	r2,8(r6)
   4ab94:	10006726 	beq	r2,zero,4ad34 <__sfvwrite_r+0x1a4>
   4ab98:	28c0030b 	ldhu	r3,12(r5)
   4ab9c:	defff404 	addi	sp,sp,-48
   4aba0:	dd400715 	stw	r21,28(sp)
   4aba4:	dd000615 	stw	r20,24(sp)
   4aba8:	dc000215 	stw	r16,8(sp)
   4abac:	dfc00b15 	stw	ra,44(sp)
   4abb0:	df000a15 	stw	fp,40(sp)
   4abb4:	ddc00915 	stw	r23,36(sp)
   4abb8:	dd800815 	stw	r22,32(sp)
   4abbc:	dcc00515 	stw	r19,20(sp)
   4abc0:	dc800415 	stw	r18,16(sp)
   4abc4:	dc400315 	stw	r17,12(sp)
   4abc8:	1880020c 	andi	r2,r3,8
   4abcc:	2821883a 	mov	r16,r5
   4abd0:	202b883a 	mov	r21,r4
   4abd4:	3029883a 	mov	r20,r6
   4abd8:	10002726 	beq	r2,zero,4ac78 <__sfvwrite_r+0xe8>
   4abdc:	28800417 	ldw	r2,16(r5)
   4abe0:	10002526 	beq	r2,zero,4ac78 <__sfvwrite_r+0xe8>
   4abe4:	1880008c 	andi	r2,r3,2
   4abe8:	a4400017 	ldw	r17,0(r20)
   4abec:	10002a26 	beq	r2,zero,4ac98 <__sfvwrite_r+0x108>
   4abf0:	05a00034 	movhi	r22,32768
   4abf4:	0027883a 	mov	r19,zero
   4abf8:	0025883a 	mov	r18,zero
   4abfc:	b5bf0004 	addi	r22,r22,-1024
   4ac00:	980d883a 	mov	r6,r19
   4ac04:	a809883a 	mov	r4,r21
   4ac08:	90004626 	beq	r18,zero,4ad24 <__sfvwrite_r+0x194>
   4ac0c:	900f883a 	mov	r7,r18
   4ac10:	b480022e 	bgeu	r22,r18,4ac1c <__sfvwrite_r+0x8c>
   4ac14:	01e00034 	movhi	r7,32768
   4ac18:	39ff0004 	addi	r7,r7,-1024
   4ac1c:	80800917 	ldw	r2,36(r16)
   4ac20:	81400717 	ldw	r5,28(r16)
   4ac24:	103ee83a 	callr	r2
   4ac28:	0080570e 	bge	zero,r2,4ad88 <__sfvwrite_r+0x1f8>
   4ac2c:	a0c00217 	ldw	r3,8(r20)
   4ac30:	98a7883a 	add	r19,r19,r2
   4ac34:	90a5c83a 	sub	r18,r18,r2
   4ac38:	1885c83a 	sub	r2,r3,r2
   4ac3c:	a0800215 	stw	r2,8(r20)
   4ac40:	103fef1e 	bne	r2,zero,4ac00 <__alt_data_end+0xfffcc400>
   4ac44:	0005883a 	mov	r2,zero
   4ac48:	dfc00b17 	ldw	ra,44(sp)
   4ac4c:	df000a17 	ldw	fp,40(sp)
   4ac50:	ddc00917 	ldw	r23,36(sp)
   4ac54:	dd800817 	ldw	r22,32(sp)
   4ac58:	dd400717 	ldw	r21,28(sp)
   4ac5c:	dd000617 	ldw	r20,24(sp)
   4ac60:	dcc00517 	ldw	r19,20(sp)
   4ac64:	dc800417 	ldw	r18,16(sp)
   4ac68:	dc400317 	ldw	r17,12(sp)
   4ac6c:	dc000217 	ldw	r16,8(sp)
   4ac70:	dec00c04 	addi	sp,sp,48
   4ac74:	f800283a 	ret
   4ac78:	800b883a 	mov	r5,r16
   4ac7c:	a809883a 	mov	r4,r21
   4ac80:	00487380 	call	48738 <__swsetup_r>
   4ac84:	1000eb1e 	bne	r2,zero,4b034 <__sfvwrite_r+0x4a4>
   4ac88:	80c0030b 	ldhu	r3,12(r16)
   4ac8c:	a4400017 	ldw	r17,0(r20)
   4ac90:	1880008c 	andi	r2,r3,2
   4ac94:	103fd61e 	bne	r2,zero,4abf0 <__alt_data_end+0xfffcc3f0>
   4ac98:	1880004c 	andi	r2,r3,1
   4ac9c:	10003f1e 	bne	r2,zero,4ad9c <__sfvwrite_r+0x20c>
   4aca0:	0039883a 	mov	fp,zero
   4aca4:	0025883a 	mov	r18,zero
   4aca8:	90001a26 	beq	r18,zero,4ad14 <__sfvwrite_r+0x184>
   4acac:	1880800c 	andi	r2,r3,512
   4acb0:	84c00217 	ldw	r19,8(r16)
   4acb4:	10002126 	beq	r2,zero,4ad3c <__sfvwrite_r+0x1ac>
   4acb8:	982f883a 	mov	r23,r19
   4acbc:	94c09336 	bltu	r18,r19,4af0c <__sfvwrite_r+0x37c>
   4acc0:	1881200c 	andi	r2,r3,1152
   4acc4:	10009e1e 	bne	r2,zero,4af40 <__sfvwrite_r+0x3b0>
   4acc8:	81000017 	ldw	r4,0(r16)
   4accc:	b80d883a 	mov	r6,r23
   4acd0:	e00b883a 	mov	r5,fp
   4acd4:	004bea40 	call	4bea4 <memmove>
   4acd8:	80c00217 	ldw	r3,8(r16)
   4acdc:	81000017 	ldw	r4,0(r16)
   4ace0:	9005883a 	mov	r2,r18
   4ace4:	1ce7c83a 	sub	r19,r3,r19
   4ace8:	25cf883a 	add	r7,r4,r23
   4acec:	84c00215 	stw	r19,8(r16)
   4acf0:	81c00015 	stw	r7,0(r16)
   4acf4:	a0c00217 	ldw	r3,8(r20)
   4acf8:	e0b9883a 	add	fp,fp,r2
   4acfc:	90a5c83a 	sub	r18,r18,r2
   4ad00:	18a7c83a 	sub	r19,r3,r2
   4ad04:	a4c00215 	stw	r19,8(r20)
   4ad08:	983fce26 	beq	r19,zero,4ac44 <__alt_data_end+0xfffcc444>
   4ad0c:	80c0030b 	ldhu	r3,12(r16)
   4ad10:	903fe61e 	bne	r18,zero,4acac <__alt_data_end+0xfffcc4ac>
   4ad14:	8f000017 	ldw	fp,0(r17)
   4ad18:	8c800117 	ldw	r18,4(r17)
   4ad1c:	8c400204 	addi	r17,r17,8
   4ad20:	003fe106 	br	4aca8 <__alt_data_end+0xfffcc4a8>
   4ad24:	8cc00017 	ldw	r19,0(r17)
   4ad28:	8c800117 	ldw	r18,4(r17)
   4ad2c:	8c400204 	addi	r17,r17,8
   4ad30:	003fb306 	br	4ac00 <__alt_data_end+0xfffcc400>
   4ad34:	0005883a 	mov	r2,zero
   4ad38:	f800283a 	ret
   4ad3c:	81000017 	ldw	r4,0(r16)
   4ad40:	80800417 	ldw	r2,16(r16)
   4ad44:	11005736 	bltu	r2,r4,4aea4 <__sfvwrite_r+0x314>
   4ad48:	85c00517 	ldw	r23,20(r16)
   4ad4c:	95c05536 	bltu	r18,r23,4aea4 <__sfvwrite_r+0x314>
   4ad50:	00a00034 	movhi	r2,32768
   4ad54:	10bfffc4 	addi	r2,r2,-1
   4ad58:	9009883a 	mov	r4,r18
   4ad5c:	1480012e 	bgeu	r2,r18,4ad64 <__sfvwrite_r+0x1d4>
   4ad60:	1009883a 	mov	r4,r2
   4ad64:	b80b883a 	mov	r5,r23
   4ad68:	0043d1c0 	call	43d1c <__divsi3>
   4ad6c:	15cf383a 	mul	r7,r2,r23
   4ad70:	81400717 	ldw	r5,28(r16)
   4ad74:	80800917 	ldw	r2,36(r16)
   4ad78:	e00d883a 	mov	r6,fp
   4ad7c:	a809883a 	mov	r4,r21
   4ad80:	103ee83a 	callr	r2
   4ad84:	00bfdb16 	blt	zero,r2,4acf4 <__alt_data_end+0xfffcc4f4>
   4ad88:	8080030b 	ldhu	r2,12(r16)
   4ad8c:	10801014 	ori	r2,r2,64
   4ad90:	8080030d 	sth	r2,12(r16)
   4ad94:	00bfffc4 	movi	r2,-1
   4ad98:	003fab06 	br	4ac48 <__alt_data_end+0xfffcc448>
   4ad9c:	0027883a 	mov	r19,zero
   4ada0:	0011883a 	mov	r8,zero
   4ada4:	0039883a 	mov	fp,zero
   4ada8:	0025883a 	mov	r18,zero
   4adac:	90001f26 	beq	r18,zero,4ae2c <__sfvwrite_r+0x29c>
   4adb0:	40005a26 	beq	r8,zero,4af1c <__sfvwrite_r+0x38c>
   4adb4:	982d883a 	mov	r22,r19
   4adb8:	94c0012e 	bgeu	r18,r19,4adc0 <__sfvwrite_r+0x230>
   4adbc:	902d883a 	mov	r22,r18
   4adc0:	81000017 	ldw	r4,0(r16)
   4adc4:	80800417 	ldw	r2,16(r16)
   4adc8:	b02f883a 	mov	r23,r22
   4adcc:	81c00517 	ldw	r7,20(r16)
   4add0:	1100032e 	bgeu	r2,r4,4ade0 <__sfvwrite_r+0x250>
   4add4:	80c00217 	ldw	r3,8(r16)
   4add8:	38c7883a 	add	r3,r7,r3
   4addc:	1d801816 	blt	r3,r22,4ae40 <__sfvwrite_r+0x2b0>
   4ade0:	b1c03e16 	blt	r22,r7,4aedc <__sfvwrite_r+0x34c>
   4ade4:	80800917 	ldw	r2,36(r16)
   4ade8:	81400717 	ldw	r5,28(r16)
   4adec:	e00d883a 	mov	r6,fp
   4adf0:	da000115 	stw	r8,4(sp)
   4adf4:	a809883a 	mov	r4,r21
   4adf8:	103ee83a 	callr	r2
   4adfc:	102f883a 	mov	r23,r2
   4ae00:	da000117 	ldw	r8,4(sp)
   4ae04:	00bfe00e 	bge	zero,r2,4ad88 <__alt_data_end+0xfffcc588>
   4ae08:	9de7c83a 	sub	r19,r19,r23
   4ae0c:	98001f26 	beq	r19,zero,4ae8c <__sfvwrite_r+0x2fc>
   4ae10:	a0800217 	ldw	r2,8(r20)
   4ae14:	e5f9883a 	add	fp,fp,r23
   4ae18:	95e5c83a 	sub	r18,r18,r23
   4ae1c:	15efc83a 	sub	r23,r2,r23
   4ae20:	a5c00215 	stw	r23,8(r20)
   4ae24:	b83f8726 	beq	r23,zero,4ac44 <__alt_data_end+0xfffcc444>
   4ae28:	903fe11e 	bne	r18,zero,4adb0 <__alt_data_end+0xfffcc5b0>
   4ae2c:	8f000017 	ldw	fp,0(r17)
   4ae30:	8c800117 	ldw	r18,4(r17)
   4ae34:	0011883a 	mov	r8,zero
   4ae38:	8c400204 	addi	r17,r17,8
   4ae3c:	003fdb06 	br	4adac <__alt_data_end+0xfffcc5ac>
   4ae40:	180d883a 	mov	r6,r3
   4ae44:	e00b883a 	mov	r5,fp
   4ae48:	da000115 	stw	r8,4(sp)
   4ae4c:	d8c00015 	stw	r3,0(sp)
   4ae50:	004bea40 	call	4bea4 <memmove>
   4ae54:	d8c00017 	ldw	r3,0(sp)
   4ae58:	80800017 	ldw	r2,0(r16)
   4ae5c:	800b883a 	mov	r5,r16
   4ae60:	a809883a 	mov	r4,r21
   4ae64:	10c5883a 	add	r2,r2,r3
   4ae68:	80800015 	stw	r2,0(r16)
   4ae6c:	d8c00015 	stw	r3,0(sp)
   4ae70:	004a3300 	call	4a330 <_fflush_r>
   4ae74:	d8c00017 	ldw	r3,0(sp)
   4ae78:	da000117 	ldw	r8,4(sp)
   4ae7c:	103fc21e 	bne	r2,zero,4ad88 <__alt_data_end+0xfffcc588>
   4ae80:	182f883a 	mov	r23,r3
   4ae84:	9de7c83a 	sub	r19,r19,r23
   4ae88:	983fe11e 	bne	r19,zero,4ae10 <__alt_data_end+0xfffcc610>
   4ae8c:	800b883a 	mov	r5,r16
   4ae90:	a809883a 	mov	r4,r21
   4ae94:	004a3300 	call	4a330 <_fflush_r>
   4ae98:	103fbb1e 	bne	r2,zero,4ad88 <__alt_data_end+0xfffcc588>
   4ae9c:	0011883a 	mov	r8,zero
   4aea0:	003fdb06 	br	4ae10 <__alt_data_end+0xfffcc610>
   4aea4:	94c0012e 	bgeu	r18,r19,4aeac <__sfvwrite_r+0x31c>
   4aea8:	9027883a 	mov	r19,r18
   4aeac:	980d883a 	mov	r6,r19
   4aeb0:	e00b883a 	mov	r5,fp
   4aeb4:	004bea40 	call	4bea4 <memmove>
   4aeb8:	80800217 	ldw	r2,8(r16)
   4aebc:	80c00017 	ldw	r3,0(r16)
   4aec0:	14c5c83a 	sub	r2,r2,r19
   4aec4:	1cc7883a 	add	r3,r3,r19
   4aec8:	80800215 	stw	r2,8(r16)
   4aecc:	80c00015 	stw	r3,0(r16)
   4aed0:	10004326 	beq	r2,zero,4afe0 <__sfvwrite_r+0x450>
   4aed4:	9805883a 	mov	r2,r19
   4aed8:	003f8606 	br	4acf4 <__alt_data_end+0xfffcc4f4>
   4aedc:	b00d883a 	mov	r6,r22
   4aee0:	e00b883a 	mov	r5,fp
   4aee4:	da000115 	stw	r8,4(sp)
   4aee8:	004bea40 	call	4bea4 <memmove>
   4aeec:	80800217 	ldw	r2,8(r16)
   4aef0:	80c00017 	ldw	r3,0(r16)
   4aef4:	da000117 	ldw	r8,4(sp)
   4aef8:	1585c83a 	sub	r2,r2,r22
   4aefc:	1dad883a 	add	r22,r3,r22
   4af00:	80800215 	stw	r2,8(r16)
   4af04:	85800015 	stw	r22,0(r16)
   4af08:	003fbf06 	br	4ae08 <__alt_data_end+0xfffcc608>
   4af0c:	81000017 	ldw	r4,0(r16)
   4af10:	9027883a 	mov	r19,r18
   4af14:	902f883a 	mov	r23,r18
   4af18:	003f6c06 	br	4accc <__alt_data_end+0xfffcc4cc>
   4af1c:	900d883a 	mov	r6,r18
   4af20:	01400284 	movi	r5,10
   4af24:	e009883a 	mov	r4,fp
   4af28:	004bc780 	call	4bc78 <memchr>
   4af2c:	10003e26 	beq	r2,zero,4b028 <__sfvwrite_r+0x498>
   4af30:	10800044 	addi	r2,r2,1
   4af34:	1727c83a 	sub	r19,r2,fp
   4af38:	02000044 	movi	r8,1
   4af3c:	003f9d06 	br	4adb4 <__alt_data_end+0xfffcc5b4>
   4af40:	80800517 	ldw	r2,20(r16)
   4af44:	81400417 	ldw	r5,16(r16)
   4af48:	81c00017 	ldw	r7,0(r16)
   4af4c:	10a7883a 	add	r19,r2,r2
   4af50:	9885883a 	add	r2,r19,r2
   4af54:	1026d7fa 	srli	r19,r2,31
   4af58:	396dc83a 	sub	r22,r7,r5
   4af5c:	b1000044 	addi	r4,r22,1
   4af60:	9885883a 	add	r2,r19,r2
   4af64:	1027d07a 	srai	r19,r2,1
   4af68:	2485883a 	add	r2,r4,r18
   4af6c:	980d883a 	mov	r6,r19
   4af70:	9880022e 	bgeu	r19,r2,4af7c <__sfvwrite_r+0x3ec>
   4af74:	1027883a 	mov	r19,r2
   4af78:	100d883a 	mov	r6,r2
   4af7c:	18c1000c 	andi	r3,r3,1024
   4af80:	18001c26 	beq	r3,zero,4aff4 <__sfvwrite_r+0x464>
   4af84:	300b883a 	mov	r5,r6
   4af88:	a809883a 	mov	r4,r21
   4af8c:	004b46c0 	call	4b46c <_malloc_r>
   4af90:	102f883a 	mov	r23,r2
   4af94:	10002926 	beq	r2,zero,4b03c <__sfvwrite_r+0x4ac>
   4af98:	81400417 	ldw	r5,16(r16)
   4af9c:	b00d883a 	mov	r6,r22
   4afa0:	1009883a 	mov	r4,r2
   4afa4:	004bd5c0 	call	4bd5c <memcpy>
   4afa8:	8080030b 	ldhu	r2,12(r16)
   4afac:	00fedfc4 	movi	r3,-1153
   4afb0:	10c4703a 	and	r2,r2,r3
   4afb4:	10802014 	ori	r2,r2,128
   4afb8:	8080030d 	sth	r2,12(r16)
   4afbc:	bd89883a 	add	r4,r23,r22
   4afc0:	9d8fc83a 	sub	r7,r19,r22
   4afc4:	85c00415 	stw	r23,16(r16)
   4afc8:	84c00515 	stw	r19,20(r16)
   4afcc:	81000015 	stw	r4,0(r16)
   4afd0:	9027883a 	mov	r19,r18
   4afd4:	81c00215 	stw	r7,8(r16)
   4afd8:	902f883a 	mov	r23,r18
   4afdc:	003f3b06 	br	4accc <__alt_data_end+0xfffcc4cc>
   4afe0:	800b883a 	mov	r5,r16
   4afe4:	a809883a 	mov	r4,r21
   4afe8:	004a3300 	call	4a330 <_fflush_r>
   4afec:	103fb926 	beq	r2,zero,4aed4 <__alt_data_end+0xfffcc6d4>
   4aff0:	003f6506 	br	4ad88 <__alt_data_end+0xfffcc588>
   4aff4:	a809883a 	mov	r4,r21
   4aff8:	004d1240 	call	4d124 <_realloc_r>
   4affc:	102f883a 	mov	r23,r2
   4b000:	103fee1e 	bne	r2,zero,4afbc <__alt_data_end+0xfffcc7bc>
   4b004:	81400417 	ldw	r5,16(r16)
   4b008:	a809883a 	mov	r4,r21
   4b00c:	004a8800 	call	4a880 <_free_r>
   4b010:	8080030b 	ldhu	r2,12(r16)
   4b014:	00ffdfc4 	movi	r3,-129
   4b018:	1884703a 	and	r2,r3,r2
   4b01c:	00c00304 	movi	r3,12
   4b020:	a8c00015 	stw	r3,0(r21)
   4b024:	003f5906 	br	4ad8c <__alt_data_end+0xfffcc58c>
   4b028:	94c00044 	addi	r19,r18,1
   4b02c:	02000044 	movi	r8,1
   4b030:	003f6006 	br	4adb4 <__alt_data_end+0xfffcc5b4>
   4b034:	00bfffc4 	movi	r2,-1
   4b038:	003f0306 	br	4ac48 <__alt_data_end+0xfffcc448>
   4b03c:	00800304 	movi	r2,12
   4b040:	a8800015 	stw	r2,0(r21)
   4b044:	8080030b 	ldhu	r2,12(r16)
   4b048:	003f5006 	br	4ad8c <__alt_data_end+0xfffcc58c>

0004b04c <_fwalk>:
   4b04c:	defff704 	addi	sp,sp,-36
   4b050:	dd000415 	stw	r20,16(sp)
   4b054:	dfc00815 	stw	ra,32(sp)
   4b058:	ddc00715 	stw	r23,28(sp)
   4b05c:	dd800615 	stw	r22,24(sp)
   4b060:	dd400515 	stw	r21,20(sp)
   4b064:	dcc00315 	stw	r19,12(sp)
   4b068:	dc800215 	stw	r18,8(sp)
   4b06c:	dc400115 	stw	r17,4(sp)
   4b070:	dc000015 	stw	r16,0(sp)
   4b074:	2500b804 	addi	r20,r4,736
   4b078:	a0002326 	beq	r20,zero,4b108 <_fwalk+0xbc>
   4b07c:	282b883a 	mov	r21,r5
   4b080:	002f883a 	mov	r23,zero
   4b084:	05800044 	movi	r22,1
   4b088:	04ffffc4 	movi	r19,-1
   4b08c:	a4400117 	ldw	r17,4(r20)
   4b090:	a4800217 	ldw	r18,8(r20)
   4b094:	8c7fffc4 	addi	r17,r17,-1
   4b098:	88000d16 	blt	r17,zero,4b0d0 <_fwalk+0x84>
   4b09c:	94000304 	addi	r16,r18,12
   4b0a0:	94800384 	addi	r18,r18,14
   4b0a4:	8080000b 	ldhu	r2,0(r16)
   4b0a8:	8c7fffc4 	addi	r17,r17,-1
   4b0ac:	813ffd04 	addi	r4,r16,-12
   4b0b0:	b080042e 	bgeu	r22,r2,4b0c4 <_fwalk+0x78>
   4b0b4:	9080000f 	ldh	r2,0(r18)
   4b0b8:	14c00226 	beq	r2,r19,4b0c4 <_fwalk+0x78>
   4b0bc:	a83ee83a 	callr	r21
   4b0c0:	b8aeb03a 	or	r23,r23,r2
   4b0c4:	84001a04 	addi	r16,r16,104
   4b0c8:	94801a04 	addi	r18,r18,104
   4b0cc:	8cfff51e 	bne	r17,r19,4b0a4 <__alt_data_end+0xfffcc8a4>
   4b0d0:	a5000017 	ldw	r20,0(r20)
   4b0d4:	a03fed1e 	bne	r20,zero,4b08c <__alt_data_end+0xfffcc88c>
   4b0d8:	b805883a 	mov	r2,r23
   4b0dc:	dfc00817 	ldw	ra,32(sp)
   4b0e0:	ddc00717 	ldw	r23,28(sp)
   4b0e4:	dd800617 	ldw	r22,24(sp)
   4b0e8:	dd400517 	ldw	r21,20(sp)
   4b0ec:	dd000417 	ldw	r20,16(sp)
   4b0f0:	dcc00317 	ldw	r19,12(sp)
   4b0f4:	dc800217 	ldw	r18,8(sp)
   4b0f8:	dc400117 	ldw	r17,4(sp)
   4b0fc:	dc000017 	ldw	r16,0(sp)
   4b100:	dec00904 	addi	sp,sp,36
   4b104:	f800283a 	ret
   4b108:	002f883a 	mov	r23,zero
   4b10c:	003ff206 	br	4b0d8 <__alt_data_end+0xfffcc8d8>

0004b110 <_fwalk_reent>:
   4b110:	defff704 	addi	sp,sp,-36
   4b114:	dd000415 	stw	r20,16(sp)
   4b118:	dfc00815 	stw	ra,32(sp)
   4b11c:	ddc00715 	stw	r23,28(sp)
   4b120:	dd800615 	stw	r22,24(sp)
   4b124:	dd400515 	stw	r21,20(sp)
   4b128:	dcc00315 	stw	r19,12(sp)
   4b12c:	dc800215 	stw	r18,8(sp)
   4b130:	dc400115 	stw	r17,4(sp)
   4b134:	dc000015 	stw	r16,0(sp)
   4b138:	2500b804 	addi	r20,r4,736
   4b13c:	a0002326 	beq	r20,zero,4b1cc <_fwalk_reent+0xbc>
   4b140:	282b883a 	mov	r21,r5
   4b144:	2027883a 	mov	r19,r4
   4b148:	002f883a 	mov	r23,zero
   4b14c:	05800044 	movi	r22,1
   4b150:	04bfffc4 	movi	r18,-1
   4b154:	a4400117 	ldw	r17,4(r20)
   4b158:	a4000217 	ldw	r16,8(r20)
   4b15c:	8c7fffc4 	addi	r17,r17,-1
   4b160:	88000c16 	blt	r17,zero,4b194 <_fwalk_reent+0x84>
   4b164:	84000304 	addi	r16,r16,12
   4b168:	8080000b 	ldhu	r2,0(r16)
   4b16c:	8c7fffc4 	addi	r17,r17,-1
   4b170:	817ffd04 	addi	r5,r16,-12
   4b174:	b080052e 	bgeu	r22,r2,4b18c <_fwalk_reent+0x7c>
   4b178:	8080008f 	ldh	r2,2(r16)
   4b17c:	9809883a 	mov	r4,r19
   4b180:	14800226 	beq	r2,r18,4b18c <_fwalk_reent+0x7c>
   4b184:	a83ee83a 	callr	r21
   4b188:	b8aeb03a 	or	r23,r23,r2
   4b18c:	84001a04 	addi	r16,r16,104
   4b190:	8cbff51e 	bne	r17,r18,4b168 <__alt_data_end+0xfffcc968>
   4b194:	a5000017 	ldw	r20,0(r20)
   4b198:	a03fee1e 	bne	r20,zero,4b154 <__alt_data_end+0xfffcc954>
   4b19c:	b805883a 	mov	r2,r23
   4b1a0:	dfc00817 	ldw	ra,32(sp)
   4b1a4:	ddc00717 	ldw	r23,28(sp)
   4b1a8:	dd800617 	ldw	r22,24(sp)
   4b1ac:	dd400517 	ldw	r21,20(sp)
   4b1b0:	dd000417 	ldw	r20,16(sp)
   4b1b4:	dcc00317 	ldw	r19,12(sp)
   4b1b8:	dc800217 	ldw	r18,8(sp)
   4b1bc:	dc400117 	ldw	r17,4(sp)
   4b1c0:	dc000017 	ldw	r16,0(sp)
   4b1c4:	dec00904 	addi	sp,sp,36
   4b1c8:	f800283a 	ret
   4b1cc:	002f883a 	mov	r23,zero
   4b1d0:	003ff206 	br	4b19c <__alt_data_end+0xfffcc99c>

0004b1d4 <_setlocale_r>:
   4b1d4:	30001b26 	beq	r6,zero,4b244 <_setlocale_r+0x70>
   4b1d8:	01400174 	movhi	r5,5
   4b1dc:	defffe04 	addi	sp,sp,-8
   4b1e0:	29576104 	addi	r5,r5,23940
   4b1e4:	3009883a 	mov	r4,r6
   4b1e8:	dc000015 	stw	r16,0(sp)
   4b1ec:	dfc00115 	stw	ra,4(sp)
   4b1f0:	3021883a 	mov	r16,r6
   4b1f4:	004d88c0 	call	4d88c <strcmp>
   4b1f8:	1000061e 	bne	r2,zero,4b214 <_setlocale_r+0x40>
   4b1fc:	00800174 	movhi	r2,5
   4b200:	10976004 	addi	r2,r2,23936
   4b204:	dfc00117 	ldw	ra,4(sp)
   4b208:	dc000017 	ldw	r16,0(sp)
   4b20c:	dec00204 	addi	sp,sp,8
   4b210:	f800283a 	ret
   4b214:	01400174 	movhi	r5,5
   4b218:	29576004 	addi	r5,r5,23936
   4b21c:	8009883a 	mov	r4,r16
   4b220:	004d88c0 	call	4d88c <strcmp>
   4b224:	103ff526 	beq	r2,zero,4b1fc <__alt_data_end+0xfffcc9fc>
   4b228:	01400174 	movhi	r5,5
   4b22c:	29574304 	addi	r5,r5,23820
   4b230:	8009883a 	mov	r4,r16
   4b234:	004d88c0 	call	4d88c <strcmp>
   4b238:	103ff026 	beq	r2,zero,4b1fc <__alt_data_end+0xfffcc9fc>
   4b23c:	0005883a 	mov	r2,zero
   4b240:	003ff006 	br	4b204 <__alt_data_end+0xfffcca04>
   4b244:	00800174 	movhi	r2,5
   4b248:	10976004 	addi	r2,r2,23936
   4b24c:	f800283a 	ret

0004b250 <__locale_charset>:
   4b250:	00800174 	movhi	r2,5
   4b254:	10990d04 	addi	r2,r2,25652
   4b258:	f800283a 	ret

0004b25c <__locale_mb_cur_max>:
   4b25c:	00800174 	movhi	r2,5
   4b260:	109ea904 	addi	r2,r2,31396
   4b264:	10800017 	ldw	r2,0(r2)
   4b268:	f800283a 	ret

0004b26c <__locale_msgcharset>:
   4b26c:	00800174 	movhi	r2,5
   4b270:	10990504 	addi	r2,r2,25620
   4b274:	f800283a 	ret

0004b278 <__locale_cjk_lang>:
   4b278:	0005883a 	mov	r2,zero
   4b27c:	f800283a 	ret

0004b280 <_localeconv_r>:
   4b280:	00800174 	movhi	r2,5
   4b284:	10991504 	addi	r2,r2,25684
   4b288:	f800283a 	ret

0004b28c <setlocale>:
   4b28c:	00800174 	movhi	r2,5
   4b290:	109ea804 	addi	r2,r2,31392
   4b294:	280d883a 	mov	r6,r5
   4b298:	200b883a 	mov	r5,r4
   4b29c:	11000017 	ldw	r4,0(r2)
   4b2a0:	004b1d41 	jmpi	4b1d4 <_setlocale_r>

0004b2a4 <localeconv>:
   4b2a4:	00800174 	movhi	r2,5
   4b2a8:	10991504 	addi	r2,r2,25684
   4b2ac:	f800283a 	ret

0004b2b0 <__smakebuf_r>:
   4b2b0:	2880030b 	ldhu	r2,12(r5)
   4b2b4:	10c0008c 	andi	r3,r2,2
   4b2b8:	1800411e 	bne	r3,zero,4b3c0 <__smakebuf_r+0x110>
   4b2bc:	deffec04 	addi	sp,sp,-80
   4b2c0:	dc000f15 	stw	r16,60(sp)
   4b2c4:	2821883a 	mov	r16,r5
   4b2c8:	2940038f 	ldh	r5,14(r5)
   4b2cc:	dc401015 	stw	r17,64(sp)
   4b2d0:	dfc01315 	stw	ra,76(sp)
   4b2d4:	dcc01215 	stw	r19,72(sp)
   4b2d8:	dc801115 	stw	r18,68(sp)
   4b2dc:	2023883a 	mov	r17,r4
   4b2e0:	28001c16 	blt	r5,zero,4b354 <__smakebuf_r+0xa4>
   4b2e4:	d80d883a 	mov	r6,sp
   4b2e8:	00508400 	call	50840 <_fstat_r>
   4b2ec:	10001816 	blt	r2,zero,4b350 <__smakebuf_r+0xa0>
   4b2f0:	d8800117 	ldw	r2,4(sp)
   4b2f4:	00e00014 	movui	r3,32768
   4b2f8:	10bc000c 	andi	r2,r2,61440
   4b2fc:	14c80020 	cmpeqi	r19,r2,8192
   4b300:	10c03726 	beq	r2,r3,4b3e0 <__smakebuf_r+0x130>
   4b304:	80c0030b 	ldhu	r3,12(r16)
   4b308:	18c20014 	ori	r3,r3,2048
   4b30c:	80c0030d 	sth	r3,12(r16)
   4b310:	00c80004 	movi	r3,8192
   4b314:	10c0521e 	bne	r2,r3,4b460 <__smakebuf_r+0x1b0>
   4b318:	8140038f 	ldh	r5,14(r16)
   4b31c:	8809883a 	mov	r4,r17
   4b320:	005089c0 	call	5089c <_isatty_r>
   4b324:	10004c26 	beq	r2,zero,4b458 <__smakebuf_r+0x1a8>
   4b328:	8080030b 	ldhu	r2,12(r16)
   4b32c:	80c010c4 	addi	r3,r16,67
   4b330:	80c00015 	stw	r3,0(r16)
   4b334:	10800054 	ori	r2,r2,1
   4b338:	8080030d 	sth	r2,12(r16)
   4b33c:	00800044 	movi	r2,1
   4b340:	80c00415 	stw	r3,16(r16)
   4b344:	80800515 	stw	r2,20(r16)
   4b348:	04810004 	movi	r18,1024
   4b34c:	00000706 	br	4b36c <__smakebuf_r+0xbc>
   4b350:	8080030b 	ldhu	r2,12(r16)
   4b354:	10c0200c 	andi	r3,r2,128
   4b358:	18001f1e 	bne	r3,zero,4b3d8 <__smakebuf_r+0x128>
   4b35c:	04810004 	movi	r18,1024
   4b360:	10820014 	ori	r2,r2,2048
   4b364:	8080030d 	sth	r2,12(r16)
   4b368:	0027883a 	mov	r19,zero
   4b36c:	900b883a 	mov	r5,r18
   4b370:	8809883a 	mov	r4,r17
   4b374:	004b46c0 	call	4b46c <_malloc_r>
   4b378:	10002c26 	beq	r2,zero,4b42c <__smakebuf_r+0x17c>
   4b37c:	80c0030b 	ldhu	r3,12(r16)
   4b380:	01000174 	movhi	r4,5
   4b384:	2128f104 	addi	r4,r4,-23612
   4b388:	89000f15 	stw	r4,60(r17)
   4b38c:	18c02014 	ori	r3,r3,128
   4b390:	80c0030d 	sth	r3,12(r16)
   4b394:	80800015 	stw	r2,0(r16)
   4b398:	80800415 	stw	r2,16(r16)
   4b39c:	84800515 	stw	r18,20(r16)
   4b3a0:	98001a1e 	bne	r19,zero,4b40c <__smakebuf_r+0x15c>
   4b3a4:	dfc01317 	ldw	ra,76(sp)
   4b3a8:	dcc01217 	ldw	r19,72(sp)
   4b3ac:	dc801117 	ldw	r18,68(sp)
   4b3b0:	dc401017 	ldw	r17,64(sp)
   4b3b4:	dc000f17 	ldw	r16,60(sp)
   4b3b8:	dec01404 	addi	sp,sp,80
   4b3bc:	f800283a 	ret
   4b3c0:	288010c4 	addi	r2,r5,67
   4b3c4:	28800015 	stw	r2,0(r5)
   4b3c8:	28800415 	stw	r2,16(r5)
   4b3cc:	00800044 	movi	r2,1
   4b3d0:	28800515 	stw	r2,20(r5)
   4b3d4:	f800283a 	ret
   4b3d8:	04801004 	movi	r18,64
   4b3dc:	003fe006 	br	4b360 <__alt_data_end+0xfffccb60>
   4b3e0:	81000a17 	ldw	r4,40(r16)
   4b3e4:	00c00174 	movhi	r3,5
   4b3e8:	18f60a04 	addi	r3,r3,-10200
   4b3ec:	20ffc51e 	bne	r4,r3,4b304 <__alt_data_end+0xfffccb04>
   4b3f0:	8080030b 	ldhu	r2,12(r16)
   4b3f4:	04810004 	movi	r18,1024
   4b3f8:	84801315 	stw	r18,76(r16)
   4b3fc:	1484b03a 	or	r2,r2,r18
   4b400:	8080030d 	sth	r2,12(r16)
   4b404:	0027883a 	mov	r19,zero
   4b408:	003fd806 	br	4b36c <__alt_data_end+0xfffccb6c>
   4b40c:	8140038f 	ldh	r5,14(r16)
   4b410:	8809883a 	mov	r4,r17
   4b414:	005089c0 	call	5089c <_isatty_r>
   4b418:	103fe226 	beq	r2,zero,4b3a4 <__alt_data_end+0xfffccba4>
   4b41c:	8080030b 	ldhu	r2,12(r16)
   4b420:	10800054 	ori	r2,r2,1
   4b424:	8080030d 	sth	r2,12(r16)
   4b428:	003fde06 	br	4b3a4 <__alt_data_end+0xfffccba4>
   4b42c:	8080030b 	ldhu	r2,12(r16)
   4b430:	10c0800c 	andi	r3,r2,512
   4b434:	183fdb1e 	bne	r3,zero,4b3a4 <__alt_data_end+0xfffccba4>
   4b438:	10800094 	ori	r2,r2,2
   4b43c:	80c010c4 	addi	r3,r16,67
   4b440:	8080030d 	sth	r2,12(r16)
   4b444:	00800044 	movi	r2,1
   4b448:	80c00015 	stw	r3,0(r16)
   4b44c:	80c00415 	stw	r3,16(r16)
   4b450:	80800515 	stw	r2,20(r16)
   4b454:	003fd306 	br	4b3a4 <__alt_data_end+0xfffccba4>
   4b458:	04810004 	movi	r18,1024
   4b45c:	003fc306 	br	4b36c <__alt_data_end+0xfffccb6c>
   4b460:	0027883a 	mov	r19,zero
   4b464:	04810004 	movi	r18,1024
   4b468:	003fc006 	br	4b36c <__alt_data_end+0xfffccb6c>

0004b46c <_malloc_r>:
   4b46c:	defff504 	addi	sp,sp,-44
   4b470:	dc800315 	stw	r18,12(sp)
   4b474:	dfc00a15 	stw	ra,40(sp)
   4b478:	df000915 	stw	fp,36(sp)
   4b47c:	ddc00815 	stw	r23,32(sp)
   4b480:	dd800715 	stw	r22,28(sp)
   4b484:	dd400615 	stw	r21,24(sp)
   4b488:	dd000515 	stw	r20,20(sp)
   4b48c:	dcc00415 	stw	r19,16(sp)
   4b490:	dc400215 	stw	r17,8(sp)
   4b494:	dc000115 	stw	r16,4(sp)
   4b498:	288002c4 	addi	r2,r5,11
   4b49c:	00c00584 	movi	r3,22
   4b4a0:	2025883a 	mov	r18,r4
   4b4a4:	18807f2e 	bgeu	r3,r2,4b6a4 <_malloc_r+0x238>
   4b4a8:	047ffe04 	movi	r17,-8
   4b4ac:	1462703a 	and	r17,r2,r17
   4b4b0:	8800a316 	blt	r17,zero,4b740 <_malloc_r+0x2d4>
   4b4b4:	8940a236 	bltu	r17,r5,4b740 <_malloc_r+0x2d4>
   4b4b8:	005342c0 	call	5342c <__malloc_lock>
   4b4bc:	00807dc4 	movi	r2,503
   4b4c0:	1441e92e 	bgeu	r2,r17,4bc68 <_malloc_r+0x7fc>
   4b4c4:	8804d27a 	srli	r2,r17,9
   4b4c8:	1000a126 	beq	r2,zero,4b750 <_malloc_r+0x2e4>
   4b4cc:	00c00104 	movi	r3,4
   4b4d0:	18811e36 	bltu	r3,r2,4b94c <_malloc_r+0x4e0>
   4b4d4:	8804d1ba 	srli	r2,r17,6
   4b4d8:	12000e44 	addi	r8,r2,57
   4b4dc:	11c00e04 	addi	r7,r2,56
   4b4e0:	4209883a 	add	r4,r8,r8
   4b4e4:	04c00174 	movhi	r19,5
   4b4e8:	2109883a 	add	r4,r4,r4
   4b4ec:	9cd92304 	addi	r19,r19,25740
   4b4f0:	2109883a 	add	r4,r4,r4
   4b4f4:	9909883a 	add	r4,r19,r4
   4b4f8:	24000117 	ldw	r16,4(r4)
   4b4fc:	213ffe04 	addi	r4,r4,-8
   4b500:	24009726 	beq	r4,r16,4b760 <_malloc_r+0x2f4>
   4b504:	80800117 	ldw	r2,4(r16)
   4b508:	01bfff04 	movi	r6,-4
   4b50c:	014003c4 	movi	r5,15
   4b510:	1184703a 	and	r2,r2,r6
   4b514:	1447c83a 	sub	r3,r2,r17
   4b518:	28c00716 	blt	r5,r3,4b538 <_malloc_r+0xcc>
   4b51c:	1800920e 	bge	r3,zero,4b768 <_malloc_r+0x2fc>
   4b520:	84000317 	ldw	r16,12(r16)
   4b524:	24008e26 	beq	r4,r16,4b760 <_malloc_r+0x2f4>
   4b528:	80800117 	ldw	r2,4(r16)
   4b52c:	1184703a 	and	r2,r2,r6
   4b530:	1447c83a 	sub	r3,r2,r17
   4b534:	28fff90e 	bge	r5,r3,4b51c <__alt_data_end+0xfffccd1c>
   4b538:	3809883a 	mov	r4,r7
   4b53c:	01800174 	movhi	r6,5
   4b540:	9c000417 	ldw	r16,16(r19)
   4b544:	31992304 	addi	r6,r6,25740
   4b548:	32000204 	addi	r8,r6,8
   4b54c:	82013426 	beq	r16,r8,4ba20 <_malloc_r+0x5b4>
   4b550:	80c00117 	ldw	r3,4(r16)
   4b554:	00bfff04 	movi	r2,-4
   4b558:	188e703a 	and	r7,r3,r2
   4b55c:	3c45c83a 	sub	r2,r7,r17
   4b560:	00c003c4 	movi	r3,15
   4b564:	18811f16 	blt	r3,r2,4b9e4 <_malloc_r+0x578>
   4b568:	32000515 	stw	r8,20(r6)
   4b56c:	32000415 	stw	r8,16(r6)
   4b570:	10007f0e 	bge	r2,zero,4b770 <_malloc_r+0x304>
   4b574:	00807fc4 	movi	r2,511
   4b578:	11c0fd36 	bltu	r2,r7,4b970 <_malloc_r+0x504>
   4b57c:	3806d0fa 	srli	r3,r7,3
   4b580:	01c00044 	movi	r7,1
   4b584:	30800117 	ldw	r2,4(r6)
   4b588:	19400044 	addi	r5,r3,1
   4b58c:	294b883a 	add	r5,r5,r5
   4b590:	1807d0ba 	srai	r3,r3,2
   4b594:	294b883a 	add	r5,r5,r5
   4b598:	294b883a 	add	r5,r5,r5
   4b59c:	298b883a 	add	r5,r5,r6
   4b5a0:	38c6983a 	sll	r3,r7,r3
   4b5a4:	29c00017 	ldw	r7,0(r5)
   4b5a8:	2a7ffe04 	addi	r9,r5,-8
   4b5ac:	1886b03a 	or	r3,r3,r2
   4b5b0:	82400315 	stw	r9,12(r16)
   4b5b4:	81c00215 	stw	r7,8(r16)
   4b5b8:	30c00115 	stw	r3,4(r6)
   4b5bc:	2c000015 	stw	r16,0(r5)
   4b5c0:	3c000315 	stw	r16,12(r7)
   4b5c4:	2005d0ba 	srai	r2,r4,2
   4b5c8:	01400044 	movi	r5,1
   4b5cc:	288a983a 	sll	r5,r5,r2
   4b5d0:	19406f36 	bltu	r3,r5,4b790 <_malloc_r+0x324>
   4b5d4:	28c4703a 	and	r2,r5,r3
   4b5d8:	10000a1e 	bne	r2,zero,4b604 <_malloc_r+0x198>
   4b5dc:	00bfff04 	movi	r2,-4
   4b5e0:	294b883a 	add	r5,r5,r5
   4b5e4:	2088703a 	and	r4,r4,r2
   4b5e8:	28c4703a 	and	r2,r5,r3
   4b5ec:	21000104 	addi	r4,r4,4
   4b5f0:	1000041e 	bne	r2,zero,4b604 <_malloc_r+0x198>
   4b5f4:	294b883a 	add	r5,r5,r5
   4b5f8:	28c4703a 	and	r2,r5,r3
   4b5fc:	21000104 	addi	r4,r4,4
   4b600:	103ffc26 	beq	r2,zero,4b5f4 <__alt_data_end+0xfffccdf4>
   4b604:	02bfff04 	movi	r10,-4
   4b608:	024003c4 	movi	r9,15
   4b60c:	21800044 	addi	r6,r4,1
   4b610:	318d883a 	add	r6,r6,r6
   4b614:	318d883a 	add	r6,r6,r6
   4b618:	318d883a 	add	r6,r6,r6
   4b61c:	998d883a 	add	r6,r19,r6
   4b620:	333ffe04 	addi	r12,r6,-8
   4b624:	2017883a 	mov	r11,r4
   4b628:	31800104 	addi	r6,r6,4
   4b62c:	34000017 	ldw	r16,0(r6)
   4b630:	31fffd04 	addi	r7,r6,-12
   4b634:	81c0041e 	bne	r16,r7,4b648 <_malloc_r+0x1dc>
   4b638:	0000fb06 	br	4ba28 <_malloc_r+0x5bc>
   4b63c:	1801030e 	bge	r3,zero,4ba4c <_malloc_r+0x5e0>
   4b640:	84000317 	ldw	r16,12(r16)
   4b644:	81c0f826 	beq	r16,r7,4ba28 <_malloc_r+0x5bc>
   4b648:	80800117 	ldw	r2,4(r16)
   4b64c:	1284703a 	and	r2,r2,r10
   4b650:	1447c83a 	sub	r3,r2,r17
   4b654:	48fff90e 	bge	r9,r3,4b63c <__alt_data_end+0xfffcce3c>
   4b658:	80800317 	ldw	r2,12(r16)
   4b65c:	81000217 	ldw	r4,8(r16)
   4b660:	89400054 	ori	r5,r17,1
   4b664:	81400115 	stw	r5,4(r16)
   4b668:	20800315 	stw	r2,12(r4)
   4b66c:	11000215 	stw	r4,8(r2)
   4b670:	8463883a 	add	r17,r16,r17
   4b674:	9c400515 	stw	r17,20(r19)
   4b678:	9c400415 	stw	r17,16(r19)
   4b67c:	18800054 	ori	r2,r3,1
   4b680:	88800115 	stw	r2,4(r17)
   4b684:	8a000315 	stw	r8,12(r17)
   4b688:	8a000215 	stw	r8,8(r17)
   4b68c:	88e3883a 	add	r17,r17,r3
   4b690:	88c00015 	stw	r3,0(r17)
   4b694:	9009883a 	mov	r4,r18
   4b698:	00534500 	call	53450 <__malloc_unlock>
   4b69c:	80800204 	addi	r2,r16,8
   4b6a0:	00001b06 	br	4b710 <_malloc_r+0x2a4>
   4b6a4:	04400404 	movi	r17,16
   4b6a8:	89402536 	bltu	r17,r5,4b740 <_malloc_r+0x2d4>
   4b6ac:	005342c0 	call	5342c <__malloc_lock>
   4b6b0:	00800184 	movi	r2,6
   4b6b4:	01000084 	movi	r4,2
   4b6b8:	04c00174 	movhi	r19,5
   4b6bc:	1085883a 	add	r2,r2,r2
   4b6c0:	9cd92304 	addi	r19,r19,25740
   4b6c4:	1085883a 	add	r2,r2,r2
   4b6c8:	9885883a 	add	r2,r19,r2
   4b6cc:	14000117 	ldw	r16,4(r2)
   4b6d0:	10fffe04 	addi	r3,r2,-8
   4b6d4:	80c0d926 	beq	r16,r3,4ba3c <_malloc_r+0x5d0>
   4b6d8:	80c00117 	ldw	r3,4(r16)
   4b6dc:	81000317 	ldw	r4,12(r16)
   4b6e0:	00bfff04 	movi	r2,-4
   4b6e4:	1884703a 	and	r2,r3,r2
   4b6e8:	81400217 	ldw	r5,8(r16)
   4b6ec:	8085883a 	add	r2,r16,r2
   4b6f0:	10c00117 	ldw	r3,4(r2)
   4b6f4:	29000315 	stw	r4,12(r5)
   4b6f8:	21400215 	stw	r5,8(r4)
   4b6fc:	18c00054 	ori	r3,r3,1
   4b700:	10c00115 	stw	r3,4(r2)
   4b704:	9009883a 	mov	r4,r18
   4b708:	00534500 	call	53450 <__malloc_unlock>
   4b70c:	80800204 	addi	r2,r16,8
   4b710:	dfc00a17 	ldw	ra,40(sp)
   4b714:	df000917 	ldw	fp,36(sp)
   4b718:	ddc00817 	ldw	r23,32(sp)
   4b71c:	dd800717 	ldw	r22,28(sp)
   4b720:	dd400617 	ldw	r21,24(sp)
   4b724:	dd000517 	ldw	r20,20(sp)
   4b728:	dcc00417 	ldw	r19,16(sp)
   4b72c:	dc800317 	ldw	r18,12(sp)
   4b730:	dc400217 	ldw	r17,8(sp)
   4b734:	dc000117 	ldw	r16,4(sp)
   4b738:	dec00b04 	addi	sp,sp,44
   4b73c:	f800283a 	ret
   4b740:	00800304 	movi	r2,12
   4b744:	90800015 	stw	r2,0(r18)
   4b748:	0005883a 	mov	r2,zero
   4b74c:	003ff006 	br	4b710 <__alt_data_end+0xfffccf10>
   4b750:	01002004 	movi	r4,128
   4b754:	02001004 	movi	r8,64
   4b758:	01c00fc4 	movi	r7,63
   4b75c:	003f6106 	br	4b4e4 <__alt_data_end+0xfffccce4>
   4b760:	4009883a 	mov	r4,r8
   4b764:	003f7506 	br	4b53c <__alt_data_end+0xfffccd3c>
   4b768:	81000317 	ldw	r4,12(r16)
   4b76c:	003fde06 	br	4b6e8 <__alt_data_end+0xfffccee8>
   4b770:	81c5883a 	add	r2,r16,r7
   4b774:	11400117 	ldw	r5,4(r2)
   4b778:	9009883a 	mov	r4,r18
   4b77c:	29400054 	ori	r5,r5,1
   4b780:	11400115 	stw	r5,4(r2)
   4b784:	00534500 	call	53450 <__malloc_unlock>
   4b788:	80800204 	addi	r2,r16,8
   4b78c:	003fe006 	br	4b710 <__alt_data_end+0xfffccf10>
   4b790:	9c000217 	ldw	r16,8(r19)
   4b794:	00bfff04 	movi	r2,-4
   4b798:	85800117 	ldw	r22,4(r16)
   4b79c:	b0ac703a 	and	r22,r22,r2
   4b7a0:	b4400336 	bltu	r22,r17,4b7b0 <_malloc_r+0x344>
   4b7a4:	b445c83a 	sub	r2,r22,r17
   4b7a8:	00c003c4 	movi	r3,15
   4b7ac:	18805d16 	blt	r3,r2,4b924 <_malloc_r+0x4b8>
   4b7b0:	05c00174 	movhi	r23,5
   4b7b4:	008001b4 	movhi	r2,6
   4b7b8:	10a5ab04 	addi	r2,r2,-26964
   4b7bc:	bddeaa04 	addi	r23,r23,31400
   4b7c0:	15400017 	ldw	r21,0(r2)
   4b7c4:	b8c00017 	ldw	r3,0(r23)
   4b7c8:	00bfffc4 	movi	r2,-1
   4b7cc:	858d883a 	add	r6,r16,r22
   4b7d0:	8d6b883a 	add	r21,r17,r21
   4b7d4:	1880ea26 	beq	r3,r2,4bb80 <_malloc_r+0x714>
   4b7d8:	ad4403c4 	addi	r21,r21,4111
   4b7dc:	00bc0004 	movi	r2,-4096
   4b7e0:	a8aa703a 	and	r21,r21,r2
   4b7e4:	a80b883a 	mov	r5,r21
   4b7e8:	9009883a 	mov	r4,r18
   4b7ec:	d9800015 	stw	r6,0(sp)
   4b7f0:	004d6fc0 	call	4d6fc <_sbrk_r>
   4b7f4:	1029883a 	mov	r20,r2
   4b7f8:	00bfffc4 	movi	r2,-1
   4b7fc:	d9800017 	ldw	r6,0(sp)
   4b800:	a080e826 	beq	r20,r2,4bba4 <_malloc_r+0x738>
   4b804:	a180a636 	bltu	r20,r6,4baa0 <_malloc_r+0x634>
   4b808:	070001b4 	movhi	fp,6
   4b80c:	e725b404 	addi	fp,fp,-26928
   4b810:	e0800017 	ldw	r2,0(fp)
   4b814:	a887883a 	add	r3,r21,r2
   4b818:	e0c00015 	stw	r3,0(fp)
   4b81c:	3500e626 	beq	r6,r20,4bbb8 <_malloc_r+0x74c>
   4b820:	b9000017 	ldw	r4,0(r23)
   4b824:	00bfffc4 	movi	r2,-1
   4b828:	2080ee26 	beq	r4,r2,4bbe4 <_malloc_r+0x778>
   4b82c:	a185c83a 	sub	r2,r20,r6
   4b830:	10c5883a 	add	r2,r2,r3
   4b834:	e0800015 	stw	r2,0(fp)
   4b838:	a0c001cc 	andi	r3,r20,7
   4b83c:	1800bc26 	beq	r3,zero,4bb30 <_malloc_r+0x6c4>
   4b840:	a0e9c83a 	sub	r20,r20,r3
   4b844:	00840204 	movi	r2,4104
   4b848:	a5000204 	addi	r20,r20,8
   4b84c:	10c7c83a 	sub	r3,r2,r3
   4b850:	a545883a 	add	r2,r20,r21
   4b854:	1083ffcc 	andi	r2,r2,4095
   4b858:	18abc83a 	sub	r21,r3,r2
   4b85c:	a80b883a 	mov	r5,r21
   4b860:	9009883a 	mov	r4,r18
   4b864:	004d6fc0 	call	4d6fc <_sbrk_r>
   4b868:	00ffffc4 	movi	r3,-1
   4b86c:	10c0e126 	beq	r2,r3,4bbf4 <_malloc_r+0x788>
   4b870:	1505c83a 	sub	r2,r2,r20
   4b874:	1545883a 	add	r2,r2,r21
   4b878:	10800054 	ori	r2,r2,1
   4b87c:	e0c00017 	ldw	r3,0(fp)
   4b880:	9d000215 	stw	r20,8(r19)
   4b884:	a0800115 	stw	r2,4(r20)
   4b888:	a8c7883a 	add	r3,r21,r3
   4b88c:	e0c00015 	stw	r3,0(fp)
   4b890:	84c00e26 	beq	r16,r19,4b8cc <_malloc_r+0x460>
   4b894:	018003c4 	movi	r6,15
   4b898:	3580a72e 	bgeu	r6,r22,4bb38 <_malloc_r+0x6cc>
   4b89c:	81400117 	ldw	r5,4(r16)
   4b8a0:	013ffe04 	movi	r4,-8
   4b8a4:	b0bffd04 	addi	r2,r22,-12
   4b8a8:	1104703a 	and	r2,r2,r4
   4b8ac:	2900004c 	andi	r4,r5,1
   4b8b0:	2088b03a 	or	r4,r4,r2
   4b8b4:	81000115 	stw	r4,4(r16)
   4b8b8:	01400144 	movi	r5,5
   4b8bc:	8089883a 	add	r4,r16,r2
   4b8c0:	21400115 	stw	r5,4(r4)
   4b8c4:	21400215 	stw	r5,8(r4)
   4b8c8:	3080cd36 	bltu	r6,r2,4bc00 <_malloc_r+0x794>
   4b8cc:	008001b4 	movhi	r2,6
   4b8d0:	10a5aa04 	addi	r2,r2,-26968
   4b8d4:	11000017 	ldw	r4,0(r2)
   4b8d8:	20c0012e 	bgeu	r4,r3,4b8e0 <_malloc_r+0x474>
   4b8dc:	10c00015 	stw	r3,0(r2)
   4b8e0:	008001b4 	movhi	r2,6
   4b8e4:	10a5a904 	addi	r2,r2,-26972
   4b8e8:	11000017 	ldw	r4,0(r2)
   4b8ec:	9c000217 	ldw	r16,8(r19)
   4b8f0:	20c0012e 	bgeu	r4,r3,4b8f8 <_malloc_r+0x48c>
   4b8f4:	10c00015 	stw	r3,0(r2)
   4b8f8:	80c00117 	ldw	r3,4(r16)
   4b8fc:	00bfff04 	movi	r2,-4
   4b900:	1886703a 	and	r3,r3,r2
   4b904:	1c45c83a 	sub	r2,r3,r17
   4b908:	1c400236 	bltu	r3,r17,4b914 <_malloc_r+0x4a8>
   4b90c:	00c003c4 	movi	r3,15
   4b910:	18800416 	blt	r3,r2,4b924 <_malloc_r+0x4b8>
   4b914:	9009883a 	mov	r4,r18
   4b918:	00534500 	call	53450 <__malloc_unlock>
   4b91c:	0005883a 	mov	r2,zero
   4b920:	003f7b06 	br	4b710 <__alt_data_end+0xfffccf10>
   4b924:	88c00054 	ori	r3,r17,1
   4b928:	80c00115 	stw	r3,4(r16)
   4b92c:	8463883a 	add	r17,r16,r17
   4b930:	10800054 	ori	r2,r2,1
   4b934:	9c400215 	stw	r17,8(r19)
   4b938:	88800115 	stw	r2,4(r17)
   4b93c:	9009883a 	mov	r4,r18
   4b940:	00534500 	call	53450 <__malloc_unlock>
   4b944:	80800204 	addi	r2,r16,8
   4b948:	003f7106 	br	4b710 <__alt_data_end+0xfffccf10>
   4b94c:	00c00504 	movi	r3,20
   4b950:	18804a2e 	bgeu	r3,r2,4ba7c <_malloc_r+0x610>
   4b954:	00c01504 	movi	r3,84
   4b958:	18806e36 	bltu	r3,r2,4bb14 <_malloc_r+0x6a8>
   4b95c:	8804d33a 	srli	r2,r17,12
   4b960:	12001bc4 	addi	r8,r2,111
   4b964:	11c01b84 	addi	r7,r2,110
   4b968:	4209883a 	add	r4,r8,r8
   4b96c:	003edd06 	br	4b4e4 <__alt_data_end+0xfffccce4>
   4b970:	3804d27a 	srli	r2,r7,9
   4b974:	00c00104 	movi	r3,4
   4b978:	1880442e 	bgeu	r3,r2,4ba8c <_malloc_r+0x620>
   4b97c:	00c00504 	movi	r3,20
   4b980:	18808136 	bltu	r3,r2,4bb88 <_malloc_r+0x71c>
   4b984:	11401704 	addi	r5,r2,92
   4b988:	10c016c4 	addi	r3,r2,91
   4b98c:	294b883a 	add	r5,r5,r5
   4b990:	294b883a 	add	r5,r5,r5
   4b994:	294b883a 	add	r5,r5,r5
   4b998:	994b883a 	add	r5,r19,r5
   4b99c:	28800017 	ldw	r2,0(r5)
   4b9a0:	01800174 	movhi	r6,5
   4b9a4:	297ffe04 	addi	r5,r5,-8
   4b9a8:	31992304 	addi	r6,r6,25740
   4b9ac:	28806526 	beq	r5,r2,4bb44 <_malloc_r+0x6d8>
   4b9b0:	01bfff04 	movi	r6,-4
   4b9b4:	10c00117 	ldw	r3,4(r2)
   4b9b8:	1986703a 	and	r3,r3,r6
   4b9bc:	38c0022e 	bgeu	r7,r3,4b9c8 <_malloc_r+0x55c>
   4b9c0:	10800217 	ldw	r2,8(r2)
   4b9c4:	28bffb1e 	bne	r5,r2,4b9b4 <__alt_data_end+0xfffcd1b4>
   4b9c8:	11400317 	ldw	r5,12(r2)
   4b9cc:	98c00117 	ldw	r3,4(r19)
   4b9d0:	81400315 	stw	r5,12(r16)
   4b9d4:	80800215 	stw	r2,8(r16)
   4b9d8:	2c000215 	stw	r16,8(r5)
   4b9dc:	14000315 	stw	r16,12(r2)
   4b9e0:	003ef806 	br	4b5c4 <__alt_data_end+0xfffccdc4>
   4b9e4:	88c00054 	ori	r3,r17,1
   4b9e8:	80c00115 	stw	r3,4(r16)
   4b9ec:	8463883a 	add	r17,r16,r17
   4b9f0:	34400515 	stw	r17,20(r6)
   4b9f4:	34400415 	stw	r17,16(r6)
   4b9f8:	10c00054 	ori	r3,r2,1
   4b9fc:	8a000315 	stw	r8,12(r17)
   4ba00:	8a000215 	stw	r8,8(r17)
   4ba04:	88c00115 	stw	r3,4(r17)
   4ba08:	88a3883a 	add	r17,r17,r2
   4ba0c:	88800015 	stw	r2,0(r17)
   4ba10:	9009883a 	mov	r4,r18
   4ba14:	00534500 	call	53450 <__malloc_unlock>
   4ba18:	80800204 	addi	r2,r16,8
   4ba1c:	003f3c06 	br	4b710 <__alt_data_end+0xfffccf10>
   4ba20:	30c00117 	ldw	r3,4(r6)
   4ba24:	003ee706 	br	4b5c4 <__alt_data_end+0xfffccdc4>
   4ba28:	5ac00044 	addi	r11,r11,1
   4ba2c:	588000cc 	andi	r2,r11,3
   4ba30:	31800204 	addi	r6,r6,8
   4ba34:	103efd1e 	bne	r2,zero,4b62c <__alt_data_end+0xfffcce2c>
   4ba38:	00002406 	br	4bacc <_malloc_r+0x660>
   4ba3c:	14000317 	ldw	r16,12(r2)
   4ba40:	143f251e 	bne	r2,r16,4b6d8 <__alt_data_end+0xfffcced8>
   4ba44:	21000084 	addi	r4,r4,2
   4ba48:	003ebc06 	br	4b53c <__alt_data_end+0xfffccd3c>
   4ba4c:	8085883a 	add	r2,r16,r2
   4ba50:	10c00117 	ldw	r3,4(r2)
   4ba54:	81000317 	ldw	r4,12(r16)
   4ba58:	81400217 	ldw	r5,8(r16)
   4ba5c:	18c00054 	ori	r3,r3,1
   4ba60:	10c00115 	stw	r3,4(r2)
   4ba64:	29000315 	stw	r4,12(r5)
   4ba68:	21400215 	stw	r5,8(r4)
   4ba6c:	9009883a 	mov	r4,r18
   4ba70:	00534500 	call	53450 <__malloc_unlock>
   4ba74:	80800204 	addi	r2,r16,8
   4ba78:	003f2506 	br	4b710 <__alt_data_end+0xfffccf10>
   4ba7c:	12001704 	addi	r8,r2,92
   4ba80:	11c016c4 	addi	r7,r2,91
   4ba84:	4209883a 	add	r4,r8,r8
   4ba88:	003e9606 	br	4b4e4 <__alt_data_end+0xfffccce4>
   4ba8c:	3804d1ba 	srli	r2,r7,6
   4ba90:	11400e44 	addi	r5,r2,57
   4ba94:	10c00e04 	addi	r3,r2,56
   4ba98:	294b883a 	add	r5,r5,r5
   4ba9c:	003fbc06 	br	4b990 <__alt_data_end+0xfffcd190>
   4baa0:	84ff5926 	beq	r16,r19,4b808 <__alt_data_end+0xfffcd008>
   4baa4:	00800174 	movhi	r2,5
   4baa8:	10992304 	addi	r2,r2,25740
   4baac:	14000217 	ldw	r16,8(r2)
   4bab0:	00bfff04 	movi	r2,-4
   4bab4:	80c00117 	ldw	r3,4(r16)
   4bab8:	1886703a 	and	r3,r3,r2
   4babc:	003f9106 	br	4b904 <__alt_data_end+0xfffcd104>
   4bac0:	60800217 	ldw	r2,8(r12)
   4bac4:	213fffc4 	addi	r4,r4,-1
   4bac8:	1300651e 	bne	r2,r12,4bc60 <_malloc_r+0x7f4>
   4bacc:	208000cc 	andi	r2,r4,3
   4bad0:	633ffe04 	addi	r12,r12,-8
   4bad4:	103ffa1e 	bne	r2,zero,4bac0 <__alt_data_end+0xfffcd2c0>
   4bad8:	98800117 	ldw	r2,4(r19)
   4badc:	0146303a 	nor	r3,zero,r5
   4bae0:	1884703a 	and	r2,r3,r2
   4bae4:	98800115 	stw	r2,4(r19)
   4bae8:	294b883a 	add	r5,r5,r5
   4baec:	117f2836 	bltu	r2,r5,4b790 <__alt_data_end+0xfffccf90>
   4baf0:	283f2726 	beq	r5,zero,4b790 <__alt_data_end+0xfffccf90>
   4baf4:	2886703a 	and	r3,r5,r2
   4baf8:	5809883a 	mov	r4,r11
   4bafc:	183ec31e 	bne	r3,zero,4b60c <__alt_data_end+0xfffcce0c>
   4bb00:	294b883a 	add	r5,r5,r5
   4bb04:	2886703a 	and	r3,r5,r2
   4bb08:	21000104 	addi	r4,r4,4
   4bb0c:	183ffc26 	beq	r3,zero,4bb00 <__alt_data_end+0xfffcd300>
   4bb10:	003ebe06 	br	4b60c <__alt_data_end+0xfffcce0c>
   4bb14:	00c05504 	movi	r3,340
   4bb18:	18801236 	bltu	r3,r2,4bb64 <_malloc_r+0x6f8>
   4bb1c:	8804d3fa 	srli	r2,r17,15
   4bb20:	12001e04 	addi	r8,r2,120
   4bb24:	11c01dc4 	addi	r7,r2,119
   4bb28:	4209883a 	add	r4,r8,r8
   4bb2c:	003e6d06 	br	4b4e4 <__alt_data_end+0xfffccce4>
   4bb30:	00c40004 	movi	r3,4096
   4bb34:	003f4606 	br	4b850 <__alt_data_end+0xfffcd050>
   4bb38:	00800044 	movi	r2,1
   4bb3c:	a0800115 	stw	r2,4(r20)
   4bb40:	003f7406 	br	4b914 <__alt_data_end+0xfffcd114>
   4bb44:	1805d0ba 	srai	r2,r3,2
   4bb48:	01c00044 	movi	r7,1
   4bb4c:	30c00117 	ldw	r3,4(r6)
   4bb50:	388e983a 	sll	r7,r7,r2
   4bb54:	2805883a 	mov	r2,r5
   4bb58:	38c6b03a 	or	r3,r7,r3
   4bb5c:	30c00115 	stw	r3,4(r6)
   4bb60:	003f9b06 	br	4b9d0 <__alt_data_end+0xfffcd1d0>
   4bb64:	00c15504 	movi	r3,1364
   4bb68:	18801a36 	bltu	r3,r2,4bbd4 <_malloc_r+0x768>
   4bb6c:	8804d4ba 	srli	r2,r17,18
   4bb70:	12001f44 	addi	r8,r2,125
   4bb74:	11c01f04 	addi	r7,r2,124
   4bb78:	4209883a 	add	r4,r8,r8
   4bb7c:	003e5906 	br	4b4e4 <__alt_data_end+0xfffccce4>
   4bb80:	ad400404 	addi	r21,r21,16
   4bb84:	003f1706 	br	4b7e4 <__alt_data_end+0xfffccfe4>
   4bb88:	00c01504 	movi	r3,84
   4bb8c:	18802336 	bltu	r3,r2,4bc1c <_malloc_r+0x7b0>
   4bb90:	3804d33a 	srli	r2,r7,12
   4bb94:	11401bc4 	addi	r5,r2,111
   4bb98:	10c01b84 	addi	r3,r2,110
   4bb9c:	294b883a 	add	r5,r5,r5
   4bba0:	003f7b06 	br	4b990 <__alt_data_end+0xfffcd190>
   4bba4:	9c000217 	ldw	r16,8(r19)
   4bba8:	00bfff04 	movi	r2,-4
   4bbac:	80c00117 	ldw	r3,4(r16)
   4bbb0:	1886703a 	and	r3,r3,r2
   4bbb4:	003f5306 	br	4b904 <__alt_data_end+0xfffcd104>
   4bbb8:	3083ffcc 	andi	r2,r6,4095
   4bbbc:	103f181e 	bne	r2,zero,4b820 <__alt_data_end+0xfffcd020>
   4bbc0:	99000217 	ldw	r4,8(r19)
   4bbc4:	b545883a 	add	r2,r22,r21
   4bbc8:	10800054 	ori	r2,r2,1
   4bbcc:	20800115 	stw	r2,4(r4)
   4bbd0:	003f3e06 	br	4b8cc <__alt_data_end+0xfffcd0cc>
   4bbd4:	01003f84 	movi	r4,254
   4bbd8:	02001fc4 	movi	r8,127
   4bbdc:	01c01f84 	movi	r7,126
   4bbe0:	003e4006 	br	4b4e4 <__alt_data_end+0xfffccce4>
   4bbe4:	00800174 	movhi	r2,5
   4bbe8:	109eaa04 	addi	r2,r2,31400
   4bbec:	15000015 	stw	r20,0(r2)
   4bbf0:	003f1106 	br	4b838 <__alt_data_end+0xfffcd038>
   4bbf4:	00800044 	movi	r2,1
   4bbf8:	002b883a 	mov	r21,zero
   4bbfc:	003f1f06 	br	4b87c <__alt_data_end+0xfffcd07c>
   4bc00:	81400204 	addi	r5,r16,8
   4bc04:	9009883a 	mov	r4,r18
   4bc08:	004a8800 	call	4a880 <_free_r>
   4bc0c:	008001b4 	movhi	r2,6
   4bc10:	10a5b404 	addi	r2,r2,-26928
   4bc14:	10c00017 	ldw	r3,0(r2)
   4bc18:	003f2c06 	br	4b8cc <__alt_data_end+0xfffcd0cc>
   4bc1c:	00c05504 	movi	r3,340
   4bc20:	18800536 	bltu	r3,r2,4bc38 <_malloc_r+0x7cc>
   4bc24:	3804d3fa 	srli	r2,r7,15
   4bc28:	11401e04 	addi	r5,r2,120
   4bc2c:	10c01dc4 	addi	r3,r2,119
   4bc30:	294b883a 	add	r5,r5,r5
   4bc34:	003f5606 	br	4b990 <__alt_data_end+0xfffcd190>
   4bc38:	00c15504 	movi	r3,1364
   4bc3c:	18800536 	bltu	r3,r2,4bc54 <_malloc_r+0x7e8>
   4bc40:	3804d4ba 	srli	r2,r7,18
   4bc44:	11401f44 	addi	r5,r2,125
   4bc48:	10c01f04 	addi	r3,r2,124
   4bc4c:	294b883a 	add	r5,r5,r5
   4bc50:	003f4f06 	br	4b990 <__alt_data_end+0xfffcd190>
   4bc54:	01403f84 	movi	r5,254
   4bc58:	00c01f84 	movi	r3,126
   4bc5c:	003f4c06 	br	4b990 <__alt_data_end+0xfffcd190>
   4bc60:	98800117 	ldw	r2,4(r19)
   4bc64:	003fa006 	br	4bae8 <__alt_data_end+0xfffcd2e8>
   4bc68:	8808d0fa 	srli	r4,r17,3
   4bc6c:	20800044 	addi	r2,r4,1
   4bc70:	1085883a 	add	r2,r2,r2
   4bc74:	003e9006 	br	4b6b8 <__alt_data_end+0xfffcceb8>

0004bc78 <memchr>:
   4bc78:	208000cc 	andi	r2,r4,3
   4bc7c:	280f883a 	mov	r7,r5
   4bc80:	10003426 	beq	r2,zero,4bd54 <memchr+0xdc>
   4bc84:	30bfffc4 	addi	r2,r6,-1
   4bc88:	30001a26 	beq	r6,zero,4bcf4 <memchr+0x7c>
   4bc8c:	20c00003 	ldbu	r3,0(r4)
   4bc90:	29803fcc 	andi	r6,r5,255
   4bc94:	30c0051e 	bne	r6,r3,4bcac <memchr+0x34>
   4bc98:	00001806 	br	4bcfc <memchr+0x84>
   4bc9c:	10001526 	beq	r2,zero,4bcf4 <memchr+0x7c>
   4bca0:	20c00003 	ldbu	r3,0(r4)
   4bca4:	10bfffc4 	addi	r2,r2,-1
   4bca8:	30c01426 	beq	r6,r3,4bcfc <memchr+0x84>
   4bcac:	21000044 	addi	r4,r4,1
   4bcb0:	20c000cc 	andi	r3,r4,3
   4bcb4:	183ff91e 	bne	r3,zero,4bc9c <__alt_data_end+0xfffcd49c>
   4bcb8:	020000c4 	movi	r8,3
   4bcbc:	40801136 	bltu	r8,r2,4bd04 <memchr+0x8c>
   4bcc0:	10000c26 	beq	r2,zero,4bcf4 <memchr+0x7c>
   4bcc4:	20c00003 	ldbu	r3,0(r4)
   4bcc8:	29403fcc 	andi	r5,r5,255
   4bccc:	28c00b26 	beq	r5,r3,4bcfc <memchr+0x84>
   4bcd0:	20c00044 	addi	r3,r4,1
   4bcd4:	39803fcc 	andi	r6,r7,255
   4bcd8:	2089883a 	add	r4,r4,r2
   4bcdc:	00000306 	br	4bcec <memchr+0x74>
   4bce0:	18c00044 	addi	r3,r3,1
   4bce4:	197fffc3 	ldbu	r5,-1(r3)
   4bce8:	31400526 	beq	r6,r5,4bd00 <memchr+0x88>
   4bcec:	1805883a 	mov	r2,r3
   4bcf0:	20fffb1e 	bne	r4,r3,4bce0 <__alt_data_end+0xfffcd4e0>
   4bcf4:	0005883a 	mov	r2,zero
   4bcf8:	f800283a 	ret
   4bcfc:	2005883a 	mov	r2,r4
   4bd00:	f800283a 	ret
   4bd04:	28c03fcc 	andi	r3,r5,255
   4bd08:	1812923a 	slli	r9,r3,8
   4bd0c:	02ffbff4 	movhi	r11,65279
   4bd10:	02a02074 	movhi	r10,32897
   4bd14:	48d2b03a 	or	r9,r9,r3
   4bd18:	4806943a 	slli	r3,r9,16
   4bd1c:	5affbfc4 	addi	r11,r11,-257
   4bd20:	52a02004 	addi	r10,r10,-32640
   4bd24:	48d2b03a 	or	r9,r9,r3
   4bd28:	20c00017 	ldw	r3,0(r4)
   4bd2c:	48c6f03a 	xor	r3,r9,r3
   4bd30:	1acd883a 	add	r6,r3,r11
   4bd34:	00c6303a 	nor	r3,zero,r3
   4bd38:	30c6703a 	and	r3,r6,r3
   4bd3c:	1a86703a 	and	r3,r3,r10
   4bd40:	183fe01e 	bne	r3,zero,4bcc4 <__alt_data_end+0xfffcd4c4>
   4bd44:	10bfff04 	addi	r2,r2,-4
   4bd48:	21000104 	addi	r4,r4,4
   4bd4c:	40bff636 	bltu	r8,r2,4bd28 <__alt_data_end+0xfffcd528>
   4bd50:	003fdb06 	br	4bcc0 <__alt_data_end+0xfffcd4c0>
   4bd54:	3005883a 	mov	r2,r6
   4bd58:	003fd706 	br	4bcb8 <__alt_data_end+0xfffcd4b8>

0004bd5c <memcpy>:
   4bd5c:	defffd04 	addi	sp,sp,-12
   4bd60:	dfc00215 	stw	ra,8(sp)
   4bd64:	dc400115 	stw	r17,4(sp)
   4bd68:	dc000015 	stw	r16,0(sp)
   4bd6c:	00c003c4 	movi	r3,15
   4bd70:	2005883a 	mov	r2,r4
   4bd74:	1980452e 	bgeu	r3,r6,4be8c <memcpy+0x130>
   4bd78:	2906b03a 	or	r3,r5,r4
   4bd7c:	18c000cc 	andi	r3,r3,3
   4bd80:	1800441e 	bne	r3,zero,4be94 <memcpy+0x138>
   4bd84:	347ffc04 	addi	r17,r6,-16
   4bd88:	8822d13a 	srli	r17,r17,4
   4bd8c:	28c00104 	addi	r3,r5,4
   4bd90:	23400104 	addi	r13,r4,4
   4bd94:	8820913a 	slli	r16,r17,4
   4bd98:	2b000204 	addi	r12,r5,8
   4bd9c:	22c00204 	addi	r11,r4,8
   4bda0:	84000504 	addi	r16,r16,20
   4bda4:	2a800304 	addi	r10,r5,12
   4bda8:	22400304 	addi	r9,r4,12
   4bdac:	2c21883a 	add	r16,r5,r16
   4bdb0:	2811883a 	mov	r8,r5
   4bdb4:	200f883a 	mov	r7,r4
   4bdb8:	41000017 	ldw	r4,0(r8)
   4bdbc:	1fc00017 	ldw	ra,0(r3)
   4bdc0:	63c00017 	ldw	r15,0(r12)
   4bdc4:	39000015 	stw	r4,0(r7)
   4bdc8:	53800017 	ldw	r14,0(r10)
   4bdcc:	6fc00015 	stw	ra,0(r13)
   4bdd0:	5bc00015 	stw	r15,0(r11)
   4bdd4:	4b800015 	stw	r14,0(r9)
   4bdd8:	18c00404 	addi	r3,r3,16
   4bddc:	39c00404 	addi	r7,r7,16
   4bde0:	42000404 	addi	r8,r8,16
   4bde4:	6b400404 	addi	r13,r13,16
   4bde8:	63000404 	addi	r12,r12,16
   4bdec:	5ac00404 	addi	r11,r11,16
   4bdf0:	52800404 	addi	r10,r10,16
   4bdf4:	4a400404 	addi	r9,r9,16
   4bdf8:	1c3fef1e 	bne	r3,r16,4bdb8 <__alt_data_end+0xfffcd5b8>
   4bdfc:	89c00044 	addi	r7,r17,1
   4be00:	380e913a 	slli	r7,r7,4
   4be04:	310003cc 	andi	r4,r6,15
   4be08:	02c000c4 	movi	r11,3
   4be0c:	11c7883a 	add	r3,r2,r7
   4be10:	29cb883a 	add	r5,r5,r7
   4be14:	5900212e 	bgeu	r11,r4,4be9c <memcpy+0x140>
   4be18:	1813883a 	mov	r9,r3
   4be1c:	2811883a 	mov	r8,r5
   4be20:	200f883a 	mov	r7,r4
   4be24:	42800017 	ldw	r10,0(r8)
   4be28:	4a400104 	addi	r9,r9,4
   4be2c:	39ffff04 	addi	r7,r7,-4
   4be30:	4abfff15 	stw	r10,-4(r9)
   4be34:	42000104 	addi	r8,r8,4
   4be38:	59fffa36 	bltu	r11,r7,4be24 <__alt_data_end+0xfffcd624>
   4be3c:	213fff04 	addi	r4,r4,-4
   4be40:	2008d0ba 	srli	r4,r4,2
   4be44:	318000cc 	andi	r6,r6,3
   4be48:	21000044 	addi	r4,r4,1
   4be4c:	2109883a 	add	r4,r4,r4
   4be50:	2109883a 	add	r4,r4,r4
   4be54:	1907883a 	add	r3,r3,r4
   4be58:	290b883a 	add	r5,r5,r4
   4be5c:	30000626 	beq	r6,zero,4be78 <memcpy+0x11c>
   4be60:	198d883a 	add	r6,r3,r6
   4be64:	29c00003 	ldbu	r7,0(r5)
   4be68:	18c00044 	addi	r3,r3,1
   4be6c:	29400044 	addi	r5,r5,1
   4be70:	19ffffc5 	stb	r7,-1(r3)
   4be74:	19bffb1e 	bne	r3,r6,4be64 <__alt_data_end+0xfffcd664>
   4be78:	dfc00217 	ldw	ra,8(sp)
   4be7c:	dc400117 	ldw	r17,4(sp)
   4be80:	dc000017 	ldw	r16,0(sp)
   4be84:	dec00304 	addi	sp,sp,12
   4be88:	f800283a 	ret
   4be8c:	2007883a 	mov	r3,r4
   4be90:	003ff206 	br	4be5c <__alt_data_end+0xfffcd65c>
   4be94:	2007883a 	mov	r3,r4
   4be98:	003ff106 	br	4be60 <__alt_data_end+0xfffcd660>
   4be9c:	200d883a 	mov	r6,r4
   4bea0:	003fee06 	br	4be5c <__alt_data_end+0xfffcd65c>

0004bea4 <memmove>:
   4bea4:	2005883a 	mov	r2,r4
   4bea8:	29000b2e 	bgeu	r5,r4,4bed8 <memmove+0x34>
   4beac:	298f883a 	add	r7,r5,r6
   4beb0:	21c0092e 	bgeu	r4,r7,4bed8 <memmove+0x34>
   4beb4:	2187883a 	add	r3,r4,r6
   4beb8:	198bc83a 	sub	r5,r3,r6
   4bebc:	30004826 	beq	r6,zero,4bfe0 <memmove+0x13c>
   4bec0:	39ffffc4 	addi	r7,r7,-1
   4bec4:	39000003 	ldbu	r4,0(r7)
   4bec8:	18ffffc4 	addi	r3,r3,-1
   4becc:	19000005 	stb	r4,0(r3)
   4bed0:	28fffb1e 	bne	r5,r3,4bec0 <__alt_data_end+0xfffcd6c0>
   4bed4:	f800283a 	ret
   4bed8:	00c003c4 	movi	r3,15
   4bedc:	1980412e 	bgeu	r3,r6,4bfe4 <memmove+0x140>
   4bee0:	2886b03a 	or	r3,r5,r2
   4bee4:	18c000cc 	andi	r3,r3,3
   4bee8:	1800401e 	bne	r3,zero,4bfec <memmove+0x148>
   4beec:	33fffc04 	addi	r15,r6,-16
   4bef0:	781ed13a 	srli	r15,r15,4
   4bef4:	28c00104 	addi	r3,r5,4
   4bef8:	13400104 	addi	r13,r2,4
   4befc:	781c913a 	slli	r14,r15,4
   4bf00:	2b000204 	addi	r12,r5,8
   4bf04:	12c00204 	addi	r11,r2,8
   4bf08:	73800504 	addi	r14,r14,20
   4bf0c:	2a800304 	addi	r10,r5,12
   4bf10:	12400304 	addi	r9,r2,12
   4bf14:	2b9d883a 	add	r14,r5,r14
   4bf18:	2811883a 	mov	r8,r5
   4bf1c:	100f883a 	mov	r7,r2
   4bf20:	41000017 	ldw	r4,0(r8)
   4bf24:	39c00404 	addi	r7,r7,16
   4bf28:	18c00404 	addi	r3,r3,16
   4bf2c:	393ffc15 	stw	r4,-16(r7)
   4bf30:	193ffc17 	ldw	r4,-16(r3)
   4bf34:	6b400404 	addi	r13,r13,16
   4bf38:	5ac00404 	addi	r11,r11,16
   4bf3c:	693ffc15 	stw	r4,-16(r13)
   4bf40:	61000017 	ldw	r4,0(r12)
   4bf44:	4a400404 	addi	r9,r9,16
   4bf48:	42000404 	addi	r8,r8,16
   4bf4c:	593ffc15 	stw	r4,-16(r11)
   4bf50:	51000017 	ldw	r4,0(r10)
   4bf54:	63000404 	addi	r12,r12,16
   4bf58:	52800404 	addi	r10,r10,16
   4bf5c:	493ffc15 	stw	r4,-16(r9)
   4bf60:	1bbfef1e 	bne	r3,r14,4bf20 <__alt_data_end+0xfffcd720>
   4bf64:	79000044 	addi	r4,r15,1
   4bf68:	2008913a 	slli	r4,r4,4
   4bf6c:	328003cc 	andi	r10,r6,15
   4bf70:	02c000c4 	movi	r11,3
   4bf74:	1107883a 	add	r3,r2,r4
   4bf78:	290b883a 	add	r5,r5,r4
   4bf7c:	5a801e2e 	bgeu	r11,r10,4bff8 <memmove+0x154>
   4bf80:	1813883a 	mov	r9,r3
   4bf84:	2811883a 	mov	r8,r5
   4bf88:	500f883a 	mov	r7,r10
   4bf8c:	41000017 	ldw	r4,0(r8)
   4bf90:	4a400104 	addi	r9,r9,4
   4bf94:	39ffff04 	addi	r7,r7,-4
   4bf98:	493fff15 	stw	r4,-4(r9)
   4bf9c:	42000104 	addi	r8,r8,4
   4bfa0:	59fffa36 	bltu	r11,r7,4bf8c <__alt_data_end+0xfffcd78c>
   4bfa4:	513fff04 	addi	r4,r10,-4
   4bfa8:	2008d0ba 	srli	r4,r4,2
   4bfac:	318000cc 	andi	r6,r6,3
   4bfb0:	21000044 	addi	r4,r4,1
   4bfb4:	2109883a 	add	r4,r4,r4
   4bfb8:	2109883a 	add	r4,r4,r4
   4bfbc:	1907883a 	add	r3,r3,r4
   4bfc0:	290b883a 	add	r5,r5,r4
   4bfc4:	30000b26 	beq	r6,zero,4bff4 <memmove+0x150>
   4bfc8:	198d883a 	add	r6,r3,r6
   4bfcc:	29c00003 	ldbu	r7,0(r5)
   4bfd0:	18c00044 	addi	r3,r3,1
   4bfd4:	29400044 	addi	r5,r5,1
   4bfd8:	19ffffc5 	stb	r7,-1(r3)
   4bfdc:	19bffb1e 	bne	r3,r6,4bfcc <__alt_data_end+0xfffcd7cc>
   4bfe0:	f800283a 	ret
   4bfe4:	1007883a 	mov	r3,r2
   4bfe8:	003ff606 	br	4bfc4 <__alt_data_end+0xfffcd7c4>
   4bfec:	1007883a 	mov	r3,r2
   4bff0:	003ff506 	br	4bfc8 <__alt_data_end+0xfffcd7c8>
   4bff4:	f800283a 	ret
   4bff8:	500d883a 	mov	r6,r10
   4bffc:	003ff106 	br	4bfc4 <__alt_data_end+0xfffcd7c4>

0004c000 <memset>:
   4c000:	20c000cc 	andi	r3,r4,3
   4c004:	2005883a 	mov	r2,r4
   4c008:	18004426 	beq	r3,zero,4c11c <memset+0x11c>
   4c00c:	31ffffc4 	addi	r7,r6,-1
   4c010:	30004026 	beq	r6,zero,4c114 <memset+0x114>
   4c014:	2813883a 	mov	r9,r5
   4c018:	200d883a 	mov	r6,r4
   4c01c:	2007883a 	mov	r3,r4
   4c020:	00000406 	br	4c034 <memset+0x34>
   4c024:	3a3fffc4 	addi	r8,r7,-1
   4c028:	31800044 	addi	r6,r6,1
   4c02c:	38003926 	beq	r7,zero,4c114 <memset+0x114>
   4c030:	400f883a 	mov	r7,r8
   4c034:	18c00044 	addi	r3,r3,1
   4c038:	32400005 	stb	r9,0(r6)
   4c03c:	1a0000cc 	andi	r8,r3,3
   4c040:	403ff81e 	bne	r8,zero,4c024 <__alt_data_end+0xfffcd824>
   4c044:	010000c4 	movi	r4,3
   4c048:	21c02d2e 	bgeu	r4,r7,4c100 <memset+0x100>
   4c04c:	29003fcc 	andi	r4,r5,255
   4c050:	200c923a 	slli	r6,r4,8
   4c054:	3108b03a 	or	r4,r6,r4
   4c058:	200c943a 	slli	r6,r4,16
   4c05c:	218cb03a 	or	r6,r4,r6
   4c060:	010003c4 	movi	r4,15
   4c064:	21c0182e 	bgeu	r4,r7,4c0c8 <memset+0xc8>
   4c068:	3b3ffc04 	addi	r12,r7,-16
   4c06c:	6018d13a 	srli	r12,r12,4
   4c070:	1a000104 	addi	r8,r3,4
   4c074:	1ac00204 	addi	r11,r3,8
   4c078:	6008913a 	slli	r4,r12,4
   4c07c:	1a800304 	addi	r10,r3,12
   4c080:	1813883a 	mov	r9,r3
   4c084:	21000504 	addi	r4,r4,20
   4c088:	1909883a 	add	r4,r3,r4
   4c08c:	49800015 	stw	r6,0(r9)
   4c090:	41800015 	stw	r6,0(r8)
   4c094:	59800015 	stw	r6,0(r11)
   4c098:	51800015 	stw	r6,0(r10)
   4c09c:	42000404 	addi	r8,r8,16
   4c0a0:	4a400404 	addi	r9,r9,16
   4c0a4:	5ac00404 	addi	r11,r11,16
   4c0a8:	52800404 	addi	r10,r10,16
   4c0ac:	413ff71e 	bne	r8,r4,4c08c <__alt_data_end+0xfffcd88c>
   4c0b0:	63000044 	addi	r12,r12,1
   4c0b4:	6018913a 	slli	r12,r12,4
   4c0b8:	39c003cc 	andi	r7,r7,15
   4c0bc:	010000c4 	movi	r4,3
   4c0c0:	1b07883a 	add	r3,r3,r12
   4c0c4:	21c00e2e 	bgeu	r4,r7,4c100 <memset+0x100>
   4c0c8:	1813883a 	mov	r9,r3
   4c0cc:	3811883a 	mov	r8,r7
   4c0d0:	010000c4 	movi	r4,3
   4c0d4:	49800015 	stw	r6,0(r9)
   4c0d8:	423fff04 	addi	r8,r8,-4
   4c0dc:	4a400104 	addi	r9,r9,4
   4c0e0:	223ffc36 	bltu	r4,r8,4c0d4 <__alt_data_end+0xfffcd8d4>
   4c0e4:	393fff04 	addi	r4,r7,-4
   4c0e8:	2008d0ba 	srli	r4,r4,2
   4c0ec:	39c000cc 	andi	r7,r7,3
   4c0f0:	21000044 	addi	r4,r4,1
   4c0f4:	2109883a 	add	r4,r4,r4
   4c0f8:	2109883a 	add	r4,r4,r4
   4c0fc:	1907883a 	add	r3,r3,r4
   4c100:	38000526 	beq	r7,zero,4c118 <memset+0x118>
   4c104:	19cf883a 	add	r7,r3,r7
   4c108:	19400005 	stb	r5,0(r3)
   4c10c:	18c00044 	addi	r3,r3,1
   4c110:	38fffd1e 	bne	r7,r3,4c108 <__alt_data_end+0xfffcd908>
   4c114:	f800283a 	ret
   4c118:	f800283a 	ret
   4c11c:	2007883a 	mov	r3,r4
   4c120:	300f883a 	mov	r7,r6
   4c124:	003fc706 	br	4c044 <__alt_data_end+0xfffcd844>

0004c128 <_Balloc>:
   4c128:	20801317 	ldw	r2,76(r4)
   4c12c:	defffc04 	addi	sp,sp,-16
   4c130:	dc400115 	stw	r17,4(sp)
   4c134:	dc000015 	stw	r16,0(sp)
   4c138:	dfc00315 	stw	ra,12(sp)
   4c13c:	dc800215 	stw	r18,8(sp)
   4c140:	2023883a 	mov	r17,r4
   4c144:	2821883a 	mov	r16,r5
   4c148:	10000f26 	beq	r2,zero,4c188 <_Balloc+0x60>
   4c14c:	8407883a 	add	r3,r16,r16
   4c150:	18c7883a 	add	r3,r3,r3
   4c154:	10c7883a 	add	r3,r2,r3
   4c158:	18800017 	ldw	r2,0(r3)
   4c15c:	10001126 	beq	r2,zero,4c1a4 <_Balloc+0x7c>
   4c160:	11000017 	ldw	r4,0(r2)
   4c164:	19000015 	stw	r4,0(r3)
   4c168:	10000415 	stw	zero,16(r2)
   4c16c:	10000315 	stw	zero,12(r2)
   4c170:	dfc00317 	ldw	ra,12(sp)
   4c174:	dc800217 	ldw	r18,8(sp)
   4c178:	dc400117 	ldw	r17,4(sp)
   4c17c:	dc000017 	ldw	r16,0(sp)
   4c180:	dec00404 	addi	sp,sp,16
   4c184:	f800283a 	ret
   4c188:	01800844 	movi	r6,33
   4c18c:	01400104 	movi	r5,4
   4c190:	00504700 	call	50470 <_calloc_r>
   4c194:	88801315 	stw	r2,76(r17)
   4c198:	103fec1e 	bne	r2,zero,4c14c <__alt_data_end+0xfffcd94c>
   4c19c:	0005883a 	mov	r2,zero
   4c1a0:	003ff306 	br	4c170 <__alt_data_end+0xfffcd970>
   4c1a4:	01400044 	movi	r5,1
   4c1a8:	2c24983a 	sll	r18,r5,r16
   4c1ac:	8809883a 	mov	r4,r17
   4c1b0:	91800144 	addi	r6,r18,5
   4c1b4:	318d883a 	add	r6,r6,r6
   4c1b8:	318d883a 	add	r6,r6,r6
   4c1bc:	00504700 	call	50470 <_calloc_r>
   4c1c0:	103ff626 	beq	r2,zero,4c19c <__alt_data_end+0xfffcd99c>
   4c1c4:	14000115 	stw	r16,4(r2)
   4c1c8:	14800215 	stw	r18,8(r2)
   4c1cc:	003fe606 	br	4c168 <__alt_data_end+0xfffcd968>

0004c1d0 <_Bfree>:
   4c1d0:	28000826 	beq	r5,zero,4c1f4 <_Bfree+0x24>
   4c1d4:	28c00117 	ldw	r3,4(r5)
   4c1d8:	20801317 	ldw	r2,76(r4)
   4c1dc:	18c7883a 	add	r3,r3,r3
   4c1e0:	18c7883a 	add	r3,r3,r3
   4c1e4:	10c5883a 	add	r2,r2,r3
   4c1e8:	10c00017 	ldw	r3,0(r2)
   4c1ec:	28c00015 	stw	r3,0(r5)
   4c1f0:	11400015 	stw	r5,0(r2)
   4c1f4:	f800283a 	ret

0004c1f8 <__multadd>:
   4c1f8:	defffa04 	addi	sp,sp,-24
   4c1fc:	dc800315 	stw	r18,12(sp)
   4c200:	dc400215 	stw	r17,8(sp)
   4c204:	dc000115 	stw	r16,4(sp)
   4c208:	2823883a 	mov	r17,r5
   4c20c:	2c000417 	ldw	r16,16(r5)
   4c210:	dfc00515 	stw	ra,20(sp)
   4c214:	dcc00415 	stw	r19,16(sp)
   4c218:	2025883a 	mov	r18,r4
   4c21c:	29400504 	addi	r5,r5,20
   4c220:	0011883a 	mov	r8,zero
   4c224:	28c00017 	ldw	r3,0(r5)
   4c228:	29400104 	addi	r5,r5,4
   4c22c:	42000044 	addi	r8,r8,1
   4c230:	18bfffcc 	andi	r2,r3,65535
   4c234:	1185383a 	mul	r2,r2,r6
   4c238:	1806d43a 	srli	r3,r3,16
   4c23c:	11cf883a 	add	r7,r2,r7
   4c240:	3808d43a 	srli	r4,r7,16
   4c244:	1987383a 	mul	r3,r3,r6
   4c248:	38bfffcc 	andi	r2,r7,65535
   4c24c:	1907883a 	add	r3,r3,r4
   4c250:	1808943a 	slli	r4,r3,16
   4c254:	180ed43a 	srli	r7,r3,16
   4c258:	2085883a 	add	r2,r4,r2
   4c25c:	28bfff15 	stw	r2,-4(r5)
   4c260:	443ff016 	blt	r8,r16,4c224 <__alt_data_end+0xfffcda24>
   4c264:	38000926 	beq	r7,zero,4c28c <__multadd+0x94>
   4c268:	88800217 	ldw	r2,8(r17)
   4c26c:	80800f0e 	bge	r16,r2,4c2ac <__multadd+0xb4>
   4c270:	80800144 	addi	r2,r16,5
   4c274:	1085883a 	add	r2,r2,r2
   4c278:	1085883a 	add	r2,r2,r2
   4c27c:	8885883a 	add	r2,r17,r2
   4c280:	11c00015 	stw	r7,0(r2)
   4c284:	84000044 	addi	r16,r16,1
   4c288:	8c000415 	stw	r16,16(r17)
   4c28c:	8805883a 	mov	r2,r17
   4c290:	dfc00517 	ldw	ra,20(sp)
   4c294:	dcc00417 	ldw	r19,16(sp)
   4c298:	dc800317 	ldw	r18,12(sp)
   4c29c:	dc400217 	ldw	r17,8(sp)
   4c2a0:	dc000117 	ldw	r16,4(sp)
   4c2a4:	dec00604 	addi	sp,sp,24
   4c2a8:	f800283a 	ret
   4c2ac:	89400117 	ldw	r5,4(r17)
   4c2b0:	9009883a 	mov	r4,r18
   4c2b4:	d9c00015 	stw	r7,0(sp)
   4c2b8:	29400044 	addi	r5,r5,1
   4c2bc:	004c1280 	call	4c128 <_Balloc>
   4c2c0:	89800417 	ldw	r6,16(r17)
   4c2c4:	89400304 	addi	r5,r17,12
   4c2c8:	11000304 	addi	r4,r2,12
   4c2cc:	31800084 	addi	r6,r6,2
   4c2d0:	318d883a 	add	r6,r6,r6
   4c2d4:	318d883a 	add	r6,r6,r6
   4c2d8:	1027883a 	mov	r19,r2
   4c2dc:	004bd5c0 	call	4bd5c <memcpy>
   4c2e0:	d9c00017 	ldw	r7,0(sp)
   4c2e4:	88000a26 	beq	r17,zero,4c310 <__multadd+0x118>
   4c2e8:	88c00117 	ldw	r3,4(r17)
   4c2ec:	90801317 	ldw	r2,76(r18)
   4c2f0:	18c7883a 	add	r3,r3,r3
   4c2f4:	18c7883a 	add	r3,r3,r3
   4c2f8:	10c5883a 	add	r2,r2,r3
   4c2fc:	10c00017 	ldw	r3,0(r2)
   4c300:	88c00015 	stw	r3,0(r17)
   4c304:	14400015 	stw	r17,0(r2)
   4c308:	9823883a 	mov	r17,r19
   4c30c:	003fd806 	br	4c270 <__alt_data_end+0xfffcda70>
   4c310:	9823883a 	mov	r17,r19
   4c314:	003fd606 	br	4c270 <__alt_data_end+0xfffcda70>

0004c318 <__s2b>:
   4c318:	defff904 	addi	sp,sp,-28
   4c31c:	dc400115 	stw	r17,4(sp)
   4c320:	dc000015 	stw	r16,0(sp)
   4c324:	2023883a 	mov	r17,r4
   4c328:	2821883a 	mov	r16,r5
   4c32c:	39000204 	addi	r4,r7,8
   4c330:	01400244 	movi	r5,9
   4c334:	dcc00315 	stw	r19,12(sp)
   4c338:	dc800215 	stw	r18,8(sp)
   4c33c:	dfc00615 	stw	ra,24(sp)
   4c340:	dd400515 	stw	r21,20(sp)
   4c344:	dd000415 	stw	r20,16(sp)
   4c348:	3825883a 	mov	r18,r7
   4c34c:	3027883a 	mov	r19,r6
   4c350:	0043d1c0 	call	43d1c <__divsi3>
   4c354:	00c00044 	movi	r3,1
   4c358:	000b883a 	mov	r5,zero
   4c35c:	1880030e 	bge	r3,r2,4c36c <__s2b+0x54>
   4c360:	18c7883a 	add	r3,r3,r3
   4c364:	29400044 	addi	r5,r5,1
   4c368:	18bffd16 	blt	r3,r2,4c360 <__alt_data_end+0xfffcdb60>
   4c36c:	8809883a 	mov	r4,r17
   4c370:	004c1280 	call	4c128 <_Balloc>
   4c374:	d8c00717 	ldw	r3,28(sp)
   4c378:	10c00515 	stw	r3,20(r2)
   4c37c:	00c00044 	movi	r3,1
   4c380:	10c00415 	stw	r3,16(r2)
   4c384:	00c00244 	movi	r3,9
   4c388:	1cc0210e 	bge	r3,r19,4c410 <__s2b+0xf8>
   4c38c:	80eb883a 	add	r21,r16,r3
   4c390:	a829883a 	mov	r20,r21
   4c394:	84e1883a 	add	r16,r16,r19
   4c398:	a1c00007 	ldb	r7,0(r20)
   4c39c:	01800284 	movi	r6,10
   4c3a0:	a5000044 	addi	r20,r20,1
   4c3a4:	100b883a 	mov	r5,r2
   4c3a8:	39fff404 	addi	r7,r7,-48
   4c3ac:	8809883a 	mov	r4,r17
   4c3b0:	004c1f80 	call	4c1f8 <__multadd>
   4c3b4:	a43ff81e 	bne	r20,r16,4c398 <__alt_data_end+0xfffcdb98>
   4c3b8:	ace1883a 	add	r16,r21,r19
   4c3bc:	843ffe04 	addi	r16,r16,-8
   4c3c0:	9c800a0e 	bge	r19,r18,4c3ec <__s2b+0xd4>
   4c3c4:	94e5c83a 	sub	r18,r18,r19
   4c3c8:	84a5883a 	add	r18,r16,r18
   4c3cc:	81c00007 	ldb	r7,0(r16)
   4c3d0:	01800284 	movi	r6,10
   4c3d4:	84000044 	addi	r16,r16,1
   4c3d8:	100b883a 	mov	r5,r2
   4c3dc:	39fff404 	addi	r7,r7,-48
   4c3e0:	8809883a 	mov	r4,r17
   4c3e4:	004c1f80 	call	4c1f8 <__multadd>
   4c3e8:	84bff81e 	bne	r16,r18,4c3cc <__alt_data_end+0xfffcdbcc>
   4c3ec:	dfc00617 	ldw	ra,24(sp)
   4c3f0:	dd400517 	ldw	r21,20(sp)
   4c3f4:	dd000417 	ldw	r20,16(sp)
   4c3f8:	dcc00317 	ldw	r19,12(sp)
   4c3fc:	dc800217 	ldw	r18,8(sp)
   4c400:	dc400117 	ldw	r17,4(sp)
   4c404:	dc000017 	ldw	r16,0(sp)
   4c408:	dec00704 	addi	sp,sp,28
   4c40c:	f800283a 	ret
   4c410:	84000284 	addi	r16,r16,10
   4c414:	1827883a 	mov	r19,r3
   4c418:	003fe906 	br	4c3c0 <__alt_data_end+0xfffcdbc0>

0004c41c <__hi0bits>:
   4c41c:	20bfffec 	andhi	r2,r4,65535
   4c420:	1000141e 	bne	r2,zero,4c474 <__hi0bits+0x58>
   4c424:	2008943a 	slli	r4,r4,16
   4c428:	00800404 	movi	r2,16
   4c42c:	20ffc02c 	andhi	r3,r4,65280
   4c430:	1800021e 	bne	r3,zero,4c43c <__hi0bits+0x20>
   4c434:	2008923a 	slli	r4,r4,8
   4c438:	10800204 	addi	r2,r2,8
   4c43c:	20fc002c 	andhi	r3,r4,61440
   4c440:	1800021e 	bne	r3,zero,4c44c <__hi0bits+0x30>
   4c444:	2008913a 	slli	r4,r4,4
   4c448:	10800104 	addi	r2,r2,4
   4c44c:	20f0002c 	andhi	r3,r4,49152
   4c450:	1800031e 	bne	r3,zero,4c460 <__hi0bits+0x44>
   4c454:	2109883a 	add	r4,r4,r4
   4c458:	10800084 	addi	r2,r2,2
   4c45c:	2109883a 	add	r4,r4,r4
   4c460:	20000316 	blt	r4,zero,4c470 <__hi0bits+0x54>
   4c464:	2110002c 	andhi	r4,r4,16384
   4c468:	2000041e 	bne	r4,zero,4c47c <__hi0bits+0x60>
   4c46c:	00800804 	movi	r2,32
   4c470:	f800283a 	ret
   4c474:	0005883a 	mov	r2,zero
   4c478:	003fec06 	br	4c42c <__alt_data_end+0xfffcdc2c>
   4c47c:	10800044 	addi	r2,r2,1
   4c480:	f800283a 	ret

0004c484 <__lo0bits>:
   4c484:	20c00017 	ldw	r3,0(r4)
   4c488:	188001cc 	andi	r2,r3,7
   4c48c:	10000826 	beq	r2,zero,4c4b0 <__lo0bits+0x2c>
   4c490:	1880004c 	andi	r2,r3,1
   4c494:	1000211e 	bne	r2,zero,4c51c <__lo0bits+0x98>
   4c498:	1880008c 	andi	r2,r3,2
   4c49c:	1000211e 	bne	r2,zero,4c524 <__lo0bits+0xa0>
   4c4a0:	1806d0ba 	srli	r3,r3,2
   4c4a4:	00800084 	movi	r2,2
   4c4a8:	20c00015 	stw	r3,0(r4)
   4c4ac:	f800283a 	ret
   4c4b0:	18bfffcc 	andi	r2,r3,65535
   4c4b4:	10001326 	beq	r2,zero,4c504 <__lo0bits+0x80>
   4c4b8:	0005883a 	mov	r2,zero
   4c4bc:	19403fcc 	andi	r5,r3,255
   4c4c0:	2800021e 	bne	r5,zero,4c4cc <__lo0bits+0x48>
   4c4c4:	1806d23a 	srli	r3,r3,8
   4c4c8:	10800204 	addi	r2,r2,8
   4c4cc:	194003cc 	andi	r5,r3,15
   4c4d0:	2800021e 	bne	r5,zero,4c4dc <__lo0bits+0x58>
   4c4d4:	1806d13a 	srli	r3,r3,4
   4c4d8:	10800104 	addi	r2,r2,4
   4c4dc:	194000cc 	andi	r5,r3,3
   4c4e0:	2800021e 	bne	r5,zero,4c4ec <__lo0bits+0x68>
   4c4e4:	1806d0ba 	srli	r3,r3,2
   4c4e8:	10800084 	addi	r2,r2,2
   4c4ec:	1940004c 	andi	r5,r3,1
   4c4f0:	2800081e 	bne	r5,zero,4c514 <__lo0bits+0x90>
   4c4f4:	1806d07a 	srli	r3,r3,1
   4c4f8:	1800051e 	bne	r3,zero,4c510 <__lo0bits+0x8c>
   4c4fc:	00800804 	movi	r2,32
   4c500:	f800283a 	ret
   4c504:	1806d43a 	srli	r3,r3,16
   4c508:	00800404 	movi	r2,16
   4c50c:	003feb06 	br	4c4bc <__alt_data_end+0xfffcdcbc>
   4c510:	10800044 	addi	r2,r2,1
   4c514:	20c00015 	stw	r3,0(r4)
   4c518:	f800283a 	ret
   4c51c:	0005883a 	mov	r2,zero
   4c520:	f800283a 	ret
   4c524:	1806d07a 	srli	r3,r3,1
   4c528:	00800044 	movi	r2,1
   4c52c:	20c00015 	stw	r3,0(r4)
   4c530:	f800283a 	ret

0004c534 <__i2b>:
   4c534:	defffd04 	addi	sp,sp,-12
   4c538:	dc000015 	stw	r16,0(sp)
   4c53c:	04000044 	movi	r16,1
   4c540:	dc400115 	stw	r17,4(sp)
   4c544:	2823883a 	mov	r17,r5
   4c548:	800b883a 	mov	r5,r16
   4c54c:	dfc00215 	stw	ra,8(sp)
   4c550:	004c1280 	call	4c128 <_Balloc>
   4c554:	14400515 	stw	r17,20(r2)
   4c558:	14000415 	stw	r16,16(r2)
   4c55c:	dfc00217 	ldw	ra,8(sp)
   4c560:	dc400117 	ldw	r17,4(sp)
   4c564:	dc000017 	ldw	r16,0(sp)
   4c568:	dec00304 	addi	sp,sp,12
   4c56c:	f800283a 	ret

0004c570 <__multiply>:
   4c570:	defffa04 	addi	sp,sp,-24
   4c574:	dcc00315 	stw	r19,12(sp)
   4c578:	dc800215 	stw	r18,8(sp)
   4c57c:	34c00417 	ldw	r19,16(r6)
   4c580:	2c800417 	ldw	r18,16(r5)
   4c584:	dd000415 	stw	r20,16(sp)
   4c588:	dc400115 	stw	r17,4(sp)
   4c58c:	dfc00515 	stw	ra,20(sp)
   4c590:	dc000015 	stw	r16,0(sp)
   4c594:	2829883a 	mov	r20,r5
   4c598:	3023883a 	mov	r17,r6
   4c59c:	94c0050e 	bge	r18,r19,4c5b4 <__multiply+0x44>
   4c5a0:	9007883a 	mov	r3,r18
   4c5a4:	3029883a 	mov	r20,r6
   4c5a8:	9825883a 	mov	r18,r19
   4c5ac:	2823883a 	mov	r17,r5
   4c5b0:	1827883a 	mov	r19,r3
   4c5b4:	a0800217 	ldw	r2,8(r20)
   4c5b8:	94e1883a 	add	r16,r18,r19
   4c5bc:	a1400117 	ldw	r5,4(r20)
   4c5c0:	1400010e 	bge	r2,r16,4c5c8 <__multiply+0x58>
   4c5c4:	29400044 	addi	r5,r5,1
   4c5c8:	004c1280 	call	4c128 <_Balloc>
   4c5cc:	8415883a 	add	r10,r16,r16
   4c5d0:	12c00504 	addi	r11,r2,20
   4c5d4:	5295883a 	add	r10,r10,r10
   4c5d8:	5a95883a 	add	r10,r11,r10
   4c5dc:	5807883a 	mov	r3,r11
   4c5e0:	5a80032e 	bgeu	r11,r10,4c5f0 <__multiply+0x80>
   4c5e4:	18000015 	stw	zero,0(r3)
   4c5e8:	18c00104 	addi	r3,r3,4
   4c5ec:	1abffd36 	bltu	r3,r10,4c5e4 <__alt_data_end+0xfffcdde4>
   4c5f0:	9ce7883a 	add	r19,r19,r19
   4c5f4:	94a5883a 	add	r18,r18,r18
   4c5f8:	89800504 	addi	r6,r17,20
   4c5fc:	9ce7883a 	add	r19,r19,r19
   4c600:	a3400504 	addi	r13,r20,20
   4c604:	94a5883a 	add	r18,r18,r18
   4c608:	34d9883a 	add	r12,r6,r19
   4c60c:	6c93883a 	add	r9,r13,r18
   4c610:	3300422e 	bgeu	r6,r12,4c71c <__multiply+0x1ac>
   4c614:	37c00017 	ldw	ra,0(r6)
   4c618:	fbffffcc 	andi	r15,ra,65535
   4c61c:	78001b26 	beq	r15,zero,4c68c <__multiply+0x11c>
   4c620:	5811883a 	mov	r8,r11
   4c624:	681d883a 	mov	r14,r13
   4c628:	000f883a 	mov	r7,zero
   4c62c:	71000017 	ldw	r4,0(r14)
   4c630:	40c00017 	ldw	r3,0(r8)
   4c634:	73800104 	addi	r14,r14,4
   4c638:	217fffcc 	andi	r5,r4,65535
   4c63c:	2bcb383a 	mul	r5,r5,r15
   4c640:	2008d43a 	srli	r4,r4,16
   4c644:	1c7fffcc 	andi	r17,r3,65535
   4c648:	2c4b883a 	add	r5,r5,r17
   4c64c:	29cb883a 	add	r5,r5,r7
   4c650:	23c9383a 	mul	r4,r4,r15
   4c654:	1806d43a 	srli	r3,r3,16
   4c658:	280ed43a 	srli	r7,r5,16
   4c65c:	297fffcc 	andi	r5,r5,65535
   4c660:	20c7883a 	add	r3,r4,r3
   4c664:	19c7883a 	add	r3,r3,r7
   4c668:	1808943a 	slli	r4,r3,16
   4c66c:	4023883a 	mov	r17,r8
   4c670:	180ed43a 	srli	r7,r3,16
   4c674:	214ab03a 	or	r5,r4,r5
   4c678:	41400015 	stw	r5,0(r8)
   4c67c:	42000104 	addi	r8,r8,4
   4c680:	727fea36 	bltu	r14,r9,4c62c <__alt_data_end+0xfffcde2c>
   4c684:	89c00115 	stw	r7,4(r17)
   4c688:	37c00017 	ldw	ra,0(r6)
   4c68c:	f83ed43a 	srli	ra,ra,16
   4c690:	f8001f26 	beq	ra,zero,4c710 <__multiply+0x1a0>
   4c694:	58c00017 	ldw	r3,0(r11)
   4c698:	681d883a 	mov	r14,r13
   4c69c:	581f883a 	mov	r15,r11
   4c6a0:	1811883a 	mov	r8,r3
   4c6a4:	5825883a 	mov	r18,r11
   4c6a8:	000f883a 	mov	r7,zero
   4c6ac:	00000106 	br	4c6b4 <__multiply+0x144>
   4c6b0:	8825883a 	mov	r18,r17
   4c6b4:	7140000b 	ldhu	r5,0(r14)
   4c6b8:	4010d43a 	srli	r8,r8,16
   4c6bc:	193fffcc 	andi	r4,r3,65535
   4c6c0:	2fcb383a 	mul	r5,r5,ra
   4c6c4:	7bc00104 	addi	r15,r15,4
   4c6c8:	73800104 	addi	r14,r14,4
   4c6cc:	2a0b883a 	add	r5,r5,r8
   4c6d0:	29cb883a 	add	r5,r5,r7
   4c6d4:	2806943a 	slli	r3,r5,16
   4c6d8:	94400104 	addi	r17,r18,4
   4c6dc:	280ad43a 	srli	r5,r5,16
   4c6e0:	1908b03a 	or	r4,r3,r4
   4c6e4:	793fff15 	stw	r4,-4(r15)
   4c6e8:	70ffff17 	ldw	r3,-4(r14)
   4c6ec:	8a000017 	ldw	r8,0(r17)
   4c6f0:	1806d43a 	srli	r3,r3,16
   4c6f4:	413fffcc 	andi	r4,r8,65535
   4c6f8:	1fc7383a 	mul	r3,r3,ra
   4c6fc:	1907883a 	add	r3,r3,r4
   4c700:	1947883a 	add	r3,r3,r5
   4c704:	180ed43a 	srli	r7,r3,16
   4c708:	727fe936 	bltu	r14,r9,4c6b0 <__alt_data_end+0xfffcdeb0>
   4c70c:	90c00115 	stw	r3,4(r18)
   4c710:	31800104 	addi	r6,r6,4
   4c714:	5ac00104 	addi	r11,r11,4
   4c718:	333fbe36 	bltu	r6,r12,4c614 <__alt_data_end+0xfffcde14>
   4c71c:	0400090e 	bge	zero,r16,4c744 <__multiply+0x1d4>
   4c720:	50ffff17 	ldw	r3,-4(r10)
   4c724:	52bfff04 	addi	r10,r10,-4
   4c728:	18000326 	beq	r3,zero,4c738 <__multiply+0x1c8>
   4c72c:	00000506 	br	4c744 <__multiply+0x1d4>
   4c730:	50c00017 	ldw	r3,0(r10)
   4c734:	1800031e 	bne	r3,zero,4c744 <__multiply+0x1d4>
   4c738:	843fffc4 	addi	r16,r16,-1
   4c73c:	52bfff04 	addi	r10,r10,-4
   4c740:	803ffb1e 	bne	r16,zero,4c730 <__alt_data_end+0xfffcdf30>
   4c744:	14000415 	stw	r16,16(r2)
   4c748:	dfc00517 	ldw	ra,20(sp)
   4c74c:	dd000417 	ldw	r20,16(sp)
   4c750:	dcc00317 	ldw	r19,12(sp)
   4c754:	dc800217 	ldw	r18,8(sp)
   4c758:	dc400117 	ldw	r17,4(sp)
   4c75c:	dc000017 	ldw	r16,0(sp)
   4c760:	dec00604 	addi	sp,sp,24
   4c764:	f800283a 	ret

0004c768 <__pow5mult>:
   4c768:	defffa04 	addi	sp,sp,-24
   4c76c:	dcc00315 	stw	r19,12(sp)
   4c770:	dc000015 	stw	r16,0(sp)
   4c774:	dfc00515 	stw	ra,20(sp)
   4c778:	dd000415 	stw	r20,16(sp)
   4c77c:	dc800215 	stw	r18,8(sp)
   4c780:	dc400115 	stw	r17,4(sp)
   4c784:	308000cc 	andi	r2,r6,3
   4c788:	3021883a 	mov	r16,r6
   4c78c:	2027883a 	mov	r19,r4
   4c790:	10002f1e 	bne	r2,zero,4c850 <__pow5mult+0xe8>
   4c794:	2825883a 	mov	r18,r5
   4c798:	8021d0ba 	srai	r16,r16,2
   4c79c:	80001a26 	beq	r16,zero,4c808 <__pow5mult+0xa0>
   4c7a0:	9c401217 	ldw	r17,72(r19)
   4c7a4:	8800061e 	bne	r17,zero,4c7c0 <__pow5mult+0x58>
   4c7a8:	00003406 	br	4c87c <__pow5mult+0x114>
   4c7ac:	8021d07a 	srai	r16,r16,1
   4c7b0:	80001526 	beq	r16,zero,4c808 <__pow5mult+0xa0>
   4c7b4:	88800017 	ldw	r2,0(r17)
   4c7b8:	10001c26 	beq	r2,zero,4c82c <__pow5mult+0xc4>
   4c7bc:	1023883a 	mov	r17,r2
   4c7c0:	8080004c 	andi	r2,r16,1
   4c7c4:	103ff926 	beq	r2,zero,4c7ac <__alt_data_end+0xfffcdfac>
   4c7c8:	880d883a 	mov	r6,r17
   4c7cc:	900b883a 	mov	r5,r18
   4c7d0:	9809883a 	mov	r4,r19
   4c7d4:	004c5700 	call	4c570 <__multiply>
   4c7d8:	90001b26 	beq	r18,zero,4c848 <__pow5mult+0xe0>
   4c7dc:	91000117 	ldw	r4,4(r18)
   4c7e0:	98c01317 	ldw	r3,76(r19)
   4c7e4:	8021d07a 	srai	r16,r16,1
   4c7e8:	2109883a 	add	r4,r4,r4
   4c7ec:	2109883a 	add	r4,r4,r4
   4c7f0:	1907883a 	add	r3,r3,r4
   4c7f4:	19000017 	ldw	r4,0(r3)
   4c7f8:	91000015 	stw	r4,0(r18)
   4c7fc:	1c800015 	stw	r18,0(r3)
   4c800:	1025883a 	mov	r18,r2
   4c804:	803feb1e 	bne	r16,zero,4c7b4 <__alt_data_end+0xfffcdfb4>
   4c808:	9005883a 	mov	r2,r18
   4c80c:	dfc00517 	ldw	ra,20(sp)
   4c810:	dd000417 	ldw	r20,16(sp)
   4c814:	dcc00317 	ldw	r19,12(sp)
   4c818:	dc800217 	ldw	r18,8(sp)
   4c81c:	dc400117 	ldw	r17,4(sp)
   4c820:	dc000017 	ldw	r16,0(sp)
   4c824:	dec00604 	addi	sp,sp,24
   4c828:	f800283a 	ret
   4c82c:	880d883a 	mov	r6,r17
   4c830:	880b883a 	mov	r5,r17
   4c834:	9809883a 	mov	r4,r19
   4c838:	004c5700 	call	4c570 <__multiply>
   4c83c:	88800015 	stw	r2,0(r17)
   4c840:	10000015 	stw	zero,0(r2)
   4c844:	003fdd06 	br	4c7bc <__alt_data_end+0xfffcdfbc>
   4c848:	1025883a 	mov	r18,r2
   4c84c:	003fd706 	br	4c7ac <__alt_data_end+0xfffcdfac>
   4c850:	10bfffc4 	addi	r2,r2,-1
   4c854:	1085883a 	add	r2,r2,r2
   4c858:	00c00174 	movhi	r3,5
   4c85c:	18d76404 	addi	r3,r3,23952
   4c860:	1085883a 	add	r2,r2,r2
   4c864:	1885883a 	add	r2,r3,r2
   4c868:	11800017 	ldw	r6,0(r2)
   4c86c:	000f883a 	mov	r7,zero
   4c870:	004c1f80 	call	4c1f8 <__multadd>
   4c874:	1025883a 	mov	r18,r2
   4c878:	003fc706 	br	4c798 <__alt_data_end+0xfffcdf98>
   4c87c:	05000044 	movi	r20,1
   4c880:	a00b883a 	mov	r5,r20
   4c884:	9809883a 	mov	r4,r19
   4c888:	004c1280 	call	4c128 <_Balloc>
   4c88c:	1023883a 	mov	r17,r2
   4c890:	00809c44 	movi	r2,625
   4c894:	88800515 	stw	r2,20(r17)
   4c898:	8d000415 	stw	r20,16(r17)
   4c89c:	9c401215 	stw	r17,72(r19)
   4c8a0:	88000015 	stw	zero,0(r17)
   4c8a4:	003fc606 	br	4c7c0 <__alt_data_end+0xfffcdfc0>

0004c8a8 <__lshift>:
   4c8a8:	defff904 	addi	sp,sp,-28
   4c8ac:	dd400515 	stw	r21,20(sp)
   4c8b0:	dcc00315 	stw	r19,12(sp)
   4c8b4:	302bd17a 	srai	r21,r6,5
   4c8b8:	2cc00417 	ldw	r19,16(r5)
   4c8bc:	28800217 	ldw	r2,8(r5)
   4c8c0:	dd000415 	stw	r20,16(sp)
   4c8c4:	ace7883a 	add	r19,r21,r19
   4c8c8:	dc800215 	stw	r18,8(sp)
   4c8cc:	dc400115 	stw	r17,4(sp)
   4c8d0:	dc000015 	stw	r16,0(sp)
   4c8d4:	dfc00615 	stw	ra,24(sp)
   4c8d8:	9c000044 	addi	r16,r19,1
   4c8dc:	2823883a 	mov	r17,r5
   4c8e0:	3029883a 	mov	r20,r6
   4c8e4:	2025883a 	mov	r18,r4
   4c8e8:	29400117 	ldw	r5,4(r5)
   4c8ec:	1400030e 	bge	r2,r16,4c8fc <__lshift+0x54>
   4c8f0:	1085883a 	add	r2,r2,r2
   4c8f4:	29400044 	addi	r5,r5,1
   4c8f8:	143ffd16 	blt	r2,r16,4c8f0 <__alt_data_end+0xfffce0f0>
   4c8fc:	9009883a 	mov	r4,r18
   4c900:	004c1280 	call	4c128 <_Balloc>
   4c904:	10c00504 	addi	r3,r2,20
   4c908:	0540070e 	bge	zero,r21,4c928 <__lshift+0x80>
   4c90c:	ad6b883a 	add	r21,r21,r21
   4c910:	ad6b883a 	add	r21,r21,r21
   4c914:	1809883a 	mov	r4,r3
   4c918:	1d47883a 	add	r3,r3,r21
   4c91c:	20000015 	stw	zero,0(r4)
   4c920:	21000104 	addi	r4,r4,4
   4c924:	193ffd1e 	bne	r3,r4,4c91c <__alt_data_end+0xfffce11c>
   4c928:	8a000417 	ldw	r8,16(r17)
   4c92c:	89000504 	addi	r4,r17,20
   4c930:	a18007cc 	andi	r6,r20,31
   4c934:	4211883a 	add	r8,r8,r8
   4c938:	4211883a 	add	r8,r8,r8
   4c93c:	2211883a 	add	r8,r4,r8
   4c940:	30002326 	beq	r6,zero,4c9d0 <__lshift+0x128>
   4c944:	02400804 	movi	r9,32
   4c948:	4993c83a 	sub	r9,r9,r6
   4c94c:	000b883a 	mov	r5,zero
   4c950:	21c00017 	ldw	r7,0(r4)
   4c954:	1815883a 	mov	r10,r3
   4c958:	18c00104 	addi	r3,r3,4
   4c95c:	398e983a 	sll	r7,r7,r6
   4c960:	21000104 	addi	r4,r4,4
   4c964:	394ab03a 	or	r5,r7,r5
   4c968:	197fff15 	stw	r5,-4(r3)
   4c96c:	217fff17 	ldw	r5,-4(r4)
   4c970:	2a4ad83a 	srl	r5,r5,r9
   4c974:	223ff636 	bltu	r4,r8,4c950 <__alt_data_end+0xfffce150>
   4c978:	51400115 	stw	r5,4(r10)
   4c97c:	28001a1e 	bne	r5,zero,4c9e8 <__lshift+0x140>
   4c980:	843fffc4 	addi	r16,r16,-1
   4c984:	14000415 	stw	r16,16(r2)
   4c988:	88000826 	beq	r17,zero,4c9ac <__lshift+0x104>
   4c98c:	89000117 	ldw	r4,4(r17)
   4c990:	90c01317 	ldw	r3,76(r18)
   4c994:	2109883a 	add	r4,r4,r4
   4c998:	2109883a 	add	r4,r4,r4
   4c99c:	1907883a 	add	r3,r3,r4
   4c9a0:	19000017 	ldw	r4,0(r3)
   4c9a4:	89000015 	stw	r4,0(r17)
   4c9a8:	1c400015 	stw	r17,0(r3)
   4c9ac:	dfc00617 	ldw	ra,24(sp)
   4c9b0:	dd400517 	ldw	r21,20(sp)
   4c9b4:	dd000417 	ldw	r20,16(sp)
   4c9b8:	dcc00317 	ldw	r19,12(sp)
   4c9bc:	dc800217 	ldw	r18,8(sp)
   4c9c0:	dc400117 	ldw	r17,4(sp)
   4c9c4:	dc000017 	ldw	r16,0(sp)
   4c9c8:	dec00704 	addi	sp,sp,28
   4c9cc:	f800283a 	ret
   4c9d0:	21400017 	ldw	r5,0(r4)
   4c9d4:	18c00104 	addi	r3,r3,4
   4c9d8:	21000104 	addi	r4,r4,4
   4c9dc:	197fff15 	stw	r5,-4(r3)
   4c9e0:	223ffb36 	bltu	r4,r8,4c9d0 <__alt_data_end+0xfffce1d0>
   4c9e4:	003fe606 	br	4c980 <__alt_data_end+0xfffce180>
   4c9e8:	9c000084 	addi	r16,r19,2
   4c9ec:	003fe406 	br	4c980 <__alt_data_end+0xfffce180>

0004c9f0 <__mcmp>:
   4c9f0:	20800417 	ldw	r2,16(r4)
   4c9f4:	28c00417 	ldw	r3,16(r5)
   4c9f8:	10c5c83a 	sub	r2,r2,r3
   4c9fc:	1000111e 	bne	r2,zero,4ca44 <__mcmp+0x54>
   4ca00:	18c7883a 	add	r3,r3,r3
   4ca04:	18c7883a 	add	r3,r3,r3
   4ca08:	21000504 	addi	r4,r4,20
   4ca0c:	29400504 	addi	r5,r5,20
   4ca10:	20c5883a 	add	r2,r4,r3
   4ca14:	28cb883a 	add	r5,r5,r3
   4ca18:	00000106 	br	4ca20 <__mcmp+0x30>
   4ca1c:	20800a2e 	bgeu	r4,r2,4ca48 <__mcmp+0x58>
   4ca20:	10bfff04 	addi	r2,r2,-4
   4ca24:	297fff04 	addi	r5,r5,-4
   4ca28:	11800017 	ldw	r6,0(r2)
   4ca2c:	28c00017 	ldw	r3,0(r5)
   4ca30:	30fffa26 	beq	r6,r3,4ca1c <__alt_data_end+0xfffce21c>
   4ca34:	30c00236 	bltu	r6,r3,4ca40 <__mcmp+0x50>
   4ca38:	00800044 	movi	r2,1
   4ca3c:	f800283a 	ret
   4ca40:	00bfffc4 	movi	r2,-1
   4ca44:	f800283a 	ret
   4ca48:	0005883a 	mov	r2,zero
   4ca4c:	f800283a 	ret

0004ca50 <__mdiff>:
   4ca50:	28c00417 	ldw	r3,16(r5)
   4ca54:	30800417 	ldw	r2,16(r6)
   4ca58:	defffa04 	addi	sp,sp,-24
   4ca5c:	dcc00315 	stw	r19,12(sp)
   4ca60:	dc800215 	stw	r18,8(sp)
   4ca64:	dfc00515 	stw	ra,20(sp)
   4ca68:	dd000415 	stw	r20,16(sp)
   4ca6c:	dc400115 	stw	r17,4(sp)
   4ca70:	dc000015 	stw	r16,0(sp)
   4ca74:	1887c83a 	sub	r3,r3,r2
   4ca78:	2825883a 	mov	r18,r5
   4ca7c:	3027883a 	mov	r19,r6
   4ca80:	1800141e 	bne	r3,zero,4cad4 <__mdiff+0x84>
   4ca84:	1085883a 	add	r2,r2,r2
   4ca88:	1085883a 	add	r2,r2,r2
   4ca8c:	2a000504 	addi	r8,r5,20
   4ca90:	34000504 	addi	r16,r6,20
   4ca94:	4087883a 	add	r3,r8,r2
   4ca98:	8085883a 	add	r2,r16,r2
   4ca9c:	00000106 	br	4caa4 <__mdiff+0x54>
   4caa0:	40c0592e 	bgeu	r8,r3,4cc08 <__mdiff+0x1b8>
   4caa4:	18ffff04 	addi	r3,r3,-4
   4caa8:	10bfff04 	addi	r2,r2,-4
   4caac:	19c00017 	ldw	r7,0(r3)
   4cab0:	11400017 	ldw	r5,0(r2)
   4cab4:	397ffa26 	beq	r7,r5,4caa0 <__alt_data_end+0xfffce2a0>
   4cab8:	3940592e 	bgeu	r7,r5,4cc20 <__mdiff+0x1d0>
   4cabc:	9005883a 	mov	r2,r18
   4cac0:	4023883a 	mov	r17,r8
   4cac4:	9825883a 	mov	r18,r19
   4cac8:	05000044 	movi	r20,1
   4cacc:	1027883a 	mov	r19,r2
   4cad0:	00000406 	br	4cae4 <__mdiff+0x94>
   4cad4:	18005616 	blt	r3,zero,4cc30 <__mdiff+0x1e0>
   4cad8:	34400504 	addi	r17,r6,20
   4cadc:	2c000504 	addi	r16,r5,20
   4cae0:	0029883a 	mov	r20,zero
   4cae4:	91400117 	ldw	r5,4(r18)
   4cae8:	004c1280 	call	4c128 <_Balloc>
   4caec:	92400417 	ldw	r9,16(r18)
   4caf0:	9b000417 	ldw	r12,16(r19)
   4caf4:	12c00504 	addi	r11,r2,20
   4caf8:	4a51883a 	add	r8,r9,r9
   4cafc:	6319883a 	add	r12,r12,r12
   4cb00:	4211883a 	add	r8,r8,r8
   4cb04:	6319883a 	add	r12,r12,r12
   4cb08:	15000315 	stw	r20,12(r2)
   4cb0c:	8211883a 	add	r8,r16,r8
   4cb10:	8b19883a 	add	r12,r17,r12
   4cb14:	0007883a 	mov	r3,zero
   4cb18:	81400017 	ldw	r5,0(r16)
   4cb1c:	89c00017 	ldw	r7,0(r17)
   4cb20:	59800104 	addi	r6,r11,4
   4cb24:	293fffcc 	andi	r4,r5,65535
   4cb28:	20c7883a 	add	r3,r4,r3
   4cb2c:	393fffcc 	andi	r4,r7,65535
   4cb30:	1909c83a 	sub	r4,r3,r4
   4cb34:	280ad43a 	srli	r5,r5,16
   4cb38:	380ed43a 	srli	r7,r7,16
   4cb3c:	2007d43a 	srai	r3,r4,16
   4cb40:	213fffcc 	andi	r4,r4,65535
   4cb44:	29cbc83a 	sub	r5,r5,r7
   4cb48:	28c7883a 	add	r3,r5,r3
   4cb4c:	180a943a 	slli	r5,r3,16
   4cb50:	8c400104 	addi	r17,r17,4
   4cb54:	84000104 	addi	r16,r16,4
   4cb58:	2908b03a 	or	r4,r5,r4
   4cb5c:	59000015 	stw	r4,0(r11)
   4cb60:	1807d43a 	srai	r3,r3,16
   4cb64:	3015883a 	mov	r10,r6
   4cb68:	3017883a 	mov	r11,r6
   4cb6c:	8b3fea36 	bltu	r17,r12,4cb18 <__alt_data_end+0xfffce318>
   4cb70:	8200162e 	bgeu	r16,r8,4cbcc <__mdiff+0x17c>
   4cb74:	8017883a 	mov	r11,r16
   4cb78:	59400017 	ldw	r5,0(r11)
   4cb7c:	31800104 	addi	r6,r6,4
   4cb80:	5ac00104 	addi	r11,r11,4
   4cb84:	293fffcc 	andi	r4,r5,65535
   4cb88:	20c7883a 	add	r3,r4,r3
   4cb8c:	280ed43a 	srli	r7,r5,16
   4cb90:	180bd43a 	srai	r5,r3,16
   4cb94:	193fffcc 	andi	r4,r3,65535
   4cb98:	3947883a 	add	r3,r7,r5
   4cb9c:	180a943a 	slli	r5,r3,16
   4cba0:	1807d43a 	srai	r3,r3,16
   4cba4:	2908b03a 	or	r4,r5,r4
   4cba8:	313fff15 	stw	r4,-4(r6)
   4cbac:	5a3ff236 	bltu	r11,r8,4cb78 <__alt_data_end+0xfffce378>
   4cbb0:	0406303a 	nor	r3,zero,r16
   4cbb4:	1a07883a 	add	r3,r3,r8
   4cbb8:	1806d0ba 	srli	r3,r3,2
   4cbbc:	18c00044 	addi	r3,r3,1
   4cbc0:	18c7883a 	add	r3,r3,r3
   4cbc4:	18c7883a 	add	r3,r3,r3
   4cbc8:	50d5883a 	add	r10,r10,r3
   4cbcc:	50ffff04 	addi	r3,r10,-4
   4cbd0:	2000041e 	bne	r4,zero,4cbe4 <__mdiff+0x194>
   4cbd4:	18ffff04 	addi	r3,r3,-4
   4cbd8:	19000017 	ldw	r4,0(r3)
   4cbdc:	4a7fffc4 	addi	r9,r9,-1
   4cbe0:	203ffc26 	beq	r4,zero,4cbd4 <__alt_data_end+0xfffce3d4>
   4cbe4:	12400415 	stw	r9,16(r2)
   4cbe8:	dfc00517 	ldw	ra,20(sp)
   4cbec:	dd000417 	ldw	r20,16(sp)
   4cbf0:	dcc00317 	ldw	r19,12(sp)
   4cbf4:	dc800217 	ldw	r18,8(sp)
   4cbf8:	dc400117 	ldw	r17,4(sp)
   4cbfc:	dc000017 	ldw	r16,0(sp)
   4cc00:	dec00604 	addi	sp,sp,24
   4cc04:	f800283a 	ret
   4cc08:	000b883a 	mov	r5,zero
   4cc0c:	004c1280 	call	4c128 <_Balloc>
   4cc10:	00c00044 	movi	r3,1
   4cc14:	10c00415 	stw	r3,16(r2)
   4cc18:	10000515 	stw	zero,20(r2)
   4cc1c:	003ff206 	br	4cbe8 <__alt_data_end+0xfffce3e8>
   4cc20:	8023883a 	mov	r17,r16
   4cc24:	0029883a 	mov	r20,zero
   4cc28:	4021883a 	mov	r16,r8
   4cc2c:	003fad06 	br	4cae4 <__alt_data_end+0xfffce2e4>
   4cc30:	9005883a 	mov	r2,r18
   4cc34:	94400504 	addi	r17,r18,20
   4cc38:	9c000504 	addi	r16,r19,20
   4cc3c:	9825883a 	mov	r18,r19
   4cc40:	05000044 	movi	r20,1
   4cc44:	1027883a 	mov	r19,r2
   4cc48:	003fa606 	br	4cae4 <__alt_data_end+0xfffce2e4>

0004cc4c <__ulp>:
   4cc4c:	295ffc2c 	andhi	r5,r5,32752
   4cc50:	00bf3034 	movhi	r2,64704
   4cc54:	2887883a 	add	r3,r5,r2
   4cc58:	00c0020e 	bge	zero,r3,4cc64 <__ulp+0x18>
   4cc5c:	0005883a 	mov	r2,zero
   4cc60:	f800283a 	ret
   4cc64:	00c7c83a 	sub	r3,zero,r3
   4cc68:	1807d53a 	srai	r3,r3,20
   4cc6c:	008004c4 	movi	r2,19
   4cc70:	10c00b0e 	bge	r2,r3,4cca0 <__ulp+0x54>
   4cc74:	18bffb04 	addi	r2,r3,-20
   4cc78:	01000784 	movi	r4,30
   4cc7c:	0007883a 	mov	r3,zero
   4cc80:	20800516 	blt	r4,r2,4cc98 <__ulp+0x4c>
   4cc84:	010007c4 	movi	r4,31
   4cc88:	2089c83a 	sub	r4,r4,r2
   4cc8c:	00800044 	movi	r2,1
   4cc90:	1104983a 	sll	r2,r2,r4
   4cc94:	f800283a 	ret
   4cc98:	00800044 	movi	r2,1
   4cc9c:	f800283a 	ret
   4cca0:	01400234 	movhi	r5,8
   4cca4:	28c7d83a 	sra	r3,r5,r3
   4cca8:	0005883a 	mov	r2,zero
   4ccac:	f800283a 	ret

0004ccb0 <__b2d>:
   4ccb0:	defffa04 	addi	sp,sp,-24
   4ccb4:	dc000015 	stw	r16,0(sp)
   4ccb8:	24000417 	ldw	r16,16(r4)
   4ccbc:	dc400115 	stw	r17,4(sp)
   4ccc0:	24400504 	addi	r17,r4,20
   4ccc4:	8421883a 	add	r16,r16,r16
   4ccc8:	8421883a 	add	r16,r16,r16
   4cccc:	8c21883a 	add	r16,r17,r16
   4ccd0:	dc800215 	stw	r18,8(sp)
   4ccd4:	84bfff17 	ldw	r18,-4(r16)
   4ccd8:	dd000415 	stw	r20,16(sp)
   4ccdc:	dcc00315 	stw	r19,12(sp)
   4cce0:	9009883a 	mov	r4,r18
   4cce4:	2829883a 	mov	r20,r5
   4cce8:	dfc00515 	stw	ra,20(sp)
   4ccec:	004c41c0 	call	4c41c <__hi0bits>
   4ccf0:	00c00804 	movi	r3,32
   4ccf4:	1889c83a 	sub	r4,r3,r2
   4ccf8:	a1000015 	stw	r4,0(r20)
   4ccfc:	01000284 	movi	r4,10
   4cd00:	84ffff04 	addi	r19,r16,-4
   4cd04:	20801216 	blt	r4,r2,4cd50 <__b2d+0xa0>
   4cd08:	018002c4 	movi	r6,11
   4cd0c:	308dc83a 	sub	r6,r6,r2
   4cd10:	9186d83a 	srl	r3,r18,r6
   4cd14:	18cffc34 	orhi	r3,r3,16368
   4cd18:	8cc0212e 	bgeu	r17,r19,4cda0 <__b2d+0xf0>
   4cd1c:	813ffe17 	ldw	r4,-8(r16)
   4cd20:	218cd83a 	srl	r6,r4,r6
   4cd24:	10800544 	addi	r2,r2,21
   4cd28:	9084983a 	sll	r2,r18,r2
   4cd2c:	1184b03a 	or	r2,r2,r6
   4cd30:	dfc00517 	ldw	ra,20(sp)
   4cd34:	dd000417 	ldw	r20,16(sp)
   4cd38:	dcc00317 	ldw	r19,12(sp)
   4cd3c:	dc800217 	ldw	r18,8(sp)
   4cd40:	dc400117 	ldw	r17,4(sp)
   4cd44:	dc000017 	ldw	r16,0(sp)
   4cd48:	dec00604 	addi	sp,sp,24
   4cd4c:	f800283a 	ret
   4cd50:	8cc00f2e 	bgeu	r17,r19,4cd90 <__b2d+0xe0>
   4cd54:	117ffd44 	addi	r5,r2,-11
   4cd58:	80bffe17 	ldw	r2,-8(r16)
   4cd5c:	28000e26 	beq	r5,zero,4cd98 <__b2d+0xe8>
   4cd60:	1949c83a 	sub	r4,r3,r5
   4cd64:	9164983a 	sll	r18,r18,r5
   4cd68:	1106d83a 	srl	r3,r2,r4
   4cd6c:	81bffe04 	addi	r6,r16,-8
   4cd70:	948ffc34 	orhi	r18,r18,16368
   4cd74:	90c6b03a 	or	r3,r18,r3
   4cd78:	89800e2e 	bgeu	r17,r6,4cdb4 <__b2d+0x104>
   4cd7c:	81bffd17 	ldw	r6,-12(r16)
   4cd80:	1144983a 	sll	r2,r2,r5
   4cd84:	310ad83a 	srl	r5,r6,r4
   4cd88:	2884b03a 	or	r2,r5,r2
   4cd8c:	003fe806 	br	4cd30 <__alt_data_end+0xfffce530>
   4cd90:	10bffd44 	addi	r2,r2,-11
   4cd94:	1000041e 	bne	r2,zero,4cda8 <__b2d+0xf8>
   4cd98:	90cffc34 	orhi	r3,r18,16368
   4cd9c:	003fe406 	br	4cd30 <__alt_data_end+0xfffce530>
   4cda0:	000d883a 	mov	r6,zero
   4cda4:	003fdf06 	br	4cd24 <__alt_data_end+0xfffce524>
   4cda8:	90a4983a 	sll	r18,r18,r2
   4cdac:	0005883a 	mov	r2,zero
   4cdb0:	003ff906 	br	4cd98 <__alt_data_end+0xfffce598>
   4cdb4:	1144983a 	sll	r2,r2,r5
   4cdb8:	003fdd06 	br	4cd30 <__alt_data_end+0xfffce530>

0004cdbc <__d2b>:
   4cdbc:	defff804 	addi	sp,sp,-32
   4cdc0:	dc000215 	stw	r16,8(sp)
   4cdc4:	3021883a 	mov	r16,r6
   4cdc8:	dc400315 	stw	r17,12(sp)
   4cdcc:	8022907a 	slli	r17,r16,1
   4cdd0:	dd000615 	stw	r20,24(sp)
   4cdd4:	2829883a 	mov	r20,r5
   4cdd8:	01400044 	movi	r5,1
   4cddc:	dcc00515 	stw	r19,20(sp)
   4cde0:	dc800415 	stw	r18,16(sp)
   4cde4:	dfc00715 	stw	ra,28(sp)
   4cde8:	3825883a 	mov	r18,r7
   4cdec:	8822d57a 	srli	r17,r17,21
   4cdf0:	004c1280 	call	4c128 <_Balloc>
   4cdf4:	1027883a 	mov	r19,r2
   4cdf8:	00800434 	movhi	r2,16
   4cdfc:	10bfffc4 	addi	r2,r2,-1
   4ce00:	808c703a 	and	r6,r16,r2
   4ce04:	88000126 	beq	r17,zero,4ce0c <__d2b+0x50>
   4ce08:	31800434 	orhi	r6,r6,16
   4ce0c:	d9800015 	stw	r6,0(sp)
   4ce10:	a0002426 	beq	r20,zero,4cea4 <__d2b+0xe8>
   4ce14:	d9000104 	addi	r4,sp,4
   4ce18:	dd000115 	stw	r20,4(sp)
   4ce1c:	004c4840 	call	4c484 <__lo0bits>
   4ce20:	d8c00017 	ldw	r3,0(sp)
   4ce24:	10002f1e 	bne	r2,zero,4cee4 <__d2b+0x128>
   4ce28:	d9000117 	ldw	r4,4(sp)
   4ce2c:	99000515 	stw	r4,20(r19)
   4ce30:	1821003a 	cmpeq	r16,r3,zero
   4ce34:	01000084 	movi	r4,2
   4ce38:	2421c83a 	sub	r16,r4,r16
   4ce3c:	98c00615 	stw	r3,24(r19)
   4ce40:	9c000415 	stw	r16,16(r19)
   4ce44:	88001f1e 	bne	r17,zero,4cec4 <__d2b+0x108>
   4ce48:	10bef384 	addi	r2,r2,-1074
   4ce4c:	90800015 	stw	r2,0(r18)
   4ce50:	00900034 	movhi	r2,16384
   4ce54:	10bfffc4 	addi	r2,r2,-1
   4ce58:	8085883a 	add	r2,r16,r2
   4ce5c:	1085883a 	add	r2,r2,r2
   4ce60:	1085883a 	add	r2,r2,r2
   4ce64:	9885883a 	add	r2,r19,r2
   4ce68:	11000517 	ldw	r4,20(r2)
   4ce6c:	8020917a 	slli	r16,r16,5
   4ce70:	004c41c0 	call	4c41c <__hi0bits>
   4ce74:	d8c00817 	ldw	r3,32(sp)
   4ce78:	8085c83a 	sub	r2,r16,r2
   4ce7c:	18800015 	stw	r2,0(r3)
   4ce80:	9805883a 	mov	r2,r19
   4ce84:	dfc00717 	ldw	ra,28(sp)
   4ce88:	dd000617 	ldw	r20,24(sp)
   4ce8c:	dcc00517 	ldw	r19,20(sp)
   4ce90:	dc800417 	ldw	r18,16(sp)
   4ce94:	dc400317 	ldw	r17,12(sp)
   4ce98:	dc000217 	ldw	r16,8(sp)
   4ce9c:	dec00804 	addi	sp,sp,32
   4cea0:	f800283a 	ret
   4cea4:	d809883a 	mov	r4,sp
   4cea8:	004c4840 	call	4c484 <__lo0bits>
   4ceac:	d8c00017 	ldw	r3,0(sp)
   4ceb0:	04000044 	movi	r16,1
   4ceb4:	9c000415 	stw	r16,16(r19)
   4ceb8:	98c00515 	stw	r3,20(r19)
   4cebc:	10800804 	addi	r2,r2,32
   4cec0:	883fe126 	beq	r17,zero,4ce48 <__alt_data_end+0xfffce648>
   4cec4:	00c00d44 	movi	r3,53
   4cec8:	8c7ef344 	addi	r17,r17,-1075
   4cecc:	88a3883a 	add	r17,r17,r2
   4ced0:	1885c83a 	sub	r2,r3,r2
   4ced4:	d8c00817 	ldw	r3,32(sp)
   4ced8:	94400015 	stw	r17,0(r18)
   4cedc:	18800015 	stw	r2,0(r3)
   4cee0:	003fe706 	br	4ce80 <__alt_data_end+0xfffce680>
   4cee4:	01000804 	movi	r4,32
   4cee8:	2089c83a 	sub	r4,r4,r2
   4ceec:	1908983a 	sll	r4,r3,r4
   4cef0:	d9400117 	ldw	r5,4(sp)
   4cef4:	1886d83a 	srl	r3,r3,r2
   4cef8:	2148b03a 	or	r4,r4,r5
   4cefc:	99000515 	stw	r4,20(r19)
   4cf00:	d8c00015 	stw	r3,0(sp)
   4cf04:	003fca06 	br	4ce30 <__alt_data_end+0xfffce630>

0004cf08 <__ratio>:
   4cf08:	defff904 	addi	sp,sp,-28
   4cf0c:	dc400315 	stw	r17,12(sp)
   4cf10:	2823883a 	mov	r17,r5
   4cf14:	d9400104 	addi	r5,sp,4
   4cf18:	dfc00615 	stw	ra,24(sp)
   4cf1c:	dcc00515 	stw	r19,20(sp)
   4cf20:	dc800415 	stw	r18,16(sp)
   4cf24:	2027883a 	mov	r19,r4
   4cf28:	dc000215 	stw	r16,8(sp)
   4cf2c:	004ccb00 	call	4ccb0 <__b2d>
   4cf30:	d80b883a 	mov	r5,sp
   4cf34:	8809883a 	mov	r4,r17
   4cf38:	1025883a 	mov	r18,r2
   4cf3c:	1821883a 	mov	r16,r3
   4cf40:	004ccb00 	call	4ccb0 <__b2d>
   4cf44:	8a000417 	ldw	r8,16(r17)
   4cf48:	99000417 	ldw	r4,16(r19)
   4cf4c:	d9400117 	ldw	r5,4(sp)
   4cf50:	2209c83a 	sub	r4,r4,r8
   4cf54:	2010917a 	slli	r8,r4,5
   4cf58:	d9000017 	ldw	r4,0(sp)
   4cf5c:	2909c83a 	sub	r4,r5,r4
   4cf60:	4109883a 	add	r4,r8,r4
   4cf64:	01000e0e 	bge	zero,r4,4cfa0 <__ratio+0x98>
   4cf68:	2008953a 	slli	r4,r4,20
   4cf6c:	2421883a 	add	r16,r4,r16
   4cf70:	100d883a 	mov	r6,r2
   4cf74:	180f883a 	mov	r7,r3
   4cf78:	9009883a 	mov	r4,r18
   4cf7c:	800b883a 	mov	r5,r16
   4cf80:	00431180 	call	43118 <__divdf3>
   4cf84:	dfc00617 	ldw	ra,24(sp)
   4cf88:	dcc00517 	ldw	r19,20(sp)
   4cf8c:	dc800417 	ldw	r18,16(sp)
   4cf90:	dc400317 	ldw	r17,12(sp)
   4cf94:	dc000217 	ldw	r16,8(sp)
   4cf98:	dec00704 	addi	sp,sp,28
   4cf9c:	f800283a 	ret
   4cfa0:	2008953a 	slli	r4,r4,20
   4cfa4:	1907c83a 	sub	r3,r3,r4
   4cfa8:	003ff106 	br	4cf70 <__alt_data_end+0xfffce770>

0004cfac <_mprec_log10>:
   4cfac:	defffe04 	addi	sp,sp,-8
   4cfb0:	dc000015 	stw	r16,0(sp)
   4cfb4:	dfc00115 	stw	ra,4(sp)
   4cfb8:	008005c4 	movi	r2,23
   4cfbc:	2021883a 	mov	r16,r4
   4cfc0:	11000d0e 	bge	r2,r4,4cff8 <_mprec_log10+0x4c>
   4cfc4:	0005883a 	mov	r2,zero
   4cfc8:	00cffc34 	movhi	r3,16368
   4cfcc:	843fffc4 	addi	r16,r16,-1
   4cfd0:	000d883a 	mov	r6,zero
   4cfd4:	01d00934 	movhi	r7,16420
   4cfd8:	1009883a 	mov	r4,r2
   4cfdc:	180b883a 	mov	r5,r3
   4cfe0:	00519f80 	call	519f8 <__muldf3>
   4cfe4:	803ff91e 	bne	r16,zero,4cfcc <__alt_data_end+0xfffce7cc>
   4cfe8:	dfc00117 	ldw	ra,4(sp)
   4cfec:	dc000017 	ldw	r16,0(sp)
   4cff0:	dec00204 	addi	sp,sp,8
   4cff4:	f800283a 	ret
   4cff8:	202090fa 	slli	r16,r4,3
   4cffc:	00800174 	movhi	r2,5
   4d000:	10977b04 	addi	r2,r2,24044
   4d004:	1421883a 	add	r16,r2,r16
   4d008:	80800017 	ldw	r2,0(r16)
   4d00c:	80c00117 	ldw	r3,4(r16)
   4d010:	dfc00117 	ldw	ra,4(sp)
   4d014:	dc000017 	ldw	r16,0(sp)
   4d018:	dec00204 	addi	sp,sp,8
   4d01c:	f800283a 	ret

0004d020 <__copybits>:
   4d020:	297fffc4 	addi	r5,r5,-1
   4d024:	280fd17a 	srai	r7,r5,5
   4d028:	30c00417 	ldw	r3,16(r6)
   4d02c:	30800504 	addi	r2,r6,20
   4d030:	39c00044 	addi	r7,r7,1
   4d034:	18c7883a 	add	r3,r3,r3
   4d038:	39cf883a 	add	r7,r7,r7
   4d03c:	18c7883a 	add	r3,r3,r3
   4d040:	39cf883a 	add	r7,r7,r7
   4d044:	10c7883a 	add	r3,r2,r3
   4d048:	21cf883a 	add	r7,r4,r7
   4d04c:	10c00d2e 	bgeu	r2,r3,4d084 <__copybits+0x64>
   4d050:	200b883a 	mov	r5,r4
   4d054:	12000017 	ldw	r8,0(r2)
   4d058:	29400104 	addi	r5,r5,4
   4d05c:	10800104 	addi	r2,r2,4
   4d060:	2a3fff15 	stw	r8,-4(r5)
   4d064:	10fffb36 	bltu	r2,r3,4d054 <__alt_data_end+0xfffce854>
   4d068:	1985c83a 	sub	r2,r3,r6
   4d06c:	10bffac4 	addi	r2,r2,-21
   4d070:	1004d0ba 	srli	r2,r2,2
   4d074:	10800044 	addi	r2,r2,1
   4d078:	1085883a 	add	r2,r2,r2
   4d07c:	1085883a 	add	r2,r2,r2
   4d080:	2089883a 	add	r4,r4,r2
   4d084:	21c0032e 	bgeu	r4,r7,4d094 <__copybits+0x74>
   4d088:	20000015 	stw	zero,0(r4)
   4d08c:	21000104 	addi	r4,r4,4
   4d090:	21fffd36 	bltu	r4,r7,4d088 <__alt_data_end+0xfffce888>
   4d094:	f800283a 	ret

0004d098 <__any_on>:
   4d098:	20c00417 	ldw	r3,16(r4)
   4d09c:	2805d17a 	srai	r2,r5,5
   4d0a0:	21000504 	addi	r4,r4,20
   4d0a4:	18800d0e 	bge	r3,r2,4d0dc <__any_on+0x44>
   4d0a8:	18c7883a 	add	r3,r3,r3
   4d0ac:	18c7883a 	add	r3,r3,r3
   4d0b0:	20c7883a 	add	r3,r4,r3
   4d0b4:	20c0192e 	bgeu	r4,r3,4d11c <__any_on+0x84>
   4d0b8:	18bfff17 	ldw	r2,-4(r3)
   4d0bc:	18ffff04 	addi	r3,r3,-4
   4d0c0:	1000041e 	bne	r2,zero,4d0d4 <__any_on+0x3c>
   4d0c4:	20c0142e 	bgeu	r4,r3,4d118 <__any_on+0x80>
   4d0c8:	18ffff04 	addi	r3,r3,-4
   4d0cc:	19400017 	ldw	r5,0(r3)
   4d0d0:	283ffc26 	beq	r5,zero,4d0c4 <__alt_data_end+0xfffce8c4>
   4d0d4:	00800044 	movi	r2,1
   4d0d8:	f800283a 	ret
   4d0dc:	10c00a0e 	bge	r2,r3,4d108 <__any_on+0x70>
   4d0e0:	1085883a 	add	r2,r2,r2
   4d0e4:	1085883a 	add	r2,r2,r2
   4d0e8:	294007cc 	andi	r5,r5,31
   4d0ec:	2087883a 	add	r3,r4,r2
   4d0f0:	283ff026 	beq	r5,zero,4d0b4 <__alt_data_end+0xfffce8b4>
   4d0f4:	19800017 	ldw	r6,0(r3)
   4d0f8:	3144d83a 	srl	r2,r6,r5
   4d0fc:	114a983a 	sll	r5,r2,r5
   4d100:	317ff41e 	bne	r6,r5,4d0d4 <__alt_data_end+0xfffce8d4>
   4d104:	003feb06 	br	4d0b4 <__alt_data_end+0xfffce8b4>
   4d108:	1085883a 	add	r2,r2,r2
   4d10c:	1085883a 	add	r2,r2,r2
   4d110:	2087883a 	add	r3,r4,r2
   4d114:	003fe706 	br	4d0b4 <__alt_data_end+0xfffce8b4>
   4d118:	f800283a 	ret
   4d11c:	0005883a 	mov	r2,zero
   4d120:	f800283a 	ret

0004d124 <_realloc_r>:
   4d124:	defff604 	addi	sp,sp,-40
   4d128:	dc800215 	stw	r18,8(sp)
   4d12c:	dfc00915 	stw	ra,36(sp)
   4d130:	df000815 	stw	fp,32(sp)
   4d134:	ddc00715 	stw	r23,28(sp)
   4d138:	dd800615 	stw	r22,24(sp)
   4d13c:	dd400515 	stw	r21,20(sp)
   4d140:	dd000415 	stw	r20,16(sp)
   4d144:	dcc00315 	stw	r19,12(sp)
   4d148:	dc400115 	stw	r17,4(sp)
   4d14c:	dc000015 	stw	r16,0(sp)
   4d150:	3025883a 	mov	r18,r6
   4d154:	2800b726 	beq	r5,zero,4d434 <_realloc_r+0x310>
   4d158:	282b883a 	mov	r21,r5
   4d15c:	2029883a 	mov	r20,r4
   4d160:	005342c0 	call	5342c <__malloc_lock>
   4d164:	a8bfff17 	ldw	r2,-4(r21)
   4d168:	043fff04 	movi	r16,-4
   4d16c:	90c002c4 	addi	r3,r18,11
   4d170:	01000584 	movi	r4,22
   4d174:	acfffe04 	addi	r19,r21,-8
   4d178:	1420703a 	and	r16,r2,r16
   4d17c:	20c0332e 	bgeu	r4,r3,4d24c <_realloc_r+0x128>
   4d180:	047ffe04 	movi	r17,-8
   4d184:	1c62703a 	and	r17,r3,r17
   4d188:	8807883a 	mov	r3,r17
   4d18c:	88005816 	blt	r17,zero,4d2f0 <_realloc_r+0x1cc>
   4d190:	8c805736 	bltu	r17,r18,4d2f0 <_realloc_r+0x1cc>
   4d194:	80c0300e 	bge	r16,r3,4d258 <_realloc_r+0x134>
   4d198:	07000174 	movhi	fp,5
   4d19c:	e7192304 	addi	fp,fp,25740
   4d1a0:	e1c00217 	ldw	r7,8(fp)
   4d1a4:	9c09883a 	add	r4,r19,r16
   4d1a8:	22000117 	ldw	r8,4(r4)
   4d1ac:	21c06326 	beq	r4,r7,4d33c <_realloc_r+0x218>
   4d1b0:	017fff84 	movi	r5,-2
   4d1b4:	414a703a 	and	r5,r8,r5
   4d1b8:	214b883a 	add	r5,r4,r5
   4d1bc:	29800117 	ldw	r6,4(r5)
   4d1c0:	3180004c 	andi	r6,r6,1
   4d1c4:	30003f26 	beq	r6,zero,4d2c4 <_realloc_r+0x1a0>
   4d1c8:	1080004c 	andi	r2,r2,1
   4d1cc:	10008326 	beq	r2,zero,4d3dc <_realloc_r+0x2b8>
   4d1d0:	900b883a 	mov	r5,r18
   4d1d4:	a009883a 	mov	r4,r20
   4d1d8:	004b46c0 	call	4b46c <_malloc_r>
   4d1dc:	1025883a 	mov	r18,r2
   4d1e0:	10011e26 	beq	r2,zero,4d65c <_realloc_r+0x538>
   4d1e4:	a93fff17 	ldw	r4,-4(r21)
   4d1e8:	10fffe04 	addi	r3,r2,-8
   4d1ec:	00bfff84 	movi	r2,-2
   4d1f0:	2084703a 	and	r2,r4,r2
   4d1f4:	9885883a 	add	r2,r19,r2
   4d1f8:	1880ee26 	beq	r3,r2,4d5b4 <_realloc_r+0x490>
   4d1fc:	81bfff04 	addi	r6,r16,-4
   4d200:	00800904 	movi	r2,36
   4d204:	1180b836 	bltu	r2,r6,4d4e8 <_realloc_r+0x3c4>
   4d208:	00c004c4 	movi	r3,19
   4d20c:	19809636 	bltu	r3,r6,4d468 <_realloc_r+0x344>
   4d210:	9005883a 	mov	r2,r18
   4d214:	a807883a 	mov	r3,r21
   4d218:	19000017 	ldw	r4,0(r3)
   4d21c:	11000015 	stw	r4,0(r2)
   4d220:	19000117 	ldw	r4,4(r3)
   4d224:	11000115 	stw	r4,4(r2)
   4d228:	18c00217 	ldw	r3,8(r3)
   4d22c:	10c00215 	stw	r3,8(r2)
   4d230:	a80b883a 	mov	r5,r21
   4d234:	a009883a 	mov	r4,r20
   4d238:	004a8800 	call	4a880 <_free_r>
   4d23c:	a009883a 	mov	r4,r20
   4d240:	00534500 	call	53450 <__malloc_unlock>
   4d244:	9005883a 	mov	r2,r18
   4d248:	00001206 	br	4d294 <_realloc_r+0x170>
   4d24c:	00c00404 	movi	r3,16
   4d250:	1823883a 	mov	r17,r3
   4d254:	003fce06 	br	4d190 <__alt_data_end+0xfffce990>
   4d258:	a825883a 	mov	r18,r21
   4d25c:	8445c83a 	sub	r2,r16,r17
   4d260:	00c003c4 	movi	r3,15
   4d264:	18802636 	bltu	r3,r2,4d300 <_realloc_r+0x1dc>
   4d268:	99800117 	ldw	r6,4(r19)
   4d26c:	9c07883a 	add	r3,r19,r16
   4d270:	3180004c 	andi	r6,r6,1
   4d274:	3420b03a 	or	r16,r6,r16
   4d278:	9c000115 	stw	r16,4(r19)
   4d27c:	18800117 	ldw	r2,4(r3)
   4d280:	10800054 	ori	r2,r2,1
   4d284:	18800115 	stw	r2,4(r3)
   4d288:	a009883a 	mov	r4,r20
   4d28c:	00534500 	call	53450 <__malloc_unlock>
   4d290:	9005883a 	mov	r2,r18
   4d294:	dfc00917 	ldw	ra,36(sp)
   4d298:	df000817 	ldw	fp,32(sp)
   4d29c:	ddc00717 	ldw	r23,28(sp)
   4d2a0:	dd800617 	ldw	r22,24(sp)
   4d2a4:	dd400517 	ldw	r21,20(sp)
   4d2a8:	dd000417 	ldw	r20,16(sp)
   4d2ac:	dcc00317 	ldw	r19,12(sp)
   4d2b0:	dc800217 	ldw	r18,8(sp)
   4d2b4:	dc400117 	ldw	r17,4(sp)
   4d2b8:	dc000017 	ldw	r16,0(sp)
   4d2bc:	dec00a04 	addi	sp,sp,40
   4d2c0:	f800283a 	ret
   4d2c4:	017fff04 	movi	r5,-4
   4d2c8:	414a703a 	and	r5,r8,r5
   4d2cc:	814d883a 	add	r6,r16,r5
   4d2d0:	30c01f16 	blt	r6,r3,4d350 <_realloc_r+0x22c>
   4d2d4:	20800317 	ldw	r2,12(r4)
   4d2d8:	20c00217 	ldw	r3,8(r4)
   4d2dc:	a825883a 	mov	r18,r21
   4d2e0:	3021883a 	mov	r16,r6
   4d2e4:	18800315 	stw	r2,12(r3)
   4d2e8:	10c00215 	stw	r3,8(r2)
   4d2ec:	003fdb06 	br	4d25c <__alt_data_end+0xfffcea5c>
   4d2f0:	00800304 	movi	r2,12
   4d2f4:	a0800015 	stw	r2,0(r20)
   4d2f8:	0005883a 	mov	r2,zero
   4d2fc:	003fe506 	br	4d294 <__alt_data_end+0xfffcea94>
   4d300:	98c00117 	ldw	r3,4(r19)
   4d304:	9c4b883a 	add	r5,r19,r17
   4d308:	11000054 	ori	r4,r2,1
   4d30c:	18c0004c 	andi	r3,r3,1
   4d310:	1c62b03a 	or	r17,r3,r17
   4d314:	9c400115 	stw	r17,4(r19)
   4d318:	29000115 	stw	r4,4(r5)
   4d31c:	2885883a 	add	r2,r5,r2
   4d320:	10c00117 	ldw	r3,4(r2)
   4d324:	29400204 	addi	r5,r5,8
   4d328:	a009883a 	mov	r4,r20
   4d32c:	18c00054 	ori	r3,r3,1
   4d330:	10c00115 	stw	r3,4(r2)
   4d334:	004a8800 	call	4a880 <_free_r>
   4d338:	003fd306 	br	4d288 <__alt_data_end+0xfffcea88>
   4d33c:	017fff04 	movi	r5,-4
   4d340:	414a703a 	and	r5,r8,r5
   4d344:	89800404 	addi	r6,r17,16
   4d348:	8151883a 	add	r8,r16,r5
   4d34c:	4180590e 	bge	r8,r6,4d4b4 <_realloc_r+0x390>
   4d350:	1080004c 	andi	r2,r2,1
   4d354:	103f9e1e 	bne	r2,zero,4d1d0 <__alt_data_end+0xfffce9d0>
   4d358:	adbffe17 	ldw	r22,-8(r21)
   4d35c:	00bfff04 	movi	r2,-4
   4d360:	9dadc83a 	sub	r22,r19,r22
   4d364:	b1800117 	ldw	r6,4(r22)
   4d368:	3084703a 	and	r2,r6,r2
   4d36c:	20002026 	beq	r4,zero,4d3f0 <_realloc_r+0x2cc>
   4d370:	80af883a 	add	r23,r16,r2
   4d374:	b96f883a 	add	r23,r23,r5
   4d378:	21c05f26 	beq	r4,r7,4d4f8 <_realloc_r+0x3d4>
   4d37c:	b8c01c16 	blt	r23,r3,4d3f0 <_realloc_r+0x2cc>
   4d380:	20800317 	ldw	r2,12(r4)
   4d384:	20c00217 	ldw	r3,8(r4)
   4d388:	81bfff04 	addi	r6,r16,-4
   4d38c:	01000904 	movi	r4,36
   4d390:	18800315 	stw	r2,12(r3)
   4d394:	10c00215 	stw	r3,8(r2)
   4d398:	b0c00217 	ldw	r3,8(r22)
   4d39c:	b0800317 	ldw	r2,12(r22)
   4d3a0:	b4800204 	addi	r18,r22,8
   4d3a4:	18800315 	stw	r2,12(r3)
   4d3a8:	10c00215 	stw	r3,8(r2)
   4d3ac:	21801b36 	bltu	r4,r6,4d41c <_realloc_r+0x2f8>
   4d3b0:	008004c4 	movi	r2,19
   4d3b4:	1180352e 	bgeu	r2,r6,4d48c <_realloc_r+0x368>
   4d3b8:	a8800017 	ldw	r2,0(r21)
   4d3bc:	b0800215 	stw	r2,8(r22)
   4d3c0:	a8800117 	ldw	r2,4(r21)
   4d3c4:	b0800315 	stw	r2,12(r22)
   4d3c8:	008006c4 	movi	r2,27
   4d3cc:	11807f36 	bltu	r2,r6,4d5cc <_realloc_r+0x4a8>
   4d3d0:	b0800404 	addi	r2,r22,16
   4d3d4:	ad400204 	addi	r21,r21,8
   4d3d8:	00002d06 	br	4d490 <_realloc_r+0x36c>
   4d3dc:	adbffe17 	ldw	r22,-8(r21)
   4d3e0:	00bfff04 	movi	r2,-4
   4d3e4:	9dadc83a 	sub	r22,r19,r22
   4d3e8:	b1000117 	ldw	r4,4(r22)
   4d3ec:	2084703a 	and	r2,r4,r2
   4d3f0:	b03f7726 	beq	r22,zero,4d1d0 <__alt_data_end+0xfffce9d0>
   4d3f4:	80af883a 	add	r23,r16,r2
   4d3f8:	b8ff7516 	blt	r23,r3,4d1d0 <__alt_data_end+0xfffce9d0>
   4d3fc:	b0800317 	ldw	r2,12(r22)
   4d400:	b0c00217 	ldw	r3,8(r22)
   4d404:	81bfff04 	addi	r6,r16,-4
   4d408:	01000904 	movi	r4,36
   4d40c:	18800315 	stw	r2,12(r3)
   4d410:	10c00215 	stw	r3,8(r2)
   4d414:	b4800204 	addi	r18,r22,8
   4d418:	21bfe52e 	bgeu	r4,r6,4d3b0 <__alt_data_end+0xfffcebb0>
   4d41c:	a80b883a 	mov	r5,r21
   4d420:	9009883a 	mov	r4,r18
   4d424:	004bea40 	call	4bea4 <memmove>
   4d428:	b821883a 	mov	r16,r23
   4d42c:	b027883a 	mov	r19,r22
   4d430:	003f8a06 	br	4d25c <__alt_data_end+0xfffcea5c>
   4d434:	300b883a 	mov	r5,r6
   4d438:	dfc00917 	ldw	ra,36(sp)
   4d43c:	df000817 	ldw	fp,32(sp)
   4d440:	ddc00717 	ldw	r23,28(sp)
   4d444:	dd800617 	ldw	r22,24(sp)
   4d448:	dd400517 	ldw	r21,20(sp)
   4d44c:	dd000417 	ldw	r20,16(sp)
   4d450:	dcc00317 	ldw	r19,12(sp)
   4d454:	dc800217 	ldw	r18,8(sp)
   4d458:	dc400117 	ldw	r17,4(sp)
   4d45c:	dc000017 	ldw	r16,0(sp)
   4d460:	dec00a04 	addi	sp,sp,40
   4d464:	004b46c1 	jmpi	4b46c <_malloc_r>
   4d468:	a8c00017 	ldw	r3,0(r21)
   4d46c:	90c00015 	stw	r3,0(r18)
   4d470:	a8c00117 	ldw	r3,4(r21)
   4d474:	90c00115 	stw	r3,4(r18)
   4d478:	00c006c4 	movi	r3,27
   4d47c:	19804536 	bltu	r3,r6,4d594 <_realloc_r+0x470>
   4d480:	90800204 	addi	r2,r18,8
   4d484:	a8c00204 	addi	r3,r21,8
   4d488:	003f6306 	br	4d218 <__alt_data_end+0xfffcea18>
   4d48c:	9005883a 	mov	r2,r18
   4d490:	a8c00017 	ldw	r3,0(r21)
   4d494:	b821883a 	mov	r16,r23
   4d498:	b027883a 	mov	r19,r22
   4d49c:	10c00015 	stw	r3,0(r2)
   4d4a0:	a8c00117 	ldw	r3,4(r21)
   4d4a4:	10c00115 	stw	r3,4(r2)
   4d4a8:	a8c00217 	ldw	r3,8(r21)
   4d4ac:	10c00215 	stw	r3,8(r2)
   4d4b0:	003f6a06 	br	4d25c <__alt_data_end+0xfffcea5c>
   4d4b4:	9c67883a 	add	r19,r19,r17
   4d4b8:	4445c83a 	sub	r2,r8,r17
   4d4bc:	e4c00215 	stw	r19,8(fp)
   4d4c0:	10800054 	ori	r2,r2,1
   4d4c4:	98800115 	stw	r2,4(r19)
   4d4c8:	a8bfff17 	ldw	r2,-4(r21)
   4d4cc:	a009883a 	mov	r4,r20
   4d4d0:	1080004c 	andi	r2,r2,1
   4d4d4:	1462b03a 	or	r17,r2,r17
   4d4d8:	ac7fff15 	stw	r17,-4(r21)
   4d4dc:	00534500 	call	53450 <__malloc_unlock>
   4d4e0:	a805883a 	mov	r2,r21
   4d4e4:	003f6b06 	br	4d294 <__alt_data_end+0xfffcea94>
   4d4e8:	a80b883a 	mov	r5,r21
   4d4ec:	9009883a 	mov	r4,r18
   4d4f0:	004bea40 	call	4bea4 <memmove>
   4d4f4:	003f4e06 	br	4d230 <__alt_data_end+0xfffcea30>
   4d4f8:	89000404 	addi	r4,r17,16
   4d4fc:	b93fbc16 	blt	r23,r4,4d3f0 <__alt_data_end+0xfffcebf0>
   4d500:	b0800317 	ldw	r2,12(r22)
   4d504:	b0c00217 	ldw	r3,8(r22)
   4d508:	81bfff04 	addi	r6,r16,-4
   4d50c:	01000904 	movi	r4,36
   4d510:	18800315 	stw	r2,12(r3)
   4d514:	10c00215 	stw	r3,8(r2)
   4d518:	b4800204 	addi	r18,r22,8
   4d51c:	21804336 	bltu	r4,r6,4d62c <_realloc_r+0x508>
   4d520:	008004c4 	movi	r2,19
   4d524:	11803f2e 	bgeu	r2,r6,4d624 <_realloc_r+0x500>
   4d528:	a8800017 	ldw	r2,0(r21)
   4d52c:	b0800215 	stw	r2,8(r22)
   4d530:	a8800117 	ldw	r2,4(r21)
   4d534:	b0800315 	stw	r2,12(r22)
   4d538:	008006c4 	movi	r2,27
   4d53c:	11803f36 	bltu	r2,r6,4d63c <_realloc_r+0x518>
   4d540:	b0800404 	addi	r2,r22,16
   4d544:	ad400204 	addi	r21,r21,8
   4d548:	a8c00017 	ldw	r3,0(r21)
   4d54c:	10c00015 	stw	r3,0(r2)
   4d550:	a8c00117 	ldw	r3,4(r21)
   4d554:	10c00115 	stw	r3,4(r2)
   4d558:	a8c00217 	ldw	r3,8(r21)
   4d55c:	10c00215 	stw	r3,8(r2)
   4d560:	b447883a 	add	r3,r22,r17
   4d564:	bc45c83a 	sub	r2,r23,r17
   4d568:	e0c00215 	stw	r3,8(fp)
   4d56c:	10800054 	ori	r2,r2,1
   4d570:	18800115 	stw	r2,4(r3)
   4d574:	b0800117 	ldw	r2,4(r22)
   4d578:	a009883a 	mov	r4,r20
   4d57c:	1080004c 	andi	r2,r2,1
   4d580:	1462b03a 	or	r17,r2,r17
   4d584:	b4400115 	stw	r17,4(r22)
   4d588:	00534500 	call	53450 <__malloc_unlock>
   4d58c:	9005883a 	mov	r2,r18
   4d590:	003f4006 	br	4d294 <__alt_data_end+0xfffcea94>
   4d594:	a8c00217 	ldw	r3,8(r21)
   4d598:	90c00215 	stw	r3,8(r18)
   4d59c:	a8c00317 	ldw	r3,12(r21)
   4d5a0:	90c00315 	stw	r3,12(r18)
   4d5a4:	30801126 	beq	r6,r2,4d5ec <_realloc_r+0x4c8>
   4d5a8:	90800404 	addi	r2,r18,16
   4d5ac:	a8c00404 	addi	r3,r21,16
   4d5b0:	003f1906 	br	4d218 <__alt_data_end+0xfffcea18>
   4d5b4:	90ffff17 	ldw	r3,-4(r18)
   4d5b8:	00bfff04 	movi	r2,-4
   4d5bc:	a825883a 	mov	r18,r21
   4d5c0:	1884703a 	and	r2,r3,r2
   4d5c4:	80a1883a 	add	r16,r16,r2
   4d5c8:	003f2406 	br	4d25c <__alt_data_end+0xfffcea5c>
   4d5cc:	a8800217 	ldw	r2,8(r21)
   4d5d0:	b0800415 	stw	r2,16(r22)
   4d5d4:	a8800317 	ldw	r2,12(r21)
   4d5d8:	b0800515 	stw	r2,20(r22)
   4d5dc:	31000a26 	beq	r6,r4,4d608 <_realloc_r+0x4e4>
   4d5e0:	b0800604 	addi	r2,r22,24
   4d5e4:	ad400404 	addi	r21,r21,16
   4d5e8:	003fa906 	br	4d490 <__alt_data_end+0xfffcec90>
   4d5ec:	a9000417 	ldw	r4,16(r21)
   4d5f0:	90800604 	addi	r2,r18,24
   4d5f4:	a8c00604 	addi	r3,r21,24
   4d5f8:	91000415 	stw	r4,16(r18)
   4d5fc:	a9000517 	ldw	r4,20(r21)
   4d600:	91000515 	stw	r4,20(r18)
   4d604:	003f0406 	br	4d218 <__alt_data_end+0xfffcea18>
   4d608:	a8c00417 	ldw	r3,16(r21)
   4d60c:	ad400604 	addi	r21,r21,24
   4d610:	b0800804 	addi	r2,r22,32
   4d614:	b0c00615 	stw	r3,24(r22)
   4d618:	a8ffff17 	ldw	r3,-4(r21)
   4d61c:	b0c00715 	stw	r3,28(r22)
   4d620:	003f9b06 	br	4d490 <__alt_data_end+0xfffcec90>
   4d624:	9005883a 	mov	r2,r18
   4d628:	003fc706 	br	4d548 <__alt_data_end+0xfffced48>
   4d62c:	a80b883a 	mov	r5,r21
   4d630:	9009883a 	mov	r4,r18
   4d634:	004bea40 	call	4bea4 <memmove>
   4d638:	003fc906 	br	4d560 <__alt_data_end+0xfffced60>
   4d63c:	a8800217 	ldw	r2,8(r21)
   4d640:	b0800415 	stw	r2,16(r22)
   4d644:	a8800317 	ldw	r2,12(r21)
   4d648:	b0800515 	stw	r2,20(r22)
   4d64c:	31000726 	beq	r6,r4,4d66c <_realloc_r+0x548>
   4d650:	b0800604 	addi	r2,r22,24
   4d654:	ad400404 	addi	r21,r21,16
   4d658:	003fbb06 	br	4d548 <__alt_data_end+0xfffced48>
   4d65c:	a009883a 	mov	r4,r20
   4d660:	00534500 	call	53450 <__malloc_unlock>
   4d664:	0005883a 	mov	r2,zero
   4d668:	003f0a06 	br	4d294 <__alt_data_end+0xfffcea94>
   4d66c:	a8c00417 	ldw	r3,16(r21)
   4d670:	ad400604 	addi	r21,r21,24
   4d674:	b0800804 	addi	r2,r22,32
   4d678:	b0c00615 	stw	r3,24(r22)
   4d67c:	a8ffff17 	ldw	r3,-4(r21)
   4d680:	b0c00715 	stw	r3,28(r22)
   4d684:	003fb006 	br	4d548 <__alt_data_end+0xfffced48>

0004d688 <__fpclassifyd>:
   4d688:	00a00034 	movhi	r2,32768
   4d68c:	10bfffc4 	addi	r2,r2,-1
   4d690:	2884703a 	and	r2,r5,r2
   4d694:	10000726 	beq	r2,zero,4d6b4 <__fpclassifyd+0x2c>
   4d698:	00fffc34 	movhi	r3,65520
   4d69c:	019ff834 	movhi	r6,32736
   4d6a0:	28c7883a 	add	r3,r5,r3
   4d6a4:	31bfffc4 	addi	r6,r6,-1
   4d6a8:	30c00536 	bltu	r6,r3,4d6c0 <__fpclassifyd+0x38>
   4d6ac:	00800104 	movi	r2,4
   4d6b0:	f800283a 	ret
   4d6b4:	2000021e 	bne	r4,zero,4d6c0 <__fpclassifyd+0x38>
   4d6b8:	00800084 	movi	r2,2
   4d6bc:	f800283a 	ret
   4d6c0:	00dffc34 	movhi	r3,32752
   4d6c4:	019ff834 	movhi	r6,32736
   4d6c8:	28cb883a 	add	r5,r5,r3
   4d6cc:	31bfffc4 	addi	r6,r6,-1
   4d6d0:	317ff62e 	bgeu	r6,r5,4d6ac <__alt_data_end+0xfffceeac>
   4d6d4:	01400434 	movhi	r5,16
   4d6d8:	297fffc4 	addi	r5,r5,-1
   4d6dc:	28800236 	bltu	r5,r2,4d6e8 <__fpclassifyd+0x60>
   4d6e0:	008000c4 	movi	r2,3
   4d6e4:	f800283a 	ret
   4d6e8:	10c00226 	beq	r2,r3,4d6f4 <__fpclassifyd+0x6c>
   4d6ec:	0005883a 	mov	r2,zero
   4d6f0:	f800283a 	ret
   4d6f4:	2005003a 	cmpeq	r2,r4,zero
   4d6f8:	f800283a 	ret

0004d6fc <_sbrk_r>:
   4d6fc:	defffd04 	addi	sp,sp,-12
   4d700:	dc000015 	stw	r16,0(sp)
   4d704:	040001b4 	movhi	r16,6
   4d708:	dc400115 	stw	r17,4(sp)
   4d70c:	8425ac04 	addi	r16,r16,-26960
   4d710:	2023883a 	mov	r17,r4
   4d714:	2809883a 	mov	r4,r5
   4d718:	dfc00215 	stw	ra,8(sp)
   4d71c:	80000015 	stw	zero,0(r16)
   4d720:	00536100 	call	53610 <sbrk>
   4d724:	00ffffc4 	movi	r3,-1
   4d728:	10c00526 	beq	r2,r3,4d740 <_sbrk_r+0x44>
   4d72c:	dfc00217 	ldw	ra,8(sp)
   4d730:	dc400117 	ldw	r17,4(sp)
   4d734:	dc000017 	ldw	r16,0(sp)
   4d738:	dec00304 	addi	sp,sp,12
   4d73c:	f800283a 	ret
   4d740:	80c00017 	ldw	r3,0(r16)
   4d744:	183ff926 	beq	r3,zero,4d72c <__alt_data_end+0xfffcef2c>
   4d748:	88c00015 	stw	r3,0(r17)
   4d74c:	003ff706 	br	4d72c <__alt_data_end+0xfffcef2c>

0004d750 <__sread>:
   4d750:	defffe04 	addi	sp,sp,-8
   4d754:	dc000015 	stw	r16,0(sp)
   4d758:	2821883a 	mov	r16,r5
   4d75c:	2940038f 	ldh	r5,14(r5)
   4d760:	dfc00115 	stw	ra,4(sp)
   4d764:	00509500 	call	50950 <_read_r>
   4d768:	10000716 	blt	r2,zero,4d788 <__sread+0x38>
   4d76c:	80c01417 	ldw	r3,80(r16)
   4d770:	1887883a 	add	r3,r3,r2
   4d774:	80c01415 	stw	r3,80(r16)
   4d778:	dfc00117 	ldw	ra,4(sp)
   4d77c:	dc000017 	ldw	r16,0(sp)
   4d780:	dec00204 	addi	sp,sp,8
   4d784:	f800283a 	ret
   4d788:	80c0030b 	ldhu	r3,12(r16)
   4d78c:	18fbffcc 	andi	r3,r3,61439
   4d790:	80c0030d 	sth	r3,12(r16)
   4d794:	dfc00117 	ldw	ra,4(sp)
   4d798:	dc000017 	ldw	r16,0(sp)
   4d79c:	dec00204 	addi	sp,sp,8
   4d7a0:	f800283a 	ret

0004d7a4 <__seofread>:
   4d7a4:	0005883a 	mov	r2,zero
   4d7a8:	f800283a 	ret

0004d7ac <__swrite>:
   4d7ac:	2880030b 	ldhu	r2,12(r5)
   4d7b0:	defffb04 	addi	sp,sp,-20
   4d7b4:	dcc00315 	stw	r19,12(sp)
   4d7b8:	dc800215 	stw	r18,8(sp)
   4d7bc:	dc400115 	stw	r17,4(sp)
   4d7c0:	dc000015 	stw	r16,0(sp)
   4d7c4:	dfc00415 	stw	ra,16(sp)
   4d7c8:	10c0400c 	andi	r3,r2,256
   4d7cc:	2821883a 	mov	r16,r5
   4d7d0:	2023883a 	mov	r17,r4
   4d7d4:	3025883a 	mov	r18,r6
   4d7d8:	3827883a 	mov	r19,r7
   4d7dc:	18000526 	beq	r3,zero,4d7f4 <__swrite+0x48>
   4d7e0:	2940038f 	ldh	r5,14(r5)
   4d7e4:	01c00084 	movi	r7,2
   4d7e8:	000d883a 	mov	r6,zero
   4d7ec:	00508f00 	call	508f0 <_lseek_r>
   4d7f0:	8080030b 	ldhu	r2,12(r16)
   4d7f4:	8140038f 	ldh	r5,14(r16)
   4d7f8:	10bbffcc 	andi	r2,r2,61439
   4d7fc:	980f883a 	mov	r7,r19
   4d800:	900d883a 	mov	r6,r18
   4d804:	8809883a 	mov	r4,r17
   4d808:	8080030d 	sth	r2,12(r16)
   4d80c:	dfc00417 	ldw	ra,16(sp)
   4d810:	dcc00317 	ldw	r19,12(sp)
   4d814:	dc800217 	ldw	r18,8(sp)
   4d818:	dc400117 	ldw	r17,4(sp)
   4d81c:	dc000017 	ldw	r16,0(sp)
   4d820:	dec00504 	addi	sp,sp,20
   4d824:	00503bc1 	jmpi	503bc <_write_r>

0004d828 <__sseek>:
   4d828:	defffe04 	addi	sp,sp,-8
   4d82c:	dc000015 	stw	r16,0(sp)
   4d830:	2821883a 	mov	r16,r5
   4d834:	2940038f 	ldh	r5,14(r5)
   4d838:	dfc00115 	stw	ra,4(sp)
   4d83c:	00508f00 	call	508f0 <_lseek_r>
   4d840:	00ffffc4 	movi	r3,-1
   4d844:	10c00826 	beq	r2,r3,4d868 <__sseek+0x40>
   4d848:	80c0030b 	ldhu	r3,12(r16)
   4d84c:	80801415 	stw	r2,80(r16)
   4d850:	18c40014 	ori	r3,r3,4096
   4d854:	80c0030d 	sth	r3,12(r16)
   4d858:	dfc00117 	ldw	ra,4(sp)
   4d85c:	dc000017 	ldw	r16,0(sp)
   4d860:	dec00204 	addi	sp,sp,8
   4d864:	f800283a 	ret
   4d868:	80c0030b 	ldhu	r3,12(r16)
   4d86c:	18fbffcc 	andi	r3,r3,61439
   4d870:	80c0030d 	sth	r3,12(r16)
   4d874:	dfc00117 	ldw	ra,4(sp)
   4d878:	dc000017 	ldw	r16,0(sp)
   4d87c:	dec00204 	addi	sp,sp,8
   4d880:	f800283a 	ret

0004d884 <__sclose>:
   4d884:	2940038f 	ldh	r5,14(r5)
   4d888:	005041c1 	jmpi	5041c <_close_r>

0004d88c <strcmp>:
   4d88c:	2144b03a 	or	r2,r4,r5
   4d890:	108000cc 	andi	r2,r2,3
   4d894:	1000171e 	bne	r2,zero,4d8f4 <strcmp+0x68>
   4d898:	20800017 	ldw	r2,0(r4)
   4d89c:	28c00017 	ldw	r3,0(r5)
   4d8a0:	10c0141e 	bne	r2,r3,4d8f4 <strcmp+0x68>
   4d8a4:	027fbff4 	movhi	r9,65279
   4d8a8:	4a7fbfc4 	addi	r9,r9,-257
   4d8ac:	0086303a 	nor	r3,zero,r2
   4d8b0:	02202074 	movhi	r8,32897
   4d8b4:	1245883a 	add	r2,r2,r9
   4d8b8:	42202004 	addi	r8,r8,-32640
   4d8bc:	10c4703a 	and	r2,r2,r3
   4d8c0:	1204703a 	and	r2,r2,r8
   4d8c4:	10000226 	beq	r2,zero,4d8d0 <strcmp+0x44>
   4d8c8:	00002306 	br	4d958 <strcmp+0xcc>
   4d8cc:	1000221e 	bne	r2,zero,4d958 <strcmp+0xcc>
   4d8d0:	21000104 	addi	r4,r4,4
   4d8d4:	20c00017 	ldw	r3,0(r4)
   4d8d8:	29400104 	addi	r5,r5,4
   4d8dc:	29800017 	ldw	r6,0(r5)
   4d8e0:	1a4f883a 	add	r7,r3,r9
   4d8e4:	00c4303a 	nor	r2,zero,r3
   4d8e8:	3884703a 	and	r2,r7,r2
   4d8ec:	1204703a 	and	r2,r2,r8
   4d8f0:	19bff626 	beq	r3,r6,4d8cc <__alt_data_end+0xfffcf0cc>
   4d8f4:	20800003 	ldbu	r2,0(r4)
   4d8f8:	10c03fcc 	andi	r3,r2,255
   4d8fc:	18c0201c 	xori	r3,r3,128
   4d900:	18ffe004 	addi	r3,r3,-128
   4d904:	18000c26 	beq	r3,zero,4d938 <strcmp+0xac>
   4d908:	29800007 	ldb	r6,0(r5)
   4d90c:	19800326 	beq	r3,r6,4d91c <strcmp+0x90>
   4d910:	00001306 	br	4d960 <strcmp+0xd4>
   4d914:	29800007 	ldb	r6,0(r5)
   4d918:	11800b1e 	bne	r2,r6,4d948 <strcmp+0xbc>
   4d91c:	21000044 	addi	r4,r4,1
   4d920:	20c00003 	ldbu	r3,0(r4)
   4d924:	29400044 	addi	r5,r5,1
   4d928:	18803fcc 	andi	r2,r3,255
   4d92c:	1080201c 	xori	r2,r2,128
   4d930:	10bfe004 	addi	r2,r2,-128
   4d934:	103ff71e 	bne	r2,zero,4d914 <__alt_data_end+0xfffcf114>
   4d938:	0007883a 	mov	r3,zero
   4d93c:	28800003 	ldbu	r2,0(r5)
   4d940:	1885c83a 	sub	r2,r3,r2
   4d944:	f800283a 	ret
   4d948:	28800003 	ldbu	r2,0(r5)
   4d94c:	18c03fcc 	andi	r3,r3,255
   4d950:	1885c83a 	sub	r2,r3,r2
   4d954:	f800283a 	ret
   4d958:	0005883a 	mov	r2,zero
   4d95c:	f800283a 	ret
   4d960:	10c03fcc 	andi	r3,r2,255
   4d964:	003ff506 	br	4d93c <__alt_data_end+0xfffcf13c>

0004d968 <__ssprint_r>:
   4d968:	30800217 	ldw	r2,8(r6)
   4d96c:	defff604 	addi	sp,sp,-40
   4d970:	dc800215 	stw	r18,8(sp)
   4d974:	dfc00915 	stw	ra,36(sp)
   4d978:	df000815 	stw	fp,32(sp)
   4d97c:	ddc00715 	stw	r23,28(sp)
   4d980:	dd800615 	stw	r22,24(sp)
   4d984:	dd400515 	stw	r21,20(sp)
   4d988:	dd000415 	stw	r20,16(sp)
   4d98c:	dcc00315 	stw	r19,12(sp)
   4d990:	dc400115 	stw	r17,4(sp)
   4d994:	dc000015 	stw	r16,0(sp)
   4d998:	3025883a 	mov	r18,r6
   4d99c:	10005826 	beq	r2,zero,4db00 <__ssprint_r+0x198>
   4d9a0:	2027883a 	mov	r19,r4
   4d9a4:	35c00017 	ldw	r23,0(r6)
   4d9a8:	29000017 	ldw	r4,0(r5)
   4d9ac:	28800217 	ldw	r2,8(r5)
   4d9b0:	2823883a 	mov	r17,r5
   4d9b4:	0039883a 	mov	fp,zero
   4d9b8:	0021883a 	mov	r16,zero
   4d9bc:	80003926 	beq	r16,zero,4daa4 <__ssprint_r+0x13c>
   4d9c0:	102b883a 	mov	r21,r2
   4d9c4:	102d883a 	mov	r22,r2
   4d9c8:	80803a36 	bltu	r16,r2,4dab4 <__ssprint_r+0x14c>
   4d9cc:	88c0030b 	ldhu	r3,12(r17)
   4d9d0:	1881200c 	andi	r2,r3,1152
   4d9d4:	10002626 	beq	r2,zero,4da70 <__ssprint_r+0x108>
   4d9d8:	88800517 	ldw	r2,20(r17)
   4d9dc:	89400417 	ldw	r5,16(r17)
   4d9e0:	81800044 	addi	r6,r16,1
   4d9e4:	108f883a 	add	r7,r2,r2
   4d9e8:	3885883a 	add	r2,r7,r2
   4d9ec:	100ed7fa 	srli	r7,r2,31
   4d9f0:	216dc83a 	sub	r22,r4,r5
   4d9f4:	3589883a 	add	r4,r6,r22
   4d9f8:	3885883a 	add	r2,r7,r2
   4d9fc:	102bd07a 	srai	r21,r2,1
   4da00:	a80d883a 	mov	r6,r21
   4da04:	a900022e 	bgeu	r21,r4,4da10 <__ssprint_r+0xa8>
   4da08:	202b883a 	mov	r21,r4
   4da0c:	200d883a 	mov	r6,r4
   4da10:	18c1000c 	andi	r3,r3,1024
   4da14:	18002a26 	beq	r3,zero,4dac0 <__ssprint_r+0x158>
   4da18:	300b883a 	mov	r5,r6
   4da1c:	9809883a 	mov	r4,r19
   4da20:	004b46c0 	call	4b46c <_malloc_r>
   4da24:	1029883a 	mov	r20,r2
   4da28:	10002c26 	beq	r2,zero,4dadc <__ssprint_r+0x174>
   4da2c:	89400417 	ldw	r5,16(r17)
   4da30:	b00d883a 	mov	r6,r22
   4da34:	1009883a 	mov	r4,r2
   4da38:	004bd5c0 	call	4bd5c <memcpy>
   4da3c:	8880030b 	ldhu	r2,12(r17)
   4da40:	00fedfc4 	movi	r3,-1153
   4da44:	10c4703a 	and	r2,r2,r3
   4da48:	10802014 	ori	r2,r2,128
   4da4c:	8880030d 	sth	r2,12(r17)
   4da50:	a589883a 	add	r4,r20,r22
   4da54:	adadc83a 	sub	r22,r21,r22
   4da58:	8d400515 	stw	r21,20(r17)
   4da5c:	8d800215 	stw	r22,8(r17)
   4da60:	8d000415 	stw	r20,16(r17)
   4da64:	89000015 	stw	r4,0(r17)
   4da68:	802b883a 	mov	r21,r16
   4da6c:	802d883a 	mov	r22,r16
   4da70:	b00d883a 	mov	r6,r22
   4da74:	e00b883a 	mov	r5,fp
   4da78:	004bea40 	call	4bea4 <memmove>
   4da7c:	88800217 	ldw	r2,8(r17)
   4da80:	89000017 	ldw	r4,0(r17)
   4da84:	90c00217 	ldw	r3,8(r18)
   4da88:	1545c83a 	sub	r2,r2,r21
   4da8c:	2589883a 	add	r4,r4,r22
   4da90:	88800215 	stw	r2,8(r17)
   4da94:	89000015 	stw	r4,0(r17)
   4da98:	1c21c83a 	sub	r16,r3,r16
   4da9c:	94000215 	stw	r16,8(r18)
   4daa0:	80001726 	beq	r16,zero,4db00 <__ssprint_r+0x198>
   4daa4:	bf000017 	ldw	fp,0(r23)
   4daa8:	bc000117 	ldw	r16,4(r23)
   4daac:	bdc00204 	addi	r23,r23,8
   4dab0:	003fc206 	br	4d9bc <__alt_data_end+0xfffcf1bc>
   4dab4:	802b883a 	mov	r21,r16
   4dab8:	802d883a 	mov	r22,r16
   4dabc:	003fec06 	br	4da70 <__alt_data_end+0xfffcf270>
   4dac0:	9809883a 	mov	r4,r19
   4dac4:	004d1240 	call	4d124 <_realloc_r>
   4dac8:	1029883a 	mov	r20,r2
   4dacc:	103fe01e 	bne	r2,zero,4da50 <__alt_data_end+0xfffcf250>
   4dad0:	89400417 	ldw	r5,16(r17)
   4dad4:	9809883a 	mov	r4,r19
   4dad8:	004a8800 	call	4a880 <_free_r>
   4dadc:	88c0030b 	ldhu	r3,12(r17)
   4dae0:	00800304 	movi	r2,12
   4dae4:	98800015 	stw	r2,0(r19)
   4dae8:	18c01014 	ori	r3,r3,64
   4daec:	88c0030d 	sth	r3,12(r17)
   4daf0:	00bfffc4 	movi	r2,-1
   4daf4:	90000215 	stw	zero,8(r18)
   4daf8:	90000115 	stw	zero,4(r18)
   4dafc:	00000206 	br	4db08 <__ssprint_r+0x1a0>
   4db00:	90000115 	stw	zero,4(r18)
   4db04:	0005883a 	mov	r2,zero
   4db08:	dfc00917 	ldw	ra,36(sp)
   4db0c:	df000817 	ldw	fp,32(sp)
   4db10:	ddc00717 	ldw	r23,28(sp)
   4db14:	dd800617 	ldw	r22,24(sp)
   4db18:	dd400517 	ldw	r21,20(sp)
   4db1c:	dd000417 	ldw	r20,16(sp)
   4db20:	dcc00317 	ldw	r19,12(sp)
   4db24:	dc800217 	ldw	r18,8(sp)
   4db28:	dc400117 	ldw	r17,4(sp)
   4db2c:	dc000017 	ldw	r16,0(sp)
   4db30:	dec00a04 	addi	sp,sp,40
   4db34:	f800283a 	ret

0004db38 <___svfiprintf_internal_r>:
   4db38:	2880030b 	ldhu	r2,12(r5)
   4db3c:	deffc804 	addi	sp,sp,-224
   4db40:	dcc03115 	stw	r19,196(sp)
   4db44:	dfc03715 	stw	ra,220(sp)
   4db48:	df003615 	stw	fp,216(sp)
   4db4c:	ddc03515 	stw	r23,212(sp)
   4db50:	dd803415 	stw	r22,208(sp)
   4db54:	dd403315 	stw	r21,204(sp)
   4db58:	dd003215 	stw	r20,200(sp)
   4db5c:	dc803015 	stw	r18,192(sp)
   4db60:	dc402f15 	stw	r17,188(sp)
   4db64:	dc002e15 	stw	r16,184(sp)
   4db68:	d9402715 	stw	r5,156(sp)
   4db6c:	d9002a15 	stw	r4,168(sp)
   4db70:	1080200c 	andi	r2,r2,128
   4db74:	d9c02315 	stw	r7,140(sp)
   4db78:	3027883a 	mov	r19,r6
   4db7c:	10000226 	beq	r2,zero,4db88 <___svfiprintf_internal_r+0x50>
   4db80:	28800417 	ldw	r2,16(r5)
   4db84:	10041d26 	beq	r2,zero,4ebfc <___svfiprintf_internal_r+0x10c4>
   4db88:	dac01a04 	addi	r11,sp,104
   4db8c:	dac01e15 	stw	r11,120(sp)
   4db90:	d8801e17 	ldw	r2,120(sp)
   4db94:	dac019c4 	addi	r11,sp,103
   4db98:	dd402a17 	ldw	r21,168(sp)
   4db9c:	ddc02717 	ldw	r23,156(sp)
   4dba0:	05800174 	movhi	r22,5
   4dba4:	05000174 	movhi	r20,5
   4dba8:	dac01f15 	stw	r11,124(sp)
   4dbac:	12d7c83a 	sub	r11,r2,r11
   4dbb0:	b597b104 	addi	r22,r22,24260
   4dbb4:	a517ad04 	addi	r20,r20,24244
   4dbb8:	dec01a15 	stw	sp,104(sp)
   4dbbc:	d8001c15 	stw	zero,112(sp)
   4dbc0:	d8001b15 	stw	zero,108(sp)
   4dbc4:	d811883a 	mov	r8,sp
   4dbc8:	d8002915 	stw	zero,164(sp)
   4dbcc:	d8002515 	stw	zero,148(sp)
   4dbd0:	dac02b15 	stw	r11,172(sp)
   4dbd4:	98800007 	ldb	r2,0(r19)
   4dbd8:	1002dd26 	beq	r2,zero,4e750 <___svfiprintf_internal_r+0xc18>
   4dbdc:	00c00944 	movi	r3,37
   4dbe0:	9823883a 	mov	r17,r19
   4dbe4:	10c0021e 	bne	r2,r3,4dbf0 <___svfiprintf_internal_r+0xb8>
   4dbe8:	00001406 	br	4dc3c <___svfiprintf_internal_r+0x104>
   4dbec:	10c00326 	beq	r2,r3,4dbfc <___svfiprintf_internal_r+0xc4>
   4dbf0:	8c400044 	addi	r17,r17,1
   4dbf4:	88800007 	ldb	r2,0(r17)
   4dbf8:	103ffc1e 	bne	r2,zero,4dbec <__alt_data_end+0xfffcf3ec>
   4dbfc:	8ce1c83a 	sub	r16,r17,r19
   4dc00:	80000e26 	beq	r16,zero,4dc3c <___svfiprintf_internal_r+0x104>
   4dc04:	d8c01c17 	ldw	r3,112(sp)
   4dc08:	d8801b17 	ldw	r2,108(sp)
   4dc0c:	44c00015 	stw	r19,0(r8)
   4dc10:	1c07883a 	add	r3,r3,r16
   4dc14:	10800044 	addi	r2,r2,1
   4dc18:	d8c01c15 	stw	r3,112(sp)
   4dc1c:	44000115 	stw	r16,4(r8)
   4dc20:	d8801b15 	stw	r2,108(sp)
   4dc24:	00c001c4 	movi	r3,7
   4dc28:	18831e16 	blt	r3,r2,4e8a4 <___svfiprintf_internal_r+0xd6c>
   4dc2c:	42000204 	addi	r8,r8,8
   4dc30:	dac02517 	ldw	r11,148(sp)
   4dc34:	5c17883a 	add	r11,r11,r16
   4dc38:	dac02515 	stw	r11,148(sp)
   4dc3c:	88800007 	ldb	r2,0(r17)
   4dc40:	1002c526 	beq	r2,zero,4e758 <___svfiprintf_internal_r+0xc20>
   4dc44:	88c00047 	ldb	r3,1(r17)
   4dc48:	8cc00044 	addi	r19,r17,1
   4dc4c:	d8001d85 	stb	zero,118(sp)
   4dc50:	0009883a 	mov	r4,zero
   4dc54:	000f883a 	mov	r7,zero
   4dc58:	043fffc4 	movi	r16,-1
   4dc5c:	d8002415 	stw	zero,144(sp)
   4dc60:	0025883a 	mov	r18,zero
   4dc64:	01401604 	movi	r5,88
   4dc68:	01800244 	movi	r6,9
   4dc6c:	02800a84 	movi	r10,42
   4dc70:	02401b04 	movi	r9,108
   4dc74:	9cc00044 	addi	r19,r19,1
   4dc78:	18bff804 	addi	r2,r3,-32
   4dc7c:	2881dd36 	bltu	r5,r2,4e3f4 <___svfiprintf_internal_r+0x8bc>
   4dc80:	100490ba 	slli	r2,r2,2
   4dc84:	02c00174 	movhi	r11,5
   4dc88:	5af72604 	addi	r11,r11,-9064
   4dc8c:	12c5883a 	add	r2,r2,r11
   4dc90:	10800017 	ldw	r2,0(r2)
   4dc94:	1000683a 	jmp	r2
   4dc98:	0004de94 	movui	zero,4986
   4dc9c:	0004e3f4 	movhi	zero,5007
   4dca0:	0004e3f4 	movhi	zero,5007
   4dca4:	0004de88 	cmpgei	zero,zero,4986
   4dca8:	0004e3f4 	movhi	zero,5007
   4dcac:	0004e3f4 	movhi	zero,5007
   4dcb0:	0004e3f4 	movhi	zero,5007
   4dcb4:	0004e3f4 	movhi	zero,5007
   4dcb8:	0004e3f4 	movhi	zero,5007
   4dcbc:	0004e3f4 	movhi	zero,5007
   4dcc0:	0004ddfc 	xorhi	zero,zero,4983
   4dcc4:	0004dfd8 	cmpnei	zero,zero,4991
   4dcc8:	0004e3f4 	movhi	zero,5007
   4dccc:	0004de28 	cmpgeui	zero,zero,4984
   4dcd0:	0004e428 	cmpgeui	zero,zero,5008
   4dcd4:	0004e3f4 	movhi	zero,5007
   4dcd8:	0004e41c 	xori	zero,zero,5008
   4dcdc:	0004e3bc 	xorhi	zero,zero,5006
   4dce0:	0004e3bc 	xorhi	zero,zero,5006
   4dce4:	0004e3bc 	xorhi	zero,zero,5006
   4dce8:	0004e3bc 	xorhi	zero,zero,5006
   4dcec:	0004e3bc 	xorhi	zero,zero,5006
   4dcf0:	0004e3bc 	xorhi	zero,zero,5006
   4dcf4:	0004e3bc 	xorhi	zero,zero,5006
   4dcf8:	0004e3bc 	xorhi	zero,zero,5006
   4dcfc:	0004e3bc 	xorhi	zero,zero,5006
   4dd00:	0004e3f4 	movhi	zero,5007
   4dd04:	0004e3f4 	movhi	zero,5007
   4dd08:	0004e3f4 	movhi	zero,5007
   4dd0c:	0004e3f4 	movhi	zero,5007
   4dd10:	0004e3f4 	movhi	zero,5007
   4dd14:	0004e3f4 	movhi	zero,5007
   4dd18:	0004e3f4 	movhi	zero,5007
   4dd1c:	0004e3f4 	movhi	zero,5007
   4dd20:	0004e3f4 	movhi	zero,5007
   4dd24:	0004e3f4 	movhi	zero,5007
   4dd28:	0004e358 	cmpnei	zero,zero,5005
   4dd2c:	0004e3f4 	movhi	zero,5007
   4dd30:	0004e3f4 	movhi	zero,5007
   4dd34:	0004e3f4 	movhi	zero,5007
   4dd38:	0004e3f4 	movhi	zero,5007
   4dd3c:	0004e3f4 	movhi	zero,5007
   4dd40:	0004e3f4 	movhi	zero,5007
   4dd44:	0004e3f4 	movhi	zero,5007
   4dd48:	0004e3f4 	movhi	zero,5007
   4dd4c:	0004e3f4 	movhi	zero,5007
   4dd50:	0004e3f4 	movhi	zero,5007
   4dd54:	0004e4d0 	cmplti	zero,zero,5011
   4dd58:	0004e3f4 	movhi	zero,5007
   4dd5c:	0004e3f4 	movhi	zero,5007
   4dd60:	0004e3f4 	movhi	zero,5007
   4dd64:	0004e3f4 	movhi	zero,5007
   4dd68:	0004e3f4 	movhi	zero,5007
   4dd6c:	0004e468 	cmpgeui	zero,zero,5009
   4dd70:	0004e3f4 	movhi	zero,5007
   4dd74:	0004e3f4 	movhi	zero,5007
   4dd78:	0004e19c 	xori	zero,zero,4998
   4dd7c:	0004e3f4 	movhi	zero,5007
   4dd80:	0004e3f4 	movhi	zero,5007
   4dd84:	0004e3f4 	movhi	zero,5007
   4dd88:	0004e3f4 	movhi	zero,5007
   4dd8c:	0004e3f4 	movhi	zero,5007
   4dd90:	0004e3f4 	movhi	zero,5007
   4dd94:	0004e3f4 	movhi	zero,5007
   4dd98:	0004e3f4 	movhi	zero,5007
   4dd9c:	0004e3f4 	movhi	zero,5007
   4dda0:	0004e3f4 	movhi	zero,5007
   4dda4:	0004e08c 	andi	zero,zero,4994
   4dda8:	0004e238 	rdprs	zero,zero,5000
   4ddac:	0004e3f4 	movhi	zero,5007
   4ddb0:	0004e3f4 	movhi	zero,5007
   4ddb4:	0004e3f4 	movhi	zero,5007
   4ddb8:	0004e22c 	andhi	zero,zero,5000
   4ddbc:	0004e238 	rdprs	zero,zero,5000
   4ddc0:	0004e3f4 	movhi	zero,5007
   4ddc4:	0004e3f4 	movhi	zero,5007
   4ddc8:	0004e21c 	xori	zero,zero,5000
   4ddcc:	0004e3f4 	movhi	zero,5007
   4ddd0:	0004e1e0 	cmpeqi	zero,zero,4999
   4ddd4:	0004dfe8 	cmpgeui	zero,zero,4991
   4ddd8:	0004de34 	movhi	zero,4984
   4dddc:	0004e34c 	andi	zero,zero,5005
   4dde0:	0004e3f4 	movhi	zero,5007
   4dde4:	0004e300 	call	4e30 <__reset-0x3b1d0>
   4dde8:	0004e3f4 	movhi	zero,5007
   4ddec:	0004df58 	cmpnei	zero,zero,4989
   4ddf0:	0004e3f4 	movhi	zero,5007
   4ddf4:	0004e3f4 	movhi	zero,5007
   4ddf8:	0004deb4 	movhi	zero,4986
   4ddfc:	dac02317 	ldw	r11,140(sp)
   4de00:	5ac00017 	ldw	r11,0(r11)
   4de04:	dac02415 	stw	r11,144(sp)
   4de08:	dac02317 	ldw	r11,140(sp)
   4de0c:	58800104 	addi	r2,r11,4
   4de10:	dac02417 	ldw	r11,144(sp)
   4de14:	5802e90e 	bge	r11,zero,4e9bc <___svfiprintf_internal_r+0xe84>
   4de18:	dac02417 	ldw	r11,144(sp)
   4de1c:	d8802315 	stw	r2,140(sp)
   4de20:	02d7c83a 	sub	r11,zero,r11
   4de24:	dac02415 	stw	r11,144(sp)
   4de28:	94800114 	ori	r18,r18,4
   4de2c:	98c00007 	ldb	r3,0(r19)
   4de30:	003f9006 	br	4dc74 <__alt_data_end+0xfffcf474>
   4de34:	00800c04 	movi	r2,48
   4de38:	dac02317 	ldw	r11,140(sp)
   4de3c:	d8801d05 	stb	r2,116(sp)
   4de40:	00801e04 	movi	r2,120
   4de44:	d8801d45 	stb	r2,117(sp)
   4de48:	d8001d85 	stb	zero,118(sp)
   4de4c:	58c00104 	addi	r3,r11,4
   4de50:	5f000017 	ldw	fp,0(r11)
   4de54:	0013883a 	mov	r9,zero
   4de58:	90800094 	ori	r2,r18,2
   4de5c:	80032b16 	blt	r16,zero,4eb0c <___svfiprintf_internal_r+0xfd4>
   4de60:	00bfdfc4 	movi	r2,-129
   4de64:	90a4703a 	and	r18,r18,r2
   4de68:	d8c02315 	stw	r3,140(sp)
   4de6c:	94800094 	ori	r18,r18,2
   4de70:	e002dc26 	beq	fp,zero,4e9e4 <___svfiprintf_internal_r+0xeac>
   4de74:	01000174 	movhi	r4,5
   4de78:	21174404 	addi	r4,r4,23824
   4de7c:	0015883a 	mov	r10,zero
   4de80:	d9002915 	stw	r4,164(sp)
   4de84:	00002306 	br	4df14 <___svfiprintf_internal_r+0x3dc>
   4de88:	94800054 	ori	r18,r18,1
   4de8c:	98c00007 	ldb	r3,0(r19)
   4de90:	003f7806 	br	4dc74 <__alt_data_end+0xfffcf474>
   4de94:	38803fcc 	andi	r2,r7,255
   4de98:	1080201c 	xori	r2,r2,128
   4de9c:	10bfe004 	addi	r2,r2,-128
   4dea0:	1002f31e 	bne	r2,zero,4ea70 <___svfiprintf_internal_r+0xf38>
   4dea4:	01000044 	movi	r4,1
   4dea8:	01c00804 	movi	r7,32
   4deac:	98c00007 	ldb	r3,0(r19)
   4deb0:	003f7006 	br	4dc74 <__alt_data_end+0xfffcf474>
   4deb4:	21003fcc 	andi	r4,r4,255
   4deb8:	2003aa1e 	bne	r4,zero,4ed64 <___svfiprintf_internal_r+0x122c>
   4debc:	00800174 	movhi	r2,5
   4dec0:	10974404 	addi	r2,r2,23824
   4dec4:	d8802915 	stw	r2,164(sp)
   4dec8:	9080080c 	andi	r2,r18,32
   4decc:	1000ba26 	beq	r2,zero,4e1b8 <___svfiprintf_internal_r+0x680>
   4ded0:	dac02317 	ldw	r11,140(sp)
   4ded4:	5f000017 	ldw	fp,0(r11)
   4ded8:	5a400117 	ldw	r9,4(r11)
   4dedc:	5ac00204 	addi	r11,r11,8
   4dee0:	dac02315 	stw	r11,140(sp)
   4dee4:	9080004c 	andi	r2,r18,1
   4dee8:	10029026 	beq	r2,zero,4e92c <___svfiprintf_internal_r+0xdf4>
   4deec:	e244b03a 	or	r2,fp,r9
   4def0:	1002d41e 	bne	r2,zero,4ea44 <___svfiprintf_internal_r+0xf0c>
   4def4:	d8001d85 	stb	zero,118(sp)
   4def8:	80030b16 	blt	r16,zero,4eb28 <___svfiprintf_internal_r+0xff0>
   4defc:	00bfdfc4 	movi	r2,-129
   4df00:	90a4703a 	and	r18,r18,r2
   4df04:	0015883a 	mov	r10,zero
   4df08:	80002426 	beq	r16,zero,4df9c <___svfiprintf_internal_r+0x464>
   4df0c:	0039883a 	mov	fp,zero
   4df10:	0013883a 	mov	r9,zero
   4df14:	d9002917 	ldw	r4,164(sp)
   4df18:	dc401a04 	addi	r17,sp,104
   4df1c:	e08003cc 	andi	r2,fp,15
   4df20:	4806973a 	slli	r3,r9,28
   4df24:	2085883a 	add	r2,r4,r2
   4df28:	e038d13a 	srli	fp,fp,4
   4df2c:	10800003 	ldbu	r2,0(r2)
   4df30:	4812d13a 	srli	r9,r9,4
   4df34:	8c7fffc4 	addi	r17,r17,-1
   4df38:	1f38b03a 	or	fp,r3,fp
   4df3c:	88800005 	stb	r2,0(r17)
   4df40:	e244b03a 	or	r2,fp,r9
   4df44:	103ff51e 	bne	r2,zero,4df1c <__alt_data_end+0xfffcf71c>
   4df48:	dac01e17 	ldw	r11,120(sp)
   4df4c:	5c57c83a 	sub	r11,r11,r17
   4df50:	dac02115 	stw	r11,132(sp)
   4df54:	00001406 	br	4dfa8 <___svfiprintf_internal_r+0x470>
   4df58:	21003fcc 	andi	r4,r4,255
   4df5c:	2003741e 	bne	r4,zero,4ed30 <___svfiprintf_internal_r+0x11f8>
   4df60:	9080080c 	andi	r2,r18,32
   4df64:	10014526 	beq	r2,zero,4e47c <___svfiprintf_internal_r+0x944>
   4df68:	dac02317 	ldw	r11,140(sp)
   4df6c:	d8001d85 	stb	zero,118(sp)
   4df70:	58c00204 	addi	r3,r11,8
   4df74:	5f000017 	ldw	fp,0(r11)
   4df78:	5a400117 	ldw	r9,4(r11)
   4df7c:	8002d916 	blt	r16,zero,4eae4 <___svfiprintf_internal_r+0xfac>
   4df80:	013fdfc4 	movi	r4,-129
   4df84:	e244b03a 	or	r2,fp,r9
   4df88:	d8c02315 	stw	r3,140(sp)
   4df8c:	9124703a 	and	r18,r18,r4
   4df90:	0015883a 	mov	r10,zero
   4df94:	1000b91e 	bne	r2,zero,4e27c <___svfiprintf_internal_r+0x744>
   4df98:	8002e61e 	bne	r16,zero,4eb34 <___svfiprintf_internal_r+0xffc>
   4df9c:	0021883a 	mov	r16,zero
   4dfa0:	d8002115 	stw	zero,132(sp)
   4dfa4:	dc401a04 	addi	r17,sp,104
   4dfa8:	d8c02117 	ldw	r3,132(sp)
   4dfac:	dc002015 	stw	r16,128(sp)
   4dfb0:	80c0010e 	bge	r16,r3,4dfb8 <___svfiprintf_internal_r+0x480>
   4dfb4:	d8c02015 	stw	r3,128(sp)
   4dfb8:	52803fcc 	andi	r10,r10,255
   4dfbc:	5280201c 	xori	r10,r10,128
   4dfc0:	52bfe004 	addi	r10,r10,-128
   4dfc4:	50003c26 	beq	r10,zero,4e0b8 <___svfiprintf_internal_r+0x580>
   4dfc8:	dac02017 	ldw	r11,128(sp)
   4dfcc:	5ac00044 	addi	r11,r11,1
   4dfd0:	dac02015 	stw	r11,128(sp)
   4dfd4:	00003806 	br	4e0b8 <___svfiprintf_internal_r+0x580>
   4dfd8:	01000044 	movi	r4,1
   4dfdc:	01c00ac4 	movi	r7,43
   4dfe0:	98c00007 	ldb	r3,0(r19)
   4dfe4:	003f2306 	br	4dc74 <__alt_data_end+0xfffcf474>
   4dfe8:	21003fcc 	andi	r4,r4,255
   4dfec:	2003481e 	bne	r4,zero,4ed10 <___svfiprintf_internal_r+0x11d8>
   4dff0:	9080080c 	andi	r2,r18,32
   4dff4:	10013b26 	beq	r2,zero,4e4e4 <___svfiprintf_internal_r+0x9ac>
   4dff8:	dac02317 	ldw	r11,140(sp)
   4dffc:	d8001d85 	stb	zero,118(sp)
   4e000:	58800204 	addi	r2,r11,8
   4e004:	5f000017 	ldw	fp,0(r11)
   4e008:	5a400117 	ldw	r9,4(r11)
   4e00c:	8002a816 	blt	r16,zero,4eab0 <___svfiprintf_internal_r+0xf78>
   4e010:	013fdfc4 	movi	r4,-129
   4e014:	e246b03a 	or	r3,fp,r9
   4e018:	d8802315 	stw	r2,140(sp)
   4e01c:	9124703a 	and	r18,r18,r4
   4e020:	18013c26 	beq	r3,zero,4e514 <___svfiprintf_internal_r+0x9dc>
   4e024:	0015883a 	mov	r10,zero
   4e028:	dc401a04 	addi	r17,sp,104
   4e02c:	e006d0fa 	srli	r3,fp,3
   4e030:	4808977a 	slli	r4,r9,29
   4e034:	4812d0fa 	srli	r9,r9,3
   4e038:	e70001cc 	andi	fp,fp,7
   4e03c:	e0800c04 	addi	r2,fp,48
   4e040:	8c7fffc4 	addi	r17,r17,-1
   4e044:	20f8b03a 	or	fp,r4,r3
   4e048:	88800005 	stb	r2,0(r17)
   4e04c:	e246b03a 	or	r3,fp,r9
   4e050:	183ff61e 	bne	r3,zero,4e02c <__alt_data_end+0xfffcf82c>
   4e054:	90c0004c 	andi	r3,r18,1
   4e058:	1800a526 	beq	r3,zero,4e2f0 <___svfiprintf_internal_r+0x7b8>
   4e05c:	10803fcc 	andi	r2,r2,255
   4e060:	1080201c 	xori	r2,r2,128
   4e064:	10bfe004 	addi	r2,r2,-128
   4e068:	00c00c04 	movi	r3,48
   4e06c:	10ffb626 	beq	r2,r3,4df48 <__alt_data_end+0xfffcf748>
   4e070:	88ffffc5 	stb	r3,-1(r17)
   4e074:	d8c01e17 	ldw	r3,120(sp)
   4e078:	88bfffc4 	addi	r2,r17,-1
   4e07c:	1023883a 	mov	r17,r2
   4e080:	1887c83a 	sub	r3,r3,r2
   4e084:	d8c02115 	stw	r3,132(sp)
   4e088:	003fc706 	br	4dfa8 <__alt_data_end+0xfffcf7a8>
   4e08c:	dac02317 	ldw	r11,140(sp)
   4e090:	00c00044 	movi	r3,1
   4e094:	d8c02015 	stw	r3,128(sp)
   4e098:	58800017 	ldw	r2,0(r11)
   4e09c:	5ac00104 	addi	r11,r11,4
   4e0a0:	d8001d85 	stb	zero,118(sp)
   4e0a4:	d8801005 	stb	r2,64(sp)
   4e0a8:	dac02315 	stw	r11,140(sp)
   4e0ac:	d8c02115 	stw	r3,132(sp)
   4e0b0:	dc401004 	addi	r17,sp,64
   4e0b4:	0021883a 	mov	r16,zero
   4e0b8:	90c0008c 	andi	r3,r18,2
   4e0bc:	d8c02215 	stw	r3,136(sp)
   4e0c0:	18000326 	beq	r3,zero,4e0d0 <___svfiprintf_internal_r+0x598>
   4e0c4:	dac02017 	ldw	r11,128(sp)
   4e0c8:	5ac00084 	addi	r11,r11,2
   4e0cc:	dac02015 	stw	r11,128(sp)
   4e0d0:	90c0210c 	andi	r3,r18,132
   4e0d4:	d8c02615 	stw	r3,152(sp)
   4e0d8:	1801131e 	bne	r3,zero,4e528 <___svfiprintf_internal_r+0x9f0>
   4e0dc:	dac02417 	ldw	r11,144(sp)
   4e0e0:	d8c02017 	ldw	r3,128(sp)
   4e0e4:	58f9c83a 	sub	fp,r11,r3
   4e0e8:	07010f0e 	bge	zero,fp,4e528 <___svfiprintf_internal_r+0x9f0>
   4e0ec:	02400404 	movi	r9,16
   4e0f0:	d8c01c17 	ldw	r3,112(sp)
   4e0f4:	d8801b17 	ldw	r2,108(sp)
   4e0f8:	4f02d60e 	bge	r9,fp,4ec54 <___svfiprintf_internal_r+0x111c>
   4e0fc:	01400174 	movhi	r5,5
   4e100:	2957b104 	addi	r5,r5,24260
   4e104:	d9402815 	stw	r5,160(sp)
   4e108:	028001c4 	movi	r10,7
   4e10c:	00000306 	br	4e11c <___svfiprintf_internal_r+0x5e4>
   4e110:	e73ffc04 	addi	fp,fp,-16
   4e114:	42000204 	addi	r8,r8,8
   4e118:	4f00150e 	bge	r9,fp,4e170 <___svfiprintf_internal_r+0x638>
   4e11c:	18c00404 	addi	r3,r3,16
   4e120:	10800044 	addi	r2,r2,1
   4e124:	45800015 	stw	r22,0(r8)
   4e128:	42400115 	stw	r9,4(r8)
   4e12c:	d8c01c15 	stw	r3,112(sp)
   4e130:	d8801b15 	stw	r2,108(sp)
   4e134:	50bff60e 	bge	r10,r2,4e110 <__alt_data_end+0xfffcf910>
   4e138:	d9801a04 	addi	r6,sp,104
   4e13c:	b80b883a 	mov	r5,r23
   4e140:	a809883a 	mov	r4,r21
   4e144:	da402c15 	stw	r9,176(sp)
   4e148:	da802d15 	stw	r10,180(sp)
   4e14c:	004d9680 	call	4d968 <__ssprint_r>
   4e150:	da402c17 	ldw	r9,176(sp)
   4e154:	da802d17 	ldw	r10,180(sp)
   4e158:	1001851e 	bne	r2,zero,4e770 <___svfiprintf_internal_r+0xc38>
   4e15c:	e73ffc04 	addi	fp,fp,-16
   4e160:	d8c01c17 	ldw	r3,112(sp)
   4e164:	d8801b17 	ldw	r2,108(sp)
   4e168:	d811883a 	mov	r8,sp
   4e16c:	4f3feb16 	blt	r9,fp,4e11c <__alt_data_end+0xfffcf91c>
   4e170:	dac02817 	ldw	r11,160(sp)
   4e174:	e0c7883a 	add	r3,fp,r3
   4e178:	10800044 	addi	r2,r2,1
   4e17c:	42c00015 	stw	r11,0(r8)
   4e180:	47000115 	stw	fp,4(r8)
   4e184:	d8c01c15 	stw	r3,112(sp)
   4e188:	d8801b15 	stw	r2,108(sp)
   4e18c:	010001c4 	movi	r4,7
   4e190:	2081ee16 	blt	r4,r2,4e94c <___svfiprintf_internal_r+0xe14>
   4e194:	42000204 	addi	r8,r8,8
   4e198:	0000e506 	br	4e530 <___svfiprintf_internal_r+0x9f8>
   4e19c:	21003fcc 	andi	r4,r4,255
   4e1a0:	2002dd1e 	bne	r4,zero,4ed18 <___svfiprintf_internal_r+0x11e0>
   4e1a4:	00800174 	movhi	r2,5
   4e1a8:	10973f04 	addi	r2,r2,23804
   4e1ac:	d8802915 	stw	r2,164(sp)
   4e1b0:	9080080c 	andi	r2,r18,32
   4e1b4:	103f461e 	bne	r2,zero,4ded0 <__alt_data_end+0xfffcf6d0>
   4e1b8:	9080040c 	andi	r2,r18,16
   4e1bc:	10022e1e 	bne	r2,zero,4ea78 <___svfiprintf_internal_r+0xf40>
   4e1c0:	9080100c 	andi	r2,r18,64
   4e1c4:	dac02317 	ldw	r11,140(sp)
   4e1c8:	10027326 	beq	r2,zero,4eb98 <___svfiprintf_internal_r+0x1060>
   4e1cc:	5f00000b 	ldhu	fp,0(r11)
   4e1d0:	5ac00104 	addi	r11,r11,4
   4e1d4:	0013883a 	mov	r9,zero
   4e1d8:	dac02315 	stw	r11,140(sp)
   4e1dc:	003f4106 	br	4dee4 <__alt_data_end+0xfffcf6e4>
   4e1e0:	21003fcc 	andi	r4,r4,255
   4e1e4:	2002e11e 	bne	r4,zero,4ed6c <___svfiprintf_internal_r+0x1234>
   4e1e8:	9080080c 	andi	r2,r18,32
   4e1ec:	1002011e 	bne	r2,zero,4e9f4 <___svfiprintf_internal_r+0xebc>
   4e1f0:	9080040c 	andi	r2,r18,16
   4e1f4:	10023e1e 	bne	r2,zero,4eaf0 <___svfiprintf_internal_r+0xfb8>
   4e1f8:	9480100c 	andi	r18,r18,64
   4e1fc:	90023c26 	beq	r18,zero,4eaf0 <___svfiprintf_internal_r+0xfb8>
   4e200:	dac02317 	ldw	r11,140(sp)
   4e204:	58800017 	ldw	r2,0(r11)
   4e208:	5ac00104 	addi	r11,r11,4
   4e20c:	dac02315 	stw	r11,140(sp)
   4e210:	dac02517 	ldw	r11,148(sp)
   4e214:	12c0000d 	sth	r11,0(r2)
   4e218:	003e6e06 	br	4dbd4 <__alt_data_end+0xfffcf3d4>
   4e21c:	98c00007 	ldb	r3,0(r19)
   4e220:	1a422926 	beq	r3,r9,4eac8 <___svfiprintf_internal_r+0xf90>
   4e224:	94800414 	ori	r18,r18,16
   4e228:	003e9206 	br	4dc74 <__alt_data_end+0xfffcf474>
   4e22c:	94801014 	ori	r18,r18,64
   4e230:	98c00007 	ldb	r3,0(r19)
   4e234:	003e8f06 	br	4dc74 <__alt_data_end+0xfffcf474>
   4e238:	21003fcc 	andi	r4,r4,255
   4e23c:	2002c71e 	bne	r4,zero,4ed5c <___svfiprintf_internal_r+0x1224>
   4e240:	9080080c 	andi	r2,r18,32
   4e244:	10004926 	beq	r2,zero,4e36c <___svfiprintf_internal_r+0x834>
   4e248:	dac02317 	ldw	r11,140(sp)
   4e24c:	58800117 	ldw	r2,4(r11)
   4e250:	5f000017 	ldw	fp,0(r11)
   4e254:	5ac00204 	addi	r11,r11,8
   4e258:	dac02315 	stw	r11,140(sp)
   4e25c:	1013883a 	mov	r9,r2
   4e260:	10004b16 	blt	r2,zero,4e390 <___svfiprintf_internal_r+0x858>
   4e264:	da801d83 	ldbu	r10,118(sp)
   4e268:	8001cb16 	blt	r16,zero,4e998 <___svfiprintf_internal_r+0xe60>
   4e26c:	00ffdfc4 	movi	r3,-129
   4e270:	e244b03a 	or	r2,fp,r9
   4e274:	90e4703a 	and	r18,r18,r3
   4e278:	103f4726 	beq	r2,zero,4df98 <__alt_data_end+0xfffcf798>
   4e27c:	48008c26 	beq	r9,zero,4e4b0 <___svfiprintf_internal_r+0x978>
   4e280:	dc802015 	stw	r18,128(sp)
   4e284:	dc002115 	stw	r16,132(sp)
   4e288:	dc401a04 	addi	r17,sp,104
   4e28c:	e021883a 	mov	r16,fp
   4e290:	da002215 	stw	r8,136(sp)
   4e294:	5039883a 	mov	fp,r10
   4e298:	4825883a 	mov	r18,r9
   4e29c:	8009883a 	mov	r4,r16
   4e2a0:	900b883a 	mov	r5,r18
   4e2a4:	01800284 	movi	r6,10
   4e2a8:	000f883a 	mov	r7,zero
   4e2ac:	00512680 	call	51268 <__umoddi3>
   4e2b0:	10800c04 	addi	r2,r2,48
   4e2b4:	8c7fffc4 	addi	r17,r17,-1
   4e2b8:	8009883a 	mov	r4,r16
   4e2bc:	900b883a 	mov	r5,r18
   4e2c0:	88800005 	stb	r2,0(r17)
   4e2c4:	01800284 	movi	r6,10
   4e2c8:	000f883a 	mov	r7,zero
   4e2cc:	0050cf00 	call	50cf0 <__udivdi3>
   4e2d0:	1021883a 	mov	r16,r2
   4e2d4:	10c4b03a 	or	r2,r2,r3
   4e2d8:	1825883a 	mov	r18,r3
   4e2dc:	103fef1e 	bne	r2,zero,4e29c <__alt_data_end+0xfffcfa9c>
   4e2e0:	dc802017 	ldw	r18,128(sp)
   4e2e4:	dc002117 	ldw	r16,132(sp)
   4e2e8:	da002217 	ldw	r8,136(sp)
   4e2ec:	e015883a 	mov	r10,fp
   4e2f0:	d8c01e17 	ldw	r3,120(sp)
   4e2f4:	1c47c83a 	sub	r3,r3,r17
   4e2f8:	d8c02115 	stw	r3,132(sp)
   4e2fc:	003f2a06 	br	4dfa8 <__alt_data_end+0xfffcf7a8>
   4e300:	dac02317 	ldw	r11,140(sp)
   4e304:	d8001d85 	stb	zero,118(sp)
   4e308:	5c400017 	ldw	r17,0(r11)
   4e30c:	5f000104 	addi	fp,r11,4
   4e310:	88022f26 	beq	r17,zero,4ebd0 <___svfiprintf_internal_r+0x1098>
   4e314:	80022516 	blt	r16,zero,4ebac <___svfiprintf_internal_r+0x1074>
   4e318:	800d883a 	mov	r6,r16
   4e31c:	000b883a 	mov	r5,zero
   4e320:	8809883a 	mov	r4,r17
   4e324:	da002c15 	stw	r8,176(sp)
   4e328:	004bc780 	call	4bc78 <memchr>
   4e32c:	da002c17 	ldw	r8,176(sp)
   4e330:	10026426 	beq	r2,zero,4ecc4 <___svfiprintf_internal_r+0x118c>
   4e334:	1445c83a 	sub	r2,r2,r17
   4e338:	d8802115 	stw	r2,132(sp)
   4e33c:	da801d83 	ldbu	r10,118(sp)
   4e340:	df002315 	stw	fp,140(sp)
   4e344:	0021883a 	mov	r16,zero
   4e348:	003f1706 	br	4dfa8 <__alt_data_end+0xfffcf7a8>
   4e34c:	94800814 	ori	r18,r18,32
   4e350:	98c00007 	ldb	r3,0(r19)
   4e354:	003e4706 	br	4dc74 <__alt_data_end+0xfffcf474>
   4e358:	21003fcc 	andi	r4,r4,255
   4e35c:	2002701e 	bne	r4,zero,4ed20 <___svfiprintf_internal_r+0x11e8>
   4e360:	94800414 	ori	r18,r18,16
   4e364:	9080080c 	andi	r2,r18,32
   4e368:	103fb71e 	bne	r2,zero,4e248 <__alt_data_end+0xfffcfa48>
   4e36c:	9080040c 	andi	r2,r18,16
   4e370:	1001ab26 	beq	r2,zero,4ea20 <___svfiprintf_internal_r+0xee8>
   4e374:	dac02317 	ldw	r11,140(sp)
   4e378:	5f000017 	ldw	fp,0(r11)
   4e37c:	5ac00104 	addi	r11,r11,4
   4e380:	dac02315 	stw	r11,140(sp)
   4e384:	e013d7fa 	srai	r9,fp,31
   4e388:	4805883a 	mov	r2,r9
   4e38c:	103fb50e 	bge	r2,zero,4e264 <__alt_data_end+0xfffcfa64>
   4e390:	0739c83a 	sub	fp,zero,fp
   4e394:	02800b44 	movi	r10,45
   4e398:	e004c03a 	cmpne	r2,fp,zero
   4e39c:	0253c83a 	sub	r9,zero,r9
   4e3a0:	da801d85 	stb	r10,118(sp)
   4e3a4:	4893c83a 	sub	r9,r9,r2
   4e3a8:	80023016 	blt	r16,zero,4ec6c <___svfiprintf_internal_r+0x1134>
   4e3ac:	00bfdfc4 	movi	r2,-129
   4e3b0:	90a4703a 	and	r18,r18,r2
   4e3b4:	483fb21e 	bne	r9,zero,4e280 <__alt_data_end+0xfffcfa80>
   4e3b8:	00003d06 	br	4e4b0 <___svfiprintf_internal_r+0x978>
   4e3bc:	9817883a 	mov	r11,r19
   4e3c0:	d8002415 	stw	zero,144(sp)
   4e3c4:	18bff404 	addi	r2,r3,-48
   4e3c8:	0019883a 	mov	r12,zero
   4e3cc:	58c00007 	ldb	r3,0(r11)
   4e3d0:	630002a4 	muli	r12,r12,10
   4e3d4:	9cc00044 	addi	r19,r19,1
   4e3d8:	9817883a 	mov	r11,r19
   4e3dc:	1319883a 	add	r12,r2,r12
   4e3e0:	18bff404 	addi	r2,r3,-48
   4e3e4:	30bff92e 	bgeu	r6,r2,4e3cc <__alt_data_end+0xfffcfbcc>
   4e3e8:	db002415 	stw	r12,144(sp)
   4e3ec:	18bff804 	addi	r2,r3,-32
   4e3f0:	28be232e 	bgeu	r5,r2,4dc80 <__alt_data_end+0xfffcf480>
   4e3f4:	21003fcc 	andi	r4,r4,255
   4e3f8:	20024b1e 	bne	r4,zero,4ed28 <___svfiprintf_internal_r+0x11f0>
   4e3fc:	1800d626 	beq	r3,zero,4e758 <___svfiprintf_internal_r+0xc20>
   4e400:	02c00044 	movi	r11,1
   4e404:	dac02015 	stw	r11,128(sp)
   4e408:	d8c01005 	stb	r3,64(sp)
   4e40c:	d8001d85 	stb	zero,118(sp)
   4e410:	dac02115 	stw	r11,132(sp)
   4e414:	dc401004 	addi	r17,sp,64
   4e418:	003f2606 	br	4e0b4 <__alt_data_end+0xfffcf8b4>
   4e41c:	94802014 	ori	r18,r18,128
   4e420:	98c00007 	ldb	r3,0(r19)
   4e424:	003e1306 	br	4dc74 <__alt_data_end+0xfffcf474>
   4e428:	98c00007 	ldb	r3,0(r19)
   4e42c:	9ac00044 	addi	r11,r19,1
   4e430:	1a822b26 	beq	r3,r10,4ece0 <___svfiprintf_internal_r+0x11a8>
   4e434:	18bff404 	addi	r2,r3,-48
   4e438:	0021883a 	mov	r16,zero
   4e43c:	30821e36 	bltu	r6,r2,4ecb8 <___svfiprintf_internal_r+0x1180>
   4e440:	58c00007 	ldb	r3,0(r11)
   4e444:	840002a4 	muli	r16,r16,10
   4e448:	5cc00044 	addi	r19,r11,1
   4e44c:	9817883a 	mov	r11,r19
   4e450:	80a1883a 	add	r16,r16,r2
   4e454:	18bff404 	addi	r2,r3,-48
   4e458:	30bff92e 	bgeu	r6,r2,4e440 <__alt_data_end+0xfffcfc40>
   4e45c:	803e060e 	bge	r16,zero,4dc78 <__alt_data_end+0xfffcf478>
   4e460:	043fffc4 	movi	r16,-1
   4e464:	003e0406 	br	4dc78 <__alt_data_end+0xfffcf478>
   4e468:	21003fcc 	andi	r4,r4,255
   4e46c:	2002371e 	bne	r4,zero,4ed4c <___svfiprintf_internal_r+0x1214>
   4e470:	94800414 	ori	r18,r18,16
   4e474:	9080080c 	andi	r2,r18,32
   4e478:	103ebb1e 	bne	r2,zero,4df68 <__alt_data_end+0xfffcf768>
   4e47c:	9080040c 	andi	r2,r18,16
   4e480:	10013b26 	beq	r2,zero,4e970 <___svfiprintf_internal_r+0xe38>
   4e484:	dac02317 	ldw	r11,140(sp)
   4e488:	d8001d85 	stb	zero,118(sp)
   4e48c:	0013883a 	mov	r9,zero
   4e490:	58800104 	addi	r2,r11,4
   4e494:	5f000017 	ldw	fp,0(r11)
   4e498:	80013d16 	blt	r16,zero,4e990 <___svfiprintf_internal_r+0xe58>
   4e49c:	00ffdfc4 	movi	r3,-129
   4e4a0:	d8802315 	stw	r2,140(sp)
   4e4a4:	90e4703a 	and	r18,r18,r3
   4e4a8:	0015883a 	mov	r10,zero
   4e4ac:	e03eba26 	beq	fp,zero,4df98 <__alt_data_end+0xfffcf798>
   4e4b0:	00800244 	movi	r2,9
   4e4b4:	173f7236 	bltu	r2,fp,4e280 <__alt_data_end+0xfffcfa80>
   4e4b8:	dac02b17 	ldw	r11,172(sp)
   4e4bc:	e7000c04 	addi	fp,fp,48
   4e4c0:	df0019c5 	stb	fp,103(sp)
   4e4c4:	dac02115 	stw	r11,132(sp)
   4e4c8:	dc4019c4 	addi	r17,sp,103
   4e4cc:	003eb606 	br	4dfa8 <__alt_data_end+0xfffcf7a8>
   4e4d0:	21003fcc 	andi	r4,r4,255
   4e4d4:	20021f1e 	bne	r4,zero,4ed54 <___svfiprintf_internal_r+0x121c>
   4e4d8:	94800414 	ori	r18,r18,16
   4e4dc:	9080080c 	andi	r2,r18,32
   4e4e0:	103ec51e 	bne	r2,zero,4dff8 <__alt_data_end+0xfffcf7f8>
   4e4e4:	9080040c 	andi	r2,r18,16
   4e4e8:	10016926 	beq	r2,zero,4ea90 <___svfiprintf_internal_r+0xf58>
   4e4ec:	dac02317 	ldw	r11,140(sp)
   4e4f0:	d8001d85 	stb	zero,118(sp)
   4e4f4:	0013883a 	mov	r9,zero
   4e4f8:	58800104 	addi	r2,r11,4
   4e4fc:	5f000017 	ldw	fp,0(r11)
   4e500:	80016b16 	blt	r16,zero,4eab0 <___svfiprintf_internal_r+0xf78>
   4e504:	00ffdfc4 	movi	r3,-129
   4e508:	d8802315 	stw	r2,140(sp)
   4e50c:	90e4703a 	and	r18,r18,r3
   4e510:	e03ec41e 	bne	fp,zero,4e024 <__alt_data_end+0xfffcf824>
   4e514:	0015883a 	mov	r10,zero
   4e518:	8001c226 	beq	r16,zero,4ec24 <___svfiprintf_internal_r+0x10ec>
   4e51c:	0039883a 	mov	fp,zero
   4e520:	0013883a 	mov	r9,zero
   4e524:	003ec006 	br	4e028 <__alt_data_end+0xfffcf828>
   4e528:	d8c01c17 	ldw	r3,112(sp)
   4e52c:	d8801b17 	ldw	r2,108(sp)
   4e530:	d9001d87 	ldb	r4,118(sp)
   4e534:	20000b26 	beq	r4,zero,4e564 <___svfiprintf_internal_r+0xa2c>
   4e538:	d9001d84 	addi	r4,sp,118
   4e53c:	18c00044 	addi	r3,r3,1
   4e540:	10800044 	addi	r2,r2,1
   4e544:	41000015 	stw	r4,0(r8)
   4e548:	01000044 	movi	r4,1
   4e54c:	41000115 	stw	r4,4(r8)
   4e550:	d8c01c15 	stw	r3,112(sp)
   4e554:	d8801b15 	stw	r2,108(sp)
   4e558:	010001c4 	movi	r4,7
   4e55c:	2080e116 	blt	r4,r2,4e8e4 <___svfiprintf_internal_r+0xdac>
   4e560:	42000204 	addi	r8,r8,8
   4e564:	dac02217 	ldw	r11,136(sp)
   4e568:	58000b26 	beq	r11,zero,4e598 <___svfiprintf_internal_r+0xa60>
   4e56c:	d9001d04 	addi	r4,sp,116
   4e570:	18c00084 	addi	r3,r3,2
   4e574:	10800044 	addi	r2,r2,1
   4e578:	41000015 	stw	r4,0(r8)
   4e57c:	01000084 	movi	r4,2
   4e580:	41000115 	stw	r4,4(r8)
   4e584:	d8c01c15 	stw	r3,112(sp)
   4e588:	d8801b15 	stw	r2,108(sp)
   4e58c:	010001c4 	movi	r4,7
   4e590:	2080dd16 	blt	r4,r2,4e908 <___svfiprintf_internal_r+0xdd0>
   4e594:	42000204 	addi	r8,r8,8
   4e598:	dac02617 	ldw	r11,152(sp)
   4e59c:	01002004 	movi	r4,128
   4e5a0:	59008426 	beq	r11,r4,4e7b4 <___svfiprintf_internal_r+0xc7c>
   4e5a4:	dac02117 	ldw	r11,132(sp)
   4e5a8:	82e1c83a 	sub	r16,r16,r11
   4e5ac:	0400270e 	bge	zero,r16,4e64c <___svfiprintf_internal_r+0xb14>
   4e5b0:	01c00404 	movi	r7,16
   4e5b4:	3c016a0e 	bge	r7,r16,4eb60 <___svfiprintf_internal_r+0x1028>
   4e5b8:	01400174 	movhi	r5,5
   4e5bc:	2957ad04 	addi	r5,r5,24244
   4e5c0:	d9402215 	stw	r5,136(sp)
   4e5c4:	070001c4 	movi	fp,7
   4e5c8:	00000306 	br	4e5d8 <___svfiprintf_internal_r+0xaa0>
   4e5cc:	843ffc04 	addi	r16,r16,-16
   4e5d0:	42000204 	addi	r8,r8,8
   4e5d4:	3c00130e 	bge	r7,r16,4e624 <___svfiprintf_internal_r+0xaec>
   4e5d8:	18c00404 	addi	r3,r3,16
   4e5dc:	10800044 	addi	r2,r2,1
   4e5e0:	45000015 	stw	r20,0(r8)
   4e5e4:	41c00115 	stw	r7,4(r8)
   4e5e8:	d8c01c15 	stw	r3,112(sp)
   4e5ec:	d8801b15 	stw	r2,108(sp)
   4e5f0:	e0bff60e 	bge	fp,r2,4e5cc <__alt_data_end+0xfffcfdcc>
   4e5f4:	d9801a04 	addi	r6,sp,104
   4e5f8:	b80b883a 	mov	r5,r23
   4e5fc:	a809883a 	mov	r4,r21
   4e600:	d9c02c15 	stw	r7,176(sp)
   4e604:	004d9680 	call	4d968 <__ssprint_r>
   4e608:	d9c02c17 	ldw	r7,176(sp)
   4e60c:	1000581e 	bne	r2,zero,4e770 <___svfiprintf_internal_r+0xc38>
   4e610:	843ffc04 	addi	r16,r16,-16
   4e614:	d8c01c17 	ldw	r3,112(sp)
   4e618:	d8801b17 	ldw	r2,108(sp)
   4e61c:	d811883a 	mov	r8,sp
   4e620:	3c3fed16 	blt	r7,r16,4e5d8 <__alt_data_end+0xfffcfdd8>
   4e624:	dac02217 	ldw	r11,136(sp)
   4e628:	1c07883a 	add	r3,r3,r16
   4e62c:	10800044 	addi	r2,r2,1
   4e630:	42c00015 	stw	r11,0(r8)
   4e634:	44000115 	stw	r16,4(r8)
   4e638:	d8c01c15 	stw	r3,112(sp)
   4e63c:	d8801b15 	stw	r2,108(sp)
   4e640:	010001c4 	movi	r4,7
   4e644:	20809e16 	blt	r4,r2,4e8c0 <___svfiprintf_internal_r+0xd88>
   4e648:	42000204 	addi	r8,r8,8
   4e64c:	dac02117 	ldw	r11,132(sp)
   4e650:	10800044 	addi	r2,r2,1
   4e654:	44400015 	stw	r17,0(r8)
   4e658:	58c7883a 	add	r3,r11,r3
   4e65c:	42c00115 	stw	r11,4(r8)
   4e660:	d8c01c15 	stw	r3,112(sp)
   4e664:	d8801b15 	stw	r2,108(sp)
   4e668:	010001c4 	movi	r4,7
   4e66c:	20807f16 	blt	r4,r2,4e86c <___svfiprintf_internal_r+0xd34>
   4e670:	42000204 	addi	r8,r8,8
   4e674:	9480010c 	andi	r18,r18,4
   4e678:	90002926 	beq	r18,zero,4e720 <___svfiprintf_internal_r+0xbe8>
   4e67c:	dac02417 	ldw	r11,144(sp)
   4e680:	d8802017 	ldw	r2,128(sp)
   4e684:	58a1c83a 	sub	r16,r11,r2
   4e688:	0400250e 	bge	zero,r16,4e720 <___svfiprintf_internal_r+0xbe8>
   4e68c:	04400404 	movi	r17,16
   4e690:	d8801b17 	ldw	r2,108(sp)
   4e694:	8c017c0e 	bge	r17,r16,4ec88 <___svfiprintf_internal_r+0x1150>
   4e698:	01400174 	movhi	r5,5
   4e69c:	2957b104 	addi	r5,r5,24260
   4e6a0:	d9402815 	stw	r5,160(sp)
   4e6a4:	048001c4 	movi	r18,7
   4e6a8:	00000306 	br	4e6b8 <___svfiprintf_internal_r+0xb80>
   4e6ac:	843ffc04 	addi	r16,r16,-16
   4e6b0:	42000204 	addi	r8,r8,8
   4e6b4:	8c00110e 	bge	r17,r16,4e6fc <___svfiprintf_internal_r+0xbc4>
   4e6b8:	18c00404 	addi	r3,r3,16
   4e6bc:	10800044 	addi	r2,r2,1
   4e6c0:	45800015 	stw	r22,0(r8)
   4e6c4:	44400115 	stw	r17,4(r8)
   4e6c8:	d8c01c15 	stw	r3,112(sp)
   4e6cc:	d8801b15 	stw	r2,108(sp)
   4e6d0:	90bff60e 	bge	r18,r2,4e6ac <__alt_data_end+0xfffcfeac>
   4e6d4:	d9801a04 	addi	r6,sp,104
   4e6d8:	b80b883a 	mov	r5,r23
   4e6dc:	a809883a 	mov	r4,r21
   4e6e0:	004d9680 	call	4d968 <__ssprint_r>
   4e6e4:	1000221e 	bne	r2,zero,4e770 <___svfiprintf_internal_r+0xc38>
   4e6e8:	843ffc04 	addi	r16,r16,-16
   4e6ec:	d8c01c17 	ldw	r3,112(sp)
   4e6f0:	d8801b17 	ldw	r2,108(sp)
   4e6f4:	d811883a 	mov	r8,sp
   4e6f8:	8c3fef16 	blt	r17,r16,4e6b8 <__alt_data_end+0xfffcfeb8>
   4e6fc:	dac02817 	ldw	r11,160(sp)
   4e700:	1c07883a 	add	r3,r3,r16
   4e704:	10800044 	addi	r2,r2,1
   4e708:	42c00015 	stw	r11,0(r8)
   4e70c:	44000115 	stw	r16,4(r8)
   4e710:	d8c01c15 	stw	r3,112(sp)
   4e714:	d8801b15 	stw	r2,108(sp)
   4e718:	010001c4 	movi	r4,7
   4e71c:	2080aa16 	blt	r4,r2,4e9c8 <___svfiprintf_internal_r+0xe90>
   4e720:	d8802417 	ldw	r2,144(sp)
   4e724:	dac02017 	ldw	r11,128(sp)
   4e728:	12c0010e 	bge	r2,r11,4e730 <___svfiprintf_internal_r+0xbf8>
   4e72c:	5805883a 	mov	r2,r11
   4e730:	dac02517 	ldw	r11,148(sp)
   4e734:	5897883a 	add	r11,r11,r2
   4e738:	dac02515 	stw	r11,148(sp)
   4e73c:	1800531e 	bne	r3,zero,4e88c <___svfiprintf_internal_r+0xd54>
   4e740:	98800007 	ldb	r2,0(r19)
   4e744:	d8001b15 	stw	zero,108(sp)
   4e748:	d811883a 	mov	r8,sp
   4e74c:	103d231e 	bne	r2,zero,4dbdc <__alt_data_end+0xfffcf3dc>
   4e750:	9823883a 	mov	r17,r19
   4e754:	003d3906 	br	4dc3c <__alt_data_end+0xfffcf43c>
   4e758:	d8801c17 	ldw	r2,112(sp)
   4e75c:	10000426 	beq	r2,zero,4e770 <___svfiprintf_internal_r+0xc38>
   4e760:	d9402717 	ldw	r5,156(sp)
   4e764:	d9002a17 	ldw	r4,168(sp)
   4e768:	d9801a04 	addi	r6,sp,104
   4e76c:	004d9680 	call	4d968 <__ssprint_r>
   4e770:	dac02717 	ldw	r11,156(sp)
   4e774:	d8802517 	ldw	r2,148(sp)
   4e778:	58c0030b 	ldhu	r3,12(r11)
   4e77c:	18c0100c 	andi	r3,r3,64
   4e780:	1801381e 	bne	r3,zero,4ec64 <___svfiprintf_internal_r+0x112c>
   4e784:	dfc03717 	ldw	ra,220(sp)
   4e788:	df003617 	ldw	fp,216(sp)
   4e78c:	ddc03517 	ldw	r23,212(sp)
   4e790:	dd803417 	ldw	r22,208(sp)
   4e794:	dd403317 	ldw	r21,204(sp)
   4e798:	dd003217 	ldw	r20,200(sp)
   4e79c:	dcc03117 	ldw	r19,196(sp)
   4e7a0:	dc803017 	ldw	r18,192(sp)
   4e7a4:	dc402f17 	ldw	r17,188(sp)
   4e7a8:	dc002e17 	ldw	r16,184(sp)
   4e7ac:	dec03804 	addi	sp,sp,224
   4e7b0:	f800283a 	ret
   4e7b4:	dac02417 	ldw	r11,144(sp)
   4e7b8:	d9002017 	ldw	r4,128(sp)
   4e7bc:	5939c83a 	sub	fp,r11,r4
   4e7c0:	073f780e 	bge	zero,fp,4e5a4 <__alt_data_end+0xfffcfda4>
   4e7c4:	02400404 	movi	r9,16
   4e7c8:	4f01370e 	bge	r9,fp,4eca8 <___svfiprintf_internal_r+0x1170>
   4e7cc:	02c00174 	movhi	r11,5
   4e7d0:	5ad7ad04 	addi	r11,r11,24244
   4e7d4:	dac02215 	stw	r11,136(sp)
   4e7d8:	028001c4 	movi	r10,7
   4e7dc:	00000306 	br	4e7ec <___svfiprintf_internal_r+0xcb4>
   4e7e0:	e73ffc04 	addi	fp,fp,-16
   4e7e4:	42000204 	addi	r8,r8,8
   4e7e8:	4f00150e 	bge	r9,fp,4e840 <___svfiprintf_internal_r+0xd08>
   4e7ec:	18c00404 	addi	r3,r3,16
   4e7f0:	10800044 	addi	r2,r2,1
   4e7f4:	45000015 	stw	r20,0(r8)
   4e7f8:	42400115 	stw	r9,4(r8)
   4e7fc:	d8c01c15 	stw	r3,112(sp)
   4e800:	d8801b15 	stw	r2,108(sp)
   4e804:	50bff60e 	bge	r10,r2,4e7e0 <__alt_data_end+0xfffcffe0>
   4e808:	d9801a04 	addi	r6,sp,104
   4e80c:	b80b883a 	mov	r5,r23
   4e810:	a809883a 	mov	r4,r21
   4e814:	da402c15 	stw	r9,176(sp)
   4e818:	da802d15 	stw	r10,180(sp)
   4e81c:	004d9680 	call	4d968 <__ssprint_r>
   4e820:	da402c17 	ldw	r9,176(sp)
   4e824:	da802d17 	ldw	r10,180(sp)
   4e828:	103fd11e 	bne	r2,zero,4e770 <__alt_data_end+0xfffcff70>
   4e82c:	e73ffc04 	addi	fp,fp,-16
   4e830:	d8c01c17 	ldw	r3,112(sp)
   4e834:	d8801b17 	ldw	r2,108(sp)
   4e838:	d811883a 	mov	r8,sp
   4e83c:	4f3feb16 	blt	r9,fp,4e7ec <__alt_data_end+0xfffcffec>
   4e840:	dac02217 	ldw	r11,136(sp)
   4e844:	1f07883a 	add	r3,r3,fp
   4e848:	10800044 	addi	r2,r2,1
   4e84c:	42c00015 	stw	r11,0(r8)
   4e850:	47000115 	stw	fp,4(r8)
   4e854:	d8c01c15 	stw	r3,112(sp)
   4e858:	d8801b15 	stw	r2,108(sp)
   4e85c:	010001c4 	movi	r4,7
   4e860:	2080b616 	blt	r4,r2,4eb3c <___svfiprintf_internal_r+0x1004>
   4e864:	42000204 	addi	r8,r8,8
   4e868:	003f4e06 	br	4e5a4 <__alt_data_end+0xfffcfda4>
   4e86c:	d9801a04 	addi	r6,sp,104
   4e870:	b80b883a 	mov	r5,r23
   4e874:	a809883a 	mov	r4,r21
   4e878:	004d9680 	call	4d968 <__ssprint_r>
   4e87c:	103fbc1e 	bne	r2,zero,4e770 <__alt_data_end+0xfffcff70>
   4e880:	d8c01c17 	ldw	r3,112(sp)
   4e884:	d811883a 	mov	r8,sp
   4e888:	003f7a06 	br	4e674 <__alt_data_end+0xfffcfe74>
   4e88c:	d9801a04 	addi	r6,sp,104
   4e890:	b80b883a 	mov	r5,r23
   4e894:	a809883a 	mov	r4,r21
   4e898:	004d9680 	call	4d968 <__ssprint_r>
   4e89c:	103fa826 	beq	r2,zero,4e740 <__alt_data_end+0xfffcff40>
   4e8a0:	003fb306 	br	4e770 <__alt_data_end+0xfffcff70>
   4e8a4:	d9801a04 	addi	r6,sp,104
   4e8a8:	b80b883a 	mov	r5,r23
   4e8ac:	a809883a 	mov	r4,r21
   4e8b0:	004d9680 	call	4d968 <__ssprint_r>
   4e8b4:	103fae1e 	bne	r2,zero,4e770 <__alt_data_end+0xfffcff70>
   4e8b8:	d811883a 	mov	r8,sp
   4e8bc:	003cdc06 	br	4dc30 <__alt_data_end+0xfffcf430>
   4e8c0:	d9801a04 	addi	r6,sp,104
   4e8c4:	b80b883a 	mov	r5,r23
   4e8c8:	a809883a 	mov	r4,r21
   4e8cc:	004d9680 	call	4d968 <__ssprint_r>
   4e8d0:	103fa71e 	bne	r2,zero,4e770 <__alt_data_end+0xfffcff70>
   4e8d4:	d8c01c17 	ldw	r3,112(sp)
   4e8d8:	d8801b17 	ldw	r2,108(sp)
   4e8dc:	d811883a 	mov	r8,sp
   4e8e0:	003f5a06 	br	4e64c <__alt_data_end+0xfffcfe4c>
   4e8e4:	d9801a04 	addi	r6,sp,104
   4e8e8:	b80b883a 	mov	r5,r23
   4e8ec:	a809883a 	mov	r4,r21
   4e8f0:	004d9680 	call	4d968 <__ssprint_r>
   4e8f4:	103f9e1e 	bne	r2,zero,4e770 <__alt_data_end+0xfffcff70>
   4e8f8:	d8c01c17 	ldw	r3,112(sp)
   4e8fc:	d8801b17 	ldw	r2,108(sp)
   4e900:	d811883a 	mov	r8,sp
   4e904:	003f1706 	br	4e564 <__alt_data_end+0xfffcfd64>
   4e908:	d9801a04 	addi	r6,sp,104
   4e90c:	b80b883a 	mov	r5,r23
   4e910:	a809883a 	mov	r4,r21
   4e914:	004d9680 	call	4d968 <__ssprint_r>
   4e918:	103f951e 	bne	r2,zero,4e770 <__alt_data_end+0xfffcff70>
   4e91c:	d8c01c17 	ldw	r3,112(sp)
   4e920:	d8801b17 	ldw	r2,108(sp)
   4e924:	d811883a 	mov	r8,sp
   4e928:	003f1b06 	br	4e598 <__alt_data_end+0xfffcfd98>
   4e92c:	d8001d85 	stb	zero,118(sp)
   4e930:	80007b16 	blt	r16,zero,4eb20 <___svfiprintf_internal_r+0xfe8>
   4e934:	00ffdfc4 	movi	r3,-129
   4e938:	e244b03a 	or	r2,fp,r9
   4e93c:	90e4703a 	and	r18,r18,r3
   4e940:	103d7026 	beq	r2,zero,4df04 <__alt_data_end+0xfffcf704>
   4e944:	0015883a 	mov	r10,zero
   4e948:	003d7206 	br	4df14 <__alt_data_end+0xfffcf714>
   4e94c:	d9801a04 	addi	r6,sp,104
   4e950:	b80b883a 	mov	r5,r23
   4e954:	a809883a 	mov	r4,r21
   4e958:	004d9680 	call	4d968 <__ssprint_r>
   4e95c:	103f841e 	bne	r2,zero,4e770 <__alt_data_end+0xfffcff70>
   4e960:	d8c01c17 	ldw	r3,112(sp)
   4e964:	d8801b17 	ldw	r2,108(sp)
   4e968:	d811883a 	mov	r8,sp
   4e96c:	003ef006 	br	4e530 <__alt_data_end+0xfffcfd30>
   4e970:	9080100c 	andi	r2,r18,64
   4e974:	d8001d85 	stb	zero,118(sp)
   4e978:	dac02317 	ldw	r11,140(sp)
   4e97c:	10008126 	beq	r2,zero,4eb84 <___svfiprintf_internal_r+0x104c>
   4e980:	58800104 	addi	r2,r11,4
   4e984:	5f00000b 	ldhu	fp,0(r11)
   4e988:	0013883a 	mov	r9,zero
   4e98c:	803ec30e 	bge	r16,zero,4e49c <__alt_data_end+0xfffcfc9c>
   4e990:	d8802315 	stw	r2,140(sp)
   4e994:	0015883a 	mov	r10,zero
   4e998:	e244b03a 	or	r2,fp,r9
   4e99c:	103e371e 	bne	r2,zero,4e27c <__alt_data_end+0xfffcfa7c>
   4e9a0:	00800044 	movi	r2,1
   4e9a4:	10803fcc 	andi	r2,r2,255
   4e9a8:	00c00044 	movi	r3,1
   4e9ac:	10c06126 	beq	r2,r3,4eb34 <___svfiprintf_internal_r+0xffc>
   4e9b0:	00c00084 	movi	r3,2
   4e9b4:	10fd5526 	beq	r2,r3,4df0c <__alt_data_end+0xfffcf70c>
   4e9b8:	003ed806 	br	4e51c <__alt_data_end+0xfffcfd1c>
   4e9bc:	d8802315 	stw	r2,140(sp)
   4e9c0:	98c00007 	ldb	r3,0(r19)
   4e9c4:	003cab06 	br	4dc74 <__alt_data_end+0xfffcf474>
   4e9c8:	d9801a04 	addi	r6,sp,104
   4e9cc:	b80b883a 	mov	r5,r23
   4e9d0:	a809883a 	mov	r4,r21
   4e9d4:	004d9680 	call	4d968 <__ssprint_r>
   4e9d8:	103f651e 	bne	r2,zero,4e770 <__alt_data_end+0xfffcff70>
   4e9dc:	d8c01c17 	ldw	r3,112(sp)
   4e9e0:	003f4f06 	br	4e720 <__alt_data_end+0xfffcff20>
   4e9e4:	00800174 	movhi	r2,5
   4e9e8:	10974404 	addi	r2,r2,23824
   4e9ec:	d8802915 	stw	r2,164(sp)
   4e9f0:	003d4406 	br	4df04 <__alt_data_end+0xfffcf704>
   4e9f4:	dac02317 	ldw	r11,140(sp)
   4e9f8:	58800017 	ldw	r2,0(r11)
   4e9fc:	dac02517 	ldw	r11,148(sp)
   4ea00:	5807d7fa 	srai	r3,r11,31
   4ea04:	dac02317 	ldw	r11,140(sp)
   4ea08:	10c00115 	stw	r3,4(r2)
   4ea0c:	5ac00104 	addi	r11,r11,4
   4ea10:	dac02315 	stw	r11,140(sp)
   4ea14:	dac02517 	ldw	r11,148(sp)
   4ea18:	12c00015 	stw	r11,0(r2)
   4ea1c:	003c6d06 	br	4dbd4 <__alt_data_end+0xfffcf3d4>
   4ea20:	9080100c 	andi	r2,r18,64
   4ea24:	dac02317 	ldw	r11,140(sp)
   4ea28:	103e5326 	beq	r2,zero,4e378 <__alt_data_end+0xfffcfb78>
   4ea2c:	5f00000f 	ldh	fp,0(r11)
   4ea30:	5ac00104 	addi	r11,r11,4
   4ea34:	dac02315 	stw	r11,140(sp)
   4ea38:	e013d7fa 	srai	r9,fp,31
   4ea3c:	4805883a 	mov	r2,r9
   4ea40:	003e0706 	br	4e260 <__alt_data_end+0xfffcfa60>
   4ea44:	00800c04 	movi	r2,48
   4ea48:	d8801d05 	stb	r2,116(sp)
   4ea4c:	d8c01d45 	stb	r3,117(sp)
   4ea50:	d8001d85 	stb	zero,118(sp)
   4ea54:	90800094 	ori	r2,r18,2
   4ea58:	80008f16 	blt	r16,zero,4ec98 <___svfiprintf_internal_r+0x1160>
   4ea5c:	00bfdfc4 	movi	r2,-129
   4ea60:	90a4703a 	and	r18,r18,r2
   4ea64:	94800094 	ori	r18,r18,2
   4ea68:	0015883a 	mov	r10,zero
   4ea6c:	003d2906 	br	4df14 <__alt_data_end+0xfffcf714>
   4ea70:	98c00007 	ldb	r3,0(r19)
   4ea74:	003c7f06 	br	4dc74 <__alt_data_end+0xfffcf474>
   4ea78:	dac02317 	ldw	r11,140(sp)
   4ea7c:	0013883a 	mov	r9,zero
   4ea80:	5f000017 	ldw	fp,0(r11)
   4ea84:	5ac00104 	addi	r11,r11,4
   4ea88:	dac02315 	stw	r11,140(sp)
   4ea8c:	003d1506 	br	4dee4 <__alt_data_end+0xfffcf6e4>
   4ea90:	9080100c 	andi	r2,r18,64
   4ea94:	d8001d85 	stb	zero,118(sp)
   4ea98:	dac02317 	ldw	r11,140(sp)
   4ea9c:	10003426 	beq	r2,zero,4eb70 <___svfiprintf_internal_r+0x1038>
   4eaa0:	58800104 	addi	r2,r11,4
   4eaa4:	5f00000b 	ldhu	fp,0(r11)
   4eaa8:	0013883a 	mov	r9,zero
   4eaac:	803e950e 	bge	r16,zero,4e504 <__alt_data_end+0xfffcfd04>
   4eab0:	e246b03a 	or	r3,fp,r9
   4eab4:	d8802315 	stw	r2,140(sp)
   4eab8:	183d5a1e 	bne	r3,zero,4e024 <__alt_data_end+0xfffcf824>
   4eabc:	0015883a 	mov	r10,zero
   4eac0:	0005883a 	mov	r2,zero
   4eac4:	003fb706 	br	4e9a4 <__alt_data_end+0xfffd01a4>
   4eac8:	98c00043 	ldbu	r3,1(r19)
   4eacc:	94800814 	ori	r18,r18,32
   4ead0:	9cc00044 	addi	r19,r19,1
   4ead4:	18c03fcc 	andi	r3,r3,255
   4ead8:	18c0201c 	xori	r3,r3,128
   4eadc:	18ffe004 	addi	r3,r3,-128
   4eae0:	003c6406 	br	4dc74 <__alt_data_end+0xfffcf474>
   4eae4:	d8c02315 	stw	r3,140(sp)
   4eae8:	0015883a 	mov	r10,zero
   4eaec:	003faa06 	br	4e998 <__alt_data_end+0xfffd0198>
   4eaf0:	dac02317 	ldw	r11,140(sp)
   4eaf4:	58800017 	ldw	r2,0(r11)
   4eaf8:	5ac00104 	addi	r11,r11,4
   4eafc:	dac02315 	stw	r11,140(sp)
   4eb00:	dac02517 	ldw	r11,148(sp)
   4eb04:	12c00015 	stw	r11,0(r2)
   4eb08:	003c3206 	br	4dbd4 <__alt_data_end+0xfffcf3d4>
   4eb0c:	01000174 	movhi	r4,5
   4eb10:	21174404 	addi	r4,r4,23824
   4eb14:	d9002915 	stw	r4,164(sp)
   4eb18:	d8c02315 	stw	r3,140(sp)
   4eb1c:	1025883a 	mov	r18,r2
   4eb20:	e244b03a 	or	r2,fp,r9
   4eb24:	103f871e 	bne	r2,zero,4e944 <__alt_data_end+0xfffd0144>
   4eb28:	0015883a 	mov	r10,zero
   4eb2c:	00800084 	movi	r2,2
   4eb30:	003f9c06 	br	4e9a4 <__alt_data_end+0xfffd01a4>
   4eb34:	0039883a 	mov	fp,zero
   4eb38:	003e5f06 	br	4e4b8 <__alt_data_end+0xfffcfcb8>
   4eb3c:	d9801a04 	addi	r6,sp,104
   4eb40:	b80b883a 	mov	r5,r23
   4eb44:	a809883a 	mov	r4,r21
   4eb48:	004d9680 	call	4d968 <__ssprint_r>
   4eb4c:	103f081e 	bne	r2,zero,4e770 <__alt_data_end+0xfffcff70>
   4eb50:	d8c01c17 	ldw	r3,112(sp)
   4eb54:	d8801b17 	ldw	r2,108(sp)
   4eb58:	d811883a 	mov	r8,sp
   4eb5c:	003e9106 	br	4e5a4 <__alt_data_end+0xfffcfda4>
   4eb60:	01000174 	movhi	r4,5
   4eb64:	2117ad04 	addi	r4,r4,24244
   4eb68:	d9002215 	stw	r4,136(sp)
   4eb6c:	003ead06 	br	4e624 <__alt_data_end+0xfffcfe24>
   4eb70:	58800104 	addi	r2,r11,4
   4eb74:	5f000017 	ldw	fp,0(r11)
   4eb78:	0013883a 	mov	r9,zero
   4eb7c:	803e610e 	bge	r16,zero,4e504 <__alt_data_end+0xfffcfd04>
   4eb80:	003fcb06 	br	4eab0 <__alt_data_end+0xfffd02b0>
   4eb84:	58800104 	addi	r2,r11,4
   4eb88:	5f000017 	ldw	fp,0(r11)
   4eb8c:	0013883a 	mov	r9,zero
   4eb90:	803e420e 	bge	r16,zero,4e49c <__alt_data_end+0xfffcfc9c>
   4eb94:	003f7e06 	br	4e990 <__alt_data_end+0xfffd0190>
   4eb98:	5f000017 	ldw	fp,0(r11)
   4eb9c:	5ac00104 	addi	r11,r11,4
   4eba0:	0013883a 	mov	r9,zero
   4eba4:	dac02315 	stw	r11,140(sp)
   4eba8:	003cce06 	br	4dee4 <__alt_data_end+0xfffcf6e4>
   4ebac:	8809883a 	mov	r4,r17
   4ebb0:	da002c15 	stw	r8,176(sp)
   4ebb4:	00440d40 	call	440d4 <strlen>
   4ebb8:	d8802115 	stw	r2,132(sp)
   4ebbc:	da801d83 	ldbu	r10,118(sp)
   4ebc0:	df002315 	stw	fp,140(sp)
   4ebc4:	0021883a 	mov	r16,zero
   4ebc8:	da002c17 	ldw	r8,176(sp)
   4ebcc:	003cf606 	br	4dfa8 <__alt_data_end+0xfffcf7a8>
   4ebd0:	00800184 	movi	r2,6
   4ebd4:	1400012e 	bgeu	r2,r16,4ebdc <___svfiprintf_internal_r+0x10a4>
   4ebd8:	1021883a 	mov	r16,r2
   4ebdc:	dc002115 	stw	r16,132(sp)
   4ebe0:	8005883a 	mov	r2,r16
   4ebe4:	80003c16 	blt	r16,zero,4ecd8 <___svfiprintf_internal_r+0x11a0>
   4ebe8:	04400174 	movhi	r17,5
   4ebec:	d8802015 	stw	r2,128(sp)
   4ebf0:	df002315 	stw	fp,140(sp)
   4ebf4:	8c574904 	addi	r17,r17,23844
   4ebf8:	003d2e06 	br	4e0b4 <__alt_data_end+0xfffcf8b4>
   4ebfc:	04001004 	movi	r16,64
   4ec00:	800b883a 	mov	r5,r16
   4ec04:	004b46c0 	call	4b46c <_malloc_r>
   4ec08:	dac02717 	ldw	r11,156(sp)
   4ec0c:	58800015 	stw	r2,0(r11)
   4ec10:	58800415 	stw	r2,16(r11)
   4ec14:	10004826 	beq	r2,zero,4ed38 <___svfiprintf_internal_r+0x1200>
   4ec18:	dac02717 	ldw	r11,156(sp)
   4ec1c:	5c000515 	stw	r16,20(r11)
   4ec20:	003bd906 	br	4db88 <__alt_data_end+0xfffcf388>
   4ec24:	9080004c 	andi	r2,r18,1
   4ec28:	0015883a 	mov	r10,zero
   4ec2c:	10000626 	beq	r2,zero,4ec48 <___svfiprintf_internal_r+0x1110>
   4ec30:	dac02b17 	ldw	r11,172(sp)
   4ec34:	00800c04 	movi	r2,48
   4ec38:	d88019c5 	stb	r2,103(sp)
   4ec3c:	dac02115 	stw	r11,132(sp)
   4ec40:	dc4019c4 	addi	r17,sp,103
   4ec44:	003cd806 	br	4dfa8 <__alt_data_end+0xfffcf7a8>
   4ec48:	d8002115 	stw	zero,132(sp)
   4ec4c:	dc401a04 	addi	r17,sp,104
   4ec50:	003cd506 	br	4dfa8 <__alt_data_end+0xfffcf7a8>
   4ec54:	01000174 	movhi	r4,5
   4ec58:	2117b104 	addi	r4,r4,24260
   4ec5c:	d9002815 	stw	r4,160(sp)
   4ec60:	003d4306 	br	4e170 <__alt_data_end+0xfffcf970>
   4ec64:	00bfffc4 	movi	r2,-1
   4ec68:	003ec606 	br	4e784 <__alt_data_end+0xfffcff84>
   4ec6c:	00800044 	movi	r2,1
   4ec70:	10803fcc 	andi	r2,r2,255
   4ec74:	00c00044 	movi	r3,1
   4ec78:	10fd8026 	beq	r2,r3,4e27c <__alt_data_end+0xfffcfa7c>
   4ec7c:	00c00084 	movi	r3,2
   4ec80:	10fca426 	beq	r2,r3,4df14 <__alt_data_end+0xfffcf714>
   4ec84:	003ce806 	br	4e028 <__alt_data_end+0xfffcf828>
   4ec88:	01000174 	movhi	r4,5
   4ec8c:	2117b104 	addi	r4,r4,24260
   4ec90:	d9002815 	stw	r4,160(sp)
   4ec94:	003e9906 	br	4e6fc <__alt_data_end+0xfffcfefc>
   4ec98:	1025883a 	mov	r18,r2
   4ec9c:	0015883a 	mov	r10,zero
   4eca0:	00800084 	movi	r2,2
   4eca4:	003ff206 	br	4ec70 <__alt_data_end+0xfffd0470>
   4eca8:	01400174 	movhi	r5,5
   4ecac:	2957ad04 	addi	r5,r5,24244
   4ecb0:	d9402215 	stw	r5,136(sp)
   4ecb4:	003ee206 	br	4e840 <__alt_data_end+0xfffd0040>
   4ecb8:	5827883a 	mov	r19,r11
   4ecbc:	0021883a 	mov	r16,zero
   4ecc0:	003bed06 	br	4dc78 <__alt_data_end+0xfffcf478>
   4ecc4:	dc002115 	stw	r16,132(sp)
   4ecc8:	da801d83 	ldbu	r10,118(sp)
   4eccc:	df002315 	stw	fp,140(sp)
   4ecd0:	0021883a 	mov	r16,zero
   4ecd4:	003cb406 	br	4dfa8 <__alt_data_end+0xfffcf7a8>
   4ecd8:	0005883a 	mov	r2,zero
   4ecdc:	003fc206 	br	4ebe8 <__alt_data_end+0xfffd03e8>
   4ece0:	d8802317 	ldw	r2,140(sp)
   4ece4:	98c00043 	ldbu	r3,1(r19)
   4ece8:	5827883a 	mov	r19,r11
   4ecec:	14000017 	ldw	r16,0(r2)
   4ecf0:	10800104 	addi	r2,r2,4
   4ecf4:	d8802315 	stw	r2,140(sp)
   4ecf8:	803f760e 	bge	r16,zero,4ead4 <__alt_data_end+0xfffd02d4>
   4ecfc:	18c03fcc 	andi	r3,r3,255
   4ed00:	18c0201c 	xori	r3,r3,128
   4ed04:	043fffc4 	movi	r16,-1
   4ed08:	18ffe004 	addi	r3,r3,-128
   4ed0c:	003bd906 	br	4dc74 <__alt_data_end+0xfffcf474>
   4ed10:	d9c01d85 	stb	r7,118(sp)
   4ed14:	003cb606 	br	4dff0 <__alt_data_end+0xfffcf7f0>
   4ed18:	d9c01d85 	stb	r7,118(sp)
   4ed1c:	003d2106 	br	4e1a4 <__alt_data_end+0xfffcf9a4>
   4ed20:	d9c01d85 	stb	r7,118(sp)
   4ed24:	003d8e06 	br	4e360 <__alt_data_end+0xfffcfb60>
   4ed28:	d9c01d85 	stb	r7,118(sp)
   4ed2c:	003db306 	br	4e3fc <__alt_data_end+0xfffcfbfc>
   4ed30:	d9c01d85 	stb	r7,118(sp)
   4ed34:	003c8a06 	br	4df60 <__alt_data_end+0xfffcf760>
   4ed38:	dac02a17 	ldw	r11,168(sp)
   4ed3c:	00800304 	movi	r2,12
   4ed40:	58800015 	stw	r2,0(r11)
   4ed44:	00bfffc4 	movi	r2,-1
   4ed48:	003e8e06 	br	4e784 <__alt_data_end+0xfffcff84>
   4ed4c:	d9c01d85 	stb	r7,118(sp)
   4ed50:	003dc706 	br	4e470 <__alt_data_end+0xfffcfc70>
   4ed54:	d9c01d85 	stb	r7,118(sp)
   4ed58:	003ddf06 	br	4e4d8 <__alt_data_end+0xfffcfcd8>
   4ed5c:	d9c01d85 	stb	r7,118(sp)
   4ed60:	003d3706 	br	4e240 <__alt_data_end+0xfffcfa40>
   4ed64:	d9c01d85 	stb	r7,118(sp)
   4ed68:	003c5406 	br	4debc <__alt_data_end+0xfffcf6bc>
   4ed6c:	d9c01d85 	stb	r7,118(sp)
   4ed70:	003d1d06 	br	4e1e8 <__alt_data_end+0xfffcf9e8>

0004ed74 <__sprint_r.part.0>:
   4ed74:	28801917 	ldw	r2,100(r5)
   4ed78:	defff604 	addi	sp,sp,-40
   4ed7c:	dd400515 	stw	r21,20(sp)
   4ed80:	dfc00915 	stw	ra,36(sp)
   4ed84:	df000815 	stw	fp,32(sp)
   4ed88:	ddc00715 	stw	r23,28(sp)
   4ed8c:	dd800615 	stw	r22,24(sp)
   4ed90:	dd000415 	stw	r20,16(sp)
   4ed94:	dcc00315 	stw	r19,12(sp)
   4ed98:	dc800215 	stw	r18,8(sp)
   4ed9c:	dc400115 	stw	r17,4(sp)
   4eda0:	dc000015 	stw	r16,0(sp)
   4eda4:	1088000c 	andi	r2,r2,8192
   4eda8:	302b883a 	mov	r21,r6
   4edac:	10002e26 	beq	r2,zero,4ee68 <__sprint_r.part.0+0xf4>
   4edb0:	30800217 	ldw	r2,8(r6)
   4edb4:	35800017 	ldw	r22,0(r6)
   4edb8:	10002926 	beq	r2,zero,4ee60 <__sprint_r.part.0+0xec>
   4edbc:	2827883a 	mov	r19,r5
   4edc0:	2029883a 	mov	r20,r4
   4edc4:	b5c00104 	addi	r23,r22,4
   4edc8:	04bfffc4 	movi	r18,-1
   4edcc:	bc400017 	ldw	r17,0(r23)
   4edd0:	b4000017 	ldw	r16,0(r22)
   4edd4:	0039883a 	mov	fp,zero
   4edd8:	8822d0ba 	srli	r17,r17,2
   4eddc:	8800031e 	bne	r17,zero,4edec <__sprint_r.part.0+0x78>
   4ede0:	00001806 	br	4ee44 <__sprint_r.part.0+0xd0>
   4ede4:	84000104 	addi	r16,r16,4
   4ede8:	8f001526 	beq	r17,fp,4ee40 <__sprint_r.part.0+0xcc>
   4edec:	81400017 	ldw	r5,0(r16)
   4edf0:	980d883a 	mov	r6,r19
   4edf4:	a009883a 	mov	r4,r20
   4edf8:	005079c0 	call	5079c <_fputwc_r>
   4edfc:	e7000044 	addi	fp,fp,1
   4ee00:	14bff81e 	bne	r2,r18,4ede4 <__alt_data_end+0xfffd05e4>
   4ee04:	9005883a 	mov	r2,r18
   4ee08:	a8000215 	stw	zero,8(r21)
   4ee0c:	a8000115 	stw	zero,4(r21)
   4ee10:	dfc00917 	ldw	ra,36(sp)
   4ee14:	df000817 	ldw	fp,32(sp)
   4ee18:	ddc00717 	ldw	r23,28(sp)
   4ee1c:	dd800617 	ldw	r22,24(sp)
   4ee20:	dd400517 	ldw	r21,20(sp)
   4ee24:	dd000417 	ldw	r20,16(sp)
   4ee28:	dcc00317 	ldw	r19,12(sp)
   4ee2c:	dc800217 	ldw	r18,8(sp)
   4ee30:	dc400117 	ldw	r17,4(sp)
   4ee34:	dc000017 	ldw	r16,0(sp)
   4ee38:	dec00a04 	addi	sp,sp,40
   4ee3c:	f800283a 	ret
   4ee40:	a8800217 	ldw	r2,8(r21)
   4ee44:	8c63883a 	add	r17,r17,r17
   4ee48:	8c63883a 	add	r17,r17,r17
   4ee4c:	1445c83a 	sub	r2,r2,r17
   4ee50:	a8800215 	stw	r2,8(r21)
   4ee54:	b5800204 	addi	r22,r22,8
   4ee58:	bdc00204 	addi	r23,r23,8
   4ee5c:	103fdb1e 	bne	r2,zero,4edcc <__alt_data_end+0xfffd05cc>
   4ee60:	0005883a 	mov	r2,zero
   4ee64:	003fe806 	br	4ee08 <__alt_data_end+0xfffd0608>
   4ee68:	004ab900 	call	4ab90 <__sfvwrite_r>
   4ee6c:	003fe606 	br	4ee08 <__alt_data_end+0xfffd0608>

0004ee70 <__sprint_r>:
   4ee70:	30c00217 	ldw	r3,8(r6)
   4ee74:	18000126 	beq	r3,zero,4ee7c <__sprint_r+0xc>
   4ee78:	004ed741 	jmpi	4ed74 <__sprint_r.part.0>
   4ee7c:	30000115 	stw	zero,4(r6)
   4ee80:	0005883a 	mov	r2,zero
   4ee84:	f800283a 	ret

0004ee88 <___vfiprintf_internal_r>:
   4ee88:	deffc904 	addi	sp,sp,-220
   4ee8c:	df003515 	stw	fp,212(sp)
   4ee90:	dd003115 	stw	r20,196(sp)
   4ee94:	dfc03615 	stw	ra,216(sp)
   4ee98:	ddc03415 	stw	r23,208(sp)
   4ee9c:	dd803315 	stw	r22,204(sp)
   4eea0:	dd403215 	stw	r21,200(sp)
   4eea4:	dcc03015 	stw	r19,192(sp)
   4eea8:	dc802f15 	stw	r18,188(sp)
   4eeac:	dc402e15 	stw	r17,184(sp)
   4eeb0:	dc002d15 	stw	r16,180(sp)
   4eeb4:	d9002015 	stw	r4,128(sp)
   4eeb8:	d9c02215 	stw	r7,136(sp)
   4eebc:	2829883a 	mov	r20,r5
   4eec0:	3039883a 	mov	fp,r6
   4eec4:	20000226 	beq	r4,zero,4eed0 <___vfiprintf_internal_r+0x48>
   4eec8:	20800e17 	ldw	r2,56(r4)
   4eecc:	1000cf26 	beq	r2,zero,4f20c <___vfiprintf_internal_r+0x384>
   4eed0:	a080030b 	ldhu	r2,12(r20)
   4eed4:	10c8000c 	andi	r3,r2,8192
   4eed8:	1800061e 	bne	r3,zero,4eef4 <___vfiprintf_internal_r+0x6c>
   4eedc:	a1001917 	ldw	r4,100(r20)
   4eee0:	00f7ffc4 	movi	r3,-8193
   4eee4:	10880014 	ori	r2,r2,8192
   4eee8:	20c6703a 	and	r3,r4,r3
   4eeec:	a080030d 	sth	r2,12(r20)
   4eef0:	a0c01915 	stw	r3,100(r20)
   4eef4:	10c0020c 	andi	r3,r2,8
   4eef8:	1800a926 	beq	r3,zero,4f1a0 <___vfiprintf_internal_r+0x318>
   4eefc:	a0c00417 	ldw	r3,16(r20)
   4ef00:	1800a726 	beq	r3,zero,4f1a0 <___vfiprintf_internal_r+0x318>
   4ef04:	1080068c 	andi	r2,r2,26
   4ef08:	00c00284 	movi	r3,10
   4ef0c:	10c0ac26 	beq	r2,r3,4f1c0 <___vfiprintf_internal_r+0x338>
   4ef10:	da801a04 	addi	r10,sp,104
   4ef14:	da801e15 	stw	r10,120(sp)
   4ef18:	d8801e17 	ldw	r2,120(sp)
   4ef1c:	da8019c4 	addi	r10,sp,103
   4ef20:	05800174 	movhi	r22,5
   4ef24:	05c00174 	movhi	r23,5
   4ef28:	da801f15 	stw	r10,124(sp)
   4ef2c:	1295c83a 	sub	r10,r2,r10
   4ef30:	b597b904 	addi	r22,r22,24292
   4ef34:	bdd7b504 	addi	r23,r23,24276
   4ef38:	dec01a15 	stw	sp,104(sp)
   4ef3c:	d8001c15 	stw	zero,112(sp)
   4ef40:	d8001b15 	stw	zero,108(sp)
   4ef44:	d8002615 	stw	zero,152(sp)
   4ef48:	d8002315 	stw	zero,140(sp)
   4ef4c:	da802715 	stw	r10,156(sp)
   4ef50:	d811883a 	mov	r8,sp
   4ef54:	dd002115 	stw	r20,132(sp)
   4ef58:	e021883a 	mov	r16,fp
   4ef5c:	80800007 	ldb	r2,0(r16)
   4ef60:	1003ea26 	beq	r2,zero,4ff0c <___vfiprintf_internal_r+0x1084>
   4ef64:	00c00944 	movi	r3,37
   4ef68:	8025883a 	mov	r18,r16
   4ef6c:	10c0021e 	bne	r2,r3,4ef78 <___vfiprintf_internal_r+0xf0>
   4ef70:	00001606 	br	4efcc <___vfiprintf_internal_r+0x144>
   4ef74:	10c00326 	beq	r2,r3,4ef84 <___vfiprintf_internal_r+0xfc>
   4ef78:	94800044 	addi	r18,r18,1
   4ef7c:	90800007 	ldb	r2,0(r18)
   4ef80:	103ffc1e 	bne	r2,zero,4ef74 <__alt_data_end+0xfffd0774>
   4ef84:	9423c83a 	sub	r17,r18,r16
   4ef88:	88001026 	beq	r17,zero,4efcc <___vfiprintf_internal_r+0x144>
   4ef8c:	d8c01c17 	ldw	r3,112(sp)
   4ef90:	d8801b17 	ldw	r2,108(sp)
   4ef94:	44000015 	stw	r16,0(r8)
   4ef98:	88c7883a 	add	r3,r17,r3
   4ef9c:	10800044 	addi	r2,r2,1
   4efa0:	44400115 	stw	r17,4(r8)
   4efa4:	d8c01c15 	stw	r3,112(sp)
   4efa8:	d8801b15 	stw	r2,108(sp)
   4efac:	010001c4 	movi	r4,7
   4efb0:	2080760e 	bge	r4,r2,4f18c <___vfiprintf_internal_r+0x304>
   4efb4:	1803821e 	bne	r3,zero,4fdc0 <___vfiprintf_internal_r+0xf38>
   4efb8:	da802317 	ldw	r10,140(sp)
   4efbc:	d8001b15 	stw	zero,108(sp)
   4efc0:	d811883a 	mov	r8,sp
   4efc4:	5455883a 	add	r10,r10,r17
   4efc8:	da802315 	stw	r10,140(sp)
   4efcc:	90800007 	ldb	r2,0(r18)
   4efd0:	10044626 	beq	r2,zero,500ec <___vfiprintf_internal_r+0x1264>
   4efd4:	90c00047 	ldb	r3,1(r18)
   4efd8:	94000044 	addi	r16,r18,1
   4efdc:	d8001d85 	stb	zero,118(sp)
   4efe0:	0009883a 	mov	r4,zero
   4efe4:	000f883a 	mov	r7,zero
   4efe8:	027fffc4 	movi	r9,-1
   4efec:	0023883a 	mov	r17,zero
   4eff0:	0029883a 	mov	r20,zero
   4eff4:	01401604 	movi	r5,88
   4eff8:	01800244 	movi	r6,9
   4effc:	03400a84 	movi	r13,42
   4f000:	03001b04 	movi	r12,108
   4f004:	84000044 	addi	r16,r16,1
   4f008:	18bff804 	addi	r2,r3,-32
   4f00c:	28827336 	bltu	r5,r2,4f9dc <___vfiprintf_internal_r+0xb54>
   4f010:	100490ba 	slli	r2,r2,2
   4f014:	02800174 	movhi	r10,5
   4f018:	52bc0a04 	addi	r10,r10,-4056
   4f01c:	1285883a 	add	r2,r2,r10
   4f020:	10800017 	ldw	r2,0(r2)
   4f024:	1000683a 	jmp	r2
   4f028:	0004f710 	cmplti	zero,zero,5084
   4f02c:	0004f9dc 	xori	zero,zero,5095
   4f030:	0004f9dc 	xori	zero,zero,5095
   4f034:	0004f730 	cmpltui	zero,zero,5084
   4f038:	0004f9dc 	xori	zero,zero,5095
   4f03c:	0004f9dc 	xori	zero,zero,5095
   4f040:	0004f9dc 	xori	zero,zero,5095
   4f044:	0004f9dc 	xori	zero,zero,5095
   4f048:	0004f9dc 	xori	zero,zero,5095
   4f04c:	0004f9dc 	xori	zero,zero,5095
   4f050:	0004f918 	cmpnei	zero,zero,5092
   4f054:	0004f934 	movhi	zero,5092
   4f058:	0004f9dc 	xori	zero,zero,5095
   4f05c:	0004f21c 	xori	zero,zero,5064
   4f060:	0004f944 	movi	zero,5093
   4f064:	0004f9dc 	xori	zero,zero,5095
   4f068:	0004f73c 	xorhi	zero,zero,5084
   4f06c:	0004f748 	cmpgei	zero,zero,5085
   4f070:	0004f748 	cmpgei	zero,zero,5085
   4f074:	0004f748 	cmpgei	zero,zero,5085
   4f078:	0004f748 	cmpgei	zero,zero,5085
   4f07c:	0004f748 	cmpgei	zero,zero,5085
   4f080:	0004f748 	cmpgei	zero,zero,5085
   4f084:	0004f748 	cmpgei	zero,zero,5085
   4f088:	0004f748 	cmpgei	zero,zero,5085
   4f08c:	0004f748 	cmpgei	zero,zero,5085
   4f090:	0004f9dc 	xori	zero,zero,5095
   4f094:	0004f9dc 	xori	zero,zero,5095
   4f098:	0004f9dc 	xori	zero,zero,5095
   4f09c:	0004f9dc 	xori	zero,zero,5095
   4f0a0:	0004f9dc 	xori	zero,zero,5095
   4f0a4:	0004f9dc 	xori	zero,zero,5095
   4f0a8:	0004f9dc 	xori	zero,zero,5095
   4f0ac:	0004f9dc 	xori	zero,zero,5095
   4f0b0:	0004f9dc 	xori	zero,zero,5095
   4f0b4:	0004f9dc 	xori	zero,zero,5095
   4f0b8:	0004f774 	movhi	zero,5085
   4f0bc:	0004f9dc 	xori	zero,zero,5095
   4f0c0:	0004f9dc 	xori	zero,zero,5095
   4f0c4:	0004f9dc 	xori	zero,zero,5095
   4f0c8:	0004f9dc 	xori	zero,zero,5095
   4f0cc:	0004f9dc 	xori	zero,zero,5095
   4f0d0:	0004f9dc 	xori	zero,zero,5095
   4f0d4:	0004f9dc 	xori	zero,zero,5095
   4f0d8:	0004f9dc 	xori	zero,zero,5095
   4f0dc:	0004f9dc 	xori	zero,zero,5095
   4f0e0:	0004f9dc 	xori	zero,zero,5095
   4f0e4:	0004f7ac 	andhi	zero,zero,5086
   4f0e8:	0004f9dc 	xori	zero,zero,5095
   4f0ec:	0004f9dc 	xori	zero,zero,5095
   4f0f0:	0004f9dc 	xori	zero,zero,5095
   4f0f4:	0004f9dc 	xori	zero,zero,5095
   4f0f8:	0004f9dc 	xori	zero,zero,5095
   4f0fc:	0004f804 	movi	zero,5088
   4f100:	0004f9dc 	xori	zero,zero,5095
   4f104:	0004f9dc 	xori	zero,zero,5095
   4f108:	0004f874 	movhi	zero,5089
   4f10c:	0004f9dc 	xori	zero,zero,5095
   4f110:	0004f9dc 	xori	zero,zero,5095
   4f114:	0004f9dc 	xori	zero,zero,5095
   4f118:	0004f9dc 	xori	zero,zero,5095
   4f11c:	0004f9dc 	xori	zero,zero,5095
   4f120:	0004f9dc 	xori	zero,zero,5095
   4f124:	0004f9dc 	xori	zero,zero,5095
   4f128:	0004f9dc 	xori	zero,zero,5095
   4f12c:	0004f9dc 	xori	zero,zero,5095
   4f130:	0004f9dc 	xori	zero,zero,5095
   4f134:	0004f620 	cmpeqi	zero,zero,5080
   4f138:	0004f64c 	andi	zero,zero,5081
   4f13c:	0004f9dc 	xori	zero,zero,5095
   4f140:	0004f9dc 	xori	zero,zero,5095
   4f144:	0004f9dc 	xori	zero,zero,5095
   4f148:	0004f984 	movi	zero,5094
   4f14c:	0004f64c 	andi	zero,zero,5081
   4f150:	0004f9dc 	xori	zero,zero,5095
   4f154:	0004f9dc 	xori	zero,zero,5095
   4f158:	0004f4e0 	cmpeqi	zero,zero,5075
   4f15c:	0004f9dc 	xori	zero,zero,5095
   4f160:	0004f4f0 	cmpltui	zero,zero,5075
   4f164:	0004f52c 	andhi	zero,zero,5076
   4f168:	0004f228 	cmpgeui	zero,zero,5064
   4f16c:	0004f4d4 	movui	zero,5075
   4f170:	0004f9dc 	xori	zero,zero,5095
   4f174:	0004f8b0 	cmpltui	zero,zero,5090
   4f178:	0004f9dc 	xori	zero,zero,5095
   4f17c:	0004f908 	cmpgei	zero,zero,5092
   4f180:	0004f9dc 	xori	zero,zero,5095
   4f184:	0004f9dc 	xori	zero,zero,5095
   4f188:	0004f5cc 	andi	zero,zero,5079
   4f18c:	42000204 	addi	r8,r8,8
   4f190:	da802317 	ldw	r10,140(sp)
   4f194:	5455883a 	add	r10,r10,r17
   4f198:	da802315 	stw	r10,140(sp)
   4f19c:	003f8b06 	br	4efcc <__alt_data_end+0xfffd07cc>
   4f1a0:	d9002017 	ldw	r4,128(sp)
   4f1a4:	a00b883a 	mov	r5,r20
   4f1a8:	00487380 	call	48738 <__swsetup_r>
   4f1ac:	1003b11e 	bne	r2,zero,50074 <___vfiprintf_internal_r+0x11ec>
   4f1b0:	a080030b 	ldhu	r2,12(r20)
   4f1b4:	00c00284 	movi	r3,10
   4f1b8:	1080068c 	andi	r2,r2,26
   4f1bc:	10ff541e 	bne	r2,r3,4ef10 <__alt_data_end+0xfffd0710>
   4f1c0:	a080038f 	ldh	r2,14(r20)
   4f1c4:	103f5216 	blt	r2,zero,4ef10 <__alt_data_end+0xfffd0710>
   4f1c8:	d9c02217 	ldw	r7,136(sp)
   4f1cc:	d9002017 	ldw	r4,128(sp)
   4f1d0:	e00d883a 	mov	r6,fp
   4f1d4:	a00b883a 	mov	r5,r20
   4f1d8:	00503000 	call	50300 <__sbprintf>
   4f1dc:	dfc03617 	ldw	ra,216(sp)
   4f1e0:	df003517 	ldw	fp,212(sp)
   4f1e4:	ddc03417 	ldw	r23,208(sp)
   4f1e8:	dd803317 	ldw	r22,204(sp)
   4f1ec:	dd403217 	ldw	r21,200(sp)
   4f1f0:	dd003117 	ldw	r20,196(sp)
   4f1f4:	dcc03017 	ldw	r19,192(sp)
   4f1f8:	dc802f17 	ldw	r18,188(sp)
   4f1fc:	dc402e17 	ldw	r17,184(sp)
   4f200:	dc002d17 	ldw	r16,180(sp)
   4f204:	dec03704 	addi	sp,sp,220
   4f208:	f800283a 	ret
   4f20c:	004a70c0 	call	4a70c <__sinit>
   4f210:	003f2f06 	br	4eed0 <__alt_data_end+0xfffd06d0>
   4f214:	0463c83a 	sub	r17,zero,r17
   4f218:	d8802215 	stw	r2,136(sp)
   4f21c:	a5000114 	ori	r20,r20,4
   4f220:	80c00007 	ldb	r3,0(r16)
   4f224:	003f7706 	br	4f004 <__alt_data_end+0xfffd0804>
   4f228:	00800c04 	movi	r2,48
   4f22c:	da802217 	ldw	r10,136(sp)
   4f230:	d8801d05 	stb	r2,116(sp)
   4f234:	00801e04 	movi	r2,120
   4f238:	d8801d45 	stb	r2,117(sp)
   4f23c:	d8001d85 	stb	zero,118(sp)
   4f240:	50c00104 	addi	r3,r10,4
   4f244:	54800017 	ldw	r18,0(r10)
   4f248:	0027883a 	mov	r19,zero
   4f24c:	a0800094 	ori	r2,r20,2
   4f250:	48030b16 	blt	r9,zero,4fe80 <___vfiprintf_internal_r+0xff8>
   4f254:	00bfdfc4 	movi	r2,-129
   4f258:	a096703a 	and	r11,r20,r2
   4f25c:	d8c02215 	stw	r3,136(sp)
   4f260:	5d000094 	ori	r20,r11,2
   4f264:	90032b1e 	bne	r18,zero,4ff14 <___vfiprintf_internal_r+0x108c>
   4f268:	00800174 	movhi	r2,5
   4f26c:	10974404 	addi	r2,r2,23824
   4f270:	d8802615 	stw	r2,152(sp)
   4f274:	0039883a 	mov	fp,zero
   4f278:	48017b1e 	bne	r9,zero,4f868 <___vfiprintf_internal_r+0x9e0>
   4f27c:	0013883a 	mov	r9,zero
   4f280:	0027883a 	mov	r19,zero
   4f284:	dd401a04 	addi	r21,sp,104
   4f288:	4825883a 	mov	r18,r9
   4f28c:	4cc0010e 	bge	r9,r19,4f294 <___vfiprintf_internal_r+0x40c>
   4f290:	9825883a 	mov	r18,r19
   4f294:	e7003fcc 	andi	fp,fp,255
   4f298:	e700201c 	xori	fp,fp,128
   4f29c:	e73fe004 	addi	fp,fp,-128
   4f2a0:	e0000126 	beq	fp,zero,4f2a8 <___vfiprintf_internal_r+0x420>
   4f2a4:	94800044 	addi	r18,r18,1
   4f2a8:	a380008c 	andi	r14,r20,2
   4f2ac:	70000126 	beq	r14,zero,4f2b4 <___vfiprintf_internal_r+0x42c>
   4f2b0:	94800084 	addi	r18,r18,2
   4f2b4:	a700210c 	andi	fp,r20,132
   4f2b8:	e001df1e 	bne	fp,zero,4fa38 <___vfiprintf_internal_r+0xbb0>
   4f2bc:	8c87c83a 	sub	r3,r17,r18
   4f2c0:	00c1dd0e 	bge	zero,r3,4fa38 <___vfiprintf_internal_r+0xbb0>
   4f2c4:	01c00404 	movi	r7,16
   4f2c8:	d8801c17 	ldw	r2,112(sp)
   4f2cc:	38c3ad0e 	bge	r7,r3,50184 <___vfiprintf_internal_r+0x12fc>
   4f2d0:	02800174 	movhi	r10,5
   4f2d4:	5297b904 	addi	r10,r10,24292
   4f2d8:	dc002915 	stw	r16,164(sp)
   4f2dc:	d9801b17 	ldw	r6,108(sp)
   4f2e0:	da802415 	stw	r10,144(sp)
   4f2e4:	03c001c4 	movi	r15,7
   4f2e8:	da402515 	stw	r9,148(sp)
   4f2ec:	db802815 	stw	r14,160(sp)
   4f2f0:	1821883a 	mov	r16,r3
   4f2f4:	00000506 	br	4f30c <___vfiprintf_internal_r+0x484>
   4f2f8:	31400084 	addi	r5,r6,2
   4f2fc:	42000204 	addi	r8,r8,8
   4f300:	200d883a 	mov	r6,r4
   4f304:	843ffc04 	addi	r16,r16,-16
   4f308:	3c000d0e 	bge	r7,r16,4f340 <___vfiprintf_internal_r+0x4b8>
   4f30c:	10800404 	addi	r2,r2,16
   4f310:	31000044 	addi	r4,r6,1
   4f314:	45800015 	stw	r22,0(r8)
   4f318:	41c00115 	stw	r7,4(r8)
   4f31c:	d8801c15 	stw	r2,112(sp)
   4f320:	d9001b15 	stw	r4,108(sp)
   4f324:	793ff40e 	bge	r15,r4,4f2f8 <__alt_data_end+0xfffd0af8>
   4f328:	1001b51e 	bne	r2,zero,4fa00 <___vfiprintf_internal_r+0xb78>
   4f32c:	843ffc04 	addi	r16,r16,-16
   4f330:	000d883a 	mov	r6,zero
   4f334:	01400044 	movi	r5,1
   4f338:	d811883a 	mov	r8,sp
   4f33c:	3c3ff316 	blt	r7,r16,4f30c <__alt_data_end+0xfffd0b0c>
   4f340:	8007883a 	mov	r3,r16
   4f344:	da402517 	ldw	r9,148(sp)
   4f348:	db802817 	ldw	r14,160(sp)
   4f34c:	dc002917 	ldw	r16,164(sp)
   4f350:	da802417 	ldw	r10,144(sp)
   4f354:	1885883a 	add	r2,r3,r2
   4f358:	40c00115 	stw	r3,4(r8)
   4f35c:	42800015 	stw	r10,0(r8)
   4f360:	d8801c15 	stw	r2,112(sp)
   4f364:	d9401b15 	stw	r5,108(sp)
   4f368:	00c001c4 	movi	r3,7
   4f36c:	19426016 	blt	r3,r5,4fcf0 <___vfiprintf_internal_r+0xe68>
   4f370:	d8c01d87 	ldb	r3,118(sp)
   4f374:	42000204 	addi	r8,r8,8
   4f378:	29000044 	addi	r4,r5,1
   4f37c:	1801b31e 	bne	r3,zero,4fa4c <___vfiprintf_internal_r+0xbc4>
   4f380:	7001c026 	beq	r14,zero,4fa84 <___vfiprintf_internal_r+0xbfc>
   4f384:	d8c01d04 	addi	r3,sp,116
   4f388:	10800084 	addi	r2,r2,2
   4f38c:	40c00015 	stw	r3,0(r8)
   4f390:	00c00084 	movi	r3,2
   4f394:	40c00115 	stw	r3,4(r8)
   4f398:	d8801c15 	stw	r2,112(sp)
   4f39c:	d9001b15 	stw	r4,108(sp)
   4f3a0:	00c001c4 	movi	r3,7
   4f3a4:	1902650e 	bge	r3,r4,4fd3c <___vfiprintf_internal_r+0xeb4>
   4f3a8:	10029a1e 	bne	r2,zero,4fe14 <___vfiprintf_internal_r+0xf8c>
   4f3ac:	00c02004 	movi	r3,128
   4f3b0:	01000044 	movi	r4,1
   4f3b4:	000b883a 	mov	r5,zero
   4f3b8:	d811883a 	mov	r8,sp
   4f3bc:	e0c1b31e 	bne	fp,r3,4fa8c <___vfiprintf_internal_r+0xc04>
   4f3c0:	8cb9c83a 	sub	fp,r17,r18
   4f3c4:	0701b10e 	bge	zero,fp,4fa8c <___vfiprintf_internal_r+0xc04>
   4f3c8:	01c00404 	movi	r7,16
   4f3cc:	3f03890e 	bge	r7,fp,501f4 <___vfiprintf_internal_r+0x136c>
   4f3d0:	00c00174 	movhi	r3,5
   4f3d4:	18d7b504 	addi	r3,r3,24276
   4f3d8:	d8c02415 	stw	r3,144(sp)
   4f3dc:	8007883a 	mov	r3,r16
   4f3e0:	034001c4 	movi	r13,7
   4f3e4:	e021883a 	mov	r16,fp
   4f3e8:	da402515 	stw	r9,148(sp)
   4f3ec:	1839883a 	mov	fp,r3
   4f3f0:	00000506 	br	4f408 <___vfiprintf_internal_r+0x580>
   4f3f4:	29800084 	addi	r6,r5,2
   4f3f8:	42000204 	addi	r8,r8,8
   4f3fc:	180b883a 	mov	r5,r3
   4f400:	843ffc04 	addi	r16,r16,-16
   4f404:	3c000d0e 	bge	r7,r16,4f43c <___vfiprintf_internal_r+0x5b4>
   4f408:	10800404 	addi	r2,r2,16
   4f40c:	28c00044 	addi	r3,r5,1
   4f410:	45c00015 	stw	r23,0(r8)
   4f414:	41c00115 	stw	r7,4(r8)
   4f418:	d8801c15 	stw	r2,112(sp)
   4f41c:	d8c01b15 	stw	r3,108(sp)
   4f420:	68fff40e 	bge	r13,r3,4f3f4 <__alt_data_end+0xfffd0bf4>
   4f424:	1002241e 	bne	r2,zero,4fcb8 <___vfiprintf_internal_r+0xe30>
   4f428:	843ffc04 	addi	r16,r16,-16
   4f42c:	01800044 	movi	r6,1
   4f430:	000b883a 	mov	r5,zero
   4f434:	d811883a 	mov	r8,sp
   4f438:	3c3ff316 	blt	r7,r16,4f408 <__alt_data_end+0xfffd0c08>
   4f43c:	da402517 	ldw	r9,148(sp)
   4f440:	e007883a 	mov	r3,fp
   4f444:	8039883a 	mov	fp,r16
   4f448:	1821883a 	mov	r16,r3
   4f44c:	d8c02417 	ldw	r3,144(sp)
   4f450:	1705883a 	add	r2,r2,fp
   4f454:	47000115 	stw	fp,4(r8)
   4f458:	40c00015 	stw	r3,0(r8)
   4f45c:	d8801c15 	stw	r2,112(sp)
   4f460:	d9801b15 	stw	r6,108(sp)
   4f464:	00c001c4 	movi	r3,7
   4f468:	19827616 	blt	r3,r6,4fe44 <___vfiprintf_internal_r+0xfbc>
   4f46c:	4cf9c83a 	sub	fp,r9,r19
   4f470:	42000204 	addi	r8,r8,8
   4f474:	31000044 	addi	r4,r6,1
   4f478:	300b883a 	mov	r5,r6
   4f47c:	07018516 	blt	zero,fp,4fa94 <___vfiprintf_internal_r+0xc0c>
   4f480:	9885883a 	add	r2,r19,r2
   4f484:	45400015 	stw	r21,0(r8)
   4f488:	44c00115 	stw	r19,4(r8)
   4f48c:	d8801c15 	stw	r2,112(sp)
   4f490:	d9001b15 	stw	r4,108(sp)
   4f494:	00c001c4 	movi	r3,7
   4f498:	1901dd0e 	bge	r3,r4,4fc10 <___vfiprintf_internal_r+0xd88>
   4f49c:	1002401e 	bne	r2,zero,4fda0 <___vfiprintf_internal_r+0xf18>
   4f4a0:	d8001b15 	stw	zero,108(sp)
   4f4a4:	a2c0010c 	andi	r11,r20,4
   4f4a8:	58000226 	beq	r11,zero,4f4b4 <___vfiprintf_internal_r+0x62c>
   4f4ac:	8ca7c83a 	sub	r19,r17,r18
   4f4b0:	04c2f216 	blt	zero,r19,5007c <___vfiprintf_internal_r+0x11f4>
   4f4b4:	8c80010e 	bge	r17,r18,4f4bc <___vfiprintf_internal_r+0x634>
   4f4b8:	9023883a 	mov	r17,r18
   4f4bc:	da802317 	ldw	r10,140(sp)
   4f4c0:	5455883a 	add	r10,r10,r17
   4f4c4:	da802315 	stw	r10,140(sp)
   4f4c8:	d8001b15 	stw	zero,108(sp)
   4f4cc:	d811883a 	mov	r8,sp
   4f4d0:	003ea206 	br	4ef5c <__alt_data_end+0xfffd075c>
   4f4d4:	a5000814 	ori	r20,r20,32
   4f4d8:	80c00007 	ldb	r3,0(r16)
   4f4dc:	003ec906 	br	4f004 <__alt_data_end+0xfffd0804>
   4f4e0:	80c00007 	ldb	r3,0(r16)
   4f4e4:	1b030926 	beq	r3,r12,5010c <___vfiprintf_internal_r+0x1284>
   4f4e8:	a5000414 	ori	r20,r20,16
   4f4ec:	003ec506 	br	4f004 <__alt_data_end+0xfffd0804>
   4f4f0:	21003fcc 	andi	r4,r4,255
   4f4f4:	20035e1e 	bne	r4,zero,50270 <___vfiprintf_internal_r+0x13e8>
   4f4f8:	a080080c 	andi	r2,r20,32
   4f4fc:	1002a526 	beq	r2,zero,4ff94 <___vfiprintf_internal_r+0x110c>
   4f500:	da802217 	ldw	r10,136(sp)
   4f504:	50800017 	ldw	r2,0(r10)
   4f508:	da802317 	ldw	r10,140(sp)
   4f50c:	5007d7fa 	srai	r3,r10,31
   4f510:	da802217 	ldw	r10,136(sp)
   4f514:	10c00115 	stw	r3,4(r2)
   4f518:	52800104 	addi	r10,r10,4
   4f51c:	da802215 	stw	r10,136(sp)
   4f520:	da802317 	ldw	r10,140(sp)
   4f524:	12800015 	stw	r10,0(r2)
   4f528:	003e8c06 	br	4ef5c <__alt_data_end+0xfffd075c>
   4f52c:	21003fcc 	andi	r4,r4,255
   4f530:	2003511e 	bne	r4,zero,50278 <___vfiprintf_internal_r+0x13f0>
   4f534:	a080080c 	andi	r2,r20,32
   4f538:	1000a126 	beq	r2,zero,4f7c0 <___vfiprintf_internal_r+0x938>
   4f53c:	da802217 	ldw	r10,136(sp)
   4f540:	d8001d85 	stb	zero,118(sp)
   4f544:	50800204 	addi	r2,r10,8
   4f548:	54800017 	ldw	r18,0(r10)
   4f54c:	54c00117 	ldw	r19,4(r10)
   4f550:	4802b416 	blt	r9,zero,50024 <___vfiprintf_internal_r+0x119c>
   4f554:	013fdfc4 	movi	r4,-129
   4f558:	94c6b03a 	or	r3,r18,r19
   4f55c:	d8802215 	stw	r2,136(sp)
   4f560:	a128703a 	and	r20,r20,r4
   4f564:	1800a226 	beq	r3,zero,4f7f0 <___vfiprintf_internal_r+0x968>
   4f568:	0039883a 	mov	fp,zero
   4f56c:	dd401a04 	addi	r21,sp,104
   4f570:	9006d0fa 	srli	r3,r18,3
   4f574:	9808977a 	slli	r4,r19,29
   4f578:	9826d0fa 	srli	r19,r19,3
   4f57c:	948001cc 	andi	r18,r18,7
   4f580:	90800c04 	addi	r2,r18,48
   4f584:	ad7fffc4 	addi	r21,r21,-1
   4f588:	20e4b03a 	or	r18,r4,r3
   4f58c:	a8800005 	stb	r2,0(r21)
   4f590:	94c6b03a 	or	r3,r18,r19
   4f594:	183ff61e 	bne	r3,zero,4f570 <__alt_data_end+0xfffd0d70>
   4f598:	a0c0004c 	andi	r3,r20,1
   4f59c:	18005926 	beq	r3,zero,4f704 <___vfiprintf_internal_r+0x87c>
   4f5a0:	10803fcc 	andi	r2,r2,255
   4f5a4:	1080201c 	xori	r2,r2,128
   4f5a8:	10bfe004 	addi	r2,r2,-128
   4f5ac:	00c00c04 	movi	r3,48
   4f5b0:	10c05426 	beq	r2,r3,4f704 <___vfiprintf_internal_r+0x87c>
   4f5b4:	da801e17 	ldw	r10,120(sp)
   4f5b8:	a8bfffc4 	addi	r2,r21,-1
   4f5bc:	a8ffffc5 	stb	r3,-1(r21)
   4f5c0:	50a7c83a 	sub	r19,r10,r2
   4f5c4:	102b883a 	mov	r21,r2
   4f5c8:	003f2f06 	br	4f288 <__alt_data_end+0xfffd0a88>
   4f5cc:	21003fcc 	andi	r4,r4,255
   4f5d0:	2003421e 	bne	r4,zero,502dc <___vfiprintf_internal_r+0x1454>
   4f5d4:	00800174 	movhi	r2,5
   4f5d8:	10974404 	addi	r2,r2,23824
   4f5dc:	d8802615 	stw	r2,152(sp)
   4f5e0:	a080080c 	andi	r2,r20,32
   4f5e4:	1000aa26 	beq	r2,zero,4f890 <___vfiprintf_internal_r+0xa08>
   4f5e8:	da802217 	ldw	r10,136(sp)
   4f5ec:	54800017 	ldw	r18,0(r10)
   4f5f0:	54c00117 	ldw	r19,4(r10)
   4f5f4:	52800204 	addi	r10,r10,8
   4f5f8:	da802215 	stw	r10,136(sp)
   4f5fc:	a080004c 	andi	r2,r20,1
   4f600:	1001d226 	beq	r2,zero,4fd4c <___vfiprintf_internal_r+0xec4>
   4f604:	94c4b03a 	or	r2,r18,r19
   4f608:	1002351e 	bne	r2,zero,4fee0 <___vfiprintf_internal_r+0x1058>
   4f60c:	d8001d85 	stb	zero,118(sp)
   4f610:	48022216 	blt	r9,zero,4fe9c <___vfiprintf_internal_r+0x1014>
   4f614:	00bfdfc4 	movi	r2,-129
   4f618:	a0a8703a 	and	r20,r20,r2
   4f61c:	003f1506 	br	4f274 <__alt_data_end+0xfffd0a74>
   4f620:	da802217 	ldw	r10,136(sp)
   4f624:	04800044 	movi	r18,1
   4f628:	d8001d85 	stb	zero,118(sp)
   4f62c:	50800017 	ldw	r2,0(r10)
   4f630:	52800104 	addi	r10,r10,4
   4f634:	da802215 	stw	r10,136(sp)
   4f638:	d8801005 	stb	r2,64(sp)
   4f63c:	9027883a 	mov	r19,r18
   4f640:	dd401004 	addi	r21,sp,64
   4f644:	0013883a 	mov	r9,zero
   4f648:	003f1706 	br	4f2a8 <__alt_data_end+0xfffd0aa8>
   4f64c:	21003fcc 	andi	r4,r4,255
   4f650:	2003201e 	bne	r4,zero,502d4 <___vfiprintf_internal_r+0x144c>
   4f654:	a080080c 	andi	r2,r20,32
   4f658:	10004b26 	beq	r2,zero,4f788 <___vfiprintf_internal_r+0x900>
   4f65c:	da802217 	ldw	r10,136(sp)
   4f660:	50800117 	ldw	r2,4(r10)
   4f664:	54800017 	ldw	r18,0(r10)
   4f668:	52800204 	addi	r10,r10,8
   4f66c:	da802215 	stw	r10,136(sp)
   4f670:	1027883a 	mov	r19,r2
   4f674:	10022c16 	blt	r2,zero,4ff28 <___vfiprintf_internal_r+0x10a0>
   4f678:	df001d83 	ldbu	fp,118(sp)
   4f67c:	48007216 	blt	r9,zero,4f848 <___vfiprintf_internal_r+0x9c0>
   4f680:	00ffdfc4 	movi	r3,-129
   4f684:	94c4b03a 	or	r2,r18,r19
   4f688:	a0e8703a 	and	r20,r20,r3
   4f68c:	1000cc26 	beq	r2,zero,4f9c0 <___vfiprintf_internal_r+0xb38>
   4f690:	98021026 	beq	r19,zero,4fed4 <___vfiprintf_internal_r+0x104c>
   4f694:	dc402415 	stw	r17,144(sp)
   4f698:	dc002515 	stw	r16,148(sp)
   4f69c:	9823883a 	mov	r17,r19
   4f6a0:	9021883a 	mov	r16,r18
   4f6a4:	dd401a04 	addi	r21,sp,104
   4f6a8:	4825883a 	mov	r18,r9
   4f6ac:	4027883a 	mov	r19,r8
   4f6b0:	8009883a 	mov	r4,r16
   4f6b4:	880b883a 	mov	r5,r17
   4f6b8:	01800284 	movi	r6,10
   4f6bc:	000f883a 	mov	r7,zero
   4f6c0:	00512680 	call	51268 <__umoddi3>
   4f6c4:	10800c04 	addi	r2,r2,48
   4f6c8:	ad7fffc4 	addi	r21,r21,-1
   4f6cc:	8009883a 	mov	r4,r16
   4f6d0:	880b883a 	mov	r5,r17
   4f6d4:	a8800005 	stb	r2,0(r21)
   4f6d8:	01800284 	movi	r6,10
   4f6dc:	000f883a 	mov	r7,zero
   4f6e0:	0050cf00 	call	50cf0 <__udivdi3>
   4f6e4:	1021883a 	mov	r16,r2
   4f6e8:	10c4b03a 	or	r2,r2,r3
   4f6ec:	1823883a 	mov	r17,r3
   4f6f0:	103fef1e 	bne	r2,zero,4f6b0 <__alt_data_end+0xfffd0eb0>
   4f6f4:	dc402417 	ldw	r17,144(sp)
   4f6f8:	dc002517 	ldw	r16,148(sp)
   4f6fc:	9013883a 	mov	r9,r18
   4f700:	9811883a 	mov	r8,r19
   4f704:	da801e17 	ldw	r10,120(sp)
   4f708:	5567c83a 	sub	r19,r10,r21
   4f70c:	003ede06 	br	4f288 <__alt_data_end+0xfffd0a88>
   4f710:	38803fcc 	andi	r2,r7,255
   4f714:	1080201c 	xori	r2,r2,128
   4f718:	10bfe004 	addi	r2,r2,-128
   4f71c:	1002371e 	bne	r2,zero,4fffc <___vfiprintf_internal_r+0x1174>
   4f720:	01000044 	movi	r4,1
   4f724:	01c00804 	movi	r7,32
   4f728:	80c00007 	ldb	r3,0(r16)
   4f72c:	003e3506 	br	4f004 <__alt_data_end+0xfffd0804>
   4f730:	a5000054 	ori	r20,r20,1
   4f734:	80c00007 	ldb	r3,0(r16)
   4f738:	003e3206 	br	4f004 <__alt_data_end+0xfffd0804>
   4f73c:	a5002014 	ori	r20,r20,128
   4f740:	80c00007 	ldb	r3,0(r16)
   4f744:	003e2f06 	br	4f004 <__alt_data_end+0xfffd0804>
   4f748:	8015883a 	mov	r10,r16
   4f74c:	0023883a 	mov	r17,zero
   4f750:	18bff404 	addi	r2,r3,-48
   4f754:	50c00007 	ldb	r3,0(r10)
   4f758:	8c4002a4 	muli	r17,r17,10
   4f75c:	84000044 	addi	r16,r16,1
   4f760:	8015883a 	mov	r10,r16
   4f764:	1463883a 	add	r17,r2,r17
   4f768:	18bff404 	addi	r2,r3,-48
   4f76c:	30bff92e 	bgeu	r6,r2,4f754 <__alt_data_end+0xfffd0f54>
   4f770:	003e2506 	br	4f008 <__alt_data_end+0xfffd0808>
   4f774:	21003fcc 	andi	r4,r4,255
   4f778:	2002d41e 	bne	r4,zero,502cc <___vfiprintf_internal_r+0x1444>
   4f77c:	a5000414 	ori	r20,r20,16
   4f780:	a080080c 	andi	r2,r20,32
   4f784:	103fb51e 	bne	r2,zero,4f65c <__alt_data_end+0xfffd0e5c>
   4f788:	a080040c 	andi	r2,r20,16
   4f78c:	1001f826 	beq	r2,zero,4ff70 <___vfiprintf_internal_r+0x10e8>
   4f790:	da802217 	ldw	r10,136(sp)
   4f794:	54800017 	ldw	r18,0(r10)
   4f798:	52800104 	addi	r10,r10,4
   4f79c:	da802215 	stw	r10,136(sp)
   4f7a0:	9027d7fa 	srai	r19,r18,31
   4f7a4:	9805883a 	mov	r2,r19
   4f7a8:	003fb206 	br	4f674 <__alt_data_end+0xfffd0e74>
   4f7ac:	21003fcc 	andi	r4,r4,255
   4f7b0:	2002c41e 	bne	r4,zero,502c4 <___vfiprintf_internal_r+0x143c>
   4f7b4:	a5000414 	ori	r20,r20,16
   4f7b8:	a080080c 	andi	r2,r20,32
   4f7bc:	103f5f1e 	bne	r2,zero,4f53c <__alt_data_end+0xfffd0d3c>
   4f7c0:	a080040c 	andi	r2,r20,16
   4f7c4:	10020f26 	beq	r2,zero,50004 <___vfiprintf_internal_r+0x117c>
   4f7c8:	da802217 	ldw	r10,136(sp)
   4f7cc:	d8001d85 	stb	zero,118(sp)
   4f7d0:	0027883a 	mov	r19,zero
   4f7d4:	50800104 	addi	r2,r10,4
   4f7d8:	54800017 	ldw	r18,0(r10)
   4f7dc:	48021116 	blt	r9,zero,50024 <___vfiprintf_internal_r+0x119c>
   4f7e0:	00ffdfc4 	movi	r3,-129
   4f7e4:	d8802215 	stw	r2,136(sp)
   4f7e8:	a0e8703a 	and	r20,r20,r3
   4f7ec:	903f5e1e 	bne	r18,zero,4f568 <__alt_data_end+0xfffd0d68>
   4f7f0:	0039883a 	mov	fp,zero
   4f7f4:	4802a626 	beq	r9,zero,50290 <___vfiprintf_internal_r+0x1408>
   4f7f8:	0025883a 	mov	r18,zero
   4f7fc:	0027883a 	mov	r19,zero
   4f800:	003f5a06 	br	4f56c <__alt_data_end+0xfffd0d6c>
   4f804:	21003fcc 	andi	r4,r4,255
   4f808:	20029f1e 	bne	r4,zero,50288 <___vfiprintf_internal_r+0x1400>
   4f80c:	a5000414 	ori	r20,r20,16
   4f810:	a080080c 	andi	r2,r20,32
   4f814:	10005e1e 	bne	r2,zero,4f990 <___vfiprintf_internal_r+0xb08>
   4f818:	a080040c 	andi	r2,r20,16
   4f81c:	1001a21e 	bne	r2,zero,4fea8 <___vfiprintf_internal_r+0x1020>
   4f820:	a080100c 	andi	r2,r20,64
   4f824:	d8001d85 	stb	zero,118(sp)
   4f828:	da802217 	ldw	r10,136(sp)
   4f82c:	1002231e 	bne	r2,zero,500bc <___vfiprintf_internal_r+0x1234>
   4f830:	50800104 	addi	r2,r10,4
   4f834:	54800017 	ldw	r18,0(r10)
   4f838:	0027883a 	mov	r19,zero
   4f83c:	4801a00e 	bge	r9,zero,4fec0 <___vfiprintf_internal_r+0x1038>
   4f840:	d8802215 	stw	r2,136(sp)
   4f844:	0039883a 	mov	fp,zero
   4f848:	94c4b03a 	or	r2,r18,r19
   4f84c:	103f901e 	bne	r2,zero,4f690 <__alt_data_end+0xfffd0e90>
   4f850:	00800044 	movi	r2,1
   4f854:	10803fcc 	andi	r2,r2,255
   4f858:	00c00044 	movi	r3,1
   4f85c:	10c05926 	beq	r2,r3,4f9c4 <___vfiprintf_internal_r+0xb3c>
   4f860:	00c00084 	movi	r3,2
   4f864:	10ffe41e 	bne	r2,r3,4f7f8 <__alt_data_end+0xfffd0ff8>
   4f868:	0025883a 	mov	r18,zero
   4f86c:	0027883a 	mov	r19,zero
   4f870:	00013d06 	br	4fd68 <___vfiprintf_internal_r+0xee0>
   4f874:	21003fcc 	andi	r4,r4,255
   4f878:	2002811e 	bne	r4,zero,50280 <___vfiprintf_internal_r+0x13f8>
   4f87c:	00800174 	movhi	r2,5
   4f880:	10973f04 	addi	r2,r2,23804
   4f884:	d8802615 	stw	r2,152(sp)
   4f888:	a080080c 	andi	r2,r20,32
   4f88c:	103f561e 	bne	r2,zero,4f5e8 <__alt_data_end+0xfffd0de8>
   4f890:	a080040c 	andi	r2,r20,16
   4f894:	1001d126 	beq	r2,zero,4ffdc <___vfiprintf_internal_r+0x1154>
   4f898:	da802217 	ldw	r10,136(sp)
   4f89c:	0027883a 	mov	r19,zero
   4f8a0:	54800017 	ldw	r18,0(r10)
   4f8a4:	52800104 	addi	r10,r10,4
   4f8a8:	da802215 	stw	r10,136(sp)
   4f8ac:	003f5306 	br	4f5fc <__alt_data_end+0xfffd0dfc>
   4f8b0:	da802217 	ldw	r10,136(sp)
   4f8b4:	d8001d85 	stb	zero,118(sp)
   4f8b8:	55400017 	ldw	r21,0(r10)
   4f8bc:	50c00104 	addi	r3,r10,4
   4f8c0:	a8024226 	beq	r21,zero,501cc <___vfiprintf_internal_r+0x1344>
   4f8c4:	48021816 	blt	r9,zero,50128 <___vfiprintf_internal_r+0x12a0>
   4f8c8:	480d883a 	mov	r6,r9
   4f8cc:	000b883a 	mov	r5,zero
   4f8d0:	a809883a 	mov	r4,r21
   4f8d4:	d8c02a15 	stw	r3,168(sp)
   4f8d8:	da002b15 	stw	r8,172(sp)
   4f8dc:	da402c15 	stw	r9,176(sp)
   4f8e0:	004bc780 	call	4bc78 <memchr>
   4f8e4:	d8c02a17 	ldw	r3,168(sp)
   4f8e8:	da002b17 	ldw	r8,172(sp)
   4f8ec:	da402c17 	ldw	r9,176(sp)
   4f8f0:	10024826 	beq	r2,zero,50214 <___vfiprintf_internal_r+0x138c>
   4f8f4:	1567c83a 	sub	r19,r2,r21
   4f8f8:	df001d83 	ldbu	fp,118(sp)
   4f8fc:	d8c02215 	stw	r3,136(sp)
   4f900:	0013883a 	mov	r9,zero
   4f904:	003e6006 	br	4f288 <__alt_data_end+0xfffd0a88>
   4f908:	21003fcc 	andi	r4,r4,255
   4f90c:	203fc026 	beq	r4,zero,4f810 <__alt_data_end+0xfffd1010>
   4f910:	d9c01d85 	stb	r7,118(sp)
   4f914:	003fbe06 	br	4f810 <__alt_data_end+0xfffd1010>
   4f918:	da802217 	ldw	r10,136(sp)
   4f91c:	54400017 	ldw	r17,0(r10)
   4f920:	50800104 	addi	r2,r10,4
   4f924:	883e3b16 	blt	r17,zero,4f214 <__alt_data_end+0xfffd0a14>
   4f928:	d8802215 	stw	r2,136(sp)
   4f92c:	80c00007 	ldb	r3,0(r16)
   4f930:	003db406 	br	4f004 <__alt_data_end+0xfffd0804>
   4f934:	01000044 	movi	r4,1
   4f938:	01c00ac4 	movi	r7,43
   4f93c:	80c00007 	ldb	r3,0(r16)
   4f940:	003db006 	br	4f004 <__alt_data_end+0xfffd0804>
   4f944:	80c00007 	ldb	r3,0(r16)
   4f948:	82800044 	addi	r10,r16,1
   4f94c:	1b423c26 	beq	r3,r13,50240 <___vfiprintf_internal_r+0x13b8>
   4f950:	18bff404 	addi	r2,r3,-48
   4f954:	0013883a 	mov	r9,zero
   4f958:	30822b36 	bltu	r6,r2,50208 <___vfiprintf_internal_r+0x1380>
   4f95c:	50c00007 	ldb	r3,0(r10)
   4f960:	4a4002a4 	muli	r9,r9,10
   4f964:	54000044 	addi	r16,r10,1
   4f968:	8015883a 	mov	r10,r16
   4f96c:	4893883a 	add	r9,r9,r2
   4f970:	18bff404 	addi	r2,r3,-48
   4f974:	30bff92e 	bgeu	r6,r2,4f95c <__alt_data_end+0xfffd115c>
   4f978:	483da30e 	bge	r9,zero,4f008 <__alt_data_end+0xfffd0808>
   4f97c:	027fffc4 	movi	r9,-1
   4f980:	003da106 	br	4f008 <__alt_data_end+0xfffd0808>
   4f984:	a5001014 	ori	r20,r20,64
   4f988:	80c00007 	ldb	r3,0(r16)
   4f98c:	003d9d06 	br	4f004 <__alt_data_end+0xfffd0804>
   4f990:	da802217 	ldw	r10,136(sp)
   4f994:	d8001d85 	stb	zero,118(sp)
   4f998:	50c00204 	addi	r3,r10,8
   4f99c:	54800017 	ldw	r18,0(r10)
   4f9a0:	54c00117 	ldw	r19,4(r10)
   4f9a4:	4801ca16 	blt	r9,zero,500d0 <___vfiprintf_internal_r+0x1248>
   4f9a8:	013fdfc4 	movi	r4,-129
   4f9ac:	94c4b03a 	or	r2,r18,r19
   4f9b0:	d8c02215 	stw	r3,136(sp)
   4f9b4:	a128703a 	and	r20,r20,r4
   4f9b8:	0039883a 	mov	fp,zero
   4f9bc:	103f341e 	bne	r2,zero,4f690 <__alt_data_end+0xfffd0e90>
   4f9c0:	483e2e26 	beq	r9,zero,4f27c <__alt_data_end+0xfffd0a7c>
   4f9c4:	0025883a 	mov	r18,zero
   4f9c8:	94800c04 	addi	r18,r18,48
   4f9cc:	dc8019c5 	stb	r18,103(sp)
   4f9d0:	dcc02717 	ldw	r19,156(sp)
   4f9d4:	dd4019c4 	addi	r21,sp,103
   4f9d8:	003e2b06 	br	4f288 <__alt_data_end+0xfffd0a88>
   4f9dc:	21003fcc 	andi	r4,r4,255
   4f9e0:	2002361e 	bne	r4,zero,502bc <___vfiprintf_internal_r+0x1434>
   4f9e4:	1801c126 	beq	r3,zero,500ec <___vfiprintf_internal_r+0x1264>
   4f9e8:	04800044 	movi	r18,1
   4f9ec:	d8c01005 	stb	r3,64(sp)
   4f9f0:	d8001d85 	stb	zero,118(sp)
   4f9f4:	9027883a 	mov	r19,r18
   4f9f8:	dd401004 	addi	r21,sp,64
   4f9fc:	003f1106 	br	4f644 <__alt_data_end+0xfffd0e44>
   4fa00:	d9402117 	ldw	r5,132(sp)
   4fa04:	d9002017 	ldw	r4,128(sp)
   4fa08:	d9801a04 	addi	r6,sp,104
   4fa0c:	d9c02b15 	stw	r7,172(sp)
   4fa10:	dbc02a15 	stw	r15,168(sp)
   4fa14:	004ed740 	call	4ed74 <__sprint_r.part.0>
   4fa18:	d9c02b17 	ldw	r7,172(sp)
   4fa1c:	dbc02a17 	ldw	r15,168(sp)
   4fa20:	10006d1e 	bne	r2,zero,4fbd8 <___vfiprintf_internal_r+0xd50>
   4fa24:	d9801b17 	ldw	r6,108(sp)
   4fa28:	d8801c17 	ldw	r2,112(sp)
   4fa2c:	d811883a 	mov	r8,sp
   4fa30:	31400044 	addi	r5,r6,1
   4fa34:	003e3306 	br	4f304 <__alt_data_end+0xfffd0b04>
   4fa38:	d9401b17 	ldw	r5,108(sp)
   4fa3c:	d8801c17 	ldw	r2,112(sp)
   4fa40:	29000044 	addi	r4,r5,1
   4fa44:	d8c01d87 	ldb	r3,118(sp)
   4fa48:	183e4d26 	beq	r3,zero,4f380 <__alt_data_end+0xfffd0b80>
   4fa4c:	00c00044 	movi	r3,1
   4fa50:	d9401d84 	addi	r5,sp,118
   4fa54:	10c5883a 	add	r2,r2,r3
   4fa58:	41400015 	stw	r5,0(r8)
   4fa5c:	40c00115 	stw	r3,4(r8)
   4fa60:	d8801c15 	stw	r2,112(sp)
   4fa64:	d9001b15 	stw	r4,108(sp)
   4fa68:	014001c4 	movi	r5,7
   4fa6c:	2900a90e 	bge	r5,r4,4fd14 <___vfiprintf_internal_r+0xe8c>
   4fa70:	1000da1e 	bne	r2,zero,4fddc <___vfiprintf_internal_r+0xf54>
   4fa74:	7000ab1e 	bne	r14,zero,4fd24 <___vfiprintf_internal_r+0xe9c>
   4fa78:	000b883a 	mov	r5,zero
   4fa7c:	1809883a 	mov	r4,r3
   4fa80:	d811883a 	mov	r8,sp
   4fa84:	00c02004 	movi	r3,128
   4fa88:	e0fe4d26 	beq	fp,r3,4f3c0 <__alt_data_end+0xfffd0bc0>
   4fa8c:	4cf9c83a 	sub	fp,r9,r19
   4fa90:	073e7b0e 	bge	zero,fp,4f480 <__alt_data_end+0xfffd0c80>
   4fa94:	01c00404 	movi	r7,16
   4fa98:	3f01900e 	bge	r7,fp,500dc <___vfiprintf_internal_r+0x1254>
   4fa9c:	00c00174 	movhi	r3,5
   4faa0:	18d7b504 	addi	r3,r3,24276
   4faa4:	d8c02415 	stw	r3,144(sp)
   4faa8:	034001c4 	movi	r13,7
   4faac:	00000506 	br	4fac4 <___vfiprintf_internal_r+0xc3c>
   4fab0:	29000084 	addi	r4,r5,2
   4fab4:	42000204 	addi	r8,r8,8
   4fab8:	180b883a 	mov	r5,r3
   4fabc:	e73ffc04 	addi	fp,fp,-16
   4fac0:	3f000d0e 	bge	r7,fp,4faf8 <___vfiprintf_internal_r+0xc70>
   4fac4:	10800404 	addi	r2,r2,16
   4fac8:	28c00044 	addi	r3,r5,1
   4facc:	45c00015 	stw	r23,0(r8)
   4fad0:	41c00115 	stw	r7,4(r8)
   4fad4:	d8801c15 	stw	r2,112(sp)
   4fad8:	d8c01b15 	stw	r3,108(sp)
   4fadc:	68fff40e 	bge	r13,r3,4fab0 <__alt_data_end+0xfffd12b0>
   4fae0:	1000101e 	bne	r2,zero,4fb24 <___vfiprintf_internal_r+0xc9c>
   4fae4:	e73ffc04 	addi	fp,fp,-16
   4fae8:	01000044 	movi	r4,1
   4faec:	000b883a 	mov	r5,zero
   4faf0:	d811883a 	mov	r8,sp
   4faf4:	3f3ff316 	blt	r7,fp,4fac4 <__alt_data_end+0xfffd12c4>
   4faf8:	da802417 	ldw	r10,144(sp)
   4fafc:	1705883a 	add	r2,r2,fp
   4fb00:	47000115 	stw	fp,4(r8)
   4fb04:	42800015 	stw	r10,0(r8)
   4fb08:	d8801c15 	stw	r2,112(sp)
   4fb0c:	d9001b15 	stw	r4,108(sp)
   4fb10:	00c001c4 	movi	r3,7
   4fb14:	19003616 	blt	r3,r4,4fbf0 <___vfiprintf_internal_r+0xd68>
   4fb18:	42000204 	addi	r8,r8,8
   4fb1c:	21000044 	addi	r4,r4,1
   4fb20:	003e5706 	br	4f480 <__alt_data_end+0xfffd0c80>
   4fb24:	d9402117 	ldw	r5,132(sp)
   4fb28:	d9002017 	ldw	r4,128(sp)
   4fb2c:	d9801a04 	addi	r6,sp,104
   4fb30:	d9c02b15 	stw	r7,172(sp)
   4fb34:	db402a15 	stw	r13,168(sp)
   4fb38:	004ed740 	call	4ed74 <__sprint_r.part.0>
   4fb3c:	d9c02b17 	ldw	r7,172(sp)
   4fb40:	db402a17 	ldw	r13,168(sp)
   4fb44:	1000241e 	bne	r2,zero,4fbd8 <___vfiprintf_internal_r+0xd50>
   4fb48:	d9401b17 	ldw	r5,108(sp)
   4fb4c:	d8801c17 	ldw	r2,112(sp)
   4fb50:	d811883a 	mov	r8,sp
   4fb54:	29000044 	addi	r4,r5,1
   4fb58:	003fd806 	br	4fabc <__alt_data_end+0xfffd12bc>
   4fb5c:	d9401b17 	ldw	r5,108(sp)
   4fb60:	00c00174 	movhi	r3,5
   4fb64:	18d7b904 	addi	r3,r3,24292
   4fb68:	d8c02415 	stw	r3,144(sp)
   4fb6c:	29400044 	addi	r5,r5,1
   4fb70:	d8c02417 	ldw	r3,144(sp)
   4fb74:	14c5883a 	add	r2,r2,r19
   4fb78:	44c00115 	stw	r19,4(r8)
   4fb7c:	40c00015 	stw	r3,0(r8)
   4fb80:	d8801c15 	stw	r2,112(sp)
   4fb84:	d9401b15 	stw	r5,108(sp)
   4fb88:	00c001c4 	movi	r3,7
   4fb8c:	1940070e 	bge	r3,r5,4fbac <___vfiprintf_internal_r+0xd24>
   4fb90:	103e4826 	beq	r2,zero,4f4b4 <__alt_data_end+0xfffd0cb4>
   4fb94:	d9402117 	ldw	r5,132(sp)
   4fb98:	d9002017 	ldw	r4,128(sp)
   4fb9c:	d9801a04 	addi	r6,sp,104
   4fba0:	004ed740 	call	4ed74 <__sprint_r.part.0>
   4fba4:	10000c1e 	bne	r2,zero,4fbd8 <___vfiprintf_internal_r+0xd50>
   4fba8:	d8801c17 	ldw	r2,112(sp)
   4fbac:	8c80010e 	bge	r17,r18,4fbb4 <___vfiprintf_internal_r+0xd2c>
   4fbb0:	9023883a 	mov	r17,r18
   4fbb4:	da802317 	ldw	r10,140(sp)
   4fbb8:	5455883a 	add	r10,r10,r17
   4fbbc:	da802315 	stw	r10,140(sp)
   4fbc0:	103e4126 	beq	r2,zero,4f4c8 <__alt_data_end+0xfffd0cc8>
   4fbc4:	d9402117 	ldw	r5,132(sp)
   4fbc8:	d9002017 	ldw	r4,128(sp)
   4fbcc:	d9801a04 	addi	r6,sp,104
   4fbd0:	004ed740 	call	4ed74 <__sprint_r.part.0>
   4fbd4:	103e3c26 	beq	r2,zero,4f4c8 <__alt_data_end+0xfffd0cc8>
   4fbd8:	dd002117 	ldw	r20,132(sp)
   4fbdc:	a080030b 	ldhu	r2,12(r20)
   4fbe0:	1080100c 	andi	r2,r2,64
   4fbe4:	1001231e 	bne	r2,zero,50074 <___vfiprintf_internal_r+0x11ec>
   4fbe8:	d8802317 	ldw	r2,140(sp)
   4fbec:	003d7b06 	br	4f1dc <__alt_data_end+0xfffd09dc>
   4fbf0:	1000991e 	bne	r2,zero,4fe58 <___vfiprintf_internal_r+0xfd0>
   4fbf4:	00c00044 	movi	r3,1
   4fbf8:	9805883a 	mov	r2,r19
   4fbfc:	dd400015 	stw	r21,0(sp)
   4fc00:	dcc00115 	stw	r19,4(sp)
   4fc04:	dcc01c15 	stw	r19,112(sp)
   4fc08:	d8c01b15 	stw	r3,108(sp)
   4fc0c:	d811883a 	mov	r8,sp
   4fc10:	42000204 	addi	r8,r8,8
   4fc14:	a2c0010c 	andi	r11,r20,4
   4fc18:	583fe426 	beq	r11,zero,4fbac <__alt_data_end+0xfffd13ac>
   4fc1c:	8ca7c83a 	sub	r19,r17,r18
   4fc20:	04ffe20e 	bge	zero,r19,4fbac <__alt_data_end+0xfffd13ac>
   4fc24:	01c00404 	movi	r7,16
   4fc28:	3cffcc0e 	bge	r7,r19,4fb5c <__alt_data_end+0xfffd135c>
   4fc2c:	02800174 	movhi	r10,5
   4fc30:	5297b904 	addi	r10,r10,24292
   4fc34:	d9001b17 	ldw	r4,108(sp)
   4fc38:	da802415 	stw	r10,144(sp)
   4fc3c:	382b883a 	mov	r21,r7
   4fc40:	050001c4 	movi	r20,7
   4fc44:	df002017 	ldw	fp,128(sp)
   4fc48:	00000506 	br	4fc60 <___vfiprintf_internal_r+0xdd8>
   4fc4c:	21400084 	addi	r5,r4,2
   4fc50:	42000204 	addi	r8,r8,8
   4fc54:	1809883a 	mov	r4,r3
   4fc58:	9cfffc04 	addi	r19,r19,-16
   4fc5c:	acffc40e 	bge	r21,r19,4fb70 <__alt_data_end+0xfffd1370>
   4fc60:	10800404 	addi	r2,r2,16
   4fc64:	20c00044 	addi	r3,r4,1
   4fc68:	45800015 	stw	r22,0(r8)
   4fc6c:	45400115 	stw	r21,4(r8)
   4fc70:	d8801c15 	stw	r2,112(sp)
   4fc74:	d8c01b15 	stw	r3,108(sp)
   4fc78:	a0fff40e 	bge	r20,r3,4fc4c <__alt_data_end+0xfffd144c>
   4fc7c:	1000041e 	bne	r2,zero,4fc90 <___vfiprintf_internal_r+0xe08>
   4fc80:	01400044 	movi	r5,1
   4fc84:	0009883a 	mov	r4,zero
   4fc88:	d811883a 	mov	r8,sp
   4fc8c:	003ff206 	br	4fc58 <__alt_data_end+0xfffd1458>
   4fc90:	d9402117 	ldw	r5,132(sp)
   4fc94:	d9801a04 	addi	r6,sp,104
   4fc98:	e009883a 	mov	r4,fp
   4fc9c:	004ed740 	call	4ed74 <__sprint_r.part.0>
   4fca0:	103fcd1e 	bne	r2,zero,4fbd8 <__alt_data_end+0xfffd13d8>
   4fca4:	d9001b17 	ldw	r4,108(sp)
   4fca8:	d8801c17 	ldw	r2,112(sp)
   4fcac:	d811883a 	mov	r8,sp
   4fcb0:	21400044 	addi	r5,r4,1
   4fcb4:	003fe806 	br	4fc58 <__alt_data_end+0xfffd1458>
   4fcb8:	d9402117 	ldw	r5,132(sp)
   4fcbc:	d9002017 	ldw	r4,128(sp)
   4fcc0:	d9801a04 	addi	r6,sp,104
   4fcc4:	d9c02b15 	stw	r7,172(sp)
   4fcc8:	db402a15 	stw	r13,168(sp)
   4fccc:	004ed740 	call	4ed74 <__sprint_r.part.0>
   4fcd0:	d9c02b17 	ldw	r7,172(sp)
   4fcd4:	db402a17 	ldw	r13,168(sp)
   4fcd8:	103fbf1e 	bne	r2,zero,4fbd8 <__alt_data_end+0xfffd13d8>
   4fcdc:	d9401b17 	ldw	r5,108(sp)
   4fce0:	d8801c17 	ldw	r2,112(sp)
   4fce4:	d811883a 	mov	r8,sp
   4fce8:	29800044 	addi	r6,r5,1
   4fcec:	003dc406 	br	4f400 <__alt_data_end+0xfffd0c00>
   4fcf0:	1000d21e 	bne	r2,zero,5003c <___vfiprintf_internal_r+0x11b4>
   4fcf4:	d8c01d87 	ldb	r3,118(sp)
   4fcf8:	18009526 	beq	r3,zero,4ff50 <___vfiprintf_internal_r+0x10c8>
   4fcfc:	00800044 	movi	r2,1
   4fd00:	d8c01d84 	addi	r3,sp,118
   4fd04:	1009883a 	mov	r4,r2
   4fd08:	d8c00015 	stw	r3,0(sp)
   4fd0c:	d8800115 	stw	r2,4(sp)
   4fd10:	d811883a 	mov	r8,sp
   4fd14:	200b883a 	mov	r5,r4
   4fd18:	42000204 	addi	r8,r8,8
   4fd1c:	21000044 	addi	r4,r4,1
   4fd20:	003d9706 	br	4f380 <__alt_data_end+0xfffd0b80>
   4fd24:	d9001d04 	addi	r4,sp,116
   4fd28:	00800084 	movi	r2,2
   4fd2c:	d9000015 	stw	r4,0(sp)
   4fd30:	d8800115 	stw	r2,4(sp)
   4fd34:	1809883a 	mov	r4,r3
   4fd38:	d811883a 	mov	r8,sp
   4fd3c:	200b883a 	mov	r5,r4
   4fd40:	42000204 	addi	r8,r8,8
   4fd44:	21000044 	addi	r4,r4,1
   4fd48:	003f4e06 	br	4fa84 <__alt_data_end+0xfffd1284>
   4fd4c:	d8001d85 	stb	zero,118(sp)
   4fd50:	48005016 	blt	r9,zero,4fe94 <___vfiprintf_internal_r+0x100c>
   4fd54:	00ffdfc4 	movi	r3,-129
   4fd58:	94c4b03a 	or	r2,r18,r19
   4fd5c:	a0e8703a 	and	r20,r20,r3
   4fd60:	103d4426 	beq	r2,zero,4f274 <__alt_data_end+0xfffd0a74>
   4fd64:	0039883a 	mov	fp,zero
   4fd68:	d9002617 	ldw	r4,152(sp)
   4fd6c:	dd401a04 	addi	r21,sp,104
   4fd70:	908003cc 	andi	r2,r18,15
   4fd74:	9806973a 	slli	r3,r19,28
   4fd78:	2085883a 	add	r2,r4,r2
   4fd7c:	9024d13a 	srli	r18,r18,4
   4fd80:	10800003 	ldbu	r2,0(r2)
   4fd84:	9826d13a 	srli	r19,r19,4
   4fd88:	ad7fffc4 	addi	r21,r21,-1
   4fd8c:	1ca4b03a 	or	r18,r3,r18
   4fd90:	a8800005 	stb	r2,0(r21)
   4fd94:	94c4b03a 	or	r2,r18,r19
   4fd98:	103ff51e 	bne	r2,zero,4fd70 <__alt_data_end+0xfffd1570>
   4fd9c:	003e5906 	br	4f704 <__alt_data_end+0xfffd0f04>
   4fda0:	d9402117 	ldw	r5,132(sp)
   4fda4:	d9002017 	ldw	r4,128(sp)
   4fda8:	d9801a04 	addi	r6,sp,104
   4fdac:	004ed740 	call	4ed74 <__sprint_r.part.0>
   4fdb0:	103f891e 	bne	r2,zero,4fbd8 <__alt_data_end+0xfffd13d8>
   4fdb4:	d8801c17 	ldw	r2,112(sp)
   4fdb8:	d811883a 	mov	r8,sp
   4fdbc:	003f9506 	br	4fc14 <__alt_data_end+0xfffd1414>
   4fdc0:	d9402117 	ldw	r5,132(sp)
   4fdc4:	d9002017 	ldw	r4,128(sp)
   4fdc8:	d9801a04 	addi	r6,sp,104
   4fdcc:	004ed740 	call	4ed74 <__sprint_r.part.0>
   4fdd0:	103f811e 	bne	r2,zero,4fbd8 <__alt_data_end+0xfffd13d8>
   4fdd4:	d811883a 	mov	r8,sp
   4fdd8:	003ced06 	br	4f190 <__alt_data_end+0xfffd0990>
   4fddc:	d9402117 	ldw	r5,132(sp)
   4fde0:	d9002017 	ldw	r4,128(sp)
   4fde4:	d9801a04 	addi	r6,sp,104
   4fde8:	da402c15 	stw	r9,176(sp)
   4fdec:	db802a15 	stw	r14,168(sp)
   4fdf0:	004ed740 	call	4ed74 <__sprint_r.part.0>
   4fdf4:	da402c17 	ldw	r9,176(sp)
   4fdf8:	db802a17 	ldw	r14,168(sp)
   4fdfc:	103f761e 	bne	r2,zero,4fbd8 <__alt_data_end+0xfffd13d8>
   4fe00:	d9401b17 	ldw	r5,108(sp)
   4fe04:	d8801c17 	ldw	r2,112(sp)
   4fe08:	d811883a 	mov	r8,sp
   4fe0c:	29000044 	addi	r4,r5,1
   4fe10:	003d5b06 	br	4f380 <__alt_data_end+0xfffd0b80>
   4fe14:	d9402117 	ldw	r5,132(sp)
   4fe18:	d9002017 	ldw	r4,128(sp)
   4fe1c:	d9801a04 	addi	r6,sp,104
   4fe20:	da402c15 	stw	r9,176(sp)
   4fe24:	004ed740 	call	4ed74 <__sprint_r.part.0>
   4fe28:	da402c17 	ldw	r9,176(sp)
   4fe2c:	103f6a1e 	bne	r2,zero,4fbd8 <__alt_data_end+0xfffd13d8>
   4fe30:	d9401b17 	ldw	r5,108(sp)
   4fe34:	d8801c17 	ldw	r2,112(sp)
   4fe38:	d811883a 	mov	r8,sp
   4fe3c:	29000044 	addi	r4,r5,1
   4fe40:	003f1006 	br	4fa84 <__alt_data_end+0xfffd1284>
   4fe44:	1000c31e 	bne	r2,zero,50154 <___vfiprintf_internal_r+0x12cc>
   4fe48:	01000044 	movi	r4,1
   4fe4c:	000b883a 	mov	r5,zero
   4fe50:	d811883a 	mov	r8,sp
   4fe54:	003f0d06 	br	4fa8c <__alt_data_end+0xfffd128c>
   4fe58:	d9402117 	ldw	r5,132(sp)
   4fe5c:	d9002017 	ldw	r4,128(sp)
   4fe60:	d9801a04 	addi	r6,sp,104
   4fe64:	004ed740 	call	4ed74 <__sprint_r.part.0>
   4fe68:	103f5b1e 	bne	r2,zero,4fbd8 <__alt_data_end+0xfffd13d8>
   4fe6c:	d9001b17 	ldw	r4,108(sp)
   4fe70:	d8801c17 	ldw	r2,112(sp)
   4fe74:	d811883a 	mov	r8,sp
   4fe78:	21000044 	addi	r4,r4,1
   4fe7c:	003d8006 	br	4f480 <__alt_data_end+0xfffd0c80>
   4fe80:	01000174 	movhi	r4,5
   4fe84:	21174404 	addi	r4,r4,23824
   4fe88:	d9002615 	stw	r4,152(sp)
   4fe8c:	d8c02215 	stw	r3,136(sp)
   4fe90:	1029883a 	mov	r20,r2
   4fe94:	94c4b03a 	or	r2,r18,r19
   4fe98:	103fb21e 	bne	r2,zero,4fd64 <__alt_data_end+0xfffd1564>
   4fe9c:	0039883a 	mov	fp,zero
   4fea0:	00800084 	movi	r2,2
   4fea4:	003e6b06 	br	4f854 <__alt_data_end+0xfffd1054>
   4fea8:	da802217 	ldw	r10,136(sp)
   4feac:	d8001d85 	stb	zero,118(sp)
   4feb0:	0027883a 	mov	r19,zero
   4feb4:	50800104 	addi	r2,r10,4
   4feb8:	54800017 	ldw	r18,0(r10)
   4febc:	483e6016 	blt	r9,zero,4f840 <__alt_data_end+0xfffd1040>
   4fec0:	00ffdfc4 	movi	r3,-129
   4fec4:	d8802215 	stw	r2,136(sp)
   4fec8:	a0e8703a 	and	r20,r20,r3
   4fecc:	0039883a 	mov	fp,zero
   4fed0:	903ebb26 	beq	r18,zero,4f9c0 <__alt_data_end+0xfffd11c0>
   4fed4:	00800244 	movi	r2,9
   4fed8:	14bdee36 	bltu	r2,r18,4f694 <__alt_data_end+0xfffd0e94>
   4fedc:	003eba06 	br	4f9c8 <__alt_data_end+0xfffd11c8>
   4fee0:	00800c04 	movi	r2,48
   4fee4:	d8c01d45 	stb	r3,117(sp)
   4fee8:	d8801d05 	stb	r2,116(sp)
   4feec:	d8001d85 	stb	zero,118(sp)
   4fef0:	a0c00094 	ori	r3,r20,2
   4fef4:	4800a916 	blt	r9,zero,5019c <___vfiprintf_internal_r+0x1314>
   4fef8:	00bfdfc4 	movi	r2,-129
   4fefc:	a096703a 	and	r11,r20,r2
   4ff00:	5d000094 	ori	r20,r11,2
   4ff04:	0039883a 	mov	fp,zero
   4ff08:	003f9706 	br	4fd68 <__alt_data_end+0xfffd1568>
   4ff0c:	8025883a 	mov	r18,r16
   4ff10:	003c2e06 	br	4efcc <__alt_data_end+0xfffd07cc>
   4ff14:	00800174 	movhi	r2,5
   4ff18:	10974404 	addi	r2,r2,23824
   4ff1c:	0039883a 	mov	fp,zero
   4ff20:	d8802615 	stw	r2,152(sp)
   4ff24:	003f9006 	br	4fd68 <__alt_data_end+0xfffd1568>
   4ff28:	04a5c83a 	sub	r18,zero,r18
   4ff2c:	07000b44 	movi	fp,45
   4ff30:	9004c03a 	cmpne	r2,r18,zero
   4ff34:	04e7c83a 	sub	r19,zero,r19
   4ff38:	df001d85 	stb	fp,118(sp)
   4ff3c:	98a7c83a 	sub	r19,r19,r2
   4ff40:	48009f16 	blt	r9,zero,501c0 <___vfiprintf_internal_r+0x1338>
   4ff44:	00bfdfc4 	movi	r2,-129
   4ff48:	a0a8703a 	and	r20,r20,r2
   4ff4c:	003dd006 	br	4f690 <__alt_data_end+0xfffd0e90>
   4ff50:	70004c26 	beq	r14,zero,50084 <___vfiprintf_internal_r+0x11fc>
   4ff54:	00800084 	movi	r2,2
   4ff58:	d8c01d04 	addi	r3,sp,116
   4ff5c:	d8c00015 	stw	r3,0(sp)
   4ff60:	d8800115 	stw	r2,4(sp)
   4ff64:	01000044 	movi	r4,1
   4ff68:	d811883a 	mov	r8,sp
   4ff6c:	003f7306 	br	4fd3c <__alt_data_end+0xfffd153c>
   4ff70:	a080100c 	andi	r2,r20,64
   4ff74:	da802217 	ldw	r10,136(sp)
   4ff78:	103e0626 	beq	r2,zero,4f794 <__alt_data_end+0xfffd0f94>
   4ff7c:	5480000f 	ldh	r18,0(r10)
   4ff80:	52800104 	addi	r10,r10,4
   4ff84:	da802215 	stw	r10,136(sp)
   4ff88:	9027d7fa 	srai	r19,r18,31
   4ff8c:	9805883a 	mov	r2,r19
   4ff90:	003db806 	br	4f674 <__alt_data_end+0xfffd0e74>
   4ff94:	a080040c 	andi	r2,r20,16
   4ff98:	1000091e 	bne	r2,zero,4ffc0 <___vfiprintf_internal_r+0x1138>
   4ff9c:	a2c0100c 	andi	r11,r20,64
   4ffa0:	58000726 	beq	r11,zero,4ffc0 <___vfiprintf_internal_r+0x1138>
   4ffa4:	da802217 	ldw	r10,136(sp)
   4ffa8:	50800017 	ldw	r2,0(r10)
   4ffac:	52800104 	addi	r10,r10,4
   4ffb0:	da802215 	stw	r10,136(sp)
   4ffb4:	da802317 	ldw	r10,140(sp)
   4ffb8:	1280000d 	sth	r10,0(r2)
   4ffbc:	003be706 	br	4ef5c <__alt_data_end+0xfffd075c>
   4ffc0:	da802217 	ldw	r10,136(sp)
   4ffc4:	50800017 	ldw	r2,0(r10)
   4ffc8:	52800104 	addi	r10,r10,4
   4ffcc:	da802215 	stw	r10,136(sp)
   4ffd0:	da802317 	ldw	r10,140(sp)
   4ffd4:	12800015 	stw	r10,0(r2)
   4ffd8:	003be006 	br	4ef5c <__alt_data_end+0xfffd075c>
   4ffdc:	a080100c 	andi	r2,r20,64
   4ffe0:	da802217 	ldw	r10,136(sp)
   4ffe4:	10003026 	beq	r2,zero,500a8 <___vfiprintf_internal_r+0x1220>
   4ffe8:	5480000b 	ldhu	r18,0(r10)
   4ffec:	52800104 	addi	r10,r10,4
   4fff0:	0027883a 	mov	r19,zero
   4fff4:	da802215 	stw	r10,136(sp)
   4fff8:	003d8006 	br	4f5fc <__alt_data_end+0xfffd0dfc>
   4fffc:	80c00007 	ldb	r3,0(r16)
   50000:	003c0006 	br	4f004 <__alt_data_end+0xfffd0804>
   50004:	a080100c 	andi	r2,r20,64
   50008:	d8001d85 	stb	zero,118(sp)
   5000c:	da802217 	ldw	r10,136(sp)
   50010:	1000201e 	bne	r2,zero,50094 <___vfiprintf_internal_r+0x120c>
   50014:	50800104 	addi	r2,r10,4
   50018:	54800017 	ldw	r18,0(r10)
   5001c:	0027883a 	mov	r19,zero
   50020:	483def0e 	bge	r9,zero,4f7e0 <__alt_data_end+0xfffd0fe0>
   50024:	94c6b03a 	or	r3,r18,r19
   50028:	d8802215 	stw	r2,136(sp)
   5002c:	183d4e1e 	bne	r3,zero,4f568 <__alt_data_end+0xfffd0d68>
   50030:	0039883a 	mov	fp,zero
   50034:	0005883a 	mov	r2,zero
   50038:	003e0606 	br	4f854 <__alt_data_end+0xfffd1054>
   5003c:	d9402117 	ldw	r5,132(sp)
   50040:	d9002017 	ldw	r4,128(sp)
   50044:	d9801a04 	addi	r6,sp,104
   50048:	da402c15 	stw	r9,176(sp)
   5004c:	db802a15 	stw	r14,168(sp)
   50050:	004ed740 	call	4ed74 <__sprint_r.part.0>
   50054:	da402c17 	ldw	r9,176(sp)
   50058:	db802a17 	ldw	r14,168(sp)
   5005c:	103ede1e 	bne	r2,zero,4fbd8 <__alt_data_end+0xfffd13d8>
   50060:	d9401b17 	ldw	r5,108(sp)
   50064:	d8801c17 	ldw	r2,112(sp)
   50068:	d811883a 	mov	r8,sp
   5006c:	29000044 	addi	r4,r5,1
   50070:	003e7406 	br	4fa44 <__alt_data_end+0xfffd1244>
   50074:	00bfffc4 	movi	r2,-1
   50078:	003c5806 	br	4f1dc <__alt_data_end+0xfffd09dc>
   5007c:	d811883a 	mov	r8,sp
   50080:	003ee806 	br	4fc24 <__alt_data_end+0xfffd1424>
   50084:	000b883a 	mov	r5,zero
   50088:	01000044 	movi	r4,1
   5008c:	d811883a 	mov	r8,sp
   50090:	003e7c06 	br	4fa84 <__alt_data_end+0xfffd1284>
   50094:	50800104 	addi	r2,r10,4
   50098:	5480000b 	ldhu	r18,0(r10)
   5009c:	0027883a 	mov	r19,zero
   500a0:	483dcf0e 	bge	r9,zero,4f7e0 <__alt_data_end+0xfffd0fe0>
   500a4:	003fdf06 	br	50024 <__alt_data_end+0xfffd1824>
   500a8:	54800017 	ldw	r18,0(r10)
   500ac:	52800104 	addi	r10,r10,4
   500b0:	0027883a 	mov	r19,zero
   500b4:	da802215 	stw	r10,136(sp)
   500b8:	003d5006 	br	4f5fc <__alt_data_end+0xfffd0dfc>
   500bc:	50800104 	addi	r2,r10,4
   500c0:	5480000b 	ldhu	r18,0(r10)
   500c4:	0027883a 	mov	r19,zero
   500c8:	483f7d0e 	bge	r9,zero,4fec0 <__alt_data_end+0xfffd16c0>
   500cc:	003ddc06 	br	4f840 <__alt_data_end+0xfffd1040>
   500d0:	d8c02215 	stw	r3,136(sp)
   500d4:	0039883a 	mov	fp,zero
   500d8:	003ddb06 	br	4f848 <__alt_data_end+0xfffd1048>
   500dc:	02800174 	movhi	r10,5
   500e0:	5297b504 	addi	r10,r10,24276
   500e4:	da802415 	stw	r10,144(sp)
   500e8:	003e8306 	br	4faf8 <__alt_data_end+0xfffd12f8>
   500ec:	d8801c17 	ldw	r2,112(sp)
   500f0:	dd002117 	ldw	r20,132(sp)
   500f4:	103eb926 	beq	r2,zero,4fbdc <__alt_data_end+0xfffd13dc>
   500f8:	d9002017 	ldw	r4,128(sp)
   500fc:	d9801a04 	addi	r6,sp,104
   50100:	a00b883a 	mov	r5,r20
   50104:	004ed740 	call	4ed74 <__sprint_r.part.0>
   50108:	003eb406 	br	4fbdc <__alt_data_end+0xfffd13dc>
   5010c:	80c00043 	ldbu	r3,1(r16)
   50110:	a5000814 	ori	r20,r20,32
   50114:	84000044 	addi	r16,r16,1
   50118:	18c03fcc 	andi	r3,r3,255
   5011c:	18c0201c 	xori	r3,r3,128
   50120:	18ffe004 	addi	r3,r3,-128
   50124:	003bb706 	br	4f004 <__alt_data_end+0xfffd0804>
   50128:	a809883a 	mov	r4,r21
   5012c:	d8c02a15 	stw	r3,168(sp)
   50130:	da002b15 	stw	r8,172(sp)
   50134:	00440d40 	call	440d4 <strlen>
   50138:	d8c02a17 	ldw	r3,168(sp)
   5013c:	1027883a 	mov	r19,r2
   50140:	df001d83 	ldbu	fp,118(sp)
   50144:	d8c02215 	stw	r3,136(sp)
   50148:	0013883a 	mov	r9,zero
   5014c:	da002b17 	ldw	r8,172(sp)
   50150:	003c4d06 	br	4f288 <__alt_data_end+0xfffd0a88>
   50154:	d9402117 	ldw	r5,132(sp)
   50158:	d9002017 	ldw	r4,128(sp)
   5015c:	d9801a04 	addi	r6,sp,104
   50160:	da402c15 	stw	r9,176(sp)
   50164:	004ed740 	call	4ed74 <__sprint_r.part.0>
   50168:	da402c17 	ldw	r9,176(sp)
   5016c:	103e9a1e 	bne	r2,zero,4fbd8 <__alt_data_end+0xfffd13d8>
   50170:	d9401b17 	ldw	r5,108(sp)
   50174:	d8801c17 	ldw	r2,112(sp)
   50178:	d811883a 	mov	r8,sp
   5017c:	29000044 	addi	r4,r5,1
   50180:	003e4206 	br	4fa8c <__alt_data_end+0xfffd128c>
   50184:	d9401b17 	ldw	r5,108(sp)
   50188:	01000174 	movhi	r4,5
   5018c:	2117b904 	addi	r4,r4,24292
   50190:	d9002415 	stw	r4,144(sp)
   50194:	29400044 	addi	r5,r5,1
   50198:	003c6d06 	br	4f350 <__alt_data_end+0xfffd0b50>
   5019c:	0039883a 	mov	fp,zero
   501a0:	00800084 	movi	r2,2
   501a4:	10803fcc 	andi	r2,r2,255
   501a8:	01000044 	movi	r4,1
   501ac:	11001e26 	beq	r2,r4,50228 <___vfiprintf_internal_r+0x13a0>
   501b0:	01000084 	movi	r4,2
   501b4:	11001e1e 	bne	r2,r4,50230 <___vfiprintf_internal_r+0x13a8>
   501b8:	1829883a 	mov	r20,r3
   501bc:	003eea06 	br	4fd68 <__alt_data_end+0xfffd1568>
   501c0:	a007883a 	mov	r3,r20
   501c4:	00800044 	movi	r2,1
   501c8:	003ff606 	br	501a4 <__alt_data_end+0xfffd19a4>
   501cc:	00800184 	movi	r2,6
   501d0:	1240012e 	bgeu	r2,r9,501d8 <___vfiprintf_internal_r+0x1350>
   501d4:	1013883a 	mov	r9,r2
   501d8:	4827883a 	mov	r19,r9
   501dc:	4825883a 	mov	r18,r9
   501e0:	48001516 	blt	r9,zero,50238 <___vfiprintf_internal_r+0x13b0>
   501e4:	05400174 	movhi	r21,5
   501e8:	d8c02215 	stw	r3,136(sp)
   501ec:	ad574904 	addi	r21,r21,23844
   501f0:	003d1406 	br	4f644 <__alt_data_end+0xfffd0e44>
   501f4:	02800174 	movhi	r10,5
   501f8:	5297b504 	addi	r10,r10,24276
   501fc:	da802415 	stw	r10,144(sp)
   50200:	200d883a 	mov	r6,r4
   50204:	003c9106 	br	4f44c <__alt_data_end+0xfffd0c4c>
   50208:	5021883a 	mov	r16,r10
   5020c:	0013883a 	mov	r9,zero
   50210:	003b7d06 	br	4f008 <__alt_data_end+0xfffd0808>
   50214:	4827883a 	mov	r19,r9
   50218:	df001d83 	ldbu	fp,118(sp)
   5021c:	d8c02215 	stw	r3,136(sp)
   50220:	0013883a 	mov	r9,zero
   50224:	003c1806 	br	4f288 <__alt_data_end+0xfffd0a88>
   50228:	1829883a 	mov	r20,r3
   5022c:	003d1806 	br	4f690 <__alt_data_end+0xfffd0e90>
   50230:	1829883a 	mov	r20,r3
   50234:	003ccd06 	br	4f56c <__alt_data_end+0xfffd0d6c>
   50238:	0025883a 	mov	r18,zero
   5023c:	003fe906 	br	501e4 <__alt_data_end+0xfffd19e4>
   50240:	d8802217 	ldw	r2,136(sp)
   50244:	80c00043 	ldbu	r3,1(r16)
   50248:	5021883a 	mov	r16,r10
   5024c:	12400017 	ldw	r9,0(r2)
   50250:	10800104 	addi	r2,r2,4
   50254:	d8802215 	stw	r2,136(sp)
   50258:	483faf0e 	bge	r9,zero,50118 <__alt_data_end+0xfffd1918>
   5025c:	18c03fcc 	andi	r3,r3,255
   50260:	18c0201c 	xori	r3,r3,128
   50264:	027fffc4 	movi	r9,-1
   50268:	18ffe004 	addi	r3,r3,-128
   5026c:	003b6506 	br	4f004 <__alt_data_end+0xfffd0804>
   50270:	d9c01d85 	stb	r7,118(sp)
   50274:	003ca006 	br	4f4f8 <__alt_data_end+0xfffd0cf8>
   50278:	d9c01d85 	stb	r7,118(sp)
   5027c:	003cad06 	br	4f534 <__alt_data_end+0xfffd0d34>
   50280:	d9c01d85 	stb	r7,118(sp)
   50284:	003d7d06 	br	4f87c <__alt_data_end+0xfffd107c>
   50288:	d9c01d85 	stb	r7,118(sp)
   5028c:	003d5f06 	br	4f80c <__alt_data_end+0xfffd100c>
   50290:	a080004c 	andi	r2,r20,1
   50294:	0039883a 	mov	fp,zero
   50298:	10000526 	beq	r2,zero,502b0 <___vfiprintf_internal_r+0x1428>
   5029c:	00800c04 	movi	r2,48
   502a0:	d88019c5 	stb	r2,103(sp)
   502a4:	dcc02717 	ldw	r19,156(sp)
   502a8:	dd4019c4 	addi	r21,sp,103
   502ac:	003bf606 	br	4f288 <__alt_data_end+0xfffd0a88>
   502b0:	0027883a 	mov	r19,zero
   502b4:	dd401a04 	addi	r21,sp,104
   502b8:	003bf306 	br	4f288 <__alt_data_end+0xfffd0a88>
   502bc:	d9c01d85 	stb	r7,118(sp)
   502c0:	003dc806 	br	4f9e4 <__alt_data_end+0xfffd11e4>
   502c4:	d9c01d85 	stb	r7,118(sp)
   502c8:	003d3a06 	br	4f7b4 <__alt_data_end+0xfffd0fb4>
   502cc:	d9c01d85 	stb	r7,118(sp)
   502d0:	003d2a06 	br	4f77c <__alt_data_end+0xfffd0f7c>
   502d4:	d9c01d85 	stb	r7,118(sp)
   502d8:	003cde06 	br	4f654 <__alt_data_end+0xfffd0e54>
   502dc:	d9c01d85 	stb	r7,118(sp)
   502e0:	003cbc06 	br	4f5d4 <__alt_data_end+0xfffd0dd4>

000502e4 <__vfiprintf_internal>:
   502e4:	00800174 	movhi	r2,5
   502e8:	109ea804 	addi	r2,r2,31392
   502ec:	300f883a 	mov	r7,r6
   502f0:	280d883a 	mov	r6,r5
   502f4:	200b883a 	mov	r5,r4
   502f8:	11000017 	ldw	r4,0(r2)
   502fc:	004ee881 	jmpi	4ee88 <___vfiprintf_internal_r>

00050300 <__sbprintf>:
   50300:	2880030b 	ldhu	r2,12(r5)
   50304:	2ac01917 	ldw	r11,100(r5)
   50308:	2a80038b 	ldhu	r10,14(r5)
   5030c:	2a400717 	ldw	r9,28(r5)
   50310:	2a000917 	ldw	r8,36(r5)
   50314:	defee204 	addi	sp,sp,-1144
   50318:	00c10004 	movi	r3,1024
   5031c:	dc011a15 	stw	r16,1128(sp)
   50320:	10bfff4c 	andi	r2,r2,65533
   50324:	2821883a 	mov	r16,r5
   50328:	d8cb883a 	add	r5,sp,r3
   5032c:	dc811c15 	stw	r18,1136(sp)
   50330:	dc411b15 	stw	r17,1132(sp)
   50334:	dfc11d15 	stw	ra,1140(sp)
   50338:	2025883a 	mov	r18,r4
   5033c:	d881030d 	sth	r2,1036(sp)
   50340:	dac11915 	stw	r11,1124(sp)
   50344:	da81038d 	sth	r10,1038(sp)
   50348:	da410715 	stw	r9,1052(sp)
   5034c:	da010915 	stw	r8,1060(sp)
   50350:	dec10015 	stw	sp,1024(sp)
   50354:	dec10415 	stw	sp,1040(sp)
   50358:	d8c10215 	stw	r3,1032(sp)
   5035c:	d8c10515 	stw	r3,1044(sp)
   50360:	d8010615 	stw	zero,1048(sp)
   50364:	004ee880 	call	4ee88 <___vfiprintf_internal_r>
   50368:	1023883a 	mov	r17,r2
   5036c:	10000416 	blt	r2,zero,50380 <__sbprintf+0x80>
   50370:	d9410004 	addi	r5,sp,1024
   50374:	9009883a 	mov	r4,r18
   50378:	004a3300 	call	4a330 <_fflush_r>
   5037c:	10000d1e 	bne	r2,zero,503b4 <__sbprintf+0xb4>
   50380:	d881030b 	ldhu	r2,1036(sp)
   50384:	1080100c 	andi	r2,r2,64
   50388:	10000326 	beq	r2,zero,50398 <__sbprintf+0x98>
   5038c:	8080030b 	ldhu	r2,12(r16)
   50390:	10801014 	ori	r2,r2,64
   50394:	8080030d 	sth	r2,12(r16)
   50398:	8805883a 	mov	r2,r17
   5039c:	dfc11d17 	ldw	ra,1140(sp)
   503a0:	dc811c17 	ldw	r18,1136(sp)
   503a4:	dc411b17 	ldw	r17,1132(sp)
   503a8:	dc011a17 	ldw	r16,1128(sp)
   503ac:	dec11e04 	addi	sp,sp,1144
   503b0:	f800283a 	ret
   503b4:	047fffc4 	movi	r17,-1
   503b8:	003ff106 	br	50380 <__alt_data_end+0xfffd1b80>

000503bc <_write_r>:
   503bc:	defffd04 	addi	sp,sp,-12
   503c0:	2805883a 	mov	r2,r5
   503c4:	dc000015 	stw	r16,0(sp)
   503c8:	040001b4 	movhi	r16,6
   503cc:	dc400115 	stw	r17,4(sp)
   503d0:	300b883a 	mov	r5,r6
   503d4:	8425ac04 	addi	r16,r16,-26960
   503d8:	2023883a 	mov	r17,r4
   503dc:	380d883a 	mov	r6,r7
   503e0:	1009883a 	mov	r4,r2
   503e4:	dfc00215 	stw	ra,8(sp)
   503e8:	80000015 	stw	zero,0(r16)
   503ec:	005372c0 	call	5372c <write>
   503f0:	00ffffc4 	movi	r3,-1
   503f4:	10c00526 	beq	r2,r3,5040c <_write_r+0x50>
   503f8:	dfc00217 	ldw	ra,8(sp)
   503fc:	dc400117 	ldw	r17,4(sp)
   50400:	dc000017 	ldw	r16,0(sp)
   50404:	dec00304 	addi	sp,sp,12
   50408:	f800283a 	ret
   5040c:	80c00017 	ldw	r3,0(r16)
   50410:	183ff926 	beq	r3,zero,503f8 <__alt_data_end+0xfffd1bf8>
   50414:	88c00015 	stw	r3,0(r17)
   50418:	003ff706 	br	503f8 <__alt_data_end+0xfffd1bf8>

0005041c <_close_r>:
   5041c:	defffd04 	addi	sp,sp,-12
   50420:	dc000015 	stw	r16,0(sp)
   50424:	040001b4 	movhi	r16,6
   50428:	dc400115 	stw	r17,4(sp)
   5042c:	8425ac04 	addi	r16,r16,-26960
   50430:	2023883a 	mov	r17,r4
   50434:	2809883a 	mov	r4,r5
   50438:	dfc00215 	stw	ra,8(sp)
   5043c:	80000015 	stw	zero,0(r16)
   50440:	0052c4c0 	call	52c4c <close>
   50444:	00ffffc4 	movi	r3,-1
   50448:	10c00526 	beq	r2,r3,50460 <_close_r+0x44>
   5044c:	dfc00217 	ldw	ra,8(sp)
   50450:	dc400117 	ldw	r17,4(sp)
   50454:	dc000017 	ldw	r16,0(sp)
   50458:	dec00304 	addi	sp,sp,12
   5045c:	f800283a 	ret
   50460:	80c00017 	ldw	r3,0(r16)
   50464:	183ff926 	beq	r3,zero,5044c <__alt_data_end+0xfffd1c4c>
   50468:	88c00015 	stw	r3,0(r17)
   5046c:	003ff706 	br	5044c <__alt_data_end+0xfffd1c4c>

00050470 <_calloc_r>:
   50470:	298b383a 	mul	r5,r5,r6
   50474:	defffe04 	addi	sp,sp,-8
   50478:	dfc00115 	stw	ra,4(sp)
   5047c:	dc000015 	stw	r16,0(sp)
   50480:	004b46c0 	call	4b46c <_malloc_r>
   50484:	10002926 	beq	r2,zero,5052c <_calloc_r+0xbc>
   50488:	11bfff17 	ldw	r6,-4(r2)
   5048c:	1021883a 	mov	r16,r2
   50490:	00bfff04 	movi	r2,-4
   50494:	308c703a 	and	r6,r6,r2
   50498:	00c00904 	movi	r3,36
   5049c:	308d883a 	add	r6,r6,r2
   504a0:	19801636 	bltu	r3,r6,504fc <_calloc_r+0x8c>
   504a4:	008004c4 	movi	r2,19
   504a8:	11800b2e 	bgeu	r2,r6,504d8 <_calloc_r+0x68>
   504ac:	80000015 	stw	zero,0(r16)
   504b0:	80000115 	stw	zero,4(r16)
   504b4:	008006c4 	movi	r2,27
   504b8:	11801a2e 	bgeu	r2,r6,50524 <_calloc_r+0xb4>
   504bc:	80000215 	stw	zero,8(r16)
   504c0:	80000315 	stw	zero,12(r16)
   504c4:	30c0151e 	bne	r6,r3,5051c <_calloc_r+0xac>
   504c8:	80000415 	stw	zero,16(r16)
   504cc:	80800604 	addi	r2,r16,24
   504d0:	80000515 	stw	zero,20(r16)
   504d4:	00000106 	br	504dc <_calloc_r+0x6c>
   504d8:	8005883a 	mov	r2,r16
   504dc:	10000015 	stw	zero,0(r2)
   504e0:	10000115 	stw	zero,4(r2)
   504e4:	10000215 	stw	zero,8(r2)
   504e8:	8005883a 	mov	r2,r16
   504ec:	dfc00117 	ldw	ra,4(sp)
   504f0:	dc000017 	ldw	r16,0(sp)
   504f4:	dec00204 	addi	sp,sp,8
   504f8:	f800283a 	ret
   504fc:	000b883a 	mov	r5,zero
   50500:	8009883a 	mov	r4,r16
   50504:	004c0000 	call	4c000 <memset>
   50508:	8005883a 	mov	r2,r16
   5050c:	dfc00117 	ldw	ra,4(sp)
   50510:	dc000017 	ldw	r16,0(sp)
   50514:	dec00204 	addi	sp,sp,8
   50518:	f800283a 	ret
   5051c:	80800404 	addi	r2,r16,16
   50520:	003fee06 	br	504dc <__alt_data_end+0xfffd1cdc>
   50524:	80800204 	addi	r2,r16,8
   50528:	003fec06 	br	504dc <__alt_data_end+0xfffd1cdc>
   5052c:	0005883a 	mov	r2,zero
   50530:	003fee06 	br	504ec <__alt_data_end+0xfffd1cec>

00050534 <_fclose_r>:
   50534:	28003926 	beq	r5,zero,5061c <_fclose_r+0xe8>
   50538:	defffc04 	addi	sp,sp,-16
   5053c:	dc400115 	stw	r17,4(sp)
   50540:	dc000015 	stw	r16,0(sp)
   50544:	dfc00315 	stw	ra,12(sp)
   50548:	dc800215 	stw	r18,8(sp)
   5054c:	2023883a 	mov	r17,r4
   50550:	2821883a 	mov	r16,r5
   50554:	20000226 	beq	r4,zero,50560 <_fclose_r+0x2c>
   50558:	20800e17 	ldw	r2,56(r4)
   5055c:	10002726 	beq	r2,zero,505fc <_fclose_r+0xc8>
   50560:	8080030f 	ldh	r2,12(r16)
   50564:	1000071e 	bne	r2,zero,50584 <_fclose_r+0x50>
   50568:	0005883a 	mov	r2,zero
   5056c:	dfc00317 	ldw	ra,12(sp)
   50570:	dc800217 	ldw	r18,8(sp)
   50574:	dc400117 	ldw	r17,4(sp)
   50578:	dc000017 	ldw	r16,0(sp)
   5057c:	dec00404 	addi	sp,sp,16
   50580:	f800283a 	ret
   50584:	800b883a 	mov	r5,r16
   50588:	8809883a 	mov	r4,r17
   5058c:	004a1140 	call	4a114 <__sflush_r>
   50590:	1025883a 	mov	r18,r2
   50594:	80800b17 	ldw	r2,44(r16)
   50598:	10000426 	beq	r2,zero,505ac <_fclose_r+0x78>
   5059c:	81400717 	ldw	r5,28(r16)
   505a0:	8809883a 	mov	r4,r17
   505a4:	103ee83a 	callr	r2
   505a8:	10001616 	blt	r2,zero,50604 <_fclose_r+0xd0>
   505ac:	8080030b 	ldhu	r2,12(r16)
   505b0:	1080200c 	andi	r2,r2,128
   505b4:	1000151e 	bne	r2,zero,5060c <_fclose_r+0xd8>
   505b8:	81400c17 	ldw	r5,48(r16)
   505bc:	28000526 	beq	r5,zero,505d4 <_fclose_r+0xa0>
   505c0:	80801004 	addi	r2,r16,64
   505c4:	28800226 	beq	r5,r2,505d0 <_fclose_r+0x9c>
   505c8:	8809883a 	mov	r4,r17
   505cc:	004a8800 	call	4a880 <_free_r>
   505d0:	80000c15 	stw	zero,48(r16)
   505d4:	81401117 	ldw	r5,68(r16)
   505d8:	28000326 	beq	r5,zero,505e8 <_fclose_r+0xb4>
   505dc:	8809883a 	mov	r4,r17
   505e0:	004a8800 	call	4a880 <_free_r>
   505e4:	80001115 	stw	zero,68(r16)
   505e8:	004a71c0 	call	4a71c <__sfp_lock_acquire>
   505ec:	8000030d 	sth	zero,12(r16)
   505f0:	004a7200 	call	4a720 <__sfp_lock_release>
   505f4:	9005883a 	mov	r2,r18
   505f8:	003fdc06 	br	5056c <__alt_data_end+0xfffd1d6c>
   505fc:	004a70c0 	call	4a70c <__sinit>
   50600:	003fd706 	br	50560 <__alt_data_end+0xfffd1d60>
   50604:	04bfffc4 	movi	r18,-1
   50608:	003fe806 	br	505ac <__alt_data_end+0xfffd1dac>
   5060c:	81400417 	ldw	r5,16(r16)
   50610:	8809883a 	mov	r4,r17
   50614:	004a8800 	call	4a880 <_free_r>
   50618:	003fe706 	br	505b8 <__alt_data_end+0xfffd1db8>
   5061c:	0005883a 	mov	r2,zero
   50620:	f800283a 	ret

00050624 <fclose>:
   50624:	00800174 	movhi	r2,5
   50628:	109ea804 	addi	r2,r2,31392
   5062c:	200b883a 	mov	r5,r4
   50630:	11000017 	ldw	r4,0(r2)
   50634:	00505341 	jmpi	50534 <_fclose_r>

00050638 <__fputwc>:
   50638:	defff804 	addi	sp,sp,-32
   5063c:	dcc00415 	stw	r19,16(sp)
   50640:	dc800315 	stw	r18,12(sp)
   50644:	dc000115 	stw	r16,4(sp)
   50648:	dfc00715 	stw	ra,28(sp)
   5064c:	dd400615 	stw	r21,24(sp)
   50650:	dd000515 	stw	r20,20(sp)
   50654:	dc400215 	stw	r17,8(sp)
   50658:	2027883a 	mov	r19,r4
   5065c:	2825883a 	mov	r18,r5
   50660:	3021883a 	mov	r16,r6
   50664:	004b25c0 	call	4b25c <__locale_mb_cur_max>
   50668:	00c00044 	movi	r3,1
   5066c:	10c03e26 	beq	r2,r3,50768 <__fputwc+0x130>
   50670:	81c01704 	addi	r7,r16,92
   50674:	900d883a 	mov	r6,r18
   50678:	d80b883a 	mov	r5,sp
   5067c:	9809883a 	mov	r4,r19
   50680:	0050b080 	call	50b08 <_wcrtomb_r>
   50684:	1029883a 	mov	r20,r2
   50688:	00bfffc4 	movi	r2,-1
   5068c:	a0802026 	beq	r20,r2,50710 <__fputwc+0xd8>
   50690:	d9400003 	ldbu	r5,0(sp)
   50694:	a0001c26 	beq	r20,zero,50708 <__fputwc+0xd0>
   50698:	0023883a 	mov	r17,zero
   5069c:	05400284 	movi	r21,10
   506a0:	00000906 	br	506c8 <__fputwc+0x90>
   506a4:	80800017 	ldw	r2,0(r16)
   506a8:	11400005 	stb	r5,0(r2)
   506ac:	80c00017 	ldw	r3,0(r16)
   506b0:	18c00044 	addi	r3,r3,1
   506b4:	80c00015 	stw	r3,0(r16)
   506b8:	8c400044 	addi	r17,r17,1
   506bc:	dc45883a 	add	r2,sp,r17
   506c0:	8d00112e 	bgeu	r17,r20,50708 <__fputwc+0xd0>
   506c4:	11400003 	ldbu	r5,0(r2)
   506c8:	80c00217 	ldw	r3,8(r16)
   506cc:	18ffffc4 	addi	r3,r3,-1
   506d0:	80c00215 	stw	r3,8(r16)
   506d4:	183ff30e 	bge	r3,zero,506a4 <__alt_data_end+0xfffd1ea4>
   506d8:	80800617 	ldw	r2,24(r16)
   506dc:	18801916 	blt	r3,r2,50744 <__fputwc+0x10c>
   506e0:	80800017 	ldw	r2,0(r16)
   506e4:	11400005 	stb	r5,0(r2)
   506e8:	80800017 	ldw	r2,0(r16)
   506ec:	10c00003 	ldbu	r3,0(r2)
   506f0:	10800044 	addi	r2,r2,1
   506f4:	1d402326 	beq	r3,r21,50784 <__fputwc+0x14c>
   506f8:	80800015 	stw	r2,0(r16)
   506fc:	8c400044 	addi	r17,r17,1
   50700:	dc45883a 	add	r2,sp,r17
   50704:	8d3fef36 	bltu	r17,r20,506c4 <__alt_data_end+0xfffd1ec4>
   50708:	9005883a 	mov	r2,r18
   5070c:	00000406 	br	50720 <__fputwc+0xe8>
   50710:	80c0030b 	ldhu	r3,12(r16)
   50714:	a005883a 	mov	r2,r20
   50718:	18c01014 	ori	r3,r3,64
   5071c:	80c0030d 	sth	r3,12(r16)
   50720:	dfc00717 	ldw	ra,28(sp)
   50724:	dd400617 	ldw	r21,24(sp)
   50728:	dd000517 	ldw	r20,20(sp)
   5072c:	dcc00417 	ldw	r19,16(sp)
   50730:	dc800317 	ldw	r18,12(sp)
   50734:	dc400217 	ldw	r17,8(sp)
   50738:	dc000117 	ldw	r16,4(sp)
   5073c:	dec00804 	addi	sp,sp,32
   50740:	f800283a 	ret
   50744:	800d883a 	mov	r6,r16
   50748:	29403fcc 	andi	r5,r5,255
   5074c:	9809883a 	mov	r4,r19
   50750:	00509b00 	call	509b0 <__swbuf_r>
   50754:	10bfffe0 	cmpeqi	r2,r2,-1
   50758:	10803fcc 	andi	r2,r2,255
   5075c:	103fd626 	beq	r2,zero,506b8 <__alt_data_end+0xfffd1eb8>
   50760:	00bfffc4 	movi	r2,-1
   50764:	003fee06 	br	50720 <__alt_data_end+0xfffd1f20>
   50768:	90ffffc4 	addi	r3,r18,-1
   5076c:	01003f84 	movi	r4,254
   50770:	20ffbf36 	bltu	r4,r3,50670 <__alt_data_end+0xfffd1e70>
   50774:	900b883a 	mov	r5,r18
   50778:	dc800005 	stb	r18,0(sp)
   5077c:	1029883a 	mov	r20,r2
   50780:	003fc506 	br	50698 <__alt_data_end+0xfffd1e98>
   50784:	800d883a 	mov	r6,r16
   50788:	a80b883a 	mov	r5,r21
   5078c:	9809883a 	mov	r4,r19
   50790:	00509b00 	call	509b0 <__swbuf_r>
   50794:	10bfffe0 	cmpeqi	r2,r2,-1
   50798:	003fef06 	br	50758 <__alt_data_end+0xfffd1f58>

0005079c <_fputwc_r>:
   5079c:	3080030b 	ldhu	r2,12(r6)
   507a0:	10c8000c 	andi	r3,r2,8192
   507a4:	1800051e 	bne	r3,zero,507bc <_fputwc_r+0x20>
   507a8:	30c01917 	ldw	r3,100(r6)
   507ac:	10880014 	ori	r2,r2,8192
   507b0:	3080030d 	sth	r2,12(r6)
   507b4:	18880014 	ori	r2,r3,8192
   507b8:	30801915 	stw	r2,100(r6)
   507bc:	00506381 	jmpi	50638 <__fputwc>

000507c0 <fputwc>:
   507c0:	00800174 	movhi	r2,5
   507c4:	defffc04 	addi	sp,sp,-16
   507c8:	109ea804 	addi	r2,r2,31392
   507cc:	dc000115 	stw	r16,4(sp)
   507d0:	14000017 	ldw	r16,0(r2)
   507d4:	dc400215 	stw	r17,8(sp)
   507d8:	dfc00315 	stw	ra,12(sp)
   507dc:	2023883a 	mov	r17,r4
   507e0:	80000226 	beq	r16,zero,507ec <fputwc+0x2c>
   507e4:	80800e17 	ldw	r2,56(r16)
   507e8:	10001026 	beq	r2,zero,5082c <fputwc+0x6c>
   507ec:	2880030b 	ldhu	r2,12(r5)
   507f0:	10c8000c 	andi	r3,r2,8192
   507f4:	1800051e 	bne	r3,zero,5080c <fputwc+0x4c>
   507f8:	28c01917 	ldw	r3,100(r5)
   507fc:	10880014 	ori	r2,r2,8192
   50800:	2880030d 	sth	r2,12(r5)
   50804:	18880014 	ori	r2,r3,8192
   50808:	28801915 	stw	r2,100(r5)
   5080c:	280d883a 	mov	r6,r5
   50810:	8009883a 	mov	r4,r16
   50814:	880b883a 	mov	r5,r17
   50818:	dfc00317 	ldw	ra,12(sp)
   5081c:	dc400217 	ldw	r17,8(sp)
   50820:	dc000117 	ldw	r16,4(sp)
   50824:	dec00404 	addi	sp,sp,16
   50828:	00506381 	jmpi	50638 <__fputwc>
   5082c:	8009883a 	mov	r4,r16
   50830:	d9400015 	stw	r5,0(sp)
   50834:	004a70c0 	call	4a70c <__sinit>
   50838:	d9400017 	ldw	r5,0(sp)
   5083c:	003feb06 	br	507ec <__alt_data_end+0xfffd1fec>

00050840 <_fstat_r>:
   50840:	defffd04 	addi	sp,sp,-12
   50844:	2805883a 	mov	r2,r5
   50848:	dc000015 	stw	r16,0(sp)
   5084c:	040001b4 	movhi	r16,6
   50850:	dc400115 	stw	r17,4(sp)
   50854:	8425ac04 	addi	r16,r16,-26960
   50858:	2023883a 	mov	r17,r4
   5085c:	300b883a 	mov	r5,r6
   50860:	1009883a 	mov	r4,r2
   50864:	dfc00215 	stw	ra,8(sp)
   50868:	80000015 	stw	zero,0(r16)
   5086c:	0052d840 	call	52d84 <fstat>
   50870:	00ffffc4 	movi	r3,-1
   50874:	10c00526 	beq	r2,r3,5088c <_fstat_r+0x4c>
   50878:	dfc00217 	ldw	ra,8(sp)
   5087c:	dc400117 	ldw	r17,4(sp)
   50880:	dc000017 	ldw	r16,0(sp)
   50884:	dec00304 	addi	sp,sp,12
   50888:	f800283a 	ret
   5088c:	80c00017 	ldw	r3,0(r16)
   50890:	183ff926 	beq	r3,zero,50878 <__alt_data_end+0xfffd2078>
   50894:	88c00015 	stw	r3,0(r17)
   50898:	003ff706 	br	50878 <__alt_data_end+0xfffd2078>

0005089c <_isatty_r>:
   5089c:	defffd04 	addi	sp,sp,-12
   508a0:	dc000015 	stw	r16,0(sp)
   508a4:	040001b4 	movhi	r16,6
   508a8:	dc400115 	stw	r17,4(sp)
   508ac:	8425ac04 	addi	r16,r16,-26960
   508b0:	2023883a 	mov	r17,r4
   508b4:	2809883a 	mov	r4,r5
   508b8:	dfc00215 	stw	ra,8(sp)
   508bc:	80000015 	stw	zero,0(r16)
   508c0:	00531100 	call	53110 <isatty>
   508c4:	00ffffc4 	movi	r3,-1
   508c8:	10c00526 	beq	r2,r3,508e0 <_isatty_r+0x44>
   508cc:	dfc00217 	ldw	ra,8(sp)
   508d0:	dc400117 	ldw	r17,4(sp)
   508d4:	dc000017 	ldw	r16,0(sp)
   508d8:	dec00304 	addi	sp,sp,12
   508dc:	f800283a 	ret
   508e0:	80c00017 	ldw	r3,0(r16)
   508e4:	183ff926 	beq	r3,zero,508cc <__alt_data_end+0xfffd20cc>
   508e8:	88c00015 	stw	r3,0(r17)
   508ec:	003ff706 	br	508cc <__alt_data_end+0xfffd20cc>

000508f0 <_lseek_r>:
   508f0:	defffd04 	addi	sp,sp,-12
   508f4:	2805883a 	mov	r2,r5
   508f8:	dc000015 	stw	r16,0(sp)
   508fc:	040001b4 	movhi	r16,6
   50900:	dc400115 	stw	r17,4(sp)
   50904:	300b883a 	mov	r5,r6
   50908:	8425ac04 	addi	r16,r16,-26960
   5090c:	2023883a 	mov	r17,r4
   50910:	380d883a 	mov	r6,r7
   50914:	1009883a 	mov	r4,r2
   50918:	dfc00215 	stw	ra,8(sp)
   5091c:	80000015 	stw	zero,0(r16)
   50920:	00532dc0 	call	532dc <lseek>
   50924:	00ffffc4 	movi	r3,-1
   50928:	10c00526 	beq	r2,r3,50940 <_lseek_r+0x50>
   5092c:	dfc00217 	ldw	ra,8(sp)
   50930:	dc400117 	ldw	r17,4(sp)
   50934:	dc000017 	ldw	r16,0(sp)
   50938:	dec00304 	addi	sp,sp,12
   5093c:	f800283a 	ret
   50940:	80c00017 	ldw	r3,0(r16)
   50944:	183ff926 	beq	r3,zero,5092c <__alt_data_end+0xfffd212c>
   50948:	88c00015 	stw	r3,0(r17)
   5094c:	003ff706 	br	5092c <__alt_data_end+0xfffd212c>

00050950 <_read_r>:
   50950:	defffd04 	addi	sp,sp,-12
   50954:	2805883a 	mov	r2,r5
   50958:	dc000015 	stw	r16,0(sp)
   5095c:	040001b4 	movhi	r16,6
   50960:	dc400115 	stw	r17,4(sp)
   50964:	300b883a 	mov	r5,r6
   50968:	8425ac04 	addi	r16,r16,-26960
   5096c:	2023883a 	mov	r17,r4
   50970:	380d883a 	mov	r6,r7
   50974:	1009883a 	mov	r4,r2
   50978:	dfc00215 	stw	ra,8(sp)
   5097c:	80000015 	stw	zero,0(r16)
   50980:	00534b00 	call	534b0 <read>
   50984:	00ffffc4 	movi	r3,-1
   50988:	10c00526 	beq	r2,r3,509a0 <_read_r+0x50>
   5098c:	dfc00217 	ldw	ra,8(sp)
   50990:	dc400117 	ldw	r17,4(sp)
   50994:	dc000017 	ldw	r16,0(sp)
   50998:	dec00304 	addi	sp,sp,12
   5099c:	f800283a 	ret
   509a0:	80c00017 	ldw	r3,0(r16)
   509a4:	183ff926 	beq	r3,zero,5098c <__alt_data_end+0xfffd218c>
   509a8:	88c00015 	stw	r3,0(r17)
   509ac:	003ff706 	br	5098c <__alt_data_end+0xfffd218c>

000509b0 <__swbuf_r>:
   509b0:	defffb04 	addi	sp,sp,-20
   509b4:	dcc00315 	stw	r19,12(sp)
   509b8:	dc800215 	stw	r18,8(sp)
   509bc:	dc000015 	stw	r16,0(sp)
   509c0:	dfc00415 	stw	ra,16(sp)
   509c4:	dc400115 	stw	r17,4(sp)
   509c8:	2025883a 	mov	r18,r4
   509cc:	2827883a 	mov	r19,r5
   509d0:	3021883a 	mov	r16,r6
   509d4:	20000226 	beq	r4,zero,509e0 <__swbuf_r+0x30>
   509d8:	20800e17 	ldw	r2,56(r4)
   509dc:	10004226 	beq	r2,zero,50ae8 <__swbuf_r+0x138>
   509e0:	80800617 	ldw	r2,24(r16)
   509e4:	8100030b 	ldhu	r4,12(r16)
   509e8:	80800215 	stw	r2,8(r16)
   509ec:	2080020c 	andi	r2,r4,8
   509f0:	10003626 	beq	r2,zero,50acc <__swbuf_r+0x11c>
   509f4:	80c00417 	ldw	r3,16(r16)
   509f8:	18003426 	beq	r3,zero,50acc <__swbuf_r+0x11c>
   509fc:	2088000c 	andi	r2,r4,8192
   50a00:	9c403fcc 	andi	r17,r19,255
   50a04:	10001a26 	beq	r2,zero,50a70 <__swbuf_r+0xc0>
   50a08:	80800017 	ldw	r2,0(r16)
   50a0c:	81000517 	ldw	r4,20(r16)
   50a10:	10c7c83a 	sub	r3,r2,r3
   50a14:	1900200e 	bge	r3,r4,50a98 <__swbuf_r+0xe8>
   50a18:	18c00044 	addi	r3,r3,1
   50a1c:	81000217 	ldw	r4,8(r16)
   50a20:	11400044 	addi	r5,r2,1
   50a24:	81400015 	stw	r5,0(r16)
   50a28:	213fffc4 	addi	r4,r4,-1
   50a2c:	81000215 	stw	r4,8(r16)
   50a30:	14c00005 	stb	r19,0(r2)
   50a34:	80800517 	ldw	r2,20(r16)
   50a38:	10c01e26 	beq	r2,r3,50ab4 <__swbuf_r+0x104>
   50a3c:	8080030b 	ldhu	r2,12(r16)
   50a40:	1080004c 	andi	r2,r2,1
   50a44:	10000226 	beq	r2,zero,50a50 <__swbuf_r+0xa0>
   50a48:	00800284 	movi	r2,10
   50a4c:	88801926 	beq	r17,r2,50ab4 <__swbuf_r+0x104>
   50a50:	8805883a 	mov	r2,r17
   50a54:	dfc00417 	ldw	ra,16(sp)
   50a58:	dcc00317 	ldw	r19,12(sp)
   50a5c:	dc800217 	ldw	r18,8(sp)
   50a60:	dc400117 	ldw	r17,4(sp)
   50a64:	dc000017 	ldw	r16,0(sp)
   50a68:	dec00504 	addi	sp,sp,20
   50a6c:	f800283a 	ret
   50a70:	81401917 	ldw	r5,100(r16)
   50a74:	00b7ffc4 	movi	r2,-8193
   50a78:	21080014 	ori	r4,r4,8192
   50a7c:	2884703a 	and	r2,r5,r2
   50a80:	80801915 	stw	r2,100(r16)
   50a84:	80800017 	ldw	r2,0(r16)
   50a88:	8100030d 	sth	r4,12(r16)
   50a8c:	81000517 	ldw	r4,20(r16)
   50a90:	10c7c83a 	sub	r3,r2,r3
   50a94:	193fe016 	blt	r3,r4,50a18 <__alt_data_end+0xfffd2218>
   50a98:	800b883a 	mov	r5,r16
   50a9c:	9009883a 	mov	r4,r18
   50aa0:	004a3300 	call	4a330 <_fflush_r>
   50aa4:	1000071e 	bne	r2,zero,50ac4 <__swbuf_r+0x114>
   50aa8:	80800017 	ldw	r2,0(r16)
   50aac:	00c00044 	movi	r3,1
   50ab0:	003fda06 	br	50a1c <__alt_data_end+0xfffd221c>
   50ab4:	800b883a 	mov	r5,r16
   50ab8:	9009883a 	mov	r4,r18
   50abc:	004a3300 	call	4a330 <_fflush_r>
   50ac0:	103fe326 	beq	r2,zero,50a50 <__alt_data_end+0xfffd2250>
   50ac4:	00bfffc4 	movi	r2,-1
   50ac8:	003fe206 	br	50a54 <__alt_data_end+0xfffd2254>
   50acc:	800b883a 	mov	r5,r16
   50ad0:	9009883a 	mov	r4,r18
   50ad4:	00487380 	call	48738 <__swsetup_r>
   50ad8:	103ffa1e 	bne	r2,zero,50ac4 <__alt_data_end+0xfffd22c4>
   50adc:	8100030b 	ldhu	r4,12(r16)
   50ae0:	80c00417 	ldw	r3,16(r16)
   50ae4:	003fc506 	br	509fc <__alt_data_end+0xfffd21fc>
   50ae8:	004a70c0 	call	4a70c <__sinit>
   50aec:	003fbc06 	br	509e0 <__alt_data_end+0xfffd21e0>

00050af0 <__swbuf>:
   50af0:	00800174 	movhi	r2,5
   50af4:	109ea804 	addi	r2,r2,31392
   50af8:	280d883a 	mov	r6,r5
   50afc:	200b883a 	mov	r5,r4
   50b00:	11000017 	ldw	r4,0(r2)
   50b04:	00509b01 	jmpi	509b0 <__swbuf_r>

00050b08 <_wcrtomb_r>:
   50b08:	defff604 	addi	sp,sp,-40
   50b0c:	00800174 	movhi	r2,5
   50b10:	dc800815 	stw	r18,32(sp)
   50b14:	dc400715 	stw	r17,28(sp)
   50b18:	dc000615 	stw	r16,24(sp)
   50b1c:	109eac04 	addi	r2,r2,31408
   50b20:	dfc00915 	stw	ra,36(sp)
   50b24:	2021883a 	mov	r16,r4
   50b28:	3823883a 	mov	r17,r7
   50b2c:	14800017 	ldw	r18,0(r2)
   50b30:	28001426 	beq	r5,zero,50b84 <_wcrtomb_r+0x7c>
   50b34:	d9400415 	stw	r5,16(sp)
   50b38:	d9800515 	stw	r6,20(sp)
   50b3c:	004b2500 	call	4b250 <__locale_charset>
   50b40:	d9800517 	ldw	r6,20(sp)
   50b44:	d9400417 	ldw	r5,16(sp)
   50b48:	100f883a 	mov	r7,r2
   50b4c:	dc400015 	stw	r17,0(sp)
   50b50:	8009883a 	mov	r4,r16
   50b54:	903ee83a 	callr	r18
   50b58:	00ffffc4 	movi	r3,-1
   50b5c:	10c0031e 	bne	r2,r3,50b6c <_wcrtomb_r+0x64>
   50b60:	88000015 	stw	zero,0(r17)
   50b64:	00c02284 	movi	r3,138
   50b68:	80c00015 	stw	r3,0(r16)
   50b6c:	dfc00917 	ldw	ra,36(sp)
   50b70:	dc800817 	ldw	r18,32(sp)
   50b74:	dc400717 	ldw	r17,28(sp)
   50b78:	dc000617 	ldw	r16,24(sp)
   50b7c:	dec00a04 	addi	sp,sp,40
   50b80:	f800283a 	ret
   50b84:	004b2500 	call	4b250 <__locale_charset>
   50b88:	100f883a 	mov	r7,r2
   50b8c:	dc400015 	stw	r17,0(sp)
   50b90:	000d883a 	mov	r6,zero
   50b94:	d9400104 	addi	r5,sp,4
   50b98:	8009883a 	mov	r4,r16
   50b9c:	903ee83a 	callr	r18
   50ba0:	003fed06 	br	50b58 <__alt_data_end+0xfffd2358>

00050ba4 <wcrtomb>:
   50ba4:	defff604 	addi	sp,sp,-40
   50ba8:	00800174 	movhi	r2,5
   50bac:	dc800615 	stw	r18,24(sp)
   50bb0:	dc400515 	stw	r17,20(sp)
   50bb4:	109ea804 	addi	r2,r2,31392
   50bb8:	dfc00915 	stw	ra,36(sp)
   50bbc:	dd000815 	stw	r20,32(sp)
   50bc0:	dcc00715 	stw	r19,28(sp)
   50bc4:	dc000415 	stw	r16,16(sp)
   50bc8:	3025883a 	mov	r18,r6
   50bcc:	14400017 	ldw	r17,0(r2)
   50bd0:	20001926 	beq	r4,zero,50c38 <wcrtomb+0x94>
   50bd4:	00800174 	movhi	r2,5
   50bd8:	109eac04 	addi	r2,r2,31408
   50bdc:	15000017 	ldw	r20,0(r2)
   50be0:	2021883a 	mov	r16,r4
   50be4:	2827883a 	mov	r19,r5
   50be8:	004b2500 	call	4b250 <__locale_charset>
   50bec:	100f883a 	mov	r7,r2
   50bf0:	dc800015 	stw	r18,0(sp)
   50bf4:	980d883a 	mov	r6,r19
   50bf8:	800b883a 	mov	r5,r16
   50bfc:	8809883a 	mov	r4,r17
   50c00:	a03ee83a 	callr	r20
   50c04:	00ffffc4 	movi	r3,-1
   50c08:	10c0031e 	bne	r2,r3,50c18 <wcrtomb+0x74>
   50c0c:	90000015 	stw	zero,0(r18)
   50c10:	00c02284 	movi	r3,138
   50c14:	88c00015 	stw	r3,0(r17)
   50c18:	dfc00917 	ldw	ra,36(sp)
   50c1c:	dd000817 	ldw	r20,32(sp)
   50c20:	dcc00717 	ldw	r19,28(sp)
   50c24:	dc800617 	ldw	r18,24(sp)
   50c28:	dc400517 	ldw	r17,20(sp)
   50c2c:	dc000417 	ldw	r16,16(sp)
   50c30:	dec00a04 	addi	sp,sp,40
   50c34:	f800283a 	ret
   50c38:	00800174 	movhi	r2,5
   50c3c:	109eac04 	addi	r2,r2,31408
   50c40:	14000017 	ldw	r16,0(r2)
   50c44:	004b2500 	call	4b250 <__locale_charset>
   50c48:	100f883a 	mov	r7,r2
   50c4c:	dc800015 	stw	r18,0(sp)
   50c50:	000d883a 	mov	r6,zero
   50c54:	d9400104 	addi	r5,sp,4
   50c58:	8809883a 	mov	r4,r17
   50c5c:	803ee83a 	callr	r16
   50c60:	003fe806 	br	50c04 <__alt_data_end+0xfffd2404>

00050c64 <__ascii_wctomb>:
   50c64:	28000526 	beq	r5,zero,50c7c <__ascii_wctomb+0x18>
   50c68:	00803fc4 	movi	r2,255
   50c6c:	11800536 	bltu	r2,r6,50c84 <__ascii_wctomb+0x20>
   50c70:	29800005 	stb	r6,0(r5)
   50c74:	00800044 	movi	r2,1
   50c78:	f800283a 	ret
   50c7c:	0005883a 	mov	r2,zero
   50c80:	f800283a 	ret
   50c84:	00802284 	movi	r2,138
   50c88:	20800015 	stw	r2,0(r4)
   50c8c:	00bfffc4 	movi	r2,-1
   50c90:	f800283a 	ret

00050c94 <_wctomb_r>:
   50c94:	00800174 	movhi	r2,5
   50c98:	defff904 	addi	sp,sp,-28
   50c9c:	109eac04 	addi	r2,r2,31408
   50ca0:	dfc00615 	stw	ra,24(sp)
   50ca4:	dc400515 	stw	r17,20(sp)
   50ca8:	dc000415 	stw	r16,16(sp)
   50cac:	3823883a 	mov	r17,r7
   50cb0:	14000017 	ldw	r16,0(r2)
   50cb4:	d9000115 	stw	r4,4(sp)
   50cb8:	d9400215 	stw	r5,8(sp)
   50cbc:	d9800315 	stw	r6,12(sp)
   50cc0:	004b2500 	call	4b250 <__locale_charset>
   50cc4:	d9800317 	ldw	r6,12(sp)
   50cc8:	d9400217 	ldw	r5,8(sp)
   50ccc:	d9000117 	ldw	r4,4(sp)
   50cd0:	100f883a 	mov	r7,r2
   50cd4:	dc400015 	stw	r17,0(sp)
   50cd8:	803ee83a 	callr	r16
   50cdc:	dfc00617 	ldw	ra,24(sp)
   50ce0:	dc400517 	ldw	r17,20(sp)
   50ce4:	dc000417 	ldw	r16,16(sp)
   50ce8:	dec00704 	addi	sp,sp,28
   50cec:	f800283a 	ret

00050cf0 <__udivdi3>:
   50cf0:	defff504 	addi	sp,sp,-44
   50cf4:	dcc00415 	stw	r19,16(sp)
   50cf8:	dc000115 	stw	r16,4(sp)
   50cfc:	dfc00a15 	stw	ra,40(sp)
   50d00:	df000915 	stw	fp,36(sp)
   50d04:	ddc00815 	stw	r23,32(sp)
   50d08:	dd800715 	stw	r22,28(sp)
   50d0c:	dd400615 	stw	r21,24(sp)
   50d10:	dd000515 	stw	r20,20(sp)
   50d14:	dc800315 	stw	r18,12(sp)
   50d18:	dc400215 	stw	r17,8(sp)
   50d1c:	2027883a 	mov	r19,r4
   50d20:	2821883a 	mov	r16,r5
   50d24:	3800411e 	bne	r7,zero,50e2c <__udivdi3+0x13c>
   50d28:	3023883a 	mov	r17,r6
   50d2c:	2025883a 	mov	r18,r4
   50d30:	2980522e 	bgeu	r5,r6,50e7c <__udivdi3+0x18c>
   50d34:	00bfffd4 	movui	r2,65535
   50d38:	282d883a 	mov	r22,r5
   50d3c:	1180a836 	bltu	r2,r6,50fe0 <__udivdi3+0x2f0>
   50d40:	00803fc4 	movi	r2,255
   50d44:	1185803a 	cmpltu	r2,r2,r6
   50d48:	100490fa 	slli	r2,r2,3
   50d4c:	3086d83a 	srl	r3,r6,r2
   50d50:	01000174 	movhi	r4,5
   50d54:	2116f9c4 	addi	r4,r4,23527
   50d58:	20c7883a 	add	r3,r4,r3
   50d5c:	18c00003 	ldbu	r3,0(r3)
   50d60:	1885883a 	add	r2,r3,r2
   50d64:	00c00804 	movi	r3,32
   50d68:	1887c83a 	sub	r3,r3,r2
   50d6c:	18000526 	beq	r3,zero,50d84 <__udivdi3+0x94>
   50d70:	80e0983a 	sll	r16,r16,r3
   50d74:	9884d83a 	srl	r2,r19,r2
   50d78:	30e2983a 	sll	r17,r6,r3
   50d7c:	98e4983a 	sll	r18,r19,r3
   50d80:	142cb03a 	or	r22,r2,r16
   50d84:	882ad43a 	srli	r21,r17,16
   50d88:	b009883a 	mov	r4,r22
   50d8c:	8d3fffcc 	andi	r20,r17,65535
   50d90:	a80b883a 	mov	r5,r21
   50d94:	0043e780 	call	43e78 <__umodsi3>
   50d98:	b009883a 	mov	r4,r22
   50d9c:	a80b883a 	mov	r5,r21
   50da0:	1027883a 	mov	r19,r2
   50da4:	0043e140 	call	43e14 <__udivsi3>
   50da8:	102d883a 	mov	r22,r2
   50dac:	9826943a 	slli	r19,r19,16
   50db0:	9004d43a 	srli	r2,r18,16
   50db4:	a5a1383a 	mul	r16,r20,r22
   50db8:	14c4b03a 	or	r2,r2,r19
   50dbc:	1400052e 	bgeu	r2,r16,50dd4 <__udivdi3+0xe4>
   50dc0:	1445883a 	add	r2,r2,r17
   50dc4:	b0ffffc4 	addi	r3,r22,-1
   50dc8:	14400136 	bltu	r2,r17,50dd0 <__udivdi3+0xe0>
   50dcc:	14012336 	bltu	r2,r16,5125c <__udivdi3+0x56c>
   50dd0:	182d883a 	mov	r22,r3
   50dd4:	1421c83a 	sub	r16,r2,r16
   50dd8:	a80b883a 	mov	r5,r21
   50ddc:	8009883a 	mov	r4,r16
   50de0:	0043e780 	call	43e78 <__umodsi3>
   50de4:	1027883a 	mov	r19,r2
   50de8:	a80b883a 	mov	r5,r21
   50dec:	8009883a 	mov	r4,r16
   50df0:	0043e140 	call	43e14 <__udivsi3>
   50df4:	9826943a 	slli	r19,r19,16
   50df8:	a0a9383a 	mul	r20,r20,r2
   50dfc:	94bfffcc 	andi	r18,r18,65535
   50e00:	94e4b03a 	or	r18,r18,r19
   50e04:	9500052e 	bgeu	r18,r20,50e1c <__udivdi3+0x12c>
   50e08:	8ca5883a 	add	r18,r17,r18
   50e0c:	10ffffc4 	addi	r3,r2,-1
   50e10:	9440f136 	bltu	r18,r17,511d8 <__udivdi3+0x4e8>
   50e14:	9500f02e 	bgeu	r18,r20,511d8 <__udivdi3+0x4e8>
   50e18:	10bfff84 	addi	r2,r2,-2
   50e1c:	b00c943a 	slli	r6,r22,16
   50e20:	0007883a 	mov	r3,zero
   50e24:	3084b03a 	or	r2,r6,r2
   50e28:	00005906 	br	50f90 <__udivdi3+0x2a0>
   50e2c:	29c05636 	bltu	r5,r7,50f88 <__udivdi3+0x298>
   50e30:	00bfffd4 	movui	r2,65535
   50e34:	11c0622e 	bgeu	r2,r7,50fc0 <__udivdi3+0x2d0>
   50e38:	00804034 	movhi	r2,256
   50e3c:	10bfffc4 	addi	r2,r2,-1
   50e40:	11c0ee36 	bltu	r2,r7,511fc <__udivdi3+0x50c>
   50e44:	00800404 	movi	r2,16
   50e48:	3886d83a 	srl	r3,r7,r2
   50e4c:	01000174 	movhi	r4,5
   50e50:	2116f9c4 	addi	r4,r4,23527
   50e54:	20c7883a 	add	r3,r4,r3
   50e58:	18c00003 	ldbu	r3,0(r3)
   50e5c:	05400804 	movi	r21,32
   50e60:	1885883a 	add	r2,r3,r2
   50e64:	a8abc83a 	sub	r21,r21,r2
   50e68:	a800621e 	bne	r21,zero,50ff4 <__udivdi3+0x304>
   50e6c:	3c00e936 	bltu	r7,r16,51214 <__udivdi3+0x524>
   50e70:	9985403a 	cmpgeu	r2,r19,r6
   50e74:	0007883a 	mov	r3,zero
   50e78:	00004506 	br	50f90 <__udivdi3+0x2a0>
   50e7c:	3000041e 	bne	r6,zero,50e90 <__udivdi3+0x1a0>
   50e80:	000b883a 	mov	r5,zero
   50e84:	01000044 	movi	r4,1
   50e88:	0043e140 	call	43e14 <__udivsi3>
   50e8c:	1023883a 	mov	r17,r2
   50e90:	00bfffd4 	movui	r2,65535
   50e94:	14404e2e 	bgeu	r2,r17,50fd0 <__udivdi3+0x2e0>
   50e98:	00804034 	movhi	r2,256
   50e9c:	10bfffc4 	addi	r2,r2,-1
   50ea0:	1440d836 	bltu	r2,r17,51204 <__udivdi3+0x514>
   50ea4:	00800404 	movi	r2,16
   50ea8:	8886d83a 	srl	r3,r17,r2
   50eac:	01000174 	movhi	r4,5
   50eb0:	2116f9c4 	addi	r4,r4,23527
   50eb4:	20c7883a 	add	r3,r4,r3
   50eb8:	18c00003 	ldbu	r3,0(r3)
   50ebc:	1885883a 	add	r2,r3,r2
   50ec0:	00c00804 	movi	r3,32
   50ec4:	1887c83a 	sub	r3,r3,r2
   50ec8:	18008f1e 	bne	r3,zero,51108 <__udivdi3+0x418>
   50ecc:	882ad43a 	srli	r21,r17,16
   50ed0:	8461c83a 	sub	r16,r16,r17
   50ed4:	8d3fffcc 	andi	r20,r17,65535
   50ed8:	00c00044 	movi	r3,1
   50edc:	8009883a 	mov	r4,r16
   50ee0:	a80b883a 	mov	r5,r21
   50ee4:	d8c00015 	stw	r3,0(sp)
   50ee8:	0043e780 	call	43e78 <__umodsi3>
   50eec:	8009883a 	mov	r4,r16
   50ef0:	a80b883a 	mov	r5,r21
   50ef4:	1027883a 	mov	r19,r2
   50ef8:	0043e140 	call	43e14 <__udivsi3>
   50efc:	9826943a 	slli	r19,r19,16
   50f00:	9008d43a 	srli	r4,r18,16
   50f04:	1521383a 	mul	r16,r2,r20
   50f08:	102d883a 	mov	r22,r2
   50f0c:	24c8b03a 	or	r4,r4,r19
   50f10:	d8c00017 	ldw	r3,0(sp)
   50f14:	2400052e 	bgeu	r4,r16,50f2c <__udivdi3+0x23c>
   50f18:	2449883a 	add	r4,r4,r17
   50f1c:	b0bfffc4 	addi	r2,r22,-1
   50f20:	24400136 	bltu	r4,r17,50f28 <__udivdi3+0x238>
   50f24:	2400ca36 	bltu	r4,r16,51250 <__udivdi3+0x560>
   50f28:	102d883a 	mov	r22,r2
   50f2c:	2421c83a 	sub	r16,r4,r16
   50f30:	a80b883a 	mov	r5,r21
   50f34:	8009883a 	mov	r4,r16
   50f38:	d8c00015 	stw	r3,0(sp)
   50f3c:	0043e780 	call	43e78 <__umodsi3>
   50f40:	1027883a 	mov	r19,r2
   50f44:	a80b883a 	mov	r5,r21
   50f48:	8009883a 	mov	r4,r16
   50f4c:	0043e140 	call	43e14 <__udivsi3>
   50f50:	9826943a 	slli	r19,r19,16
   50f54:	1529383a 	mul	r20,r2,r20
   50f58:	94bfffcc 	andi	r18,r18,65535
   50f5c:	94e4b03a 	or	r18,r18,r19
   50f60:	d8c00017 	ldw	r3,0(sp)
   50f64:	9500052e 	bgeu	r18,r20,50f7c <__udivdi3+0x28c>
   50f68:	8ca5883a 	add	r18,r17,r18
   50f6c:	113fffc4 	addi	r4,r2,-1
   50f70:	94409736 	bltu	r18,r17,511d0 <__udivdi3+0x4e0>
   50f74:	9500962e 	bgeu	r18,r20,511d0 <__udivdi3+0x4e0>
   50f78:	10bfff84 	addi	r2,r2,-2
   50f7c:	b00c943a 	slli	r6,r22,16
   50f80:	3084b03a 	or	r2,r6,r2
   50f84:	00000206 	br	50f90 <__udivdi3+0x2a0>
   50f88:	0007883a 	mov	r3,zero
   50f8c:	0005883a 	mov	r2,zero
   50f90:	dfc00a17 	ldw	ra,40(sp)
   50f94:	df000917 	ldw	fp,36(sp)
   50f98:	ddc00817 	ldw	r23,32(sp)
   50f9c:	dd800717 	ldw	r22,28(sp)
   50fa0:	dd400617 	ldw	r21,24(sp)
   50fa4:	dd000517 	ldw	r20,20(sp)
   50fa8:	dcc00417 	ldw	r19,16(sp)
   50fac:	dc800317 	ldw	r18,12(sp)
   50fb0:	dc400217 	ldw	r17,8(sp)
   50fb4:	dc000117 	ldw	r16,4(sp)
   50fb8:	dec00b04 	addi	sp,sp,44
   50fbc:	f800283a 	ret
   50fc0:	00803fc4 	movi	r2,255
   50fc4:	11c5803a 	cmpltu	r2,r2,r7
   50fc8:	100490fa 	slli	r2,r2,3
   50fcc:	003f9e06 	br	50e48 <__alt_data_end+0xfffd2648>
   50fd0:	00803fc4 	movi	r2,255
   50fd4:	1445803a 	cmpltu	r2,r2,r17
   50fd8:	100490fa 	slli	r2,r2,3
   50fdc:	003fb206 	br	50ea8 <__alt_data_end+0xfffd26a8>
   50fe0:	00804034 	movhi	r2,256
   50fe4:	10bfffc4 	addi	r2,r2,-1
   50fe8:	11808836 	bltu	r2,r6,5120c <__udivdi3+0x51c>
   50fec:	00800404 	movi	r2,16
   50ff0:	003f5606 	br	50d4c <__alt_data_end+0xfffd254c>
   50ff4:	30aed83a 	srl	r23,r6,r2
   50ff8:	3d4e983a 	sll	r7,r7,r21
   50ffc:	80acd83a 	srl	r22,r16,r2
   51000:	9884d83a 	srl	r2,r19,r2
   51004:	3deeb03a 	or	r23,r7,r23
   51008:	b824d43a 	srli	r18,r23,16
   5100c:	8560983a 	sll	r16,r16,r21
   51010:	b009883a 	mov	r4,r22
   51014:	900b883a 	mov	r5,r18
   51018:	3568983a 	sll	r20,r6,r21
   5101c:	1420b03a 	or	r16,r2,r16
   51020:	0043e780 	call	43e78 <__umodsi3>
   51024:	b009883a 	mov	r4,r22
   51028:	900b883a 	mov	r5,r18
   5102c:	1023883a 	mov	r17,r2
   51030:	0043e140 	call	43e14 <__udivsi3>
   51034:	8808943a 	slli	r4,r17,16
   51038:	bf3fffcc 	andi	fp,r23,65535
   5103c:	8006d43a 	srli	r3,r16,16
   51040:	e0a3383a 	mul	r17,fp,r2
   51044:	100d883a 	mov	r6,r2
   51048:	1906b03a 	or	r3,r3,r4
   5104c:	1c40042e 	bgeu	r3,r17,51060 <__udivdi3+0x370>
   51050:	1dc7883a 	add	r3,r3,r23
   51054:	10bfffc4 	addi	r2,r2,-1
   51058:	1dc0752e 	bgeu	r3,r23,51230 <__udivdi3+0x540>
   5105c:	100d883a 	mov	r6,r2
   51060:	1c63c83a 	sub	r17,r3,r17
   51064:	900b883a 	mov	r5,r18
   51068:	8809883a 	mov	r4,r17
   5106c:	d9800015 	stw	r6,0(sp)
   51070:	0043e780 	call	43e78 <__umodsi3>
   51074:	102d883a 	mov	r22,r2
   51078:	8809883a 	mov	r4,r17
   5107c:	900b883a 	mov	r5,r18
   51080:	0043e140 	call	43e14 <__udivsi3>
   51084:	b02c943a 	slli	r22,r22,16
   51088:	e089383a 	mul	r4,fp,r2
   5108c:	843fffcc 	andi	r16,r16,65535
   51090:	85a0b03a 	or	r16,r16,r22
   51094:	d9800017 	ldw	r6,0(sp)
   51098:	8100042e 	bgeu	r16,r4,510ac <__udivdi3+0x3bc>
   5109c:	85e1883a 	add	r16,r16,r23
   510a0:	10ffffc4 	addi	r3,r2,-1
   510a4:	85c05e2e 	bgeu	r16,r23,51220 <__udivdi3+0x530>
   510a8:	1805883a 	mov	r2,r3
   510ac:	300c943a 	slli	r6,r6,16
   510b0:	a17fffcc 	andi	r5,r20,65535
   510b4:	a028d43a 	srli	r20,r20,16
   510b8:	3084b03a 	or	r2,r6,r2
   510bc:	10ffffcc 	andi	r3,r2,65535
   510c0:	100cd43a 	srli	r6,r2,16
   510c4:	194f383a 	mul	r7,r3,r5
   510c8:	1d07383a 	mul	r3,r3,r20
   510cc:	314b383a 	mul	r5,r6,r5
   510d0:	3810d43a 	srli	r8,r7,16
   510d4:	8121c83a 	sub	r16,r16,r4
   510d8:	1947883a 	add	r3,r3,r5
   510dc:	40c7883a 	add	r3,r8,r3
   510e0:	350d383a 	mul	r6,r6,r20
   510e4:	1940022e 	bgeu	r3,r5,510f0 <__udivdi3+0x400>
   510e8:	01000074 	movhi	r4,1
   510ec:	310d883a 	add	r6,r6,r4
   510f0:	1828d43a 	srli	r20,r3,16
   510f4:	a18d883a 	add	r6,r20,r6
   510f8:	81803e36 	bltu	r16,r6,511f4 <__udivdi3+0x504>
   510fc:	81803826 	beq	r16,r6,511e0 <__udivdi3+0x4f0>
   51100:	0007883a 	mov	r3,zero
   51104:	003fa206 	br	50f90 <__alt_data_end+0xfffd2790>
   51108:	88e2983a 	sll	r17,r17,r3
   5110c:	80a8d83a 	srl	r20,r16,r2
   51110:	80e0983a 	sll	r16,r16,r3
   51114:	882ad43a 	srli	r21,r17,16
   51118:	9884d83a 	srl	r2,r19,r2
   5111c:	a009883a 	mov	r4,r20
   51120:	a80b883a 	mov	r5,r21
   51124:	142eb03a 	or	r23,r2,r16
   51128:	98e4983a 	sll	r18,r19,r3
   5112c:	0043e780 	call	43e78 <__umodsi3>
   51130:	a009883a 	mov	r4,r20
   51134:	a80b883a 	mov	r5,r21
   51138:	1021883a 	mov	r16,r2
   5113c:	0043e140 	call	43e14 <__udivsi3>
   51140:	1039883a 	mov	fp,r2
   51144:	8d3fffcc 	andi	r20,r17,65535
   51148:	8020943a 	slli	r16,r16,16
   5114c:	b804d43a 	srli	r2,r23,16
   51150:	a72d383a 	mul	r22,r20,fp
   51154:	1404b03a 	or	r2,r2,r16
   51158:	1580062e 	bgeu	r2,r22,51174 <__udivdi3+0x484>
   5115c:	1445883a 	add	r2,r2,r17
   51160:	e0ffffc4 	addi	r3,fp,-1
   51164:	14403836 	bltu	r2,r17,51248 <__udivdi3+0x558>
   51168:	1580372e 	bgeu	r2,r22,51248 <__udivdi3+0x558>
   5116c:	e73fff84 	addi	fp,fp,-2
   51170:	1445883a 	add	r2,r2,r17
   51174:	15adc83a 	sub	r22,r2,r22
   51178:	a80b883a 	mov	r5,r21
   5117c:	b009883a 	mov	r4,r22
   51180:	0043e780 	call	43e78 <__umodsi3>
   51184:	1027883a 	mov	r19,r2
   51188:	b009883a 	mov	r4,r22
   5118c:	a80b883a 	mov	r5,r21
   51190:	0043e140 	call	43e14 <__udivsi3>
   51194:	9826943a 	slli	r19,r19,16
   51198:	a0a1383a 	mul	r16,r20,r2
   5119c:	b93fffcc 	andi	r4,r23,65535
   511a0:	24c8b03a 	or	r4,r4,r19
   511a4:	2400062e 	bgeu	r4,r16,511c0 <__udivdi3+0x4d0>
   511a8:	2449883a 	add	r4,r4,r17
   511ac:	10ffffc4 	addi	r3,r2,-1
   511b0:	24402336 	bltu	r4,r17,51240 <__udivdi3+0x550>
   511b4:	2400222e 	bgeu	r4,r16,51240 <__udivdi3+0x550>
   511b8:	10bfff84 	addi	r2,r2,-2
   511bc:	2449883a 	add	r4,r4,r17
   511c0:	e038943a 	slli	fp,fp,16
   511c4:	2421c83a 	sub	r16,r4,r16
   511c8:	e086b03a 	or	r3,fp,r2
   511cc:	003f4306 	br	50edc <__alt_data_end+0xfffd26dc>
   511d0:	2005883a 	mov	r2,r4
   511d4:	003f6906 	br	50f7c <__alt_data_end+0xfffd277c>
   511d8:	1805883a 	mov	r2,r3
   511dc:	003f0f06 	br	50e1c <__alt_data_end+0xfffd261c>
   511e0:	1806943a 	slli	r3,r3,16
   511e4:	9d66983a 	sll	r19,r19,r21
   511e8:	39ffffcc 	andi	r7,r7,65535
   511ec:	19c7883a 	add	r3,r3,r7
   511f0:	98ffc32e 	bgeu	r19,r3,51100 <__alt_data_end+0xfffd2900>
   511f4:	10bfffc4 	addi	r2,r2,-1
   511f8:	003fc106 	br	51100 <__alt_data_end+0xfffd2900>
   511fc:	00800604 	movi	r2,24
   51200:	003f1106 	br	50e48 <__alt_data_end+0xfffd2648>
   51204:	00800604 	movi	r2,24
   51208:	003f2706 	br	50ea8 <__alt_data_end+0xfffd26a8>
   5120c:	00800604 	movi	r2,24
   51210:	003ece06 	br	50d4c <__alt_data_end+0xfffd254c>
   51214:	0007883a 	mov	r3,zero
   51218:	00800044 	movi	r2,1
   5121c:	003f5c06 	br	50f90 <__alt_data_end+0xfffd2790>
   51220:	813fa12e 	bgeu	r16,r4,510a8 <__alt_data_end+0xfffd28a8>
   51224:	10bfff84 	addi	r2,r2,-2
   51228:	85e1883a 	add	r16,r16,r23
   5122c:	003f9f06 	br	510ac <__alt_data_end+0xfffd28ac>
   51230:	1c7f8a2e 	bgeu	r3,r17,5105c <__alt_data_end+0xfffd285c>
   51234:	31bfff84 	addi	r6,r6,-2
   51238:	1dc7883a 	add	r3,r3,r23
   5123c:	003f8806 	br	51060 <__alt_data_end+0xfffd2860>
   51240:	1805883a 	mov	r2,r3
   51244:	003fde06 	br	511c0 <__alt_data_end+0xfffd29c0>
   51248:	1839883a 	mov	fp,r3
   5124c:	003fc906 	br	51174 <__alt_data_end+0xfffd2974>
   51250:	b5bfff84 	addi	r22,r22,-2
   51254:	2449883a 	add	r4,r4,r17
   51258:	003f3406 	br	50f2c <__alt_data_end+0xfffd272c>
   5125c:	b5bfff84 	addi	r22,r22,-2
   51260:	1445883a 	add	r2,r2,r17
   51264:	003edb06 	br	50dd4 <__alt_data_end+0xfffd25d4>

00051268 <__umoddi3>:
   51268:	defff404 	addi	sp,sp,-48
   5126c:	df000a15 	stw	fp,40(sp)
   51270:	dc400315 	stw	r17,12(sp)
   51274:	dc000215 	stw	r16,8(sp)
   51278:	dfc00b15 	stw	ra,44(sp)
   5127c:	ddc00915 	stw	r23,36(sp)
   51280:	dd800815 	stw	r22,32(sp)
   51284:	dd400715 	stw	r21,28(sp)
   51288:	dd000615 	stw	r20,24(sp)
   5128c:	dcc00515 	stw	r19,20(sp)
   51290:	dc800415 	stw	r18,16(sp)
   51294:	2021883a 	mov	r16,r4
   51298:	2823883a 	mov	r17,r5
   5129c:	2839883a 	mov	fp,r5
   512a0:	38003c1e 	bne	r7,zero,51394 <__umoddi3+0x12c>
   512a4:	3027883a 	mov	r19,r6
   512a8:	2029883a 	mov	r20,r4
   512ac:	2980512e 	bgeu	r5,r6,513f4 <__umoddi3+0x18c>
   512b0:	00bfffd4 	movui	r2,65535
   512b4:	11809a36 	bltu	r2,r6,51520 <__umoddi3+0x2b8>
   512b8:	01003fc4 	movi	r4,255
   512bc:	2189803a 	cmpltu	r4,r4,r6
   512c0:	200890fa 	slli	r4,r4,3
   512c4:	3104d83a 	srl	r2,r6,r4
   512c8:	00c00174 	movhi	r3,5
   512cc:	18d6f9c4 	addi	r3,r3,23527
   512d0:	1885883a 	add	r2,r3,r2
   512d4:	10c00003 	ldbu	r3,0(r2)
   512d8:	00800804 	movi	r2,32
   512dc:	1909883a 	add	r4,r3,r4
   512e0:	1125c83a 	sub	r18,r2,r4
   512e4:	90000526 	beq	r18,zero,512fc <__umoddi3+0x94>
   512e8:	8ca2983a 	sll	r17,r17,r18
   512ec:	8108d83a 	srl	r4,r16,r4
   512f0:	34a6983a 	sll	r19,r6,r18
   512f4:	84a8983a 	sll	r20,r16,r18
   512f8:	2478b03a 	or	fp,r4,r17
   512fc:	982ed43a 	srli	r23,r19,16
   51300:	e009883a 	mov	r4,fp
   51304:	9dbfffcc 	andi	r22,r19,65535
   51308:	b80b883a 	mov	r5,r23
   5130c:	0043e780 	call	43e78 <__umodsi3>
   51310:	e009883a 	mov	r4,fp
   51314:	b80b883a 	mov	r5,r23
   51318:	102b883a 	mov	r21,r2
   5131c:	0043e140 	call	43e14 <__udivsi3>
   51320:	a806943a 	slli	r3,r21,16
   51324:	a008d43a 	srli	r4,r20,16
   51328:	b085383a 	mul	r2,r22,r2
   5132c:	20c8b03a 	or	r4,r4,r3
   51330:	2080032e 	bgeu	r4,r2,51340 <__umoddi3+0xd8>
   51334:	24c9883a 	add	r4,r4,r19
   51338:	24c00136 	bltu	r4,r19,51340 <__umoddi3+0xd8>
   5133c:	20811036 	bltu	r4,r2,51780 <__umoddi3+0x518>
   51340:	20abc83a 	sub	r21,r4,r2
   51344:	b80b883a 	mov	r5,r23
   51348:	a809883a 	mov	r4,r21
   5134c:	0043e780 	call	43e78 <__umodsi3>
   51350:	1023883a 	mov	r17,r2
   51354:	b80b883a 	mov	r5,r23
   51358:	a809883a 	mov	r4,r21
   5135c:	0043e140 	call	43e14 <__udivsi3>
   51360:	8822943a 	slli	r17,r17,16
   51364:	b085383a 	mul	r2,r22,r2
   51368:	a0ffffcc 	andi	r3,r20,65535
   5136c:	1c46b03a 	or	r3,r3,r17
   51370:	1880042e 	bgeu	r3,r2,51384 <__umoddi3+0x11c>
   51374:	1cc7883a 	add	r3,r3,r19
   51378:	1cc00236 	bltu	r3,r19,51384 <__umoddi3+0x11c>
   5137c:	1880012e 	bgeu	r3,r2,51384 <__umoddi3+0x11c>
   51380:	1cc7883a 	add	r3,r3,r19
   51384:	1885c83a 	sub	r2,r3,r2
   51388:	1484d83a 	srl	r2,r2,r18
   5138c:	0007883a 	mov	r3,zero
   51390:	00004f06 	br	514d0 <__umoddi3+0x268>
   51394:	29c04c36 	bltu	r5,r7,514c8 <__umoddi3+0x260>
   51398:	00bfffd4 	movui	r2,65535
   5139c:	11c0582e 	bgeu	r2,r7,51500 <__umoddi3+0x298>
   513a0:	00804034 	movhi	r2,256
   513a4:	10bfffc4 	addi	r2,r2,-1
   513a8:	11c0e736 	bltu	r2,r7,51748 <__umoddi3+0x4e0>
   513ac:	01000404 	movi	r4,16
   513b0:	3904d83a 	srl	r2,r7,r4
   513b4:	00c00174 	movhi	r3,5
   513b8:	18d6f9c4 	addi	r3,r3,23527
   513bc:	1885883a 	add	r2,r3,r2
   513c0:	14c00003 	ldbu	r19,0(r2)
   513c4:	00c00804 	movi	r3,32
   513c8:	9927883a 	add	r19,r19,r4
   513cc:	1ce9c83a 	sub	r20,r3,r19
   513d0:	a000581e 	bne	r20,zero,51534 <__umoddi3+0x2cc>
   513d4:	3c400136 	bltu	r7,r17,513dc <__umoddi3+0x174>
   513d8:	8180eb36 	bltu	r16,r6,51788 <__umoddi3+0x520>
   513dc:	8185c83a 	sub	r2,r16,r6
   513e0:	89e3c83a 	sub	r17,r17,r7
   513e4:	8089803a 	cmpltu	r4,r16,r2
   513e8:	8939c83a 	sub	fp,r17,r4
   513ec:	e007883a 	mov	r3,fp
   513f0:	00003706 	br	514d0 <__umoddi3+0x268>
   513f4:	3000041e 	bne	r6,zero,51408 <__umoddi3+0x1a0>
   513f8:	000b883a 	mov	r5,zero
   513fc:	01000044 	movi	r4,1
   51400:	0043e140 	call	43e14 <__udivsi3>
   51404:	1027883a 	mov	r19,r2
   51408:	00bfffd4 	movui	r2,65535
   5140c:	14c0402e 	bgeu	r2,r19,51510 <__umoddi3+0x2a8>
   51410:	00804034 	movhi	r2,256
   51414:	10bfffc4 	addi	r2,r2,-1
   51418:	14c0cd36 	bltu	r2,r19,51750 <__umoddi3+0x4e8>
   5141c:	00800404 	movi	r2,16
   51420:	9886d83a 	srl	r3,r19,r2
   51424:	01000174 	movhi	r4,5
   51428:	2116f9c4 	addi	r4,r4,23527
   5142c:	20c7883a 	add	r3,r4,r3
   51430:	18c00003 	ldbu	r3,0(r3)
   51434:	1887883a 	add	r3,r3,r2
   51438:	00800804 	movi	r2,32
   5143c:	10e5c83a 	sub	r18,r2,r3
   51440:	9000901e 	bne	r18,zero,51684 <__umoddi3+0x41c>
   51444:	982cd43a 	srli	r22,r19,16
   51448:	8ce3c83a 	sub	r17,r17,r19
   5144c:	9d7fffcc 	andi	r21,r19,65535
   51450:	b00b883a 	mov	r5,r22
   51454:	8809883a 	mov	r4,r17
   51458:	0043e780 	call	43e78 <__umodsi3>
   5145c:	8809883a 	mov	r4,r17
   51460:	b00b883a 	mov	r5,r22
   51464:	1021883a 	mov	r16,r2
   51468:	0043e140 	call	43e14 <__udivsi3>
   5146c:	8006943a 	slli	r3,r16,16
   51470:	a008d43a 	srli	r4,r20,16
   51474:	1545383a 	mul	r2,r2,r21
   51478:	20c8b03a 	or	r4,r4,r3
   5147c:	2080042e 	bgeu	r4,r2,51490 <__umoddi3+0x228>
   51480:	24c9883a 	add	r4,r4,r19
   51484:	24c00236 	bltu	r4,r19,51490 <__umoddi3+0x228>
   51488:	2080012e 	bgeu	r4,r2,51490 <__umoddi3+0x228>
   5148c:	24c9883a 	add	r4,r4,r19
   51490:	20a1c83a 	sub	r16,r4,r2
   51494:	b00b883a 	mov	r5,r22
   51498:	8009883a 	mov	r4,r16
   5149c:	0043e780 	call	43e78 <__umodsi3>
   514a0:	1023883a 	mov	r17,r2
   514a4:	b00b883a 	mov	r5,r22
   514a8:	8009883a 	mov	r4,r16
   514ac:	0043e140 	call	43e14 <__udivsi3>
   514b0:	8822943a 	slli	r17,r17,16
   514b4:	1545383a 	mul	r2,r2,r21
   514b8:	a53fffcc 	andi	r20,r20,65535
   514bc:	a446b03a 	or	r3,r20,r17
   514c0:	18bfb02e 	bgeu	r3,r2,51384 <__alt_data_end+0xfffd2b84>
   514c4:	003fab06 	br	51374 <__alt_data_end+0xfffd2b74>
   514c8:	2005883a 	mov	r2,r4
   514cc:	2807883a 	mov	r3,r5
   514d0:	dfc00b17 	ldw	ra,44(sp)
   514d4:	df000a17 	ldw	fp,40(sp)
   514d8:	ddc00917 	ldw	r23,36(sp)
   514dc:	dd800817 	ldw	r22,32(sp)
   514e0:	dd400717 	ldw	r21,28(sp)
   514e4:	dd000617 	ldw	r20,24(sp)
   514e8:	dcc00517 	ldw	r19,20(sp)
   514ec:	dc800417 	ldw	r18,16(sp)
   514f0:	dc400317 	ldw	r17,12(sp)
   514f4:	dc000217 	ldw	r16,8(sp)
   514f8:	dec00c04 	addi	sp,sp,48
   514fc:	f800283a 	ret
   51500:	04c03fc4 	movi	r19,255
   51504:	99c9803a 	cmpltu	r4,r19,r7
   51508:	200890fa 	slli	r4,r4,3
   5150c:	003fa806 	br	513b0 <__alt_data_end+0xfffd2bb0>
   51510:	00803fc4 	movi	r2,255
   51514:	14c5803a 	cmpltu	r2,r2,r19
   51518:	100490fa 	slli	r2,r2,3
   5151c:	003fc006 	br	51420 <__alt_data_end+0xfffd2c20>
   51520:	00804034 	movhi	r2,256
   51524:	10bfffc4 	addi	r2,r2,-1
   51528:	11808b36 	bltu	r2,r6,51758 <__umoddi3+0x4f0>
   5152c:	01000404 	movi	r4,16
   51530:	003f6406 	br	512c4 <__alt_data_end+0xfffd2ac4>
   51534:	34c4d83a 	srl	r2,r6,r19
   51538:	3d0e983a 	sll	r7,r7,r20
   5153c:	8cf8d83a 	srl	fp,r17,r19
   51540:	8d10983a 	sll	r8,r17,r20
   51544:	38aab03a 	or	r21,r7,r2
   51548:	a82cd43a 	srli	r22,r21,16
   5154c:	84e2d83a 	srl	r17,r16,r19
   51550:	e009883a 	mov	r4,fp
   51554:	b00b883a 	mov	r5,r22
   51558:	8a22b03a 	or	r17,r17,r8
   5155c:	3524983a 	sll	r18,r6,r20
   51560:	0043e780 	call	43e78 <__umodsi3>
   51564:	e009883a 	mov	r4,fp
   51568:	b00b883a 	mov	r5,r22
   5156c:	102f883a 	mov	r23,r2
   51570:	0043e140 	call	43e14 <__udivsi3>
   51574:	100d883a 	mov	r6,r2
   51578:	b808943a 	slli	r4,r23,16
   5157c:	aa3fffcc 	andi	r8,r21,65535
   51580:	8804d43a 	srli	r2,r17,16
   51584:	41af383a 	mul	r23,r8,r6
   51588:	8520983a 	sll	r16,r16,r20
   5158c:	1104b03a 	or	r2,r2,r4
   51590:	15c0042e 	bgeu	r2,r23,515a4 <__umoddi3+0x33c>
   51594:	1545883a 	add	r2,r2,r21
   51598:	30ffffc4 	addi	r3,r6,-1
   5159c:	1540742e 	bgeu	r2,r21,51770 <__umoddi3+0x508>
   515a0:	180d883a 	mov	r6,r3
   515a4:	15efc83a 	sub	r23,r2,r23
   515a8:	b00b883a 	mov	r5,r22
   515ac:	b809883a 	mov	r4,r23
   515b0:	d9800115 	stw	r6,4(sp)
   515b4:	da000015 	stw	r8,0(sp)
   515b8:	0043e780 	call	43e78 <__umodsi3>
   515bc:	b00b883a 	mov	r5,r22
   515c0:	b809883a 	mov	r4,r23
   515c4:	1039883a 	mov	fp,r2
   515c8:	0043e140 	call	43e14 <__udivsi3>
   515cc:	da000017 	ldw	r8,0(sp)
   515d0:	e038943a 	slli	fp,fp,16
   515d4:	100b883a 	mov	r5,r2
   515d8:	4089383a 	mul	r4,r8,r2
   515dc:	8a3fffcc 	andi	r8,r17,65535
   515e0:	4710b03a 	or	r8,r8,fp
   515e4:	d9800117 	ldw	r6,4(sp)
   515e8:	4100042e 	bgeu	r8,r4,515fc <__umoddi3+0x394>
   515ec:	4551883a 	add	r8,r8,r21
   515f0:	10bfffc4 	addi	r2,r2,-1
   515f4:	45405a2e 	bgeu	r8,r21,51760 <__umoddi3+0x4f8>
   515f8:	100b883a 	mov	r5,r2
   515fc:	300c943a 	slli	r6,r6,16
   51600:	91ffffcc 	andi	r7,r18,65535
   51604:	9004d43a 	srli	r2,r18,16
   51608:	314cb03a 	or	r6,r6,r5
   5160c:	317fffcc 	andi	r5,r6,65535
   51610:	300cd43a 	srli	r6,r6,16
   51614:	29d3383a 	mul	r9,r5,r7
   51618:	288b383a 	mul	r5,r5,r2
   5161c:	31cf383a 	mul	r7,r6,r7
   51620:	4806d43a 	srli	r3,r9,16
   51624:	4111c83a 	sub	r8,r8,r4
   51628:	29cb883a 	add	r5,r5,r7
   5162c:	194b883a 	add	r5,r3,r5
   51630:	3085383a 	mul	r2,r6,r2
   51634:	29c0022e 	bgeu	r5,r7,51640 <__umoddi3+0x3d8>
   51638:	00c00074 	movhi	r3,1
   5163c:	10c5883a 	add	r2,r2,r3
   51640:	2808d43a 	srli	r4,r5,16
   51644:	280a943a 	slli	r5,r5,16
   51648:	4a7fffcc 	andi	r9,r9,65535
   5164c:	2085883a 	add	r2,r4,r2
   51650:	2a4b883a 	add	r5,r5,r9
   51654:	40803636 	bltu	r8,r2,51730 <__umoddi3+0x4c8>
   51658:	40804d26 	beq	r8,r2,51790 <__umoddi3+0x528>
   5165c:	4089c83a 	sub	r4,r8,r2
   51660:	280f883a 	mov	r7,r5
   51664:	81cfc83a 	sub	r7,r16,r7
   51668:	81c7803a 	cmpltu	r3,r16,r7
   5166c:	20c7c83a 	sub	r3,r4,r3
   51670:	1cc4983a 	sll	r2,r3,r19
   51674:	3d0ed83a 	srl	r7,r7,r20
   51678:	1d06d83a 	srl	r3,r3,r20
   5167c:	11c4b03a 	or	r2,r2,r7
   51680:	003f9306 	br	514d0 <__alt_data_end+0xfffd2cd0>
   51684:	9ca6983a 	sll	r19,r19,r18
   51688:	88e8d83a 	srl	r20,r17,r3
   5168c:	80c4d83a 	srl	r2,r16,r3
   51690:	982cd43a 	srli	r22,r19,16
   51694:	8ca2983a 	sll	r17,r17,r18
   51698:	a009883a 	mov	r4,r20
   5169c:	b00b883a 	mov	r5,r22
   516a0:	1478b03a 	or	fp,r2,r17
   516a4:	0043e780 	call	43e78 <__umodsi3>
   516a8:	a009883a 	mov	r4,r20
   516ac:	b00b883a 	mov	r5,r22
   516b0:	1023883a 	mov	r17,r2
   516b4:	0043e140 	call	43e14 <__udivsi3>
   516b8:	9d7fffcc 	andi	r21,r19,65535
   516bc:	880a943a 	slli	r5,r17,16
   516c0:	e008d43a 	srli	r4,fp,16
   516c4:	a885383a 	mul	r2,r21,r2
   516c8:	84a8983a 	sll	r20,r16,r18
   516cc:	2148b03a 	or	r4,r4,r5
   516d0:	2080042e 	bgeu	r4,r2,516e4 <__umoddi3+0x47c>
   516d4:	24c9883a 	add	r4,r4,r19
   516d8:	24c00236 	bltu	r4,r19,516e4 <__umoddi3+0x47c>
   516dc:	2080012e 	bgeu	r4,r2,516e4 <__umoddi3+0x47c>
   516e0:	24c9883a 	add	r4,r4,r19
   516e4:	20a3c83a 	sub	r17,r4,r2
   516e8:	b00b883a 	mov	r5,r22
   516ec:	8809883a 	mov	r4,r17
   516f0:	0043e780 	call	43e78 <__umodsi3>
   516f4:	102f883a 	mov	r23,r2
   516f8:	8809883a 	mov	r4,r17
   516fc:	b00b883a 	mov	r5,r22
   51700:	0043e140 	call	43e14 <__udivsi3>
   51704:	b82e943a 	slli	r23,r23,16
   51708:	a885383a 	mul	r2,r21,r2
   5170c:	e13fffcc 	andi	r4,fp,65535
   51710:	25c8b03a 	or	r4,r4,r23
   51714:	2080042e 	bgeu	r4,r2,51728 <__umoddi3+0x4c0>
   51718:	24c9883a 	add	r4,r4,r19
   5171c:	24c00236 	bltu	r4,r19,51728 <__umoddi3+0x4c0>
   51720:	2080012e 	bgeu	r4,r2,51728 <__umoddi3+0x4c0>
   51724:	24c9883a 	add	r4,r4,r19
   51728:	20a3c83a 	sub	r17,r4,r2
   5172c:	003f4806 	br	51450 <__alt_data_end+0xfffd2c50>
   51730:	2c8fc83a 	sub	r7,r5,r18
   51734:	1545c83a 	sub	r2,r2,r21
   51738:	29cb803a 	cmpltu	r5,r5,r7
   5173c:	1145c83a 	sub	r2,r2,r5
   51740:	4089c83a 	sub	r4,r8,r2
   51744:	003fc706 	br	51664 <__alt_data_end+0xfffd2e64>
   51748:	01000604 	movi	r4,24
   5174c:	003f1806 	br	513b0 <__alt_data_end+0xfffd2bb0>
   51750:	00800604 	movi	r2,24
   51754:	003f3206 	br	51420 <__alt_data_end+0xfffd2c20>
   51758:	01000604 	movi	r4,24
   5175c:	003ed906 	br	512c4 <__alt_data_end+0xfffd2ac4>
   51760:	413fa52e 	bgeu	r8,r4,515f8 <__alt_data_end+0xfffd2df8>
   51764:	297fff84 	addi	r5,r5,-2
   51768:	4551883a 	add	r8,r8,r21
   5176c:	003fa306 	br	515fc <__alt_data_end+0xfffd2dfc>
   51770:	15ff8b2e 	bgeu	r2,r23,515a0 <__alt_data_end+0xfffd2da0>
   51774:	31bfff84 	addi	r6,r6,-2
   51778:	1545883a 	add	r2,r2,r21
   5177c:	003f8906 	br	515a4 <__alt_data_end+0xfffd2da4>
   51780:	24c9883a 	add	r4,r4,r19
   51784:	003eee06 	br	51340 <__alt_data_end+0xfffd2b40>
   51788:	8005883a 	mov	r2,r16
   5178c:	003f1706 	br	513ec <__alt_data_end+0xfffd2bec>
   51790:	817fe736 	bltu	r16,r5,51730 <__alt_data_end+0xfffd2f30>
   51794:	280f883a 	mov	r7,r5
   51798:	0009883a 	mov	r4,zero
   5179c:	003fb106 	br	51664 <__alt_data_end+0xfffd2e64>

000517a0 <__eqdf2>:
   517a0:	2804d53a 	srli	r2,r5,20
   517a4:	3806d53a 	srli	r3,r7,20
   517a8:	02000434 	movhi	r8,16
   517ac:	423fffc4 	addi	r8,r8,-1
   517b0:	1081ffcc 	andi	r2,r2,2047
   517b4:	0281ffc4 	movi	r10,2047
   517b8:	2a12703a 	and	r9,r5,r8
   517bc:	18c1ffcc 	andi	r3,r3,2047
   517c0:	3a10703a 	and	r8,r7,r8
   517c4:	280ad7fa 	srli	r5,r5,31
   517c8:	380ed7fa 	srli	r7,r7,31
   517cc:	12801026 	beq	r2,r10,51810 <__eqdf2+0x70>
   517d0:	0281ffc4 	movi	r10,2047
   517d4:	1a800a26 	beq	r3,r10,51800 <__eqdf2+0x60>
   517d8:	10c00226 	beq	r2,r3,517e4 <__eqdf2+0x44>
   517dc:	00800044 	movi	r2,1
   517e0:	f800283a 	ret
   517e4:	4a3ffd1e 	bne	r9,r8,517dc <__alt_data_end+0xfffd2fdc>
   517e8:	21bffc1e 	bne	r4,r6,517dc <__alt_data_end+0xfffd2fdc>
   517ec:	29c00c26 	beq	r5,r7,51820 <__eqdf2+0x80>
   517f0:	103ffa1e 	bne	r2,zero,517dc <__alt_data_end+0xfffd2fdc>
   517f4:	2244b03a 	or	r2,r4,r9
   517f8:	1004c03a 	cmpne	r2,r2,zero
   517fc:	f800283a 	ret
   51800:	3214b03a 	or	r10,r6,r8
   51804:	503ff426 	beq	r10,zero,517d8 <__alt_data_end+0xfffd2fd8>
   51808:	00800044 	movi	r2,1
   5180c:	f800283a 	ret
   51810:	2254b03a 	or	r10,r4,r9
   51814:	503fee26 	beq	r10,zero,517d0 <__alt_data_end+0xfffd2fd0>
   51818:	00800044 	movi	r2,1
   5181c:	f800283a 	ret
   51820:	0005883a 	mov	r2,zero
   51824:	f800283a 	ret

00051828 <__gedf2>:
   51828:	2804d53a 	srli	r2,r5,20
   5182c:	3806d53a 	srli	r3,r7,20
   51830:	02000434 	movhi	r8,16
   51834:	423fffc4 	addi	r8,r8,-1
   51838:	1081ffcc 	andi	r2,r2,2047
   5183c:	0241ffc4 	movi	r9,2047
   51840:	2a14703a 	and	r10,r5,r8
   51844:	18c1ffcc 	andi	r3,r3,2047
   51848:	3a10703a 	and	r8,r7,r8
   5184c:	280ad7fa 	srli	r5,r5,31
   51850:	380ed7fa 	srli	r7,r7,31
   51854:	12401d26 	beq	r2,r9,518cc <__gedf2+0xa4>
   51858:	0241ffc4 	movi	r9,2047
   5185c:	1a401226 	beq	r3,r9,518a8 <__gedf2+0x80>
   51860:	1000081e 	bne	r2,zero,51884 <__gedf2+0x5c>
   51864:	2296b03a 	or	r11,r4,r10
   51868:	5813003a 	cmpeq	r9,r11,zero
   5186c:	1800091e 	bne	r3,zero,51894 <__gedf2+0x6c>
   51870:	3218b03a 	or	r12,r6,r8
   51874:	6000071e 	bne	r12,zero,51894 <__gedf2+0x6c>
   51878:	0005883a 	mov	r2,zero
   5187c:	5800101e 	bne	r11,zero,518c0 <__gedf2+0x98>
   51880:	f800283a 	ret
   51884:	18000c1e 	bne	r3,zero,518b8 <__gedf2+0x90>
   51888:	3212b03a 	or	r9,r6,r8
   5188c:	48000c26 	beq	r9,zero,518c0 <__gedf2+0x98>
   51890:	0013883a 	mov	r9,zero
   51894:	39c03fcc 	andi	r7,r7,255
   51898:	48000826 	beq	r9,zero,518bc <__gedf2+0x94>
   5189c:	38000926 	beq	r7,zero,518c4 <__gedf2+0x9c>
   518a0:	00800044 	movi	r2,1
   518a4:	f800283a 	ret
   518a8:	3212b03a 	or	r9,r6,r8
   518ac:	483fec26 	beq	r9,zero,51860 <__alt_data_end+0xfffd3060>
   518b0:	00bfff84 	movi	r2,-2
   518b4:	f800283a 	ret
   518b8:	39c03fcc 	andi	r7,r7,255
   518bc:	29c00626 	beq	r5,r7,518d8 <__gedf2+0xb0>
   518c0:	283ff726 	beq	r5,zero,518a0 <__alt_data_end+0xfffd30a0>
   518c4:	00bfffc4 	movi	r2,-1
   518c8:	f800283a 	ret
   518cc:	2292b03a 	or	r9,r4,r10
   518d0:	483fe126 	beq	r9,zero,51858 <__alt_data_end+0xfffd3058>
   518d4:	003ff606 	br	518b0 <__alt_data_end+0xfffd30b0>
   518d8:	18bff916 	blt	r3,r2,518c0 <__alt_data_end+0xfffd30c0>
   518dc:	10c00316 	blt	r2,r3,518ec <__gedf2+0xc4>
   518e0:	42bff736 	bltu	r8,r10,518c0 <__alt_data_end+0xfffd30c0>
   518e4:	52000326 	beq	r10,r8,518f4 <__gedf2+0xcc>
   518e8:	5200042e 	bgeu	r10,r8,518fc <__gedf2+0xd4>
   518ec:	283fec1e 	bne	r5,zero,518a0 <__alt_data_end+0xfffd30a0>
   518f0:	003ff406 	br	518c4 <__alt_data_end+0xfffd30c4>
   518f4:	313ff236 	bltu	r6,r4,518c0 <__alt_data_end+0xfffd30c0>
   518f8:	21bffc36 	bltu	r4,r6,518ec <__alt_data_end+0xfffd30ec>
   518fc:	0005883a 	mov	r2,zero
   51900:	f800283a 	ret

00051904 <__ledf2>:
   51904:	2804d53a 	srli	r2,r5,20
   51908:	3810d53a 	srli	r8,r7,20
   5190c:	00c00434 	movhi	r3,16
   51910:	18ffffc4 	addi	r3,r3,-1
   51914:	1081ffcc 	andi	r2,r2,2047
   51918:	0241ffc4 	movi	r9,2047
   5191c:	28d4703a 	and	r10,r5,r3
   51920:	4201ffcc 	andi	r8,r8,2047
   51924:	38c6703a 	and	r3,r7,r3
   51928:	280ad7fa 	srli	r5,r5,31
   5192c:	380ed7fa 	srli	r7,r7,31
   51930:	12401f26 	beq	r2,r9,519b0 <__ledf2+0xac>
   51934:	0241ffc4 	movi	r9,2047
   51938:	42401426 	beq	r8,r9,5198c <__ledf2+0x88>
   5193c:	1000091e 	bne	r2,zero,51964 <__ledf2+0x60>
   51940:	2296b03a 	or	r11,r4,r10
   51944:	5813003a 	cmpeq	r9,r11,zero
   51948:	29403fcc 	andi	r5,r5,255
   5194c:	40000a1e 	bne	r8,zero,51978 <__ledf2+0x74>
   51950:	30d8b03a 	or	r12,r6,r3
   51954:	6000081e 	bne	r12,zero,51978 <__ledf2+0x74>
   51958:	0005883a 	mov	r2,zero
   5195c:	5800111e 	bne	r11,zero,519a4 <__ledf2+0xa0>
   51960:	f800283a 	ret
   51964:	29403fcc 	andi	r5,r5,255
   51968:	40000c1e 	bne	r8,zero,5199c <__ledf2+0x98>
   5196c:	30d2b03a 	or	r9,r6,r3
   51970:	48000c26 	beq	r9,zero,519a4 <__ledf2+0xa0>
   51974:	0013883a 	mov	r9,zero
   51978:	39c03fcc 	andi	r7,r7,255
   5197c:	48000826 	beq	r9,zero,519a0 <__ledf2+0x9c>
   51980:	38001126 	beq	r7,zero,519c8 <__ledf2+0xc4>
   51984:	00800044 	movi	r2,1
   51988:	f800283a 	ret
   5198c:	30d2b03a 	or	r9,r6,r3
   51990:	483fea26 	beq	r9,zero,5193c <__alt_data_end+0xfffd313c>
   51994:	00800084 	movi	r2,2
   51998:	f800283a 	ret
   5199c:	39c03fcc 	andi	r7,r7,255
   519a0:	39400726 	beq	r7,r5,519c0 <__ledf2+0xbc>
   519a4:	2800081e 	bne	r5,zero,519c8 <__ledf2+0xc4>
   519a8:	00800044 	movi	r2,1
   519ac:	f800283a 	ret
   519b0:	2292b03a 	or	r9,r4,r10
   519b4:	483fdf26 	beq	r9,zero,51934 <__alt_data_end+0xfffd3134>
   519b8:	00800084 	movi	r2,2
   519bc:	f800283a 	ret
   519c0:	4080030e 	bge	r8,r2,519d0 <__ledf2+0xcc>
   519c4:	383fef26 	beq	r7,zero,51984 <__alt_data_end+0xfffd3184>
   519c8:	00bfffc4 	movi	r2,-1
   519cc:	f800283a 	ret
   519d0:	123feb16 	blt	r2,r8,51980 <__alt_data_end+0xfffd3180>
   519d4:	1abff336 	bltu	r3,r10,519a4 <__alt_data_end+0xfffd31a4>
   519d8:	50c00326 	beq	r10,r3,519e8 <__ledf2+0xe4>
   519dc:	50c0042e 	bgeu	r10,r3,519f0 <__ledf2+0xec>
   519e0:	283fe81e 	bne	r5,zero,51984 <__alt_data_end+0xfffd3184>
   519e4:	003ff806 	br	519c8 <__alt_data_end+0xfffd31c8>
   519e8:	313fee36 	bltu	r6,r4,519a4 <__alt_data_end+0xfffd31a4>
   519ec:	21bffc36 	bltu	r4,r6,519e0 <__alt_data_end+0xfffd31e0>
   519f0:	0005883a 	mov	r2,zero
   519f4:	f800283a 	ret

000519f8 <__muldf3>:
   519f8:	defff304 	addi	sp,sp,-52
   519fc:	2804d53a 	srli	r2,r5,20
   51a00:	dd800915 	stw	r22,36(sp)
   51a04:	282cd7fa 	srli	r22,r5,31
   51a08:	dc000315 	stw	r16,12(sp)
   51a0c:	04000434 	movhi	r16,16
   51a10:	dd400815 	stw	r21,32(sp)
   51a14:	dc800515 	stw	r18,20(sp)
   51a18:	843fffc4 	addi	r16,r16,-1
   51a1c:	dfc00c15 	stw	ra,48(sp)
   51a20:	df000b15 	stw	fp,44(sp)
   51a24:	ddc00a15 	stw	r23,40(sp)
   51a28:	dd000715 	stw	r20,28(sp)
   51a2c:	dcc00615 	stw	r19,24(sp)
   51a30:	dc400415 	stw	r17,16(sp)
   51a34:	1481ffcc 	andi	r18,r2,2047
   51a38:	2c20703a 	and	r16,r5,r16
   51a3c:	b02b883a 	mov	r21,r22
   51a40:	b2403fcc 	andi	r9,r22,255
   51a44:	90006026 	beq	r18,zero,51bc8 <__muldf3+0x1d0>
   51a48:	0081ffc4 	movi	r2,2047
   51a4c:	2029883a 	mov	r20,r4
   51a50:	90803626 	beq	r18,r2,51b2c <__muldf3+0x134>
   51a54:	80800434 	orhi	r2,r16,16
   51a58:	100490fa 	slli	r2,r2,3
   51a5c:	2020d77a 	srli	r16,r4,29
   51a60:	202890fa 	slli	r20,r4,3
   51a64:	94bf0044 	addi	r18,r18,-1023
   51a68:	80a0b03a 	or	r16,r16,r2
   51a6c:	0027883a 	mov	r19,zero
   51a70:	0039883a 	mov	fp,zero
   51a74:	3804d53a 	srli	r2,r7,20
   51a78:	382ed7fa 	srli	r23,r7,31
   51a7c:	04400434 	movhi	r17,16
   51a80:	8c7fffc4 	addi	r17,r17,-1
   51a84:	1081ffcc 	andi	r2,r2,2047
   51a88:	3011883a 	mov	r8,r6
   51a8c:	3c62703a 	and	r17,r7,r17
   51a90:	ba803fcc 	andi	r10,r23,255
   51a94:	10006d26 	beq	r2,zero,51c4c <__muldf3+0x254>
   51a98:	00c1ffc4 	movi	r3,2047
   51a9c:	10c06526 	beq	r2,r3,51c34 <__muldf3+0x23c>
   51aa0:	88c00434 	orhi	r3,r17,16
   51aa4:	180690fa 	slli	r3,r3,3
   51aa8:	3022d77a 	srli	r17,r6,29
   51aac:	301090fa 	slli	r8,r6,3
   51ab0:	10bf0044 	addi	r2,r2,-1023
   51ab4:	88e2b03a 	or	r17,r17,r3
   51ab8:	000b883a 	mov	r5,zero
   51abc:	9085883a 	add	r2,r18,r2
   51ac0:	2cc8b03a 	or	r4,r5,r19
   51ac4:	00c003c4 	movi	r3,15
   51ac8:	bdacf03a 	xor	r22,r23,r22
   51acc:	12c00044 	addi	r11,r2,1
   51ad0:	19009936 	bltu	r3,r4,51d38 <__muldf3+0x340>
   51ad4:	200890ba 	slli	r4,r4,2
   51ad8:	00c00174 	movhi	r3,5
   51adc:	18c6bb04 	addi	r3,r3,6892
   51ae0:	20c9883a 	add	r4,r4,r3
   51ae4:	20c00017 	ldw	r3,0(r4)
   51ae8:	1800683a 	jmp	r3
   51aec:	00051d38 	rdprs	zero,zero,5236
   51af0:	00051b4c 	andi	zero,zero,5229
   51af4:	00051b4c 	andi	zero,zero,5229
   51af8:	00051b48 	cmpgei	zero,zero,5229
   51afc:	00051d14 	movui	zero,5236
   51b00:	00051d14 	movui	zero,5236
   51b04:	00051cfc 	xorhi	zero,zero,5235
   51b08:	00051b48 	cmpgei	zero,zero,5229
   51b0c:	00051d14 	movui	zero,5236
   51b10:	00051cfc 	xorhi	zero,zero,5235
   51b14:	00051d14 	movui	zero,5236
   51b18:	00051b48 	cmpgei	zero,zero,5229
   51b1c:	00051d24 	muli	zero,zero,5236
   51b20:	00051d24 	muli	zero,zero,5236
   51b24:	00051d24 	muli	zero,zero,5236
   51b28:	00051f40 	call	51f4 <__reset-0x3ae0c>
   51b2c:	2404b03a 	or	r2,r4,r16
   51b30:	10006f1e 	bne	r2,zero,51cf0 <__muldf3+0x2f8>
   51b34:	04c00204 	movi	r19,8
   51b38:	0021883a 	mov	r16,zero
   51b3c:	0029883a 	mov	r20,zero
   51b40:	07000084 	movi	fp,2
   51b44:	003fcb06 	br	51a74 <__alt_data_end+0xfffd3274>
   51b48:	502d883a 	mov	r22,r10
   51b4c:	00800084 	movi	r2,2
   51b50:	28805726 	beq	r5,r2,51cb0 <__muldf3+0x2b8>
   51b54:	008000c4 	movi	r2,3
   51b58:	28816626 	beq	r5,r2,520f4 <__muldf3+0x6fc>
   51b5c:	00800044 	movi	r2,1
   51b60:	2881411e 	bne	r5,r2,52068 <__muldf3+0x670>
   51b64:	b02b883a 	mov	r21,r22
   51b68:	0005883a 	mov	r2,zero
   51b6c:	000b883a 	mov	r5,zero
   51b70:	0029883a 	mov	r20,zero
   51b74:	1004953a 	slli	r2,r2,20
   51b78:	a8c03fcc 	andi	r3,r21,255
   51b7c:	04400434 	movhi	r17,16
   51b80:	8c7fffc4 	addi	r17,r17,-1
   51b84:	180697fa 	slli	r3,r3,31
   51b88:	2c4a703a 	and	r5,r5,r17
   51b8c:	288ab03a 	or	r5,r5,r2
   51b90:	28c6b03a 	or	r3,r5,r3
   51b94:	a005883a 	mov	r2,r20
   51b98:	dfc00c17 	ldw	ra,48(sp)
   51b9c:	df000b17 	ldw	fp,44(sp)
   51ba0:	ddc00a17 	ldw	r23,40(sp)
   51ba4:	dd800917 	ldw	r22,36(sp)
   51ba8:	dd400817 	ldw	r21,32(sp)
   51bac:	dd000717 	ldw	r20,28(sp)
   51bb0:	dcc00617 	ldw	r19,24(sp)
   51bb4:	dc800517 	ldw	r18,20(sp)
   51bb8:	dc400417 	ldw	r17,16(sp)
   51bbc:	dc000317 	ldw	r16,12(sp)
   51bc0:	dec00d04 	addi	sp,sp,52
   51bc4:	f800283a 	ret
   51bc8:	2404b03a 	or	r2,r4,r16
   51bcc:	2027883a 	mov	r19,r4
   51bd0:	10004226 	beq	r2,zero,51cdc <__muldf3+0x2e4>
   51bd4:	8000fc26 	beq	r16,zero,51fc8 <__muldf3+0x5d0>
   51bd8:	8009883a 	mov	r4,r16
   51bdc:	d9800215 	stw	r6,8(sp)
   51be0:	d9c00015 	stw	r7,0(sp)
   51be4:	da400115 	stw	r9,4(sp)
   51be8:	0043cb80 	call	43cb8 <__clzsi2>
   51bec:	d9800217 	ldw	r6,8(sp)
   51bf0:	d9c00017 	ldw	r7,0(sp)
   51bf4:	da400117 	ldw	r9,4(sp)
   51bf8:	113ffd44 	addi	r4,r2,-11
   51bfc:	00c00704 	movi	r3,28
   51c00:	1900ed16 	blt	r3,r4,51fb8 <__muldf3+0x5c0>
   51c04:	00c00744 	movi	r3,29
   51c08:	147ffe04 	addi	r17,r2,-8
   51c0c:	1907c83a 	sub	r3,r3,r4
   51c10:	8460983a 	sll	r16,r16,r17
   51c14:	98c6d83a 	srl	r3,r19,r3
   51c18:	9c68983a 	sll	r20,r19,r17
   51c1c:	1c20b03a 	or	r16,r3,r16
   51c20:	1080fcc4 	addi	r2,r2,1011
   51c24:	00a5c83a 	sub	r18,zero,r2
   51c28:	0027883a 	mov	r19,zero
   51c2c:	0039883a 	mov	fp,zero
   51c30:	003f9006 	br	51a74 <__alt_data_end+0xfffd3274>
   51c34:	3446b03a 	or	r3,r6,r17
   51c38:	1800261e 	bne	r3,zero,51cd4 <__muldf3+0x2dc>
   51c3c:	0023883a 	mov	r17,zero
   51c40:	0011883a 	mov	r8,zero
   51c44:	01400084 	movi	r5,2
   51c48:	003f9c06 	br	51abc <__alt_data_end+0xfffd32bc>
   51c4c:	3446b03a 	or	r3,r6,r17
   51c50:	18001c26 	beq	r3,zero,51cc4 <__muldf3+0x2cc>
   51c54:	8800ce26 	beq	r17,zero,51f90 <__muldf3+0x598>
   51c58:	8809883a 	mov	r4,r17
   51c5c:	d9800215 	stw	r6,8(sp)
   51c60:	da400115 	stw	r9,4(sp)
   51c64:	da800015 	stw	r10,0(sp)
   51c68:	0043cb80 	call	43cb8 <__clzsi2>
   51c6c:	d9800217 	ldw	r6,8(sp)
   51c70:	da400117 	ldw	r9,4(sp)
   51c74:	da800017 	ldw	r10,0(sp)
   51c78:	113ffd44 	addi	r4,r2,-11
   51c7c:	00c00704 	movi	r3,28
   51c80:	1900bf16 	blt	r3,r4,51f80 <__muldf3+0x588>
   51c84:	00c00744 	movi	r3,29
   51c88:	123ffe04 	addi	r8,r2,-8
   51c8c:	1907c83a 	sub	r3,r3,r4
   51c90:	8a22983a 	sll	r17,r17,r8
   51c94:	30c6d83a 	srl	r3,r6,r3
   51c98:	3210983a 	sll	r8,r6,r8
   51c9c:	1c62b03a 	or	r17,r3,r17
   51ca0:	1080fcc4 	addi	r2,r2,1011
   51ca4:	0085c83a 	sub	r2,zero,r2
   51ca8:	000b883a 	mov	r5,zero
   51cac:	003f8306 	br	51abc <__alt_data_end+0xfffd32bc>
   51cb0:	b02b883a 	mov	r21,r22
   51cb4:	0081ffc4 	movi	r2,2047
   51cb8:	000b883a 	mov	r5,zero
   51cbc:	0029883a 	mov	r20,zero
   51cc0:	003fac06 	br	51b74 <__alt_data_end+0xfffd3374>
   51cc4:	0023883a 	mov	r17,zero
   51cc8:	0011883a 	mov	r8,zero
   51ccc:	01400044 	movi	r5,1
   51cd0:	003f7a06 	br	51abc <__alt_data_end+0xfffd32bc>
   51cd4:	014000c4 	movi	r5,3
   51cd8:	003f7806 	br	51abc <__alt_data_end+0xfffd32bc>
   51cdc:	04c00104 	movi	r19,4
   51ce0:	0021883a 	mov	r16,zero
   51ce4:	0029883a 	mov	r20,zero
   51ce8:	07000044 	movi	fp,1
   51cec:	003f6106 	br	51a74 <__alt_data_end+0xfffd3274>
   51cf0:	04c00304 	movi	r19,12
   51cf4:	070000c4 	movi	fp,3
   51cf8:	003f5e06 	br	51a74 <__alt_data_end+0xfffd3274>
   51cfc:	01400434 	movhi	r5,16
   51d00:	002b883a 	mov	r21,zero
   51d04:	297fffc4 	addi	r5,r5,-1
   51d08:	053fffc4 	movi	r20,-1
   51d0c:	0081ffc4 	movi	r2,2047
   51d10:	003f9806 	br	51b74 <__alt_data_end+0xfffd3374>
   51d14:	8023883a 	mov	r17,r16
   51d18:	a011883a 	mov	r8,r20
   51d1c:	e00b883a 	mov	r5,fp
   51d20:	003f8a06 	br	51b4c <__alt_data_end+0xfffd334c>
   51d24:	8023883a 	mov	r17,r16
   51d28:	a011883a 	mov	r8,r20
   51d2c:	482d883a 	mov	r22,r9
   51d30:	e00b883a 	mov	r5,fp
   51d34:	003f8506 	br	51b4c <__alt_data_end+0xfffd334c>
   51d38:	a00ad43a 	srli	r5,r20,16
   51d3c:	401ad43a 	srli	r13,r8,16
   51d40:	a53fffcc 	andi	r20,r20,65535
   51d44:	423fffcc 	andi	r8,r8,65535
   51d48:	4519383a 	mul	r12,r8,r20
   51d4c:	4147383a 	mul	r3,r8,r5
   51d50:	6d09383a 	mul	r4,r13,r20
   51d54:	600cd43a 	srli	r6,r12,16
   51d58:	2b5d383a 	mul	r14,r5,r13
   51d5c:	20c9883a 	add	r4,r4,r3
   51d60:	310d883a 	add	r6,r6,r4
   51d64:	30c0022e 	bgeu	r6,r3,51d70 <__muldf3+0x378>
   51d68:	00c00074 	movhi	r3,1
   51d6c:	70dd883a 	add	r14,r14,r3
   51d70:	8826d43a 	srli	r19,r17,16
   51d74:	8bffffcc 	andi	r15,r17,65535
   51d78:	7d23383a 	mul	r17,r15,r20
   51d7c:	7949383a 	mul	r4,r15,r5
   51d80:	9d29383a 	mul	r20,r19,r20
   51d84:	8814d43a 	srli	r10,r17,16
   51d88:	3012943a 	slli	r9,r6,16
   51d8c:	a129883a 	add	r20,r20,r4
   51d90:	633fffcc 	andi	r12,r12,65535
   51d94:	5515883a 	add	r10,r10,r20
   51d98:	3006d43a 	srli	r3,r6,16
   51d9c:	4b13883a 	add	r9,r9,r12
   51da0:	2ccb383a 	mul	r5,r5,r19
   51da4:	5100022e 	bgeu	r10,r4,51db0 <__muldf3+0x3b8>
   51da8:	01000074 	movhi	r4,1
   51dac:	290b883a 	add	r5,r5,r4
   51db0:	802ad43a 	srli	r21,r16,16
   51db4:	843fffcc 	andi	r16,r16,65535
   51db8:	440d383a 	mul	r6,r8,r16
   51dbc:	4565383a 	mul	r18,r8,r21
   51dc0:	8349383a 	mul	r4,r16,r13
   51dc4:	500e943a 	slli	r7,r10,16
   51dc8:	3010d43a 	srli	r8,r6,16
   51dcc:	5028d43a 	srli	r20,r10,16
   51dd0:	2489883a 	add	r4,r4,r18
   51dd4:	8abfffcc 	andi	r10,r17,65535
   51dd8:	3a95883a 	add	r10,r7,r10
   51ddc:	4119883a 	add	r12,r8,r4
   51de0:	a169883a 	add	r20,r20,r5
   51de4:	1a87883a 	add	r3,r3,r10
   51de8:	6d5b383a 	mul	r13,r13,r21
   51dec:	6480022e 	bgeu	r12,r18,51df8 <__muldf3+0x400>
   51df0:	01000074 	movhi	r4,1
   51df4:	691b883a 	add	r13,r13,r4
   51df8:	7c25383a 	mul	r18,r15,r16
   51dfc:	7d4b383a 	mul	r5,r15,r21
   51e00:	84cf383a 	mul	r7,r16,r19
   51e04:	901ed43a 	srli	r15,r18,16
   51e08:	6008d43a 	srli	r4,r12,16
   51e0c:	6010943a 	slli	r8,r12,16
   51e10:	394f883a 	add	r7,r7,r5
   51e14:	333fffcc 	andi	r12,r6,65535
   51e18:	79df883a 	add	r15,r15,r7
   51e1c:	235b883a 	add	r13,r4,r13
   51e20:	9d63383a 	mul	r17,r19,r21
   51e24:	4309883a 	add	r4,r8,r12
   51e28:	7940022e 	bgeu	r15,r5,51e34 <__muldf3+0x43c>
   51e2c:	01400074 	movhi	r5,1
   51e30:	8963883a 	add	r17,r17,r5
   51e34:	780a943a 	slli	r5,r15,16
   51e38:	91bfffcc 	andi	r6,r18,65535
   51e3c:	70c7883a 	add	r3,r14,r3
   51e40:	298d883a 	add	r6,r5,r6
   51e44:	1a8f803a 	cmpltu	r7,r3,r10
   51e48:	350b883a 	add	r5,r6,r20
   51e4c:	20c7883a 	add	r3,r4,r3
   51e50:	3955883a 	add	r10,r7,r5
   51e54:	1909803a 	cmpltu	r4,r3,r4
   51e58:	6a91883a 	add	r8,r13,r10
   51e5c:	780cd43a 	srli	r6,r15,16
   51e60:	2219883a 	add	r12,r4,r8
   51e64:	2d0b803a 	cmpltu	r5,r5,r20
   51e68:	51cf803a 	cmpltu	r7,r10,r7
   51e6c:	29ceb03a 	or	r7,r5,r7
   51e70:	4351803a 	cmpltu	r8,r8,r13
   51e74:	610b803a 	cmpltu	r5,r12,r4
   51e78:	4148b03a 	or	r4,r8,r5
   51e7c:	398f883a 	add	r7,r7,r6
   51e80:	3909883a 	add	r4,r7,r4
   51e84:	1810927a 	slli	r8,r3,9
   51e88:	2449883a 	add	r4,r4,r17
   51e8c:	2008927a 	slli	r4,r4,9
   51e90:	6022d5fa 	srli	r17,r12,23
   51e94:	1806d5fa 	srli	r3,r3,23
   51e98:	4252b03a 	or	r9,r8,r9
   51e9c:	600a927a 	slli	r5,r12,9
   51ea0:	4810c03a 	cmpne	r8,r9,zero
   51ea4:	2462b03a 	or	r17,r4,r17
   51ea8:	40c6b03a 	or	r3,r8,r3
   51eac:	8900402c 	andhi	r4,r17,256
   51eb0:	1950b03a 	or	r8,r3,r5
   51eb4:	20000726 	beq	r4,zero,51ed4 <__muldf3+0x4dc>
   51eb8:	4006d07a 	srli	r3,r8,1
   51ebc:	880497fa 	slli	r2,r17,31
   51ec0:	4200004c 	andi	r8,r8,1
   51ec4:	8822d07a 	srli	r17,r17,1
   51ec8:	1a10b03a 	or	r8,r3,r8
   51ecc:	1210b03a 	or	r8,r2,r8
   51ed0:	5805883a 	mov	r2,r11
   51ed4:	1140ffc4 	addi	r5,r2,1023
   51ed8:	0140440e 	bge	zero,r5,51fec <__muldf3+0x5f4>
   51edc:	40c001cc 	andi	r3,r8,7
   51ee0:	18000726 	beq	r3,zero,51f00 <__muldf3+0x508>
   51ee4:	40c003cc 	andi	r3,r8,15
   51ee8:	01000104 	movi	r4,4
   51eec:	19000426 	beq	r3,r4,51f00 <__muldf3+0x508>
   51ef0:	4107883a 	add	r3,r8,r4
   51ef4:	1a11803a 	cmpltu	r8,r3,r8
   51ef8:	8a23883a 	add	r17,r17,r8
   51efc:	1811883a 	mov	r8,r3
   51f00:	88c0402c 	andhi	r3,r17,256
   51f04:	18000426 	beq	r3,zero,51f18 <__muldf3+0x520>
   51f08:	11410004 	addi	r5,r2,1024
   51f0c:	00bfc034 	movhi	r2,65280
   51f10:	10bfffc4 	addi	r2,r2,-1
   51f14:	88a2703a 	and	r17,r17,r2
   51f18:	0081ff84 	movi	r2,2046
   51f1c:	117f6416 	blt	r2,r5,51cb0 <__alt_data_end+0xfffd34b0>
   51f20:	8828977a 	slli	r20,r17,29
   51f24:	4010d0fa 	srli	r8,r8,3
   51f28:	8822927a 	slli	r17,r17,9
   51f2c:	2881ffcc 	andi	r2,r5,2047
   51f30:	a228b03a 	or	r20,r20,r8
   51f34:	880ad33a 	srli	r5,r17,12
   51f38:	b02b883a 	mov	r21,r22
   51f3c:	003f0d06 	br	51b74 <__alt_data_end+0xfffd3374>
   51f40:	8080022c 	andhi	r2,r16,8
   51f44:	10000926 	beq	r2,zero,51f6c <__muldf3+0x574>
   51f48:	8880022c 	andhi	r2,r17,8
   51f4c:	1000071e 	bne	r2,zero,51f6c <__muldf3+0x574>
   51f50:	00800434 	movhi	r2,16
   51f54:	89400234 	orhi	r5,r17,8
   51f58:	10bfffc4 	addi	r2,r2,-1
   51f5c:	b82b883a 	mov	r21,r23
   51f60:	288a703a 	and	r5,r5,r2
   51f64:	4029883a 	mov	r20,r8
   51f68:	003f6806 	br	51d0c <__alt_data_end+0xfffd350c>
   51f6c:	00800434 	movhi	r2,16
   51f70:	81400234 	orhi	r5,r16,8
   51f74:	10bfffc4 	addi	r2,r2,-1
   51f78:	288a703a 	and	r5,r5,r2
   51f7c:	003f6306 	br	51d0c <__alt_data_end+0xfffd350c>
   51f80:	147ff604 	addi	r17,r2,-40
   51f84:	3462983a 	sll	r17,r6,r17
   51f88:	0011883a 	mov	r8,zero
   51f8c:	003f4406 	br	51ca0 <__alt_data_end+0xfffd34a0>
   51f90:	3009883a 	mov	r4,r6
   51f94:	d9800215 	stw	r6,8(sp)
   51f98:	da400115 	stw	r9,4(sp)
   51f9c:	da800015 	stw	r10,0(sp)
   51fa0:	0043cb80 	call	43cb8 <__clzsi2>
   51fa4:	10800804 	addi	r2,r2,32
   51fa8:	da800017 	ldw	r10,0(sp)
   51fac:	da400117 	ldw	r9,4(sp)
   51fb0:	d9800217 	ldw	r6,8(sp)
   51fb4:	003f3006 	br	51c78 <__alt_data_end+0xfffd3478>
   51fb8:	143ff604 	addi	r16,r2,-40
   51fbc:	9c20983a 	sll	r16,r19,r16
   51fc0:	0029883a 	mov	r20,zero
   51fc4:	003f1606 	br	51c20 <__alt_data_end+0xfffd3420>
   51fc8:	d9800215 	stw	r6,8(sp)
   51fcc:	d9c00015 	stw	r7,0(sp)
   51fd0:	da400115 	stw	r9,4(sp)
   51fd4:	0043cb80 	call	43cb8 <__clzsi2>
   51fd8:	10800804 	addi	r2,r2,32
   51fdc:	da400117 	ldw	r9,4(sp)
   51fe0:	d9c00017 	ldw	r7,0(sp)
   51fe4:	d9800217 	ldw	r6,8(sp)
   51fe8:	003f0306 	br	51bf8 <__alt_data_end+0xfffd33f8>
   51fec:	00c00044 	movi	r3,1
   51ff0:	1947c83a 	sub	r3,r3,r5
   51ff4:	00800e04 	movi	r2,56
   51ff8:	10feda16 	blt	r2,r3,51b64 <__alt_data_end+0xfffd3364>
   51ffc:	008007c4 	movi	r2,31
   52000:	10c01b16 	blt	r2,r3,52070 <__muldf3+0x678>
   52004:	00800804 	movi	r2,32
   52008:	10c5c83a 	sub	r2,r2,r3
   5200c:	888a983a 	sll	r5,r17,r2
   52010:	40c8d83a 	srl	r4,r8,r3
   52014:	4084983a 	sll	r2,r8,r2
   52018:	88e2d83a 	srl	r17,r17,r3
   5201c:	2906b03a 	or	r3,r5,r4
   52020:	1004c03a 	cmpne	r2,r2,zero
   52024:	1886b03a 	or	r3,r3,r2
   52028:	188001cc 	andi	r2,r3,7
   5202c:	10000726 	beq	r2,zero,5204c <__muldf3+0x654>
   52030:	188003cc 	andi	r2,r3,15
   52034:	01000104 	movi	r4,4
   52038:	11000426 	beq	r2,r4,5204c <__muldf3+0x654>
   5203c:	1805883a 	mov	r2,r3
   52040:	10c00104 	addi	r3,r2,4
   52044:	1885803a 	cmpltu	r2,r3,r2
   52048:	88a3883a 	add	r17,r17,r2
   5204c:	8880202c 	andhi	r2,r17,128
   52050:	10001c26 	beq	r2,zero,520c4 <__muldf3+0x6cc>
   52054:	b02b883a 	mov	r21,r22
   52058:	00800044 	movi	r2,1
   5205c:	000b883a 	mov	r5,zero
   52060:	0029883a 	mov	r20,zero
   52064:	003ec306 	br	51b74 <__alt_data_end+0xfffd3374>
   52068:	5805883a 	mov	r2,r11
   5206c:	003f9906 	br	51ed4 <__alt_data_end+0xfffd36d4>
   52070:	00bff844 	movi	r2,-31
   52074:	1145c83a 	sub	r2,r2,r5
   52078:	8888d83a 	srl	r4,r17,r2
   5207c:	00800804 	movi	r2,32
   52080:	18801a26 	beq	r3,r2,520ec <__muldf3+0x6f4>
   52084:	00801004 	movi	r2,64
   52088:	10c5c83a 	sub	r2,r2,r3
   5208c:	8884983a 	sll	r2,r17,r2
   52090:	1204b03a 	or	r2,r2,r8
   52094:	1004c03a 	cmpne	r2,r2,zero
   52098:	2084b03a 	or	r2,r4,r2
   5209c:	144001cc 	andi	r17,r2,7
   520a0:	88000d1e 	bne	r17,zero,520d8 <__muldf3+0x6e0>
   520a4:	000b883a 	mov	r5,zero
   520a8:	1028d0fa 	srli	r20,r2,3
   520ac:	b02b883a 	mov	r21,r22
   520b0:	0005883a 	mov	r2,zero
   520b4:	a468b03a 	or	r20,r20,r17
   520b8:	003eae06 	br	51b74 <__alt_data_end+0xfffd3374>
   520bc:	1007883a 	mov	r3,r2
   520c0:	0023883a 	mov	r17,zero
   520c4:	880a927a 	slli	r5,r17,9
   520c8:	1805883a 	mov	r2,r3
   520cc:	8822977a 	slli	r17,r17,29
   520d0:	280ad33a 	srli	r5,r5,12
   520d4:	003ff406 	br	520a8 <__alt_data_end+0xfffd38a8>
   520d8:	10c003cc 	andi	r3,r2,15
   520dc:	01000104 	movi	r4,4
   520e0:	193ff626 	beq	r3,r4,520bc <__alt_data_end+0xfffd38bc>
   520e4:	0023883a 	mov	r17,zero
   520e8:	003fd506 	br	52040 <__alt_data_end+0xfffd3840>
   520ec:	0005883a 	mov	r2,zero
   520f0:	003fe706 	br	52090 <__alt_data_end+0xfffd3890>
   520f4:	00800434 	movhi	r2,16
   520f8:	89400234 	orhi	r5,r17,8
   520fc:	10bfffc4 	addi	r2,r2,-1
   52100:	b02b883a 	mov	r21,r22
   52104:	288a703a 	and	r5,r5,r2
   52108:	4029883a 	mov	r20,r8
   5210c:	003eff06 	br	51d0c <__alt_data_end+0xfffd350c>

00052110 <__subdf3>:
   52110:	02000434 	movhi	r8,16
   52114:	423fffc4 	addi	r8,r8,-1
   52118:	defffb04 	addi	sp,sp,-20
   5211c:	2a14703a 	and	r10,r5,r8
   52120:	3812d53a 	srli	r9,r7,20
   52124:	3a10703a 	and	r8,r7,r8
   52128:	2006d77a 	srli	r3,r4,29
   5212c:	3004d77a 	srli	r2,r6,29
   52130:	dc000015 	stw	r16,0(sp)
   52134:	501490fa 	slli	r10,r10,3
   52138:	2820d53a 	srli	r16,r5,20
   5213c:	401090fa 	slli	r8,r8,3
   52140:	dc800215 	stw	r18,8(sp)
   52144:	dc400115 	stw	r17,4(sp)
   52148:	dfc00415 	stw	ra,16(sp)
   5214c:	202290fa 	slli	r17,r4,3
   52150:	dcc00315 	stw	r19,12(sp)
   52154:	4a41ffcc 	andi	r9,r9,2047
   52158:	0101ffc4 	movi	r4,2047
   5215c:	2824d7fa 	srli	r18,r5,31
   52160:	8401ffcc 	andi	r16,r16,2047
   52164:	50c6b03a 	or	r3,r10,r3
   52168:	380ed7fa 	srli	r7,r7,31
   5216c:	408ab03a 	or	r5,r8,r2
   52170:	300c90fa 	slli	r6,r6,3
   52174:	49009626 	beq	r9,r4,523d0 <__subdf3+0x2c0>
   52178:	39c0005c 	xori	r7,r7,1
   5217c:	8245c83a 	sub	r2,r16,r9
   52180:	3c807426 	beq	r7,r18,52354 <__subdf3+0x244>
   52184:	0080af0e 	bge	zero,r2,52444 <__subdf3+0x334>
   52188:	48002a1e 	bne	r9,zero,52234 <__subdf3+0x124>
   5218c:	2988b03a 	or	r4,r5,r6
   52190:	20009a1e 	bne	r4,zero,523fc <__subdf3+0x2ec>
   52194:	888001cc 	andi	r2,r17,7
   52198:	10000726 	beq	r2,zero,521b8 <__subdf3+0xa8>
   5219c:	888003cc 	andi	r2,r17,15
   521a0:	01000104 	movi	r4,4
   521a4:	11000426 	beq	r2,r4,521b8 <__subdf3+0xa8>
   521a8:	890b883a 	add	r5,r17,r4
   521ac:	2c63803a 	cmpltu	r17,r5,r17
   521b0:	1c47883a 	add	r3,r3,r17
   521b4:	2823883a 	mov	r17,r5
   521b8:	1880202c 	andhi	r2,r3,128
   521bc:	10005926 	beq	r2,zero,52324 <__subdf3+0x214>
   521c0:	84000044 	addi	r16,r16,1
   521c4:	0081ffc4 	movi	r2,2047
   521c8:	8080be26 	beq	r16,r2,524c4 <__subdf3+0x3b4>
   521cc:	017fe034 	movhi	r5,65408
   521d0:	297fffc4 	addi	r5,r5,-1
   521d4:	1946703a 	and	r3,r3,r5
   521d8:	1804977a 	slli	r2,r3,29
   521dc:	1806927a 	slli	r3,r3,9
   521e0:	8822d0fa 	srli	r17,r17,3
   521e4:	8401ffcc 	andi	r16,r16,2047
   521e8:	180ad33a 	srli	r5,r3,12
   521ec:	9100004c 	andi	r4,r18,1
   521f0:	1444b03a 	or	r2,r2,r17
   521f4:	80c1ffcc 	andi	r3,r16,2047
   521f8:	1820953a 	slli	r16,r3,20
   521fc:	20c03fcc 	andi	r3,r4,255
   52200:	180897fa 	slli	r4,r3,31
   52204:	00c00434 	movhi	r3,16
   52208:	18ffffc4 	addi	r3,r3,-1
   5220c:	28c6703a 	and	r3,r5,r3
   52210:	1c06b03a 	or	r3,r3,r16
   52214:	1906b03a 	or	r3,r3,r4
   52218:	dfc00417 	ldw	ra,16(sp)
   5221c:	dcc00317 	ldw	r19,12(sp)
   52220:	dc800217 	ldw	r18,8(sp)
   52224:	dc400117 	ldw	r17,4(sp)
   52228:	dc000017 	ldw	r16,0(sp)
   5222c:	dec00504 	addi	sp,sp,20
   52230:	f800283a 	ret
   52234:	0101ffc4 	movi	r4,2047
   52238:	813fd626 	beq	r16,r4,52194 <__alt_data_end+0xfffd3994>
   5223c:	29402034 	orhi	r5,r5,128
   52240:	01000e04 	movi	r4,56
   52244:	2080a316 	blt	r4,r2,524d4 <__subdf3+0x3c4>
   52248:	010007c4 	movi	r4,31
   5224c:	2080c616 	blt	r4,r2,52568 <__subdf3+0x458>
   52250:	01000804 	movi	r4,32
   52254:	2089c83a 	sub	r4,r4,r2
   52258:	2910983a 	sll	r8,r5,r4
   5225c:	308ed83a 	srl	r7,r6,r2
   52260:	3108983a 	sll	r4,r6,r4
   52264:	2884d83a 	srl	r2,r5,r2
   52268:	41ccb03a 	or	r6,r8,r7
   5226c:	2008c03a 	cmpne	r4,r4,zero
   52270:	310cb03a 	or	r6,r6,r4
   52274:	898dc83a 	sub	r6,r17,r6
   52278:	89a3803a 	cmpltu	r17,r17,r6
   5227c:	1887c83a 	sub	r3,r3,r2
   52280:	1c47c83a 	sub	r3,r3,r17
   52284:	3023883a 	mov	r17,r6
   52288:	1880202c 	andhi	r2,r3,128
   5228c:	10002326 	beq	r2,zero,5231c <__subdf3+0x20c>
   52290:	04c02034 	movhi	r19,128
   52294:	9cffffc4 	addi	r19,r19,-1
   52298:	1ce6703a 	and	r19,r3,r19
   5229c:	98007a26 	beq	r19,zero,52488 <__subdf3+0x378>
   522a0:	9809883a 	mov	r4,r19
   522a4:	0043cb80 	call	43cb8 <__clzsi2>
   522a8:	113ffe04 	addi	r4,r2,-8
   522ac:	00c007c4 	movi	r3,31
   522b0:	19007b16 	blt	r3,r4,524a0 <__subdf3+0x390>
   522b4:	00800804 	movi	r2,32
   522b8:	1105c83a 	sub	r2,r2,r4
   522bc:	8884d83a 	srl	r2,r17,r2
   522c0:	9906983a 	sll	r3,r19,r4
   522c4:	8922983a 	sll	r17,r17,r4
   522c8:	10c4b03a 	or	r2,r2,r3
   522cc:	24007816 	blt	r4,r16,524b0 <__subdf3+0x3a0>
   522d0:	2421c83a 	sub	r16,r4,r16
   522d4:	80c00044 	addi	r3,r16,1
   522d8:	010007c4 	movi	r4,31
   522dc:	20c09516 	blt	r4,r3,52534 <__subdf3+0x424>
   522e0:	01400804 	movi	r5,32
   522e4:	28cbc83a 	sub	r5,r5,r3
   522e8:	88c8d83a 	srl	r4,r17,r3
   522ec:	8962983a 	sll	r17,r17,r5
   522f0:	114a983a 	sll	r5,r2,r5
   522f4:	10c6d83a 	srl	r3,r2,r3
   522f8:	8804c03a 	cmpne	r2,r17,zero
   522fc:	290ab03a 	or	r5,r5,r4
   52300:	28a2b03a 	or	r17,r5,r2
   52304:	0021883a 	mov	r16,zero
   52308:	003fa206 	br	52194 <__alt_data_end+0xfffd3994>
   5230c:	2090b03a 	or	r8,r4,r2
   52310:	40018e26 	beq	r8,zero,5294c <__subdf3+0x83c>
   52314:	1007883a 	mov	r3,r2
   52318:	2023883a 	mov	r17,r4
   5231c:	888001cc 	andi	r2,r17,7
   52320:	103f9e1e 	bne	r2,zero,5219c <__alt_data_end+0xfffd399c>
   52324:	1804977a 	slli	r2,r3,29
   52328:	8822d0fa 	srli	r17,r17,3
   5232c:	1810d0fa 	srli	r8,r3,3
   52330:	9100004c 	andi	r4,r18,1
   52334:	1444b03a 	or	r2,r2,r17
   52338:	00c1ffc4 	movi	r3,2047
   5233c:	80c02826 	beq	r16,r3,523e0 <__subdf3+0x2d0>
   52340:	01400434 	movhi	r5,16
   52344:	297fffc4 	addi	r5,r5,-1
   52348:	80e0703a 	and	r16,r16,r3
   5234c:	414a703a 	and	r5,r8,r5
   52350:	003fa806 	br	521f4 <__alt_data_end+0xfffd39f4>
   52354:	0080630e 	bge	zero,r2,524e4 <__subdf3+0x3d4>
   52358:	48003026 	beq	r9,zero,5241c <__subdf3+0x30c>
   5235c:	0101ffc4 	movi	r4,2047
   52360:	813f8c26 	beq	r16,r4,52194 <__alt_data_end+0xfffd3994>
   52364:	29402034 	orhi	r5,r5,128
   52368:	01000e04 	movi	r4,56
   5236c:	2080a90e 	bge	r4,r2,52614 <__subdf3+0x504>
   52370:	298cb03a 	or	r6,r5,r6
   52374:	3012c03a 	cmpne	r9,r6,zero
   52378:	0005883a 	mov	r2,zero
   5237c:	4c53883a 	add	r9,r9,r17
   52380:	4c63803a 	cmpltu	r17,r9,r17
   52384:	10c7883a 	add	r3,r2,r3
   52388:	88c7883a 	add	r3,r17,r3
   5238c:	4823883a 	mov	r17,r9
   52390:	1880202c 	andhi	r2,r3,128
   52394:	1000d026 	beq	r2,zero,526d8 <__subdf3+0x5c8>
   52398:	84000044 	addi	r16,r16,1
   5239c:	0081ffc4 	movi	r2,2047
   523a0:	8080fe26 	beq	r16,r2,5279c <__subdf3+0x68c>
   523a4:	00bfe034 	movhi	r2,65408
   523a8:	10bfffc4 	addi	r2,r2,-1
   523ac:	1886703a 	and	r3,r3,r2
   523b0:	880ad07a 	srli	r5,r17,1
   523b4:	180497fa 	slli	r2,r3,31
   523b8:	8900004c 	andi	r4,r17,1
   523bc:	2922b03a 	or	r17,r5,r4
   523c0:	1806d07a 	srli	r3,r3,1
   523c4:	1462b03a 	or	r17,r2,r17
   523c8:	3825883a 	mov	r18,r7
   523cc:	003f7106 	br	52194 <__alt_data_end+0xfffd3994>
   523d0:	2984b03a 	or	r2,r5,r6
   523d4:	103f6826 	beq	r2,zero,52178 <__alt_data_end+0xfffd3978>
   523d8:	39c03fcc 	andi	r7,r7,255
   523dc:	003f6706 	br	5217c <__alt_data_end+0xfffd397c>
   523e0:	4086b03a 	or	r3,r8,r2
   523e4:	18015226 	beq	r3,zero,52930 <__subdf3+0x820>
   523e8:	00c00434 	movhi	r3,16
   523ec:	41400234 	orhi	r5,r8,8
   523f0:	18ffffc4 	addi	r3,r3,-1
   523f4:	28ca703a 	and	r5,r5,r3
   523f8:	003f7e06 	br	521f4 <__alt_data_end+0xfffd39f4>
   523fc:	10bfffc4 	addi	r2,r2,-1
   52400:	1000491e 	bne	r2,zero,52528 <__subdf3+0x418>
   52404:	898fc83a 	sub	r7,r17,r6
   52408:	89e3803a 	cmpltu	r17,r17,r7
   5240c:	1947c83a 	sub	r3,r3,r5
   52410:	1c47c83a 	sub	r3,r3,r17
   52414:	3823883a 	mov	r17,r7
   52418:	003f9b06 	br	52288 <__alt_data_end+0xfffd3a88>
   5241c:	2988b03a 	or	r4,r5,r6
   52420:	203f5c26 	beq	r4,zero,52194 <__alt_data_end+0xfffd3994>
   52424:	10bfffc4 	addi	r2,r2,-1
   52428:	1000931e 	bne	r2,zero,52678 <__subdf3+0x568>
   5242c:	898d883a 	add	r6,r17,r6
   52430:	3463803a 	cmpltu	r17,r6,r17
   52434:	1947883a 	add	r3,r3,r5
   52438:	88c7883a 	add	r3,r17,r3
   5243c:	3023883a 	mov	r17,r6
   52440:	003fd306 	br	52390 <__alt_data_end+0xfffd3b90>
   52444:	1000541e 	bne	r2,zero,52598 <__subdf3+0x488>
   52448:	80800044 	addi	r2,r16,1
   5244c:	1081ffcc 	andi	r2,r2,2047
   52450:	01000044 	movi	r4,1
   52454:	2080a20e 	bge	r4,r2,526e0 <__subdf3+0x5d0>
   52458:	8989c83a 	sub	r4,r17,r6
   5245c:	8905803a 	cmpltu	r2,r17,r4
   52460:	1967c83a 	sub	r19,r3,r5
   52464:	98a7c83a 	sub	r19,r19,r2
   52468:	9880202c 	andhi	r2,r19,128
   5246c:	10006326 	beq	r2,zero,525fc <__subdf3+0x4ec>
   52470:	3463c83a 	sub	r17,r6,r17
   52474:	28c7c83a 	sub	r3,r5,r3
   52478:	344d803a 	cmpltu	r6,r6,r17
   5247c:	19a7c83a 	sub	r19,r3,r6
   52480:	3825883a 	mov	r18,r7
   52484:	983f861e 	bne	r19,zero,522a0 <__alt_data_end+0xfffd3aa0>
   52488:	8809883a 	mov	r4,r17
   5248c:	0043cb80 	call	43cb8 <__clzsi2>
   52490:	10800804 	addi	r2,r2,32
   52494:	113ffe04 	addi	r4,r2,-8
   52498:	00c007c4 	movi	r3,31
   5249c:	193f850e 	bge	r3,r4,522b4 <__alt_data_end+0xfffd3ab4>
   524a0:	10bff604 	addi	r2,r2,-40
   524a4:	8884983a 	sll	r2,r17,r2
   524a8:	0023883a 	mov	r17,zero
   524ac:	243f880e 	bge	r4,r16,522d0 <__alt_data_end+0xfffd3ad0>
   524b0:	00ffe034 	movhi	r3,65408
   524b4:	18ffffc4 	addi	r3,r3,-1
   524b8:	8121c83a 	sub	r16,r16,r4
   524bc:	10c6703a 	and	r3,r2,r3
   524c0:	003f3406 	br	52194 <__alt_data_end+0xfffd3994>
   524c4:	9100004c 	andi	r4,r18,1
   524c8:	000b883a 	mov	r5,zero
   524cc:	0005883a 	mov	r2,zero
   524d0:	003f4806 	br	521f4 <__alt_data_end+0xfffd39f4>
   524d4:	298cb03a 	or	r6,r5,r6
   524d8:	300cc03a 	cmpne	r6,r6,zero
   524dc:	0005883a 	mov	r2,zero
   524e0:	003f6406 	br	52274 <__alt_data_end+0xfffd3a74>
   524e4:	10009a1e 	bne	r2,zero,52750 <__subdf3+0x640>
   524e8:	82400044 	addi	r9,r16,1
   524ec:	4881ffcc 	andi	r2,r9,2047
   524f0:	02800044 	movi	r10,1
   524f4:	5080670e 	bge	r10,r2,52694 <__subdf3+0x584>
   524f8:	0081ffc4 	movi	r2,2047
   524fc:	4880af26 	beq	r9,r2,527bc <__subdf3+0x6ac>
   52500:	898d883a 	add	r6,r17,r6
   52504:	1945883a 	add	r2,r3,r5
   52508:	3447803a 	cmpltu	r3,r6,r17
   5250c:	1887883a 	add	r3,r3,r2
   52510:	182297fa 	slli	r17,r3,31
   52514:	300cd07a 	srli	r6,r6,1
   52518:	1806d07a 	srli	r3,r3,1
   5251c:	4821883a 	mov	r16,r9
   52520:	89a2b03a 	or	r17,r17,r6
   52524:	003f1b06 	br	52194 <__alt_data_end+0xfffd3994>
   52528:	0101ffc4 	movi	r4,2047
   5252c:	813f441e 	bne	r16,r4,52240 <__alt_data_end+0xfffd3a40>
   52530:	003f1806 	br	52194 <__alt_data_end+0xfffd3994>
   52534:	843ff844 	addi	r16,r16,-31
   52538:	01400804 	movi	r5,32
   5253c:	1408d83a 	srl	r4,r2,r16
   52540:	19405026 	beq	r3,r5,52684 <__subdf3+0x574>
   52544:	01401004 	movi	r5,64
   52548:	28c7c83a 	sub	r3,r5,r3
   5254c:	10c4983a 	sll	r2,r2,r3
   52550:	88a2b03a 	or	r17,r17,r2
   52554:	8822c03a 	cmpne	r17,r17,zero
   52558:	2462b03a 	or	r17,r4,r17
   5255c:	0007883a 	mov	r3,zero
   52560:	0021883a 	mov	r16,zero
   52564:	003f6d06 	br	5231c <__alt_data_end+0xfffd3b1c>
   52568:	11fff804 	addi	r7,r2,-32
   5256c:	01000804 	movi	r4,32
   52570:	29ced83a 	srl	r7,r5,r7
   52574:	11004526 	beq	r2,r4,5268c <__subdf3+0x57c>
   52578:	01001004 	movi	r4,64
   5257c:	2089c83a 	sub	r4,r4,r2
   52580:	2904983a 	sll	r2,r5,r4
   52584:	118cb03a 	or	r6,r2,r6
   52588:	300cc03a 	cmpne	r6,r6,zero
   5258c:	398cb03a 	or	r6,r7,r6
   52590:	0005883a 	mov	r2,zero
   52594:	003f3706 	br	52274 <__alt_data_end+0xfffd3a74>
   52598:	80002a26 	beq	r16,zero,52644 <__subdf3+0x534>
   5259c:	0101ffc4 	movi	r4,2047
   525a0:	49006626 	beq	r9,r4,5273c <__subdf3+0x62c>
   525a4:	0085c83a 	sub	r2,zero,r2
   525a8:	18c02034 	orhi	r3,r3,128
   525ac:	01000e04 	movi	r4,56
   525b0:	20807e16 	blt	r4,r2,527ac <__subdf3+0x69c>
   525b4:	010007c4 	movi	r4,31
   525b8:	2080e716 	blt	r4,r2,52958 <__subdf3+0x848>
   525bc:	01000804 	movi	r4,32
   525c0:	2089c83a 	sub	r4,r4,r2
   525c4:	1914983a 	sll	r10,r3,r4
   525c8:	8890d83a 	srl	r8,r17,r2
   525cc:	8908983a 	sll	r4,r17,r4
   525d0:	1884d83a 	srl	r2,r3,r2
   525d4:	5222b03a 	or	r17,r10,r8
   525d8:	2006c03a 	cmpne	r3,r4,zero
   525dc:	88e2b03a 	or	r17,r17,r3
   525e0:	3463c83a 	sub	r17,r6,r17
   525e4:	2885c83a 	sub	r2,r5,r2
   525e8:	344d803a 	cmpltu	r6,r6,r17
   525ec:	1187c83a 	sub	r3,r2,r6
   525f0:	4821883a 	mov	r16,r9
   525f4:	3825883a 	mov	r18,r7
   525f8:	003f2306 	br	52288 <__alt_data_end+0xfffd3a88>
   525fc:	24d0b03a 	or	r8,r4,r19
   52600:	40001b1e 	bne	r8,zero,52670 <__subdf3+0x560>
   52604:	0005883a 	mov	r2,zero
   52608:	0009883a 	mov	r4,zero
   5260c:	0021883a 	mov	r16,zero
   52610:	003f4906 	br	52338 <__alt_data_end+0xfffd3b38>
   52614:	010007c4 	movi	r4,31
   52618:	20803a16 	blt	r4,r2,52704 <__subdf3+0x5f4>
   5261c:	01000804 	movi	r4,32
   52620:	2089c83a 	sub	r4,r4,r2
   52624:	2912983a 	sll	r9,r5,r4
   52628:	3090d83a 	srl	r8,r6,r2
   5262c:	3108983a 	sll	r4,r6,r4
   52630:	2884d83a 	srl	r2,r5,r2
   52634:	4a12b03a 	or	r9,r9,r8
   52638:	2008c03a 	cmpne	r4,r4,zero
   5263c:	4912b03a 	or	r9,r9,r4
   52640:	003f4e06 	br	5237c <__alt_data_end+0xfffd3b7c>
   52644:	1c48b03a 	or	r4,r3,r17
   52648:	20003c26 	beq	r4,zero,5273c <__subdf3+0x62c>
   5264c:	0084303a 	nor	r2,zero,r2
   52650:	1000381e 	bne	r2,zero,52734 <__subdf3+0x624>
   52654:	3463c83a 	sub	r17,r6,r17
   52658:	28c5c83a 	sub	r2,r5,r3
   5265c:	344d803a 	cmpltu	r6,r6,r17
   52660:	1187c83a 	sub	r3,r2,r6
   52664:	4821883a 	mov	r16,r9
   52668:	3825883a 	mov	r18,r7
   5266c:	003f0606 	br	52288 <__alt_data_end+0xfffd3a88>
   52670:	2023883a 	mov	r17,r4
   52674:	003f0906 	br	5229c <__alt_data_end+0xfffd3a9c>
   52678:	0101ffc4 	movi	r4,2047
   5267c:	813f3a1e 	bne	r16,r4,52368 <__alt_data_end+0xfffd3b68>
   52680:	003ec406 	br	52194 <__alt_data_end+0xfffd3994>
   52684:	0005883a 	mov	r2,zero
   52688:	003fb106 	br	52550 <__alt_data_end+0xfffd3d50>
   5268c:	0005883a 	mov	r2,zero
   52690:	003fbc06 	br	52584 <__alt_data_end+0xfffd3d84>
   52694:	1c44b03a 	or	r2,r3,r17
   52698:	80008e1e 	bne	r16,zero,528d4 <__subdf3+0x7c4>
   5269c:	1000c826 	beq	r2,zero,529c0 <__subdf3+0x8b0>
   526a0:	2984b03a 	or	r2,r5,r6
   526a4:	103ebb26 	beq	r2,zero,52194 <__alt_data_end+0xfffd3994>
   526a8:	8989883a 	add	r4,r17,r6
   526ac:	1945883a 	add	r2,r3,r5
   526b0:	2447803a 	cmpltu	r3,r4,r17
   526b4:	1887883a 	add	r3,r3,r2
   526b8:	1880202c 	andhi	r2,r3,128
   526bc:	2023883a 	mov	r17,r4
   526c0:	103f1626 	beq	r2,zero,5231c <__alt_data_end+0xfffd3b1c>
   526c4:	00bfe034 	movhi	r2,65408
   526c8:	10bfffc4 	addi	r2,r2,-1
   526cc:	5021883a 	mov	r16,r10
   526d0:	1886703a 	and	r3,r3,r2
   526d4:	003eaf06 	br	52194 <__alt_data_end+0xfffd3994>
   526d8:	3825883a 	mov	r18,r7
   526dc:	003f0f06 	br	5231c <__alt_data_end+0xfffd3b1c>
   526e0:	1c44b03a 	or	r2,r3,r17
   526e4:	8000251e 	bne	r16,zero,5277c <__subdf3+0x66c>
   526e8:	1000661e 	bne	r2,zero,52884 <__subdf3+0x774>
   526ec:	2990b03a 	or	r8,r5,r6
   526f0:	40009626 	beq	r8,zero,5294c <__subdf3+0x83c>
   526f4:	2807883a 	mov	r3,r5
   526f8:	3023883a 	mov	r17,r6
   526fc:	3825883a 	mov	r18,r7
   52700:	003ea406 	br	52194 <__alt_data_end+0xfffd3994>
   52704:	127ff804 	addi	r9,r2,-32
   52708:	01000804 	movi	r4,32
   5270c:	2a52d83a 	srl	r9,r5,r9
   52710:	11008c26 	beq	r2,r4,52944 <__subdf3+0x834>
   52714:	01001004 	movi	r4,64
   52718:	2085c83a 	sub	r2,r4,r2
   5271c:	2884983a 	sll	r2,r5,r2
   52720:	118cb03a 	or	r6,r2,r6
   52724:	300cc03a 	cmpne	r6,r6,zero
   52728:	4992b03a 	or	r9,r9,r6
   5272c:	0005883a 	mov	r2,zero
   52730:	003f1206 	br	5237c <__alt_data_end+0xfffd3b7c>
   52734:	0101ffc4 	movi	r4,2047
   52738:	493f9c1e 	bne	r9,r4,525ac <__alt_data_end+0xfffd3dac>
   5273c:	2807883a 	mov	r3,r5
   52740:	3023883a 	mov	r17,r6
   52744:	4821883a 	mov	r16,r9
   52748:	3825883a 	mov	r18,r7
   5274c:	003e9106 	br	52194 <__alt_data_end+0xfffd3994>
   52750:	80001f1e 	bne	r16,zero,527d0 <__subdf3+0x6c0>
   52754:	1c48b03a 	or	r4,r3,r17
   52758:	20005a26 	beq	r4,zero,528c4 <__subdf3+0x7b4>
   5275c:	0084303a 	nor	r2,zero,r2
   52760:	1000561e 	bne	r2,zero,528bc <__subdf3+0x7ac>
   52764:	89a3883a 	add	r17,r17,r6
   52768:	1945883a 	add	r2,r3,r5
   5276c:	898d803a 	cmpltu	r6,r17,r6
   52770:	3087883a 	add	r3,r6,r2
   52774:	4821883a 	mov	r16,r9
   52778:	003f0506 	br	52390 <__alt_data_end+0xfffd3b90>
   5277c:	10002b1e 	bne	r2,zero,5282c <__subdf3+0x71c>
   52780:	2984b03a 	or	r2,r5,r6
   52784:	10008026 	beq	r2,zero,52988 <__subdf3+0x878>
   52788:	2807883a 	mov	r3,r5
   5278c:	3023883a 	mov	r17,r6
   52790:	3825883a 	mov	r18,r7
   52794:	0401ffc4 	movi	r16,2047
   52798:	003e7e06 	br	52194 <__alt_data_end+0xfffd3994>
   5279c:	3809883a 	mov	r4,r7
   527a0:	0011883a 	mov	r8,zero
   527a4:	0005883a 	mov	r2,zero
   527a8:	003ee306 	br	52338 <__alt_data_end+0xfffd3b38>
   527ac:	1c62b03a 	or	r17,r3,r17
   527b0:	8822c03a 	cmpne	r17,r17,zero
   527b4:	0005883a 	mov	r2,zero
   527b8:	003f8906 	br	525e0 <__alt_data_end+0xfffd3de0>
   527bc:	3809883a 	mov	r4,r7
   527c0:	4821883a 	mov	r16,r9
   527c4:	0011883a 	mov	r8,zero
   527c8:	0005883a 	mov	r2,zero
   527cc:	003eda06 	br	52338 <__alt_data_end+0xfffd3b38>
   527d0:	0101ffc4 	movi	r4,2047
   527d4:	49003b26 	beq	r9,r4,528c4 <__subdf3+0x7b4>
   527d8:	0085c83a 	sub	r2,zero,r2
   527dc:	18c02034 	orhi	r3,r3,128
   527e0:	01000e04 	movi	r4,56
   527e4:	20806e16 	blt	r4,r2,529a0 <__subdf3+0x890>
   527e8:	010007c4 	movi	r4,31
   527ec:	20807716 	blt	r4,r2,529cc <__subdf3+0x8bc>
   527f0:	01000804 	movi	r4,32
   527f4:	2089c83a 	sub	r4,r4,r2
   527f8:	1914983a 	sll	r10,r3,r4
   527fc:	8890d83a 	srl	r8,r17,r2
   52800:	8908983a 	sll	r4,r17,r4
   52804:	1884d83a 	srl	r2,r3,r2
   52808:	5222b03a 	or	r17,r10,r8
   5280c:	2006c03a 	cmpne	r3,r4,zero
   52810:	88e2b03a 	or	r17,r17,r3
   52814:	89a3883a 	add	r17,r17,r6
   52818:	1145883a 	add	r2,r2,r5
   5281c:	898d803a 	cmpltu	r6,r17,r6
   52820:	3087883a 	add	r3,r6,r2
   52824:	4821883a 	mov	r16,r9
   52828:	003ed906 	br	52390 <__alt_data_end+0xfffd3b90>
   5282c:	2984b03a 	or	r2,r5,r6
   52830:	10004226 	beq	r2,zero,5293c <__subdf3+0x82c>
   52834:	1808d0fa 	srli	r4,r3,3
   52838:	8822d0fa 	srli	r17,r17,3
   5283c:	1806977a 	slli	r3,r3,29
   52840:	2080022c 	andhi	r2,r4,8
   52844:	1c62b03a 	or	r17,r3,r17
   52848:	10000826 	beq	r2,zero,5286c <__subdf3+0x75c>
   5284c:	2812d0fa 	srli	r9,r5,3
   52850:	4880022c 	andhi	r2,r9,8
   52854:	1000051e 	bne	r2,zero,5286c <__subdf3+0x75c>
   52858:	300cd0fa 	srli	r6,r6,3
   5285c:	2804977a 	slli	r2,r5,29
   52860:	4809883a 	mov	r4,r9
   52864:	3825883a 	mov	r18,r7
   52868:	11a2b03a 	or	r17,r2,r6
   5286c:	8806d77a 	srli	r3,r17,29
   52870:	200890fa 	slli	r4,r4,3
   52874:	882290fa 	slli	r17,r17,3
   52878:	0401ffc4 	movi	r16,2047
   5287c:	1906b03a 	or	r3,r3,r4
   52880:	003e4406 	br	52194 <__alt_data_end+0xfffd3994>
   52884:	2984b03a 	or	r2,r5,r6
   52888:	103e4226 	beq	r2,zero,52194 <__alt_data_end+0xfffd3994>
   5288c:	8989c83a 	sub	r4,r17,r6
   52890:	8911803a 	cmpltu	r8,r17,r4
   52894:	1945c83a 	sub	r2,r3,r5
   52898:	1205c83a 	sub	r2,r2,r8
   5289c:	1200202c 	andhi	r8,r2,128
   528a0:	403e9a26 	beq	r8,zero,5230c <__alt_data_end+0xfffd3b0c>
   528a4:	3463c83a 	sub	r17,r6,r17
   528a8:	28c5c83a 	sub	r2,r5,r3
   528ac:	344d803a 	cmpltu	r6,r6,r17
   528b0:	1187c83a 	sub	r3,r2,r6
   528b4:	3825883a 	mov	r18,r7
   528b8:	003e3606 	br	52194 <__alt_data_end+0xfffd3994>
   528bc:	0101ffc4 	movi	r4,2047
   528c0:	493fc71e 	bne	r9,r4,527e0 <__alt_data_end+0xfffd3fe0>
   528c4:	2807883a 	mov	r3,r5
   528c8:	3023883a 	mov	r17,r6
   528cc:	4821883a 	mov	r16,r9
   528d0:	003e3006 	br	52194 <__alt_data_end+0xfffd3994>
   528d4:	10003626 	beq	r2,zero,529b0 <__subdf3+0x8a0>
   528d8:	2984b03a 	or	r2,r5,r6
   528dc:	10001726 	beq	r2,zero,5293c <__subdf3+0x82c>
   528e0:	1808d0fa 	srli	r4,r3,3
   528e4:	8822d0fa 	srli	r17,r17,3
   528e8:	1806977a 	slli	r3,r3,29
   528ec:	2080022c 	andhi	r2,r4,8
   528f0:	1c62b03a 	or	r17,r3,r17
   528f4:	10000726 	beq	r2,zero,52914 <__subdf3+0x804>
   528f8:	2812d0fa 	srli	r9,r5,3
   528fc:	4880022c 	andhi	r2,r9,8
   52900:	1000041e 	bne	r2,zero,52914 <__subdf3+0x804>
   52904:	300cd0fa 	srli	r6,r6,3
   52908:	2804977a 	slli	r2,r5,29
   5290c:	4809883a 	mov	r4,r9
   52910:	11a2b03a 	or	r17,r2,r6
   52914:	8806d77a 	srli	r3,r17,29
   52918:	200890fa 	slli	r4,r4,3
   5291c:	882290fa 	slli	r17,r17,3
   52920:	3825883a 	mov	r18,r7
   52924:	1906b03a 	or	r3,r3,r4
   52928:	0401ffc4 	movi	r16,2047
   5292c:	003e1906 	br	52194 <__alt_data_end+0xfffd3994>
   52930:	000b883a 	mov	r5,zero
   52934:	0005883a 	mov	r2,zero
   52938:	003e2e06 	br	521f4 <__alt_data_end+0xfffd39f4>
   5293c:	0401ffc4 	movi	r16,2047
   52940:	003e1406 	br	52194 <__alt_data_end+0xfffd3994>
   52944:	0005883a 	mov	r2,zero
   52948:	003f7506 	br	52720 <__alt_data_end+0xfffd3f20>
   5294c:	0005883a 	mov	r2,zero
   52950:	0009883a 	mov	r4,zero
   52954:	003e7806 	br	52338 <__alt_data_end+0xfffd3b38>
   52958:	123ff804 	addi	r8,r2,-32
   5295c:	01000804 	movi	r4,32
   52960:	1a10d83a 	srl	r8,r3,r8
   52964:	11002526 	beq	r2,r4,529fc <__subdf3+0x8ec>
   52968:	01001004 	movi	r4,64
   5296c:	2085c83a 	sub	r2,r4,r2
   52970:	1884983a 	sll	r2,r3,r2
   52974:	1444b03a 	or	r2,r2,r17
   52978:	1004c03a 	cmpne	r2,r2,zero
   5297c:	40a2b03a 	or	r17,r8,r2
   52980:	0005883a 	mov	r2,zero
   52984:	003f1606 	br	525e0 <__alt_data_end+0xfffd3de0>
   52988:	02000434 	movhi	r8,16
   5298c:	0009883a 	mov	r4,zero
   52990:	423fffc4 	addi	r8,r8,-1
   52994:	00bfffc4 	movi	r2,-1
   52998:	0401ffc4 	movi	r16,2047
   5299c:	003e6606 	br	52338 <__alt_data_end+0xfffd3b38>
   529a0:	1c62b03a 	or	r17,r3,r17
   529a4:	8822c03a 	cmpne	r17,r17,zero
   529a8:	0005883a 	mov	r2,zero
   529ac:	003f9906 	br	52814 <__alt_data_end+0xfffd4014>
   529b0:	2807883a 	mov	r3,r5
   529b4:	3023883a 	mov	r17,r6
   529b8:	0401ffc4 	movi	r16,2047
   529bc:	003df506 	br	52194 <__alt_data_end+0xfffd3994>
   529c0:	2807883a 	mov	r3,r5
   529c4:	3023883a 	mov	r17,r6
   529c8:	003df206 	br	52194 <__alt_data_end+0xfffd3994>
   529cc:	123ff804 	addi	r8,r2,-32
   529d0:	01000804 	movi	r4,32
   529d4:	1a10d83a 	srl	r8,r3,r8
   529d8:	11000a26 	beq	r2,r4,52a04 <__subdf3+0x8f4>
   529dc:	01001004 	movi	r4,64
   529e0:	2085c83a 	sub	r2,r4,r2
   529e4:	1884983a 	sll	r2,r3,r2
   529e8:	1444b03a 	or	r2,r2,r17
   529ec:	1004c03a 	cmpne	r2,r2,zero
   529f0:	40a2b03a 	or	r17,r8,r2
   529f4:	0005883a 	mov	r2,zero
   529f8:	003f8606 	br	52814 <__alt_data_end+0xfffd4014>
   529fc:	0005883a 	mov	r2,zero
   52a00:	003fdc06 	br	52974 <__alt_data_end+0xfffd4174>
   52a04:	0005883a 	mov	r2,zero
   52a08:	003ff706 	br	529e8 <__alt_data_end+0xfffd41e8>

00052a0c <__fixdfsi>:
   52a0c:	280cd53a 	srli	r6,r5,20
   52a10:	00c00434 	movhi	r3,16
   52a14:	18ffffc4 	addi	r3,r3,-1
   52a18:	3181ffcc 	andi	r6,r6,2047
   52a1c:	01c0ff84 	movi	r7,1022
   52a20:	28c6703a 	and	r3,r5,r3
   52a24:	280ad7fa 	srli	r5,r5,31
   52a28:	3980120e 	bge	r7,r6,52a74 <__fixdfsi+0x68>
   52a2c:	00810744 	movi	r2,1053
   52a30:	11800c16 	blt	r2,r6,52a64 <__fixdfsi+0x58>
   52a34:	00810cc4 	movi	r2,1075
   52a38:	1185c83a 	sub	r2,r2,r6
   52a3c:	01c007c4 	movi	r7,31
   52a40:	18c00434 	orhi	r3,r3,16
   52a44:	38800d16 	blt	r7,r2,52a7c <__fixdfsi+0x70>
   52a48:	31befb44 	addi	r6,r6,-1043
   52a4c:	2084d83a 	srl	r2,r4,r2
   52a50:	1986983a 	sll	r3,r3,r6
   52a54:	1884b03a 	or	r2,r3,r2
   52a58:	28000726 	beq	r5,zero,52a78 <__fixdfsi+0x6c>
   52a5c:	0085c83a 	sub	r2,zero,r2
   52a60:	f800283a 	ret
   52a64:	00a00034 	movhi	r2,32768
   52a68:	10bfffc4 	addi	r2,r2,-1
   52a6c:	2885883a 	add	r2,r5,r2
   52a70:	f800283a 	ret
   52a74:	0005883a 	mov	r2,zero
   52a78:	f800283a 	ret
   52a7c:	008104c4 	movi	r2,1043
   52a80:	1185c83a 	sub	r2,r2,r6
   52a84:	1884d83a 	srl	r2,r3,r2
   52a88:	003ff306 	br	52a58 <__alt_data_end+0xfffd4258>

00052a8c <__floatsidf>:
   52a8c:	defffd04 	addi	sp,sp,-12
   52a90:	dfc00215 	stw	ra,8(sp)
   52a94:	dc400115 	stw	r17,4(sp)
   52a98:	dc000015 	stw	r16,0(sp)
   52a9c:	20002b26 	beq	r4,zero,52b4c <__floatsidf+0xc0>
   52aa0:	2023883a 	mov	r17,r4
   52aa4:	2020d7fa 	srli	r16,r4,31
   52aa8:	20002d16 	blt	r4,zero,52b60 <__floatsidf+0xd4>
   52aac:	8809883a 	mov	r4,r17
   52ab0:	0043cb80 	call	43cb8 <__clzsi2>
   52ab4:	01410784 	movi	r5,1054
   52ab8:	288bc83a 	sub	r5,r5,r2
   52abc:	01010cc4 	movi	r4,1075
   52ac0:	2149c83a 	sub	r4,r4,r5
   52ac4:	00c007c4 	movi	r3,31
   52ac8:	1900160e 	bge	r3,r4,52b24 <__floatsidf+0x98>
   52acc:	00c104c4 	movi	r3,1043
   52ad0:	1947c83a 	sub	r3,r3,r5
   52ad4:	88c6983a 	sll	r3,r17,r3
   52ad8:	00800434 	movhi	r2,16
   52adc:	10bfffc4 	addi	r2,r2,-1
   52ae0:	1886703a 	and	r3,r3,r2
   52ae4:	2941ffcc 	andi	r5,r5,2047
   52ae8:	800d883a 	mov	r6,r16
   52aec:	0005883a 	mov	r2,zero
   52af0:	280a953a 	slli	r5,r5,20
   52af4:	31803fcc 	andi	r6,r6,255
   52af8:	01000434 	movhi	r4,16
   52afc:	300c97fa 	slli	r6,r6,31
   52b00:	213fffc4 	addi	r4,r4,-1
   52b04:	1906703a 	and	r3,r3,r4
   52b08:	1946b03a 	or	r3,r3,r5
   52b0c:	1986b03a 	or	r3,r3,r6
   52b10:	dfc00217 	ldw	ra,8(sp)
   52b14:	dc400117 	ldw	r17,4(sp)
   52b18:	dc000017 	ldw	r16,0(sp)
   52b1c:	dec00304 	addi	sp,sp,12
   52b20:	f800283a 	ret
   52b24:	00c002c4 	movi	r3,11
   52b28:	1887c83a 	sub	r3,r3,r2
   52b2c:	88c6d83a 	srl	r3,r17,r3
   52b30:	8904983a 	sll	r2,r17,r4
   52b34:	01000434 	movhi	r4,16
   52b38:	213fffc4 	addi	r4,r4,-1
   52b3c:	2941ffcc 	andi	r5,r5,2047
   52b40:	1906703a 	and	r3,r3,r4
   52b44:	800d883a 	mov	r6,r16
   52b48:	003fe906 	br	52af0 <__alt_data_end+0xfffd42f0>
   52b4c:	000d883a 	mov	r6,zero
   52b50:	000b883a 	mov	r5,zero
   52b54:	0007883a 	mov	r3,zero
   52b58:	0005883a 	mov	r2,zero
   52b5c:	003fe406 	br	52af0 <__alt_data_end+0xfffd42f0>
   52b60:	0123c83a 	sub	r17,zero,r4
   52b64:	003fd106 	br	52aac <__alt_data_end+0xfffd42ac>

00052b68 <__floatunsidf>:
   52b68:	defffe04 	addi	sp,sp,-8
   52b6c:	dc000015 	stw	r16,0(sp)
   52b70:	dfc00115 	stw	ra,4(sp)
   52b74:	2021883a 	mov	r16,r4
   52b78:	20002226 	beq	r4,zero,52c04 <__floatunsidf+0x9c>
   52b7c:	0043cb80 	call	43cb8 <__clzsi2>
   52b80:	01010784 	movi	r4,1054
   52b84:	2089c83a 	sub	r4,r4,r2
   52b88:	01810cc4 	movi	r6,1075
   52b8c:	310dc83a 	sub	r6,r6,r4
   52b90:	00c007c4 	movi	r3,31
   52b94:	1980120e 	bge	r3,r6,52be0 <__floatunsidf+0x78>
   52b98:	00c104c4 	movi	r3,1043
   52b9c:	1907c83a 	sub	r3,r3,r4
   52ba0:	80ca983a 	sll	r5,r16,r3
   52ba4:	00800434 	movhi	r2,16
   52ba8:	10bfffc4 	addi	r2,r2,-1
   52bac:	2101ffcc 	andi	r4,r4,2047
   52bb0:	0021883a 	mov	r16,zero
   52bb4:	288a703a 	and	r5,r5,r2
   52bb8:	2008953a 	slli	r4,r4,20
   52bbc:	00c00434 	movhi	r3,16
   52bc0:	18ffffc4 	addi	r3,r3,-1
   52bc4:	28c6703a 	and	r3,r5,r3
   52bc8:	8005883a 	mov	r2,r16
   52bcc:	1906b03a 	or	r3,r3,r4
   52bd0:	dfc00117 	ldw	ra,4(sp)
   52bd4:	dc000017 	ldw	r16,0(sp)
   52bd8:	dec00204 	addi	sp,sp,8
   52bdc:	f800283a 	ret
   52be0:	00c002c4 	movi	r3,11
   52be4:	188bc83a 	sub	r5,r3,r2
   52be8:	814ad83a 	srl	r5,r16,r5
   52bec:	00c00434 	movhi	r3,16
   52bf0:	18ffffc4 	addi	r3,r3,-1
   52bf4:	81a0983a 	sll	r16,r16,r6
   52bf8:	2101ffcc 	andi	r4,r4,2047
   52bfc:	28ca703a 	and	r5,r5,r3
   52c00:	003fed06 	br	52bb8 <__alt_data_end+0xfffd43b8>
   52c04:	0009883a 	mov	r4,zero
   52c08:	000b883a 	mov	r5,zero
   52c0c:	003fea06 	br	52bb8 <__alt_data_end+0xfffd43b8>

00052c10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   52c10:	defffe04 	addi	sp,sp,-8
   52c14:	dfc00115 	stw	ra,4(sp)
   52c18:	df000015 	stw	fp,0(sp)
   52c1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   52c20:	d0a00b17 	ldw	r2,-32724(gp)
   52c24:	10000326 	beq	r2,zero,52c34 <alt_get_errno+0x24>
   52c28:	d0a00b17 	ldw	r2,-32724(gp)
   52c2c:	103ee83a 	callr	r2
   52c30:	00000106 	br	52c38 <alt_get_errno+0x28>
   52c34:	d0a70504 	addi	r2,gp,-25580
}
   52c38:	e037883a 	mov	sp,fp
   52c3c:	dfc00117 	ldw	ra,4(sp)
   52c40:	df000017 	ldw	fp,0(sp)
   52c44:	dec00204 	addi	sp,sp,8
   52c48:	f800283a 	ret

00052c4c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   52c4c:	defffb04 	addi	sp,sp,-20
   52c50:	dfc00415 	stw	ra,16(sp)
   52c54:	df000315 	stw	fp,12(sp)
   52c58:	df000304 	addi	fp,sp,12
   52c5c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   52c60:	e0bfff17 	ldw	r2,-4(fp)
   52c64:	10000616 	blt	r2,zero,52c80 <close+0x34>
   52c68:	e0bfff17 	ldw	r2,-4(fp)
   52c6c:	10c00324 	muli	r3,r2,12
   52c70:	00800174 	movhi	r2,5
   52c74:	109a2f04 	addi	r2,r2,26812
   52c78:	1885883a 	add	r2,r3,r2
   52c7c:	00000106 	br	52c84 <close+0x38>
   52c80:	0005883a 	mov	r2,zero
   52c84:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   52c88:	e0bffd17 	ldw	r2,-12(fp)
   52c8c:	10001926 	beq	r2,zero,52cf4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   52c90:	e0bffd17 	ldw	r2,-12(fp)
   52c94:	10800017 	ldw	r2,0(r2)
   52c98:	10800417 	ldw	r2,16(r2)
   52c9c:	10000626 	beq	r2,zero,52cb8 <close+0x6c>
   52ca0:	e0bffd17 	ldw	r2,-12(fp)
   52ca4:	10800017 	ldw	r2,0(r2)
   52ca8:	10800417 	ldw	r2,16(r2)
   52cac:	e13ffd17 	ldw	r4,-12(fp)
   52cb0:	103ee83a 	callr	r2
   52cb4:	00000106 	br	52cbc <close+0x70>
   52cb8:	0005883a 	mov	r2,zero
   52cbc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   52cc0:	e13fff17 	ldw	r4,-4(fp)
   52cc4:	00535ac0 	call	535ac <alt_release_fd>
    if (rval < 0)
   52cc8:	e0bffe17 	ldw	r2,-8(fp)
   52ccc:	1000070e 	bge	r2,zero,52cec <close+0xa0>
    {
      ALT_ERRNO = -rval;
   52cd0:	0052c100 	call	52c10 <alt_get_errno>
   52cd4:	1007883a 	mov	r3,r2
   52cd8:	e0bffe17 	ldw	r2,-8(fp)
   52cdc:	0085c83a 	sub	r2,zero,r2
   52ce0:	18800015 	stw	r2,0(r3)
      return -1;
   52ce4:	00bfffc4 	movi	r2,-1
   52ce8:	00000706 	br	52d08 <close+0xbc>
    }
    return 0;
   52cec:	0005883a 	mov	r2,zero
   52cf0:	00000506 	br	52d08 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   52cf4:	0052c100 	call	52c10 <alt_get_errno>
   52cf8:	1007883a 	mov	r3,r2
   52cfc:	00801444 	movi	r2,81
   52d00:	18800015 	stw	r2,0(r3)
    return -1;
   52d04:	00bfffc4 	movi	r2,-1
  }
}
   52d08:	e037883a 	mov	sp,fp
   52d0c:	dfc00117 	ldw	ra,4(sp)
   52d10:	df000017 	ldw	fp,0(sp)
   52d14:	dec00204 	addi	sp,sp,8
   52d18:	f800283a 	ret

00052d1c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   52d1c:	defffc04 	addi	sp,sp,-16
   52d20:	df000315 	stw	fp,12(sp)
   52d24:	df000304 	addi	fp,sp,12
   52d28:	e13ffd15 	stw	r4,-12(fp)
   52d2c:	e17ffe15 	stw	r5,-8(fp)
   52d30:	e1bfff15 	stw	r6,-4(fp)
  return len;
   52d34:	e0bfff17 	ldw	r2,-4(fp)
}
   52d38:	e037883a 	mov	sp,fp
   52d3c:	df000017 	ldw	fp,0(sp)
   52d40:	dec00104 	addi	sp,sp,4
   52d44:	f800283a 	ret

00052d48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   52d48:	defffe04 	addi	sp,sp,-8
   52d4c:	dfc00115 	stw	ra,4(sp)
   52d50:	df000015 	stw	fp,0(sp)
   52d54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   52d58:	d0a00b17 	ldw	r2,-32724(gp)
   52d5c:	10000326 	beq	r2,zero,52d6c <alt_get_errno+0x24>
   52d60:	d0a00b17 	ldw	r2,-32724(gp)
   52d64:	103ee83a 	callr	r2
   52d68:	00000106 	br	52d70 <alt_get_errno+0x28>
   52d6c:	d0a70504 	addi	r2,gp,-25580
}
   52d70:	e037883a 	mov	sp,fp
   52d74:	dfc00117 	ldw	ra,4(sp)
   52d78:	df000017 	ldw	fp,0(sp)
   52d7c:	dec00204 	addi	sp,sp,8
   52d80:	f800283a 	ret

00052d84 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   52d84:	defffb04 	addi	sp,sp,-20
   52d88:	dfc00415 	stw	ra,16(sp)
   52d8c:	df000315 	stw	fp,12(sp)
   52d90:	df000304 	addi	fp,sp,12
   52d94:	e13ffe15 	stw	r4,-8(fp)
   52d98:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   52d9c:	e0bffe17 	ldw	r2,-8(fp)
   52da0:	10000616 	blt	r2,zero,52dbc <fstat+0x38>
   52da4:	e0bffe17 	ldw	r2,-8(fp)
   52da8:	10c00324 	muli	r3,r2,12
   52dac:	00800174 	movhi	r2,5
   52db0:	109a2f04 	addi	r2,r2,26812
   52db4:	1885883a 	add	r2,r3,r2
   52db8:	00000106 	br	52dc0 <fstat+0x3c>
   52dbc:	0005883a 	mov	r2,zero
   52dc0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   52dc4:	e0bffd17 	ldw	r2,-12(fp)
   52dc8:	10001026 	beq	r2,zero,52e0c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   52dcc:	e0bffd17 	ldw	r2,-12(fp)
   52dd0:	10800017 	ldw	r2,0(r2)
   52dd4:	10800817 	ldw	r2,32(r2)
   52dd8:	10000726 	beq	r2,zero,52df8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   52ddc:	e0bffd17 	ldw	r2,-12(fp)
   52de0:	10800017 	ldw	r2,0(r2)
   52de4:	10800817 	ldw	r2,32(r2)
   52de8:	e17fff17 	ldw	r5,-4(fp)
   52dec:	e13ffd17 	ldw	r4,-12(fp)
   52df0:	103ee83a 	callr	r2
   52df4:	00000a06 	br	52e20 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   52df8:	e0bfff17 	ldw	r2,-4(fp)
   52dfc:	00c80004 	movi	r3,8192
   52e00:	10c00115 	stw	r3,4(r2)
      return 0;
   52e04:	0005883a 	mov	r2,zero
   52e08:	00000506 	br	52e20 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   52e0c:	0052d480 	call	52d48 <alt_get_errno>
   52e10:	1007883a 	mov	r3,r2
   52e14:	00801444 	movi	r2,81
   52e18:	18800015 	stw	r2,0(r3)
    return -1;
   52e1c:	00bfffc4 	movi	r2,-1
  }
}
   52e20:	e037883a 	mov	sp,fp
   52e24:	dfc00117 	ldw	ra,4(sp)
   52e28:	df000017 	ldw	fp,0(sp)
   52e2c:	dec00204 	addi	sp,sp,8
   52e30:	f800283a 	ret

00052e34 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   52e34:	defff904 	addi	sp,sp,-28
   52e38:	dfc00615 	stw	ra,24(sp)
   52e3c:	df000515 	stw	fp,20(sp)
   52e40:	df000504 	addi	fp,sp,20
   52e44:	e13ffc15 	stw	r4,-16(fp)
   52e48:	e17ffd15 	stw	r5,-12(fp)
   52e4c:	e1bffe15 	stw	r6,-8(fp)
   52e50:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   52e54:	e0800217 	ldw	r2,8(fp)
   52e58:	d8800015 	stw	r2,0(sp)
   52e5c:	e1ffff17 	ldw	r7,-4(fp)
   52e60:	e1bffe17 	ldw	r6,-8(fp)
   52e64:	e17ffd17 	ldw	r5,-12(fp)
   52e68:	e13ffc17 	ldw	r4,-16(fp)
   52e6c:	0052fe40 	call	52fe4 <alt_iic_isr_register>
}  
   52e70:	e037883a 	mov	sp,fp
   52e74:	dfc00117 	ldw	ra,4(sp)
   52e78:	df000017 	ldw	fp,0(sp)
   52e7c:	dec00204 	addi	sp,sp,8
   52e80:	f800283a 	ret

00052e84 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   52e84:	defff904 	addi	sp,sp,-28
   52e88:	df000615 	stw	fp,24(sp)
   52e8c:	df000604 	addi	fp,sp,24
   52e90:	e13ffe15 	stw	r4,-8(fp)
   52e94:	e17fff15 	stw	r5,-4(fp)
   52e98:	e0bfff17 	ldw	r2,-4(fp)
   52e9c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52ea0:	0005303a 	rdctl	r2,status
   52ea4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52ea8:	e0fffb17 	ldw	r3,-20(fp)
   52eac:	00bfff84 	movi	r2,-2
   52eb0:	1884703a 	and	r2,r3,r2
   52eb4:	1001703a 	wrctl	status,r2
  
  return context;
   52eb8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   52ebc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   52ec0:	00c00044 	movi	r3,1
   52ec4:	e0bffa17 	ldw	r2,-24(fp)
   52ec8:	1884983a 	sll	r2,r3,r2
   52ecc:	1007883a 	mov	r3,r2
   52ed0:	d0a70617 	ldw	r2,-25576(gp)
   52ed4:	1884b03a 	or	r2,r3,r2
   52ed8:	d0a70615 	stw	r2,-25576(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   52edc:	d0a70617 	ldw	r2,-25576(gp)
   52ee0:	100170fa 	wrctl	ienable,r2
   52ee4:	e0bffc17 	ldw	r2,-16(fp)
   52ee8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52eec:	e0bffd17 	ldw	r2,-12(fp)
   52ef0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   52ef4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   52ef8:	0001883a 	nop
}
   52efc:	e037883a 	mov	sp,fp
   52f00:	df000017 	ldw	fp,0(sp)
   52f04:	dec00104 	addi	sp,sp,4
   52f08:	f800283a 	ret

00052f0c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   52f0c:	defff904 	addi	sp,sp,-28
   52f10:	df000615 	stw	fp,24(sp)
   52f14:	df000604 	addi	fp,sp,24
   52f18:	e13ffe15 	stw	r4,-8(fp)
   52f1c:	e17fff15 	stw	r5,-4(fp)
   52f20:	e0bfff17 	ldw	r2,-4(fp)
   52f24:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52f28:	0005303a 	rdctl	r2,status
   52f2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52f30:	e0fffb17 	ldw	r3,-20(fp)
   52f34:	00bfff84 	movi	r2,-2
   52f38:	1884703a 	and	r2,r3,r2
   52f3c:	1001703a 	wrctl	status,r2
  
  return context;
   52f40:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   52f44:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   52f48:	00c00044 	movi	r3,1
   52f4c:	e0bffa17 	ldw	r2,-24(fp)
   52f50:	1884983a 	sll	r2,r3,r2
   52f54:	0084303a 	nor	r2,zero,r2
   52f58:	1007883a 	mov	r3,r2
   52f5c:	d0a70617 	ldw	r2,-25576(gp)
   52f60:	1884703a 	and	r2,r3,r2
   52f64:	d0a70615 	stw	r2,-25576(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   52f68:	d0a70617 	ldw	r2,-25576(gp)
   52f6c:	100170fa 	wrctl	ienable,r2
   52f70:	e0bffc17 	ldw	r2,-16(fp)
   52f74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52f78:	e0bffd17 	ldw	r2,-12(fp)
   52f7c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   52f80:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   52f84:	0001883a 	nop
}
   52f88:	e037883a 	mov	sp,fp
   52f8c:	df000017 	ldw	fp,0(sp)
   52f90:	dec00104 	addi	sp,sp,4
   52f94:	f800283a 	ret

00052f98 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   52f98:	defffc04 	addi	sp,sp,-16
   52f9c:	df000315 	stw	fp,12(sp)
   52fa0:	df000304 	addi	fp,sp,12
   52fa4:	e13ffe15 	stw	r4,-8(fp)
   52fa8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   52fac:	000530fa 	rdctl	r2,ienable
   52fb0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   52fb4:	00c00044 	movi	r3,1
   52fb8:	e0bfff17 	ldw	r2,-4(fp)
   52fbc:	1884983a 	sll	r2,r3,r2
   52fc0:	1007883a 	mov	r3,r2
   52fc4:	e0bffd17 	ldw	r2,-12(fp)
   52fc8:	1884703a 	and	r2,r3,r2
   52fcc:	1004c03a 	cmpne	r2,r2,zero
   52fd0:	10803fcc 	andi	r2,r2,255
}
   52fd4:	e037883a 	mov	sp,fp
   52fd8:	df000017 	ldw	fp,0(sp)
   52fdc:	dec00104 	addi	sp,sp,4
   52fe0:	f800283a 	ret

00052fe4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   52fe4:	defff504 	addi	sp,sp,-44
   52fe8:	dfc00a15 	stw	ra,40(sp)
   52fec:	df000915 	stw	fp,36(sp)
   52ff0:	df000904 	addi	fp,sp,36
   52ff4:	e13ffc15 	stw	r4,-16(fp)
   52ff8:	e17ffd15 	stw	r5,-12(fp)
   52ffc:	e1bffe15 	stw	r6,-8(fp)
   53000:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   53004:	00bffa84 	movi	r2,-22
   53008:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   5300c:	e0bffd17 	ldw	r2,-12(fp)
   53010:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   53014:	e0bff817 	ldw	r2,-32(fp)
   53018:	10800808 	cmpgei	r2,r2,32
   5301c:	1000271e 	bne	r2,zero,530bc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53020:	0005303a 	rdctl	r2,status
   53024:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53028:	e0fffb17 	ldw	r3,-20(fp)
   5302c:	00bfff84 	movi	r2,-2
   53030:	1884703a 	and	r2,r3,r2
   53034:	1001703a 	wrctl	status,r2
  
  return context;
   53038:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   5303c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   53040:	008001b4 	movhi	r2,6
   53044:	10a5be04 	addi	r2,r2,-26888
   53048:	e0fff817 	ldw	r3,-32(fp)
   5304c:	180690fa 	slli	r3,r3,3
   53050:	10c5883a 	add	r2,r2,r3
   53054:	e0fffe17 	ldw	r3,-8(fp)
   53058:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   5305c:	008001b4 	movhi	r2,6
   53060:	10a5be04 	addi	r2,r2,-26888
   53064:	e0fff817 	ldw	r3,-32(fp)
   53068:	180690fa 	slli	r3,r3,3
   5306c:	10c5883a 	add	r2,r2,r3
   53070:	10800104 	addi	r2,r2,4
   53074:	e0ffff17 	ldw	r3,-4(fp)
   53078:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   5307c:	e0bffe17 	ldw	r2,-8(fp)
   53080:	10000526 	beq	r2,zero,53098 <alt_iic_isr_register+0xb4>
   53084:	e0bff817 	ldw	r2,-32(fp)
   53088:	100b883a 	mov	r5,r2
   5308c:	e13ffc17 	ldw	r4,-16(fp)
   53090:	0052e840 	call	52e84 <alt_ic_irq_enable>
   53094:	00000406 	br	530a8 <alt_iic_isr_register+0xc4>
   53098:	e0bff817 	ldw	r2,-32(fp)
   5309c:	100b883a 	mov	r5,r2
   530a0:	e13ffc17 	ldw	r4,-16(fp)
   530a4:	0052f0c0 	call	52f0c <alt_ic_irq_disable>
   530a8:	e0bff715 	stw	r2,-36(fp)
   530ac:	e0bffa17 	ldw	r2,-24(fp)
   530b0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   530b4:	e0bff917 	ldw	r2,-28(fp)
   530b8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   530bc:	e0bff717 	ldw	r2,-36(fp)
}
   530c0:	e037883a 	mov	sp,fp
   530c4:	dfc00117 	ldw	ra,4(sp)
   530c8:	df000017 	ldw	fp,0(sp)
   530cc:	dec00204 	addi	sp,sp,8
   530d0:	f800283a 	ret

000530d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   530d4:	defffe04 	addi	sp,sp,-8
   530d8:	dfc00115 	stw	ra,4(sp)
   530dc:	df000015 	stw	fp,0(sp)
   530e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   530e4:	d0a00b17 	ldw	r2,-32724(gp)
   530e8:	10000326 	beq	r2,zero,530f8 <alt_get_errno+0x24>
   530ec:	d0a00b17 	ldw	r2,-32724(gp)
   530f0:	103ee83a 	callr	r2
   530f4:	00000106 	br	530fc <alt_get_errno+0x28>
   530f8:	d0a70504 	addi	r2,gp,-25580
}
   530fc:	e037883a 	mov	sp,fp
   53100:	dfc00117 	ldw	ra,4(sp)
   53104:	df000017 	ldw	fp,0(sp)
   53108:	dec00204 	addi	sp,sp,8
   5310c:	f800283a 	ret

00053110 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   53110:	deffed04 	addi	sp,sp,-76
   53114:	dfc01215 	stw	ra,72(sp)
   53118:	df001115 	stw	fp,68(sp)
   5311c:	df001104 	addi	fp,sp,68
   53120:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   53124:	e0bfff17 	ldw	r2,-4(fp)
   53128:	10000616 	blt	r2,zero,53144 <isatty+0x34>
   5312c:	e0bfff17 	ldw	r2,-4(fp)
   53130:	10c00324 	muli	r3,r2,12
   53134:	00800174 	movhi	r2,5
   53138:	109a2f04 	addi	r2,r2,26812
   5313c:	1885883a 	add	r2,r3,r2
   53140:	00000106 	br	53148 <isatty+0x38>
   53144:	0005883a 	mov	r2,zero
   53148:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   5314c:	e0bfef17 	ldw	r2,-68(fp)
   53150:	10000e26 	beq	r2,zero,5318c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   53154:	e0bfef17 	ldw	r2,-68(fp)
   53158:	10800017 	ldw	r2,0(r2)
   5315c:	10800817 	ldw	r2,32(r2)
   53160:	1000021e 	bne	r2,zero,5316c <isatty+0x5c>
    {
      return 1;
   53164:	00800044 	movi	r2,1
   53168:	00000d06 	br	531a0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   5316c:	e0bff004 	addi	r2,fp,-64
   53170:	100b883a 	mov	r5,r2
   53174:	e13fff17 	ldw	r4,-4(fp)
   53178:	0052d840 	call	52d84 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   5317c:	e0bff117 	ldw	r2,-60(fp)
   53180:	10880020 	cmpeqi	r2,r2,8192
   53184:	10803fcc 	andi	r2,r2,255
   53188:	00000506 	br	531a0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   5318c:	00530d40 	call	530d4 <alt_get_errno>
   53190:	1007883a 	mov	r3,r2
   53194:	00801444 	movi	r2,81
   53198:	18800015 	stw	r2,0(r3)
    return 0;
   5319c:	0005883a 	mov	r2,zero
  }
}
   531a0:	e037883a 	mov	sp,fp
   531a4:	dfc00117 	ldw	ra,4(sp)
   531a8:	df000017 	ldw	fp,0(sp)
   531ac:	dec00204 	addi	sp,sp,8
   531b0:	f800283a 	ret

000531b4 <alt_load_section>:
   531b4:	defffc04 	addi	sp,sp,-16
   531b8:	df000315 	stw	fp,12(sp)
   531bc:	df000304 	addi	fp,sp,12
   531c0:	e13ffd15 	stw	r4,-12(fp)
   531c4:	e17ffe15 	stw	r5,-8(fp)
   531c8:	e1bfff15 	stw	r6,-4(fp)
   531cc:	e0fffe17 	ldw	r3,-8(fp)
   531d0:	e0bffd17 	ldw	r2,-12(fp)
   531d4:	18800c26 	beq	r3,r2,53208 <alt_load_section+0x54>
   531d8:	00000806 	br	531fc <alt_load_section+0x48>
   531dc:	e0bffe17 	ldw	r2,-8(fp)
   531e0:	10c00104 	addi	r3,r2,4
   531e4:	e0fffe15 	stw	r3,-8(fp)
   531e8:	e0fffd17 	ldw	r3,-12(fp)
   531ec:	19000104 	addi	r4,r3,4
   531f0:	e13ffd15 	stw	r4,-12(fp)
   531f4:	18c00017 	ldw	r3,0(r3)
   531f8:	10c00015 	stw	r3,0(r2)
   531fc:	e0fffe17 	ldw	r3,-8(fp)
   53200:	e0bfff17 	ldw	r2,-4(fp)
   53204:	18bff51e 	bne	r3,r2,531dc <__alt_data_end+0xfffd49dc>
   53208:	0001883a 	nop
   5320c:	e037883a 	mov	sp,fp
   53210:	df000017 	ldw	fp,0(sp)
   53214:	dec00104 	addi	sp,sp,4
   53218:	f800283a 	ret

0005321c <alt_load>:
   5321c:	defffe04 	addi	sp,sp,-8
   53220:	dfc00115 	stw	ra,4(sp)
   53224:	df000015 	stw	fp,0(sp)
   53228:	d839883a 	mov	fp,sp
   5322c:	01800174 	movhi	r6,5
   53230:	319eb704 	addi	r6,r6,31452
   53234:	01400174 	movhi	r5,5
   53238:	2957c804 	addi	r5,r5,24352
   5323c:	01000174 	movhi	r4,5
   53240:	211eb704 	addi	r4,r4,31452
   53244:	00531b40 	call	531b4 <alt_load_section>
   53248:	01800134 	movhi	r6,4
   5324c:	31809104 	addi	r6,r6,580
   53250:	01400134 	movhi	r5,4
   53254:	29400804 	addi	r5,r5,32
   53258:	01000134 	movhi	r4,4
   5325c:	21000804 	addi	r4,r4,32
   53260:	00531b40 	call	531b4 <alt_load_section>
   53264:	01800174 	movhi	r6,5
   53268:	3197c804 	addi	r6,r6,24352
   5326c:	01400174 	movhi	r5,5
   53270:	29555104 	addi	r5,r5,21828
   53274:	01000174 	movhi	r4,5
   53278:	21155104 	addi	r4,r4,21828
   5327c:	00531b40 	call	531b4 <alt_load_section>
   53280:	00546d00 	call	546d0 <alt_dcache_flush_all>
   53284:	00548b80 	call	548b8 <alt_icache_flush_all>
   53288:	0001883a 	nop
   5328c:	e037883a 	mov	sp,fp
   53290:	dfc00117 	ldw	ra,4(sp)
   53294:	df000017 	ldw	fp,0(sp)
   53298:	dec00204 	addi	sp,sp,8
   5329c:	f800283a 	ret

000532a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   532a0:	defffe04 	addi	sp,sp,-8
   532a4:	dfc00115 	stw	ra,4(sp)
   532a8:	df000015 	stw	fp,0(sp)
   532ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   532b0:	d0a00b17 	ldw	r2,-32724(gp)
   532b4:	10000326 	beq	r2,zero,532c4 <alt_get_errno+0x24>
   532b8:	d0a00b17 	ldw	r2,-32724(gp)
   532bc:	103ee83a 	callr	r2
   532c0:	00000106 	br	532c8 <alt_get_errno+0x28>
   532c4:	d0a70504 	addi	r2,gp,-25580
}
   532c8:	e037883a 	mov	sp,fp
   532cc:	dfc00117 	ldw	ra,4(sp)
   532d0:	df000017 	ldw	fp,0(sp)
   532d4:	dec00204 	addi	sp,sp,8
   532d8:	f800283a 	ret

000532dc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   532dc:	defff904 	addi	sp,sp,-28
   532e0:	dfc00615 	stw	ra,24(sp)
   532e4:	df000515 	stw	fp,20(sp)
   532e8:	df000504 	addi	fp,sp,20
   532ec:	e13ffd15 	stw	r4,-12(fp)
   532f0:	e17ffe15 	stw	r5,-8(fp)
   532f4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   532f8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   532fc:	e0bffd17 	ldw	r2,-12(fp)
   53300:	10000616 	blt	r2,zero,5331c <lseek+0x40>
   53304:	e0bffd17 	ldw	r2,-12(fp)
   53308:	10c00324 	muli	r3,r2,12
   5330c:	00800174 	movhi	r2,5
   53310:	109a2f04 	addi	r2,r2,26812
   53314:	1885883a 	add	r2,r3,r2
   53318:	00000106 	br	53320 <lseek+0x44>
   5331c:	0005883a 	mov	r2,zero
   53320:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   53324:	e0bffc17 	ldw	r2,-16(fp)
   53328:	10001026 	beq	r2,zero,5336c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   5332c:	e0bffc17 	ldw	r2,-16(fp)
   53330:	10800017 	ldw	r2,0(r2)
   53334:	10800717 	ldw	r2,28(r2)
   53338:	10000926 	beq	r2,zero,53360 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   5333c:	e0bffc17 	ldw	r2,-16(fp)
   53340:	10800017 	ldw	r2,0(r2)
   53344:	10800717 	ldw	r2,28(r2)
   53348:	e1bfff17 	ldw	r6,-4(fp)
   5334c:	e17ffe17 	ldw	r5,-8(fp)
   53350:	e13ffc17 	ldw	r4,-16(fp)
   53354:	103ee83a 	callr	r2
   53358:	e0bffb15 	stw	r2,-20(fp)
   5335c:	00000506 	br	53374 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   53360:	00bfde84 	movi	r2,-134
   53364:	e0bffb15 	stw	r2,-20(fp)
   53368:	00000206 	br	53374 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   5336c:	00bfebc4 	movi	r2,-81
   53370:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   53374:	e0bffb17 	ldw	r2,-20(fp)
   53378:	1000070e 	bge	r2,zero,53398 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   5337c:	00532a00 	call	532a0 <alt_get_errno>
   53380:	1007883a 	mov	r3,r2
   53384:	e0bffb17 	ldw	r2,-20(fp)
   53388:	0085c83a 	sub	r2,zero,r2
   5338c:	18800015 	stw	r2,0(r3)
    rc = -1;
   53390:	00bfffc4 	movi	r2,-1
   53394:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   53398:	e0bffb17 	ldw	r2,-20(fp)
}
   5339c:	e037883a 	mov	sp,fp
   533a0:	dfc00117 	ldw	ra,4(sp)
   533a4:	df000017 	ldw	fp,0(sp)
   533a8:	dec00204 	addi	sp,sp,8
   533ac:	f800283a 	ret

000533b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   533b0:	defffd04 	addi	sp,sp,-12
   533b4:	dfc00215 	stw	ra,8(sp)
   533b8:	df000115 	stw	fp,4(sp)
   533bc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   533c0:	0009883a 	mov	r4,zero
   533c4:	00538580 	call	53858 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   533c8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   533cc:	00538900 	call	53890 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   533d0:	01800174 	movhi	r6,5
   533d4:	3197c004 	addi	r6,r6,24320
   533d8:	01400174 	movhi	r5,5
   533dc:	2957c004 	addi	r5,r5,24320
   533e0:	01000174 	movhi	r4,5
   533e4:	2117c004 	addi	r4,r4,24320
   533e8:	0054a4c0 	call	54a4c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   533ec:	00547f80 	call	547f8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   533f0:	01000174 	movhi	r4,5
   533f4:	21121604 	addi	r4,r4,18520
   533f8:	00551b00 	call	551b0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   533fc:	d0a70717 	ldw	r2,-25572(gp)
   53400:	d0e70817 	ldw	r3,-25568(gp)
   53404:	d1270917 	ldw	r4,-25564(gp)
   53408:	200d883a 	mov	r6,r4
   5340c:	180b883a 	mov	r5,r3
   53410:	1009883a 	mov	r4,r2
   53414:	00418c40 	call	418c4 <main>
   53418:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   5341c:	01000044 	movi	r4,1
   53420:	0052c4c0 	call	52c4c <close>
  exit (result);
   53424:	e13fff17 	ldw	r4,-4(fp)
   53428:	00551c40 	call	551c4 <exit>

0005342c <__malloc_lock>:
   5342c:	defffe04 	addi	sp,sp,-8
   53430:	df000115 	stw	fp,4(sp)
   53434:	df000104 	addi	fp,sp,4
   53438:	e13fff15 	stw	r4,-4(fp)
   5343c:	0001883a 	nop
   53440:	e037883a 	mov	sp,fp
   53444:	df000017 	ldw	fp,0(sp)
   53448:	dec00104 	addi	sp,sp,4
   5344c:	f800283a 	ret

00053450 <__malloc_unlock>:
   53450:	defffe04 	addi	sp,sp,-8
   53454:	df000115 	stw	fp,4(sp)
   53458:	df000104 	addi	fp,sp,4
   5345c:	e13fff15 	stw	r4,-4(fp)
   53460:	0001883a 	nop
   53464:	e037883a 	mov	sp,fp
   53468:	df000017 	ldw	fp,0(sp)
   5346c:	dec00104 	addi	sp,sp,4
   53470:	f800283a 	ret

00053474 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   53474:	defffe04 	addi	sp,sp,-8
   53478:	dfc00115 	stw	ra,4(sp)
   5347c:	df000015 	stw	fp,0(sp)
   53480:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   53484:	d0a00b17 	ldw	r2,-32724(gp)
   53488:	10000326 	beq	r2,zero,53498 <alt_get_errno+0x24>
   5348c:	d0a00b17 	ldw	r2,-32724(gp)
   53490:	103ee83a 	callr	r2
   53494:	00000106 	br	5349c <alt_get_errno+0x28>
   53498:	d0a70504 	addi	r2,gp,-25580
}
   5349c:	e037883a 	mov	sp,fp
   534a0:	dfc00117 	ldw	ra,4(sp)
   534a4:	df000017 	ldw	fp,0(sp)
   534a8:	dec00204 	addi	sp,sp,8
   534ac:	f800283a 	ret

000534b0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   534b0:	defff904 	addi	sp,sp,-28
   534b4:	dfc00615 	stw	ra,24(sp)
   534b8:	df000515 	stw	fp,20(sp)
   534bc:	df000504 	addi	fp,sp,20
   534c0:	e13ffd15 	stw	r4,-12(fp)
   534c4:	e17ffe15 	stw	r5,-8(fp)
   534c8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   534cc:	e0bffd17 	ldw	r2,-12(fp)
   534d0:	10000616 	blt	r2,zero,534ec <read+0x3c>
   534d4:	e0bffd17 	ldw	r2,-12(fp)
   534d8:	10c00324 	muli	r3,r2,12
   534dc:	00800174 	movhi	r2,5
   534e0:	109a2f04 	addi	r2,r2,26812
   534e4:	1885883a 	add	r2,r3,r2
   534e8:	00000106 	br	534f0 <read+0x40>
   534ec:	0005883a 	mov	r2,zero
   534f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   534f4:	e0bffb17 	ldw	r2,-20(fp)
   534f8:	10002226 	beq	r2,zero,53584 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   534fc:	e0bffb17 	ldw	r2,-20(fp)
   53500:	10800217 	ldw	r2,8(r2)
   53504:	108000cc 	andi	r2,r2,3
   53508:	10800060 	cmpeqi	r2,r2,1
   5350c:	1000181e 	bne	r2,zero,53570 <read+0xc0>
        (fd->dev->read))
   53510:	e0bffb17 	ldw	r2,-20(fp)
   53514:	10800017 	ldw	r2,0(r2)
   53518:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   5351c:	10001426 	beq	r2,zero,53570 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   53520:	e0bffb17 	ldw	r2,-20(fp)
   53524:	10800017 	ldw	r2,0(r2)
   53528:	10800517 	ldw	r2,20(r2)
   5352c:	e0ffff17 	ldw	r3,-4(fp)
   53530:	180d883a 	mov	r6,r3
   53534:	e17ffe17 	ldw	r5,-8(fp)
   53538:	e13ffb17 	ldw	r4,-20(fp)
   5353c:	103ee83a 	callr	r2
   53540:	e0bffc15 	stw	r2,-16(fp)
   53544:	e0bffc17 	ldw	r2,-16(fp)
   53548:	1000070e 	bge	r2,zero,53568 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   5354c:	00534740 	call	53474 <alt_get_errno>
   53550:	1007883a 	mov	r3,r2
   53554:	e0bffc17 	ldw	r2,-16(fp)
   53558:	0085c83a 	sub	r2,zero,r2
   5355c:	18800015 	stw	r2,0(r3)
          return -1;
   53560:	00bfffc4 	movi	r2,-1
   53564:	00000c06 	br	53598 <read+0xe8>
        }
        return rval;
   53568:	e0bffc17 	ldw	r2,-16(fp)
   5356c:	00000a06 	br	53598 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   53570:	00534740 	call	53474 <alt_get_errno>
   53574:	1007883a 	mov	r3,r2
   53578:	00800344 	movi	r2,13
   5357c:	18800015 	stw	r2,0(r3)
   53580:	00000406 	br	53594 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   53584:	00534740 	call	53474 <alt_get_errno>
   53588:	1007883a 	mov	r3,r2
   5358c:	00801444 	movi	r2,81
   53590:	18800015 	stw	r2,0(r3)
  }
  return -1;
   53594:	00bfffc4 	movi	r2,-1
}
   53598:	e037883a 	mov	sp,fp
   5359c:	dfc00117 	ldw	ra,4(sp)
   535a0:	df000017 	ldw	fp,0(sp)
   535a4:	dec00204 	addi	sp,sp,8
   535a8:	f800283a 	ret

000535ac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   535ac:	defffe04 	addi	sp,sp,-8
   535b0:	df000115 	stw	fp,4(sp)
   535b4:	df000104 	addi	fp,sp,4
   535b8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   535bc:	e0bfff17 	ldw	r2,-4(fp)
   535c0:	108000d0 	cmplti	r2,r2,3
   535c4:	10000d1e 	bne	r2,zero,535fc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   535c8:	00800174 	movhi	r2,5
   535cc:	109a2f04 	addi	r2,r2,26812
   535d0:	e0ffff17 	ldw	r3,-4(fp)
   535d4:	18c00324 	muli	r3,r3,12
   535d8:	10c5883a 	add	r2,r2,r3
   535dc:	10800204 	addi	r2,r2,8
   535e0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   535e4:	00800174 	movhi	r2,5
   535e8:	109a2f04 	addi	r2,r2,26812
   535ec:	e0ffff17 	ldw	r3,-4(fp)
   535f0:	18c00324 	muli	r3,r3,12
   535f4:	10c5883a 	add	r2,r2,r3
   535f8:	10000015 	stw	zero,0(r2)
  }
}
   535fc:	0001883a 	nop
   53600:	e037883a 	mov	sp,fp
   53604:	df000017 	ldw	fp,0(sp)
   53608:	dec00104 	addi	sp,sp,4
   5360c:	f800283a 	ret

00053610 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   53610:	defff904 	addi	sp,sp,-28
   53614:	df000615 	stw	fp,24(sp)
   53618:	df000604 	addi	fp,sp,24
   5361c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53620:	0005303a 	rdctl	r2,status
   53624:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53628:	e0fffe17 	ldw	r3,-8(fp)
   5362c:	00bfff84 	movi	r2,-2
   53630:	1884703a 	and	r2,r3,r2
   53634:	1001703a 	wrctl	status,r2
  
  return context;
   53638:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   5363c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   53640:	d0a00d17 	ldw	r2,-32716(gp)
   53644:	10c000c4 	addi	r3,r2,3
   53648:	00bfff04 	movi	r2,-4
   5364c:	1884703a 	and	r2,r3,r2
   53650:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   53654:	d0e00d17 	ldw	r3,-32716(gp)
   53658:	e0bfff17 	ldw	r2,-4(fp)
   5365c:	1887883a 	add	r3,r3,r2
   53660:	00800234 	movhi	r2,8
   53664:	10ba0004 	addi	r2,r2,-6144
   53668:	10c0062e 	bgeu	r2,r3,53684 <sbrk+0x74>
   5366c:	e0bffb17 	ldw	r2,-20(fp)
   53670:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53674:	e0bffa17 	ldw	r2,-24(fp)
   53678:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   5367c:	00bfffc4 	movi	r2,-1
   53680:	00000b06 	br	536b0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   53684:	d0a00d17 	ldw	r2,-32716(gp)
   53688:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   5368c:	d0e00d17 	ldw	r3,-32716(gp)
   53690:	e0bfff17 	ldw	r2,-4(fp)
   53694:	1885883a 	add	r2,r3,r2
   53698:	d0a00d15 	stw	r2,-32716(gp)
   5369c:	e0bffb17 	ldw	r2,-20(fp)
   536a0:	e0bffc15 	stw	r2,-16(fp)
   536a4:	e0bffc17 	ldw	r2,-16(fp)
   536a8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   536ac:	e0bffd17 	ldw	r2,-12(fp)
} 
   536b0:	e037883a 	mov	sp,fp
   536b4:	df000017 	ldw	fp,0(sp)
   536b8:	dec00104 	addi	sp,sp,4
   536bc:	f800283a 	ret

000536c0 <usleep>:
   536c0:	defffd04 	addi	sp,sp,-12
   536c4:	dfc00215 	stw	ra,8(sp)
   536c8:	df000115 	stw	fp,4(sp)
   536cc:	df000104 	addi	fp,sp,4
   536d0:	e13fff15 	stw	r4,-4(fp)
   536d4:	e13fff17 	ldw	r4,-4(fp)
   536d8:	00545780 	call	54578 <alt_busy_sleep>
   536dc:	e037883a 	mov	sp,fp
   536e0:	dfc00117 	ldw	ra,4(sp)
   536e4:	df000017 	ldw	fp,0(sp)
   536e8:	dec00204 	addi	sp,sp,8
   536ec:	f800283a 	ret

000536f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   536f0:	defffe04 	addi	sp,sp,-8
   536f4:	dfc00115 	stw	ra,4(sp)
   536f8:	df000015 	stw	fp,0(sp)
   536fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   53700:	d0a00b17 	ldw	r2,-32724(gp)
   53704:	10000326 	beq	r2,zero,53714 <alt_get_errno+0x24>
   53708:	d0a00b17 	ldw	r2,-32724(gp)
   5370c:	103ee83a 	callr	r2
   53710:	00000106 	br	53718 <alt_get_errno+0x28>
   53714:	d0a70504 	addi	r2,gp,-25580
}
   53718:	e037883a 	mov	sp,fp
   5371c:	dfc00117 	ldw	ra,4(sp)
   53720:	df000017 	ldw	fp,0(sp)
   53724:	dec00204 	addi	sp,sp,8
   53728:	f800283a 	ret

0005372c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   5372c:	defff904 	addi	sp,sp,-28
   53730:	dfc00615 	stw	ra,24(sp)
   53734:	df000515 	stw	fp,20(sp)
   53738:	df000504 	addi	fp,sp,20
   5373c:	e13ffd15 	stw	r4,-12(fp)
   53740:	e17ffe15 	stw	r5,-8(fp)
   53744:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   53748:	e0bffd17 	ldw	r2,-12(fp)
   5374c:	10000616 	blt	r2,zero,53768 <write+0x3c>
   53750:	e0bffd17 	ldw	r2,-12(fp)
   53754:	10c00324 	muli	r3,r2,12
   53758:	00800174 	movhi	r2,5
   5375c:	109a2f04 	addi	r2,r2,26812
   53760:	1885883a 	add	r2,r3,r2
   53764:	00000106 	br	5376c <write+0x40>
   53768:	0005883a 	mov	r2,zero
   5376c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   53770:	e0bffb17 	ldw	r2,-20(fp)
   53774:	10002126 	beq	r2,zero,537fc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   53778:	e0bffb17 	ldw	r2,-20(fp)
   5377c:	10800217 	ldw	r2,8(r2)
   53780:	108000cc 	andi	r2,r2,3
   53784:	10001826 	beq	r2,zero,537e8 <write+0xbc>
   53788:	e0bffb17 	ldw	r2,-20(fp)
   5378c:	10800017 	ldw	r2,0(r2)
   53790:	10800617 	ldw	r2,24(r2)
   53794:	10001426 	beq	r2,zero,537e8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   53798:	e0bffb17 	ldw	r2,-20(fp)
   5379c:	10800017 	ldw	r2,0(r2)
   537a0:	10800617 	ldw	r2,24(r2)
   537a4:	e0ffff17 	ldw	r3,-4(fp)
   537a8:	180d883a 	mov	r6,r3
   537ac:	e17ffe17 	ldw	r5,-8(fp)
   537b0:	e13ffb17 	ldw	r4,-20(fp)
   537b4:	103ee83a 	callr	r2
   537b8:	e0bffc15 	stw	r2,-16(fp)
   537bc:	e0bffc17 	ldw	r2,-16(fp)
   537c0:	1000070e 	bge	r2,zero,537e0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   537c4:	00536f00 	call	536f0 <alt_get_errno>
   537c8:	1007883a 	mov	r3,r2
   537cc:	e0bffc17 	ldw	r2,-16(fp)
   537d0:	0085c83a 	sub	r2,zero,r2
   537d4:	18800015 	stw	r2,0(r3)
        return -1;
   537d8:	00bfffc4 	movi	r2,-1
   537dc:	00000c06 	br	53810 <write+0xe4>
      }
      return rval;
   537e0:	e0bffc17 	ldw	r2,-16(fp)
   537e4:	00000a06 	br	53810 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   537e8:	00536f00 	call	536f0 <alt_get_errno>
   537ec:	1007883a 	mov	r3,r2
   537f0:	00800344 	movi	r2,13
   537f4:	18800015 	stw	r2,0(r3)
   537f8:	00000406 	br	5380c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   537fc:	00536f00 	call	536f0 <alt_get_errno>
   53800:	1007883a 	mov	r3,r2
   53804:	00801444 	movi	r2,81
   53808:	18800015 	stw	r2,0(r3)
  }
  return -1;
   5380c:	00bfffc4 	movi	r2,-1
}
   53810:	e037883a 	mov	sp,fp
   53814:	dfc00117 	ldw	ra,4(sp)
   53818:	df000017 	ldw	fp,0(sp)
   5381c:	dec00204 	addi	sp,sp,8
   53820:	f800283a 	ret

00053824 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   53824:	defffd04 	addi	sp,sp,-12
   53828:	dfc00215 	stw	ra,8(sp)
   5382c:	df000115 	stw	fp,4(sp)
   53830:	df000104 	addi	fp,sp,4
   53834:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   53838:	d1600804 	addi	r5,gp,-32736
   5383c:	e13fff17 	ldw	r4,-4(fp)
   53840:	00547540 	call	54754 <alt_dev_llist_insert>
}
   53844:	e037883a 	mov	sp,fp
   53848:	dfc00117 	ldw	ra,4(sp)
   5384c:	df000017 	ldw	fp,0(sp)
   53850:	dec00204 	addi	sp,sp,8
   53854:	f800283a 	ret

00053858 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   53858:	defffd04 	addi	sp,sp,-12
   5385c:	dfc00215 	stw	ra,8(sp)
   53860:	df000115 	stw	fp,4(sp)
   53864:	df000104 	addi	fp,sp,4
   53868:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   5386c:	0054ec00 	call	54ec0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   53870:	00800044 	movi	r2,1
   53874:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   53878:	0001883a 	nop
   5387c:	e037883a 	mov	sp,fp
   53880:	dfc00117 	ldw	ra,4(sp)
   53884:	df000017 	ldw	fp,0(sp)
   53888:	dec00204 	addi	sp,sp,8
   5388c:	f800283a 	ret

00053890 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   53890:	defffe04 	addi	sp,sp,-8
   53894:	dfc00115 	stw	ra,4(sp)
   53898:	df000015 	stw	fp,0(sp)
   5389c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   538a0:	01c0fa04 	movi	r7,1000
   538a4:	000d883a 	mov	r6,zero
   538a8:	000b883a 	mov	r5,zero
   538ac:	01000234 	movhi	r4,8
   538b0:	21040004 	addi	r4,r4,4096
   538b4:	00543d00 	call	543d0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   538b8:	018000c4 	movi	r6,3
   538bc:	000b883a 	mov	r5,zero
   538c0:	01000174 	movhi	r4,5
   538c4:	211a9904 	addi	r4,r4,27236
   538c8:	0053a540 	call	53a54 <altera_avalon_jtag_uart_init>
   538cc:	01000174 	movhi	r4,5
   538d0:	211a8f04 	addi	r4,r4,27196
   538d4:	00538240 	call	53824 <alt_dev_reg>
}
   538d8:	0001883a 	nop
   538dc:	e037883a 	mov	sp,fp
   538e0:	dfc00117 	ldw	ra,4(sp)
   538e4:	df000017 	ldw	fp,0(sp)
   538e8:	dec00204 	addi	sp,sp,8
   538ec:	f800283a 	ret

000538f0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   538f0:	defffa04 	addi	sp,sp,-24
   538f4:	dfc00515 	stw	ra,20(sp)
   538f8:	df000415 	stw	fp,16(sp)
   538fc:	df000404 	addi	fp,sp,16
   53900:	e13ffd15 	stw	r4,-12(fp)
   53904:	e17ffe15 	stw	r5,-8(fp)
   53908:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   5390c:	e0bffd17 	ldw	r2,-12(fp)
   53910:	10800017 	ldw	r2,0(r2)
   53914:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   53918:	e0bffc17 	ldw	r2,-16(fp)
   5391c:	10c00a04 	addi	r3,r2,40
   53920:	e0bffd17 	ldw	r2,-12(fp)
   53924:	10800217 	ldw	r2,8(r2)
   53928:	100f883a 	mov	r7,r2
   5392c:	e1bfff17 	ldw	r6,-4(fp)
   53930:	e17ffe17 	ldw	r5,-8(fp)
   53934:	1809883a 	mov	r4,r3
   53938:	0053f180 	call	53f18 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   5393c:	e037883a 	mov	sp,fp
   53940:	dfc00117 	ldw	ra,4(sp)
   53944:	df000017 	ldw	fp,0(sp)
   53948:	dec00204 	addi	sp,sp,8
   5394c:	f800283a 	ret

00053950 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   53950:	defffa04 	addi	sp,sp,-24
   53954:	dfc00515 	stw	ra,20(sp)
   53958:	df000415 	stw	fp,16(sp)
   5395c:	df000404 	addi	fp,sp,16
   53960:	e13ffd15 	stw	r4,-12(fp)
   53964:	e17ffe15 	stw	r5,-8(fp)
   53968:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   5396c:	e0bffd17 	ldw	r2,-12(fp)
   53970:	10800017 	ldw	r2,0(r2)
   53974:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   53978:	e0bffc17 	ldw	r2,-16(fp)
   5397c:	10c00a04 	addi	r3,r2,40
   53980:	e0bffd17 	ldw	r2,-12(fp)
   53984:	10800217 	ldw	r2,8(r2)
   53988:	100f883a 	mov	r7,r2
   5398c:	e1bfff17 	ldw	r6,-4(fp)
   53990:	e17ffe17 	ldw	r5,-8(fp)
   53994:	1809883a 	mov	r4,r3
   53998:	00541340 	call	54134 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   5399c:	e037883a 	mov	sp,fp
   539a0:	dfc00117 	ldw	ra,4(sp)
   539a4:	df000017 	ldw	fp,0(sp)
   539a8:	dec00204 	addi	sp,sp,8
   539ac:	f800283a 	ret

000539b0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   539b0:	defffc04 	addi	sp,sp,-16
   539b4:	dfc00315 	stw	ra,12(sp)
   539b8:	df000215 	stw	fp,8(sp)
   539bc:	df000204 	addi	fp,sp,8
   539c0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   539c4:	e0bfff17 	ldw	r2,-4(fp)
   539c8:	10800017 	ldw	r2,0(r2)
   539cc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   539d0:	e0bffe17 	ldw	r2,-8(fp)
   539d4:	10c00a04 	addi	r3,r2,40
   539d8:	e0bfff17 	ldw	r2,-4(fp)
   539dc:	10800217 	ldw	r2,8(r2)
   539e0:	100b883a 	mov	r5,r2
   539e4:	1809883a 	mov	r4,r3
   539e8:	0053dc00 	call	53dc0 <altera_avalon_jtag_uart_close>
}
   539ec:	e037883a 	mov	sp,fp
   539f0:	dfc00117 	ldw	ra,4(sp)
   539f4:	df000017 	ldw	fp,0(sp)
   539f8:	dec00204 	addi	sp,sp,8
   539fc:	f800283a 	ret

00053a00 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   53a00:	defffa04 	addi	sp,sp,-24
   53a04:	dfc00515 	stw	ra,20(sp)
   53a08:	df000415 	stw	fp,16(sp)
   53a0c:	df000404 	addi	fp,sp,16
   53a10:	e13ffd15 	stw	r4,-12(fp)
   53a14:	e17ffe15 	stw	r5,-8(fp)
   53a18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   53a1c:	e0bffd17 	ldw	r2,-12(fp)
   53a20:	10800017 	ldw	r2,0(r2)
   53a24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   53a28:	e0bffc17 	ldw	r2,-16(fp)
   53a2c:	10800a04 	addi	r2,r2,40
   53a30:	e1bfff17 	ldw	r6,-4(fp)
   53a34:	e17ffe17 	ldw	r5,-8(fp)
   53a38:	1009883a 	mov	r4,r2
   53a3c:	0053e280 	call	53e28 <altera_avalon_jtag_uart_ioctl>
}
   53a40:	e037883a 	mov	sp,fp
   53a44:	dfc00117 	ldw	ra,4(sp)
   53a48:	df000017 	ldw	fp,0(sp)
   53a4c:	dec00204 	addi	sp,sp,8
   53a50:	f800283a 	ret

00053a54 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   53a54:	defffa04 	addi	sp,sp,-24
   53a58:	dfc00515 	stw	ra,20(sp)
   53a5c:	df000415 	stw	fp,16(sp)
   53a60:	df000404 	addi	fp,sp,16
   53a64:	e13ffd15 	stw	r4,-12(fp)
   53a68:	e17ffe15 	stw	r5,-8(fp)
   53a6c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   53a70:	e0bffd17 	ldw	r2,-12(fp)
   53a74:	00c00044 	movi	r3,1
   53a78:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   53a7c:	e0bffd17 	ldw	r2,-12(fp)
   53a80:	10800017 	ldw	r2,0(r2)
   53a84:	10800104 	addi	r2,r2,4
   53a88:	1007883a 	mov	r3,r2
   53a8c:	e0bffd17 	ldw	r2,-12(fp)
   53a90:	10800817 	ldw	r2,32(r2)
   53a94:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   53a98:	e0bffe17 	ldw	r2,-8(fp)
   53a9c:	e0ffff17 	ldw	r3,-4(fp)
   53aa0:	d8000015 	stw	zero,0(sp)
   53aa4:	e1fffd17 	ldw	r7,-12(fp)
   53aa8:	01800174 	movhi	r6,5
   53aac:	318ec504 	addi	r6,r6,15124
   53ab0:	180b883a 	mov	r5,r3
   53ab4:	1009883a 	mov	r4,r2
   53ab8:	0052e340 	call	52e34 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   53abc:	e0bffd17 	ldw	r2,-12(fp)
   53ac0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   53ac4:	e0bffd17 	ldw	r2,-12(fp)
   53ac8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   53acc:	d0e70b17 	ldw	r3,-25556(gp)
   53ad0:	e1fffd17 	ldw	r7,-12(fp)
   53ad4:	01800174 	movhi	r6,5
   53ad8:	318f4804 	addi	r6,r6,15648
   53adc:	180b883a 	mov	r5,r3
   53ae0:	1009883a 	mov	r4,r2
   53ae4:	005444c0 	call	5444c <alt_alarm_start>
   53ae8:	1000040e 	bge	r2,zero,53afc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   53aec:	e0fffd17 	ldw	r3,-12(fp)
   53af0:	00a00034 	movhi	r2,32768
   53af4:	10bfffc4 	addi	r2,r2,-1
   53af8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   53afc:	0001883a 	nop
   53b00:	e037883a 	mov	sp,fp
   53b04:	dfc00117 	ldw	ra,4(sp)
   53b08:	df000017 	ldw	fp,0(sp)
   53b0c:	dec00204 	addi	sp,sp,8
   53b10:	f800283a 	ret

00053b14 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   53b14:	defff804 	addi	sp,sp,-32
   53b18:	df000715 	stw	fp,28(sp)
   53b1c:	df000704 	addi	fp,sp,28
   53b20:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   53b24:	e0bfff17 	ldw	r2,-4(fp)
   53b28:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   53b2c:	e0bffb17 	ldw	r2,-20(fp)
   53b30:	10800017 	ldw	r2,0(r2)
   53b34:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   53b38:	e0bffc17 	ldw	r2,-16(fp)
   53b3c:	10800104 	addi	r2,r2,4
   53b40:	10800037 	ldwio	r2,0(r2)
   53b44:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   53b48:	e0bffd17 	ldw	r2,-12(fp)
   53b4c:	1080c00c 	andi	r2,r2,768
   53b50:	10006d26 	beq	r2,zero,53d08 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   53b54:	e0bffd17 	ldw	r2,-12(fp)
   53b58:	1080400c 	andi	r2,r2,256
   53b5c:	10003526 	beq	r2,zero,53c34 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   53b60:	00800074 	movhi	r2,1
   53b64:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   53b68:	e0bffb17 	ldw	r2,-20(fp)
   53b6c:	10800a17 	ldw	r2,40(r2)
   53b70:	10800044 	addi	r2,r2,1
   53b74:	1081ffcc 	andi	r2,r2,2047
   53b78:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   53b7c:	e0bffb17 	ldw	r2,-20(fp)
   53b80:	10c00b17 	ldw	r3,44(r2)
   53b84:	e0bffe17 	ldw	r2,-8(fp)
   53b88:	18801526 	beq	r3,r2,53be0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   53b8c:	e0bffc17 	ldw	r2,-16(fp)
   53b90:	10800037 	ldwio	r2,0(r2)
   53b94:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   53b98:	e0bff917 	ldw	r2,-28(fp)
   53b9c:	10a0000c 	andi	r2,r2,32768
   53ba0:	10001126 	beq	r2,zero,53be8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   53ba4:	e0bffb17 	ldw	r2,-20(fp)
   53ba8:	10800a17 	ldw	r2,40(r2)
   53bac:	e0fff917 	ldw	r3,-28(fp)
   53bb0:	1809883a 	mov	r4,r3
   53bb4:	e0fffb17 	ldw	r3,-20(fp)
   53bb8:	1885883a 	add	r2,r3,r2
   53bbc:	10800e04 	addi	r2,r2,56
   53bc0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   53bc4:	e0bffb17 	ldw	r2,-20(fp)
   53bc8:	10800a17 	ldw	r2,40(r2)
   53bcc:	10800044 	addi	r2,r2,1
   53bd0:	10c1ffcc 	andi	r3,r2,2047
   53bd4:	e0bffb17 	ldw	r2,-20(fp)
   53bd8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   53bdc:	003fe206 	br	53b68 <__alt_data_end+0xfffd5368>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   53be0:	0001883a 	nop
   53be4:	00000106 	br	53bec <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   53be8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   53bec:	e0bff917 	ldw	r2,-28(fp)
   53bf0:	10bfffec 	andhi	r2,r2,65535
   53bf4:	10000f26 	beq	r2,zero,53c34 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   53bf8:	e0bffb17 	ldw	r2,-20(fp)
   53bfc:	10c00817 	ldw	r3,32(r2)
   53c00:	00bfff84 	movi	r2,-2
   53c04:	1886703a 	and	r3,r3,r2
   53c08:	e0bffb17 	ldw	r2,-20(fp)
   53c0c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   53c10:	e0bffc17 	ldw	r2,-16(fp)
   53c14:	10800104 	addi	r2,r2,4
   53c18:	1007883a 	mov	r3,r2
   53c1c:	e0bffb17 	ldw	r2,-20(fp)
   53c20:	10800817 	ldw	r2,32(r2)
   53c24:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   53c28:	e0bffc17 	ldw	r2,-16(fp)
   53c2c:	10800104 	addi	r2,r2,4
   53c30:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   53c34:	e0bffd17 	ldw	r2,-12(fp)
   53c38:	1080800c 	andi	r2,r2,512
   53c3c:	103fbe26 	beq	r2,zero,53b38 <__alt_data_end+0xfffd5338>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   53c40:	e0bffd17 	ldw	r2,-12(fp)
   53c44:	1004d43a 	srli	r2,r2,16
   53c48:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   53c4c:	00001406 	br	53ca0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   53c50:	e0bffc17 	ldw	r2,-16(fp)
   53c54:	e0fffb17 	ldw	r3,-20(fp)
   53c58:	18c00d17 	ldw	r3,52(r3)
   53c5c:	e13ffb17 	ldw	r4,-20(fp)
   53c60:	20c7883a 	add	r3,r4,r3
   53c64:	18c20e04 	addi	r3,r3,2104
   53c68:	18c00003 	ldbu	r3,0(r3)
   53c6c:	18c03fcc 	andi	r3,r3,255
   53c70:	18c0201c 	xori	r3,r3,128
   53c74:	18ffe004 	addi	r3,r3,-128
   53c78:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   53c7c:	e0bffb17 	ldw	r2,-20(fp)
   53c80:	10800d17 	ldw	r2,52(r2)
   53c84:	10800044 	addi	r2,r2,1
   53c88:	10c1ffcc 	andi	r3,r2,2047
   53c8c:	e0bffb17 	ldw	r2,-20(fp)
   53c90:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   53c94:	e0bffa17 	ldw	r2,-24(fp)
   53c98:	10bfffc4 	addi	r2,r2,-1
   53c9c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   53ca0:	e0bffa17 	ldw	r2,-24(fp)
   53ca4:	10000526 	beq	r2,zero,53cbc <altera_avalon_jtag_uart_irq+0x1a8>
   53ca8:	e0bffb17 	ldw	r2,-20(fp)
   53cac:	10c00d17 	ldw	r3,52(r2)
   53cb0:	e0bffb17 	ldw	r2,-20(fp)
   53cb4:	10800c17 	ldw	r2,48(r2)
   53cb8:	18bfe51e 	bne	r3,r2,53c50 <__alt_data_end+0xfffd5450>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   53cbc:	e0bffa17 	ldw	r2,-24(fp)
   53cc0:	103f9d26 	beq	r2,zero,53b38 <__alt_data_end+0xfffd5338>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   53cc4:	e0bffb17 	ldw	r2,-20(fp)
   53cc8:	10c00817 	ldw	r3,32(r2)
   53ccc:	00bfff44 	movi	r2,-3
   53cd0:	1886703a 	and	r3,r3,r2
   53cd4:	e0bffb17 	ldw	r2,-20(fp)
   53cd8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   53cdc:	e0bffb17 	ldw	r2,-20(fp)
   53ce0:	10800017 	ldw	r2,0(r2)
   53ce4:	10800104 	addi	r2,r2,4
   53ce8:	1007883a 	mov	r3,r2
   53cec:	e0bffb17 	ldw	r2,-20(fp)
   53cf0:	10800817 	ldw	r2,32(r2)
   53cf4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   53cf8:	e0bffc17 	ldw	r2,-16(fp)
   53cfc:	10800104 	addi	r2,r2,4
   53d00:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   53d04:	003f8c06 	br	53b38 <__alt_data_end+0xfffd5338>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   53d08:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   53d0c:	0001883a 	nop
   53d10:	e037883a 	mov	sp,fp
   53d14:	df000017 	ldw	fp,0(sp)
   53d18:	dec00104 	addi	sp,sp,4
   53d1c:	f800283a 	ret

00053d20 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   53d20:	defff804 	addi	sp,sp,-32
   53d24:	df000715 	stw	fp,28(sp)
   53d28:	df000704 	addi	fp,sp,28
   53d2c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   53d30:	e0bffb17 	ldw	r2,-20(fp)
   53d34:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   53d38:	e0bff917 	ldw	r2,-28(fp)
   53d3c:	10800017 	ldw	r2,0(r2)
   53d40:	10800104 	addi	r2,r2,4
   53d44:	10800037 	ldwio	r2,0(r2)
   53d48:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   53d4c:	e0bffa17 	ldw	r2,-24(fp)
   53d50:	1081000c 	andi	r2,r2,1024
   53d54:	10000b26 	beq	r2,zero,53d84 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   53d58:	e0bff917 	ldw	r2,-28(fp)
   53d5c:	10800017 	ldw	r2,0(r2)
   53d60:	10800104 	addi	r2,r2,4
   53d64:	1007883a 	mov	r3,r2
   53d68:	e0bff917 	ldw	r2,-28(fp)
   53d6c:	10800817 	ldw	r2,32(r2)
   53d70:	10810014 	ori	r2,r2,1024
   53d74:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   53d78:	e0bff917 	ldw	r2,-28(fp)
   53d7c:	10000915 	stw	zero,36(r2)
   53d80:	00000a06 	br	53dac <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   53d84:	e0bff917 	ldw	r2,-28(fp)
   53d88:	10c00917 	ldw	r3,36(r2)
   53d8c:	00a00034 	movhi	r2,32768
   53d90:	10bfff04 	addi	r2,r2,-4
   53d94:	10c00536 	bltu	r2,r3,53dac <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   53d98:	e0bff917 	ldw	r2,-28(fp)
   53d9c:	10800917 	ldw	r2,36(r2)
   53da0:	10c00044 	addi	r3,r2,1
   53da4:	e0bff917 	ldw	r2,-28(fp)
   53da8:	10c00915 	stw	r3,36(r2)
   53dac:	d0a70b17 	ldw	r2,-25556(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   53db0:	e037883a 	mov	sp,fp
   53db4:	df000017 	ldw	fp,0(sp)
   53db8:	dec00104 	addi	sp,sp,4
   53dbc:	f800283a 	ret

00053dc0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   53dc0:	defffd04 	addi	sp,sp,-12
   53dc4:	df000215 	stw	fp,8(sp)
   53dc8:	df000204 	addi	fp,sp,8
   53dcc:	e13ffe15 	stw	r4,-8(fp)
   53dd0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   53dd4:	00000506 	br	53dec <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   53dd8:	e0bfff17 	ldw	r2,-4(fp)
   53ddc:	1090000c 	andi	r2,r2,16384
   53de0:	10000226 	beq	r2,zero,53dec <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   53de4:	00bffd44 	movi	r2,-11
   53de8:	00000b06 	br	53e18 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   53dec:	e0bffe17 	ldw	r2,-8(fp)
   53df0:	10c00d17 	ldw	r3,52(r2)
   53df4:	e0bffe17 	ldw	r2,-8(fp)
   53df8:	10800c17 	ldw	r2,48(r2)
   53dfc:	18800526 	beq	r3,r2,53e14 <altera_avalon_jtag_uart_close+0x54>
   53e00:	e0bffe17 	ldw	r2,-8(fp)
   53e04:	10c00917 	ldw	r3,36(r2)
   53e08:	e0bffe17 	ldw	r2,-8(fp)
   53e0c:	10800117 	ldw	r2,4(r2)
   53e10:	18bff136 	bltu	r3,r2,53dd8 <__alt_data_end+0xfffd55d8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   53e14:	0005883a 	mov	r2,zero
}
   53e18:	e037883a 	mov	sp,fp
   53e1c:	df000017 	ldw	fp,0(sp)
   53e20:	dec00104 	addi	sp,sp,4
   53e24:	f800283a 	ret

00053e28 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   53e28:	defffa04 	addi	sp,sp,-24
   53e2c:	df000515 	stw	fp,20(sp)
   53e30:	df000504 	addi	fp,sp,20
   53e34:	e13ffd15 	stw	r4,-12(fp)
   53e38:	e17ffe15 	stw	r5,-8(fp)
   53e3c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   53e40:	00bff9c4 	movi	r2,-25
   53e44:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   53e48:	e0bffe17 	ldw	r2,-8(fp)
   53e4c:	10da8060 	cmpeqi	r3,r2,27137
   53e50:	1800031e 	bne	r3,zero,53e60 <altera_avalon_jtag_uart_ioctl+0x38>
   53e54:	109a80a0 	cmpeqi	r2,r2,27138
   53e58:	1000181e 	bne	r2,zero,53ebc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   53e5c:	00002906 	br	53f04 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   53e60:	e0bffd17 	ldw	r2,-12(fp)
   53e64:	10c00117 	ldw	r3,4(r2)
   53e68:	00a00034 	movhi	r2,32768
   53e6c:	10bfffc4 	addi	r2,r2,-1
   53e70:	18802126 	beq	r3,r2,53ef8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   53e74:	e0bfff17 	ldw	r2,-4(fp)
   53e78:	10800017 	ldw	r2,0(r2)
   53e7c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   53e80:	e0bffc17 	ldw	r2,-16(fp)
   53e84:	10800090 	cmplti	r2,r2,2
   53e88:	1000061e 	bne	r2,zero,53ea4 <altera_avalon_jtag_uart_ioctl+0x7c>
   53e8c:	e0fffc17 	ldw	r3,-16(fp)
   53e90:	00a00034 	movhi	r2,32768
   53e94:	10bfffc4 	addi	r2,r2,-1
   53e98:	18800226 	beq	r3,r2,53ea4 <altera_avalon_jtag_uart_ioctl+0x7c>
   53e9c:	e0bffc17 	ldw	r2,-16(fp)
   53ea0:	00000206 	br	53eac <altera_avalon_jtag_uart_ioctl+0x84>
   53ea4:	00a00034 	movhi	r2,32768
   53ea8:	10bfff84 	addi	r2,r2,-2
   53eac:	e0fffd17 	ldw	r3,-12(fp)
   53eb0:	18800115 	stw	r2,4(r3)
      rc = 0;
   53eb4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   53eb8:	00000f06 	br	53ef8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   53ebc:	e0bffd17 	ldw	r2,-12(fp)
   53ec0:	10c00117 	ldw	r3,4(r2)
   53ec4:	00a00034 	movhi	r2,32768
   53ec8:	10bfffc4 	addi	r2,r2,-1
   53ecc:	18800c26 	beq	r3,r2,53f00 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   53ed0:	e0bffd17 	ldw	r2,-12(fp)
   53ed4:	10c00917 	ldw	r3,36(r2)
   53ed8:	e0bffd17 	ldw	r2,-12(fp)
   53edc:	10800117 	ldw	r2,4(r2)
   53ee0:	1885803a 	cmpltu	r2,r3,r2
   53ee4:	10c03fcc 	andi	r3,r2,255
   53ee8:	e0bfff17 	ldw	r2,-4(fp)
   53eec:	10c00015 	stw	r3,0(r2)
      rc = 0;
   53ef0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   53ef4:	00000206 	br	53f00 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   53ef8:	0001883a 	nop
   53efc:	00000106 	br	53f04 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   53f00:	0001883a 	nop

  default:
    break;
  }

  return rc;
   53f04:	e0bffb17 	ldw	r2,-20(fp)
}
   53f08:	e037883a 	mov	sp,fp
   53f0c:	df000017 	ldw	fp,0(sp)
   53f10:	dec00104 	addi	sp,sp,4
   53f14:	f800283a 	ret

00053f18 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   53f18:	defff304 	addi	sp,sp,-52
   53f1c:	dfc00c15 	stw	ra,48(sp)
   53f20:	df000b15 	stw	fp,44(sp)
   53f24:	df000b04 	addi	fp,sp,44
   53f28:	e13ffc15 	stw	r4,-16(fp)
   53f2c:	e17ffd15 	stw	r5,-12(fp)
   53f30:	e1bffe15 	stw	r6,-8(fp)
   53f34:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   53f38:	e0bffd17 	ldw	r2,-12(fp)
   53f3c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   53f40:	00004706 	br	54060 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   53f44:	e0bffc17 	ldw	r2,-16(fp)
   53f48:	10800a17 	ldw	r2,40(r2)
   53f4c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   53f50:	e0bffc17 	ldw	r2,-16(fp)
   53f54:	10800b17 	ldw	r2,44(r2)
   53f58:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   53f5c:	e0fff717 	ldw	r3,-36(fp)
   53f60:	e0bff817 	ldw	r2,-32(fp)
   53f64:	18800536 	bltu	r3,r2,53f7c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   53f68:	e0fff717 	ldw	r3,-36(fp)
   53f6c:	e0bff817 	ldw	r2,-32(fp)
   53f70:	1885c83a 	sub	r2,r3,r2
   53f74:	e0bff615 	stw	r2,-40(fp)
   53f78:	00000406 	br	53f8c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   53f7c:	00c20004 	movi	r3,2048
   53f80:	e0bff817 	ldw	r2,-32(fp)
   53f84:	1885c83a 	sub	r2,r3,r2
   53f88:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   53f8c:	e0bff617 	ldw	r2,-40(fp)
   53f90:	10001e26 	beq	r2,zero,5400c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   53f94:	e0fffe17 	ldw	r3,-8(fp)
   53f98:	e0bff617 	ldw	r2,-40(fp)
   53f9c:	1880022e 	bgeu	r3,r2,53fa8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   53fa0:	e0bffe17 	ldw	r2,-8(fp)
   53fa4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   53fa8:	e0bffc17 	ldw	r2,-16(fp)
   53fac:	10c00e04 	addi	r3,r2,56
   53fb0:	e0bff817 	ldw	r2,-32(fp)
   53fb4:	1885883a 	add	r2,r3,r2
   53fb8:	e1bff617 	ldw	r6,-40(fp)
   53fbc:	100b883a 	mov	r5,r2
   53fc0:	e13ff517 	ldw	r4,-44(fp)
   53fc4:	004bd5c0 	call	4bd5c <memcpy>
      ptr   += n;
   53fc8:	e0fff517 	ldw	r3,-44(fp)
   53fcc:	e0bff617 	ldw	r2,-40(fp)
   53fd0:	1885883a 	add	r2,r3,r2
   53fd4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   53fd8:	e0fffe17 	ldw	r3,-8(fp)
   53fdc:	e0bff617 	ldw	r2,-40(fp)
   53fe0:	1885c83a 	sub	r2,r3,r2
   53fe4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   53fe8:	e0fff817 	ldw	r3,-32(fp)
   53fec:	e0bff617 	ldw	r2,-40(fp)
   53ff0:	1885883a 	add	r2,r3,r2
   53ff4:	10c1ffcc 	andi	r3,r2,2047
   53ff8:	e0bffc17 	ldw	r2,-16(fp)
   53ffc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   54000:	e0bffe17 	ldw	r2,-8(fp)
   54004:	00bfcf16 	blt	zero,r2,53f44 <__alt_data_end+0xfffd5744>
   54008:	00000106 	br	54010 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   5400c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   54010:	e0fff517 	ldw	r3,-44(fp)
   54014:	e0bffd17 	ldw	r2,-12(fp)
   54018:	1880141e 	bne	r3,r2,5406c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   5401c:	e0bfff17 	ldw	r2,-4(fp)
   54020:	1090000c 	andi	r2,r2,16384
   54024:	1000131e 	bne	r2,zero,54074 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   54028:	0001883a 	nop
   5402c:	e0bffc17 	ldw	r2,-16(fp)
   54030:	10c00a17 	ldw	r3,40(r2)
   54034:	e0bff717 	ldw	r2,-36(fp)
   54038:	1880051e 	bne	r3,r2,54050 <altera_avalon_jtag_uart_read+0x138>
   5403c:	e0bffc17 	ldw	r2,-16(fp)
   54040:	10c00917 	ldw	r3,36(r2)
   54044:	e0bffc17 	ldw	r2,-16(fp)
   54048:	10800117 	ldw	r2,4(r2)
   5404c:	18bff736 	bltu	r3,r2,5402c <__alt_data_end+0xfffd582c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   54050:	e0bffc17 	ldw	r2,-16(fp)
   54054:	10c00a17 	ldw	r3,40(r2)
   54058:	e0bff717 	ldw	r2,-36(fp)
   5405c:	18800726 	beq	r3,r2,5407c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   54060:	e0bffe17 	ldw	r2,-8(fp)
   54064:	00bfb716 	blt	zero,r2,53f44 <__alt_data_end+0xfffd5744>
   54068:	00000506 	br	54080 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   5406c:	0001883a 	nop
   54070:	00000306 	br	54080 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   54074:	0001883a 	nop
   54078:	00000106 	br	54080 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   5407c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   54080:	e0fff517 	ldw	r3,-44(fp)
   54084:	e0bffd17 	ldw	r2,-12(fp)
   54088:	18801826 	beq	r3,r2,540ec <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5408c:	0005303a 	rdctl	r2,status
   54090:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54094:	e0fffb17 	ldw	r3,-20(fp)
   54098:	00bfff84 	movi	r2,-2
   5409c:	1884703a 	and	r2,r3,r2
   540a0:	1001703a 	wrctl	status,r2
  
  return context;
   540a4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   540a8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   540ac:	e0bffc17 	ldw	r2,-16(fp)
   540b0:	10800817 	ldw	r2,32(r2)
   540b4:	10c00054 	ori	r3,r2,1
   540b8:	e0bffc17 	ldw	r2,-16(fp)
   540bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   540c0:	e0bffc17 	ldw	r2,-16(fp)
   540c4:	10800017 	ldw	r2,0(r2)
   540c8:	10800104 	addi	r2,r2,4
   540cc:	1007883a 	mov	r3,r2
   540d0:	e0bffc17 	ldw	r2,-16(fp)
   540d4:	10800817 	ldw	r2,32(r2)
   540d8:	18800035 	stwio	r2,0(r3)
   540dc:	e0bffa17 	ldw	r2,-24(fp)
   540e0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   540e4:	e0bff917 	ldw	r2,-28(fp)
   540e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   540ec:	e0fff517 	ldw	r3,-44(fp)
   540f0:	e0bffd17 	ldw	r2,-12(fp)
   540f4:	18800426 	beq	r3,r2,54108 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   540f8:	e0fff517 	ldw	r3,-44(fp)
   540fc:	e0bffd17 	ldw	r2,-12(fp)
   54100:	1885c83a 	sub	r2,r3,r2
   54104:	00000606 	br	54120 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   54108:	e0bfff17 	ldw	r2,-4(fp)
   5410c:	1090000c 	andi	r2,r2,16384
   54110:	10000226 	beq	r2,zero,5411c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   54114:	00bffd44 	movi	r2,-11
   54118:	00000106 	br	54120 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   5411c:	00bffec4 	movi	r2,-5
}
   54120:	e037883a 	mov	sp,fp
   54124:	dfc00117 	ldw	ra,4(sp)
   54128:	df000017 	ldw	fp,0(sp)
   5412c:	dec00204 	addi	sp,sp,8
   54130:	f800283a 	ret

00054134 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   54134:	defff304 	addi	sp,sp,-52
   54138:	dfc00c15 	stw	ra,48(sp)
   5413c:	df000b15 	stw	fp,44(sp)
   54140:	df000b04 	addi	fp,sp,44
   54144:	e13ffc15 	stw	r4,-16(fp)
   54148:	e17ffd15 	stw	r5,-12(fp)
   5414c:	e1bffe15 	stw	r6,-8(fp)
   54150:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   54154:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   54158:	e0bffd17 	ldw	r2,-12(fp)
   5415c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   54160:	00003706 	br	54240 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   54164:	e0bffc17 	ldw	r2,-16(fp)
   54168:	10800c17 	ldw	r2,48(r2)
   5416c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   54170:	e0bffc17 	ldw	r2,-16(fp)
   54174:	10800d17 	ldw	r2,52(r2)
   54178:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   5417c:	e0fff917 	ldw	r3,-28(fp)
   54180:	e0bff517 	ldw	r2,-44(fp)
   54184:	1880062e 	bgeu	r3,r2,541a0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   54188:	e0fff517 	ldw	r3,-44(fp)
   5418c:	e0bff917 	ldw	r2,-28(fp)
   54190:	1885c83a 	sub	r2,r3,r2
   54194:	10bfffc4 	addi	r2,r2,-1
   54198:	e0bff615 	stw	r2,-40(fp)
   5419c:	00000b06 	br	541cc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   541a0:	e0bff517 	ldw	r2,-44(fp)
   541a4:	10000526 	beq	r2,zero,541bc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   541a8:	00c20004 	movi	r3,2048
   541ac:	e0bff917 	ldw	r2,-28(fp)
   541b0:	1885c83a 	sub	r2,r3,r2
   541b4:	e0bff615 	stw	r2,-40(fp)
   541b8:	00000406 	br	541cc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   541bc:	00c1ffc4 	movi	r3,2047
   541c0:	e0bff917 	ldw	r2,-28(fp)
   541c4:	1885c83a 	sub	r2,r3,r2
   541c8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   541cc:	e0bff617 	ldw	r2,-40(fp)
   541d0:	10001e26 	beq	r2,zero,5424c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   541d4:	e0fffe17 	ldw	r3,-8(fp)
   541d8:	e0bff617 	ldw	r2,-40(fp)
   541dc:	1880022e 	bgeu	r3,r2,541e8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   541e0:	e0bffe17 	ldw	r2,-8(fp)
   541e4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   541e8:	e0bffc17 	ldw	r2,-16(fp)
   541ec:	10c20e04 	addi	r3,r2,2104
   541f0:	e0bff917 	ldw	r2,-28(fp)
   541f4:	1885883a 	add	r2,r3,r2
   541f8:	e1bff617 	ldw	r6,-40(fp)
   541fc:	e17ffd17 	ldw	r5,-12(fp)
   54200:	1009883a 	mov	r4,r2
   54204:	004bd5c0 	call	4bd5c <memcpy>
      ptr   += n;
   54208:	e0fffd17 	ldw	r3,-12(fp)
   5420c:	e0bff617 	ldw	r2,-40(fp)
   54210:	1885883a 	add	r2,r3,r2
   54214:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   54218:	e0fffe17 	ldw	r3,-8(fp)
   5421c:	e0bff617 	ldw	r2,-40(fp)
   54220:	1885c83a 	sub	r2,r3,r2
   54224:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   54228:	e0fff917 	ldw	r3,-28(fp)
   5422c:	e0bff617 	ldw	r2,-40(fp)
   54230:	1885883a 	add	r2,r3,r2
   54234:	10c1ffcc 	andi	r3,r2,2047
   54238:	e0bffc17 	ldw	r2,-16(fp)
   5423c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   54240:	e0bffe17 	ldw	r2,-8(fp)
   54244:	00bfc716 	blt	zero,r2,54164 <__alt_data_end+0xfffd5964>
   54248:	00000106 	br	54250 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   5424c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54250:	0005303a 	rdctl	r2,status
   54254:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54258:	e0fffb17 	ldw	r3,-20(fp)
   5425c:	00bfff84 	movi	r2,-2
   54260:	1884703a 	and	r2,r3,r2
   54264:	1001703a 	wrctl	status,r2
  
  return context;
   54268:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   5426c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   54270:	e0bffc17 	ldw	r2,-16(fp)
   54274:	10800817 	ldw	r2,32(r2)
   54278:	10c00094 	ori	r3,r2,2
   5427c:	e0bffc17 	ldw	r2,-16(fp)
   54280:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   54284:	e0bffc17 	ldw	r2,-16(fp)
   54288:	10800017 	ldw	r2,0(r2)
   5428c:	10800104 	addi	r2,r2,4
   54290:	1007883a 	mov	r3,r2
   54294:	e0bffc17 	ldw	r2,-16(fp)
   54298:	10800817 	ldw	r2,32(r2)
   5429c:	18800035 	stwio	r2,0(r3)
   542a0:	e0bffa17 	ldw	r2,-24(fp)
   542a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   542a8:	e0bff817 	ldw	r2,-32(fp)
   542ac:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   542b0:	e0bffe17 	ldw	r2,-8(fp)
   542b4:	0080100e 	bge	zero,r2,542f8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   542b8:	e0bfff17 	ldw	r2,-4(fp)
   542bc:	1090000c 	andi	r2,r2,16384
   542c0:	1000101e 	bne	r2,zero,54304 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   542c4:	0001883a 	nop
   542c8:	e0bffc17 	ldw	r2,-16(fp)
   542cc:	10c00d17 	ldw	r3,52(r2)
   542d0:	e0bff517 	ldw	r2,-44(fp)
   542d4:	1880051e 	bne	r3,r2,542ec <altera_avalon_jtag_uart_write+0x1b8>
   542d8:	e0bffc17 	ldw	r2,-16(fp)
   542dc:	10c00917 	ldw	r3,36(r2)
   542e0:	e0bffc17 	ldw	r2,-16(fp)
   542e4:	10800117 	ldw	r2,4(r2)
   542e8:	18bff736 	bltu	r3,r2,542c8 <__alt_data_end+0xfffd5ac8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   542ec:	e0bffc17 	ldw	r2,-16(fp)
   542f0:	10800917 	ldw	r2,36(r2)
   542f4:	1000051e 	bne	r2,zero,5430c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   542f8:	e0bffe17 	ldw	r2,-8(fp)
   542fc:	00bfd016 	blt	zero,r2,54240 <__alt_data_end+0xfffd5a40>
   54300:	00000306 	br	54310 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   54304:	0001883a 	nop
   54308:	00000106 	br	54310 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   5430c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   54310:	e0fffd17 	ldw	r3,-12(fp)
   54314:	e0bff717 	ldw	r2,-36(fp)
   54318:	18800426 	beq	r3,r2,5432c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   5431c:	e0fffd17 	ldw	r3,-12(fp)
   54320:	e0bff717 	ldw	r2,-36(fp)
   54324:	1885c83a 	sub	r2,r3,r2
   54328:	00000606 	br	54344 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   5432c:	e0bfff17 	ldw	r2,-4(fp)
   54330:	1090000c 	andi	r2,r2,16384
   54334:	10000226 	beq	r2,zero,54340 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   54338:	00bffd44 	movi	r2,-11
   5433c:	00000106 	br	54344 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   54340:	00bffec4 	movi	r2,-5
}
   54344:	e037883a 	mov	sp,fp
   54348:	dfc00117 	ldw	ra,4(sp)
   5434c:	df000017 	ldw	fp,0(sp)
   54350:	dec00204 	addi	sp,sp,8
   54354:	f800283a 	ret

00054358 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   54358:	defffa04 	addi	sp,sp,-24
   5435c:	dfc00515 	stw	ra,20(sp)
   54360:	df000415 	stw	fp,16(sp)
   54364:	df000404 	addi	fp,sp,16
   54368:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   5436c:	0007883a 	mov	r3,zero
   54370:	e0bfff17 	ldw	r2,-4(fp)
   54374:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   54378:	e0bfff17 	ldw	r2,-4(fp)
   5437c:	10800104 	addi	r2,r2,4
   54380:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54384:	0005303a 	rdctl	r2,status
   54388:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5438c:	e0fffd17 	ldw	r3,-12(fp)
   54390:	00bfff84 	movi	r2,-2
   54394:	1884703a 	and	r2,r3,r2
   54398:	1001703a 	wrctl	status,r2
  
  return context;
   5439c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   543a0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   543a4:	0054db80 	call	54db8 <alt_tick>
   543a8:	e0bffc17 	ldw	r2,-16(fp)
   543ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   543b0:	e0bffe17 	ldw	r2,-8(fp)
   543b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   543b8:	0001883a 	nop
   543bc:	e037883a 	mov	sp,fp
   543c0:	dfc00117 	ldw	ra,4(sp)
   543c4:	df000017 	ldw	fp,0(sp)
   543c8:	dec00204 	addi	sp,sp,8
   543cc:	f800283a 	ret

000543d0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   543d0:	defff804 	addi	sp,sp,-32
   543d4:	dfc00715 	stw	ra,28(sp)
   543d8:	df000615 	stw	fp,24(sp)
   543dc:	df000604 	addi	fp,sp,24
   543e0:	e13ffc15 	stw	r4,-16(fp)
   543e4:	e17ffd15 	stw	r5,-12(fp)
   543e8:	e1bffe15 	stw	r6,-8(fp)
   543ec:	e1ffff15 	stw	r7,-4(fp)
   543f0:	e0bfff17 	ldw	r2,-4(fp)
   543f4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   543f8:	d0a70b17 	ldw	r2,-25556(gp)
   543fc:	1000021e 	bne	r2,zero,54408 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   54400:	e0bffb17 	ldw	r2,-20(fp)
   54404:	d0a70b15 	stw	r2,-25556(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   54408:	e0bffc17 	ldw	r2,-16(fp)
   5440c:	10800104 	addi	r2,r2,4
   54410:	00c001c4 	movi	r3,7
   54414:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   54418:	d8000015 	stw	zero,0(sp)
   5441c:	e1fffc17 	ldw	r7,-16(fp)
   54420:	01800174 	movhi	r6,5
   54424:	3190d604 	addi	r6,r6,17240
   54428:	e17ffe17 	ldw	r5,-8(fp)
   5442c:	e13ffd17 	ldw	r4,-12(fp)
   54430:	0052e340 	call	52e34 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   54434:	0001883a 	nop
   54438:	e037883a 	mov	sp,fp
   5443c:	dfc00117 	ldw	ra,4(sp)
   54440:	df000017 	ldw	fp,0(sp)
   54444:	dec00204 	addi	sp,sp,8
   54448:	f800283a 	ret

0005444c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   5444c:	defff504 	addi	sp,sp,-44
   54450:	df000a15 	stw	fp,40(sp)
   54454:	df000a04 	addi	fp,sp,40
   54458:	e13ffc15 	stw	r4,-16(fp)
   5445c:	e17ffd15 	stw	r5,-12(fp)
   54460:	e1bffe15 	stw	r6,-8(fp)
   54464:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   54468:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   5446c:	d0a70b17 	ldw	r2,-25556(gp)
  
  if (alt_ticks_per_second ())
   54470:	10003c26 	beq	r2,zero,54564 <alt_alarm_start+0x118>
  {
    if (alarm)
   54474:	e0bffc17 	ldw	r2,-16(fp)
   54478:	10003826 	beq	r2,zero,5455c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   5447c:	e0bffc17 	ldw	r2,-16(fp)
   54480:	e0fffe17 	ldw	r3,-8(fp)
   54484:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   54488:	e0bffc17 	ldw	r2,-16(fp)
   5448c:	e0ffff17 	ldw	r3,-4(fp)
   54490:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54494:	0005303a 	rdctl	r2,status
   54498:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5449c:	e0fff917 	ldw	r3,-28(fp)
   544a0:	00bfff84 	movi	r2,-2
   544a4:	1884703a 	and	r2,r3,r2
   544a8:	1001703a 	wrctl	status,r2
  
  return context;
   544ac:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   544b0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   544b4:	d0a70c17 	ldw	r2,-25552(gp)
      
      current_nticks = alt_nticks();
   544b8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   544bc:	e0fffd17 	ldw	r3,-12(fp)
   544c0:	e0bff617 	ldw	r2,-40(fp)
   544c4:	1885883a 	add	r2,r3,r2
   544c8:	10c00044 	addi	r3,r2,1
   544cc:	e0bffc17 	ldw	r2,-16(fp)
   544d0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   544d4:	e0bffc17 	ldw	r2,-16(fp)
   544d8:	10c00217 	ldw	r3,8(r2)
   544dc:	e0bff617 	ldw	r2,-40(fp)
   544e0:	1880042e 	bgeu	r3,r2,544f4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   544e4:	e0bffc17 	ldw	r2,-16(fp)
   544e8:	00c00044 	movi	r3,1
   544ec:	10c00405 	stb	r3,16(r2)
   544f0:	00000206 	br	544fc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   544f4:	e0bffc17 	ldw	r2,-16(fp)
   544f8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   544fc:	e0bffc17 	ldw	r2,-16(fp)
   54500:	d0e00e04 	addi	r3,gp,-32712
   54504:	e0fffa15 	stw	r3,-24(fp)
   54508:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   5450c:	e0bffb17 	ldw	r2,-20(fp)
   54510:	e0fffa17 	ldw	r3,-24(fp)
   54514:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   54518:	e0bffa17 	ldw	r2,-24(fp)
   5451c:	10c00017 	ldw	r3,0(r2)
   54520:	e0bffb17 	ldw	r2,-20(fp)
   54524:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   54528:	e0bffa17 	ldw	r2,-24(fp)
   5452c:	10800017 	ldw	r2,0(r2)
   54530:	e0fffb17 	ldw	r3,-20(fp)
   54534:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   54538:	e0bffa17 	ldw	r2,-24(fp)
   5453c:	e0fffb17 	ldw	r3,-20(fp)
   54540:	10c00015 	stw	r3,0(r2)
   54544:	e0bff817 	ldw	r2,-32(fp)
   54548:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5454c:	e0bff717 	ldw	r2,-36(fp)
   54550:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   54554:	0005883a 	mov	r2,zero
   54558:	00000306 	br	54568 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   5455c:	00bffa84 	movi	r2,-22
   54560:	00000106 	br	54568 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   54564:	00bfde84 	movi	r2,-134
  }
}
   54568:	e037883a 	mov	sp,fp
   5456c:	df000017 	ldw	fp,0(sp)
   54570:	dec00104 	addi	sp,sp,4
   54574:	f800283a 	ret

00054578 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   54578:	defffa04 	addi	sp,sp,-24
   5457c:	dfc00515 	stw	ra,20(sp)
   54580:	df000415 	stw	fp,16(sp)
   54584:	df000404 	addi	fp,sp,16
   54588:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   5458c:	008000c4 	movi	r2,3
   54590:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   54594:	e0fffd17 	ldw	r3,-12(fp)
   54598:	008003f4 	movhi	r2,15
   5459c:	10909004 	addi	r2,r2,16960
   545a0:	1885383a 	mul	r2,r3,r2
   545a4:	100b883a 	mov	r5,r2
   545a8:	0100bef4 	movhi	r4,763
   545ac:	213c2004 	addi	r4,r4,-3968
   545b0:	0043e140 	call	43e14 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   545b4:	100b883a 	mov	r5,r2
   545b8:	01200034 	movhi	r4,32768
   545bc:	213fffc4 	addi	r4,r4,-1
   545c0:	0043e140 	call	43e14 <__udivsi3>
   545c4:	100b883a 	mov	r5,r2
   545c8:	e13fff17 	ldw	r4,-4(fp)
   545cc:	0043e140 	call	43e14 <__udivsi3>
   545d0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   545d4:	e0bffe17 	ldw	r2,-8(fp)
   545d8:	10002a26 	beq	r2,zero,54684 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   545dc:	e03ffc15 	stw	zero,-16(fp)
   545e0:	00001706 	br	54640 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   545e4:	00a00034 	movhi	r2,32768
   545e8:	10bfffc4 	addi	r2,r2,-1
   545ec:	10bfffc4 	addi	r2,r2,-1
   545f0:	103ffe1e 	bne	r2,zero,545ec <__alt_data_end+0xfffd5dec>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   545f4:	e0fffd17 	ldw	r3,-12(fp)
   545f8:	008003f4 	movhi	r2,15
   545fc:	10909004 	addi	r2,r2,16960
   54600:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   54604:	100b883a 	mov	r5,r2
   54608:	0100bef4 	movhi	r4,763
   5460c:	213c2004 	addi	r4,r4,-3968
   54610:	0043e140 	call	43e14 <__udivsi3>
   54614:	100b883a 	mov	r5,r2
   54618:	01200034 	movhi	r4,32768
   5461c:	213fffc4 	addi	r4,r4,-1
   54620:	0043e140 	call	43e14 <__udivsi3>
   54624:	1007883a 	mov	r3,r2
   54628:	e0bfff17 	ldw	r2,-4(fp)
   5462c:	10c5c83a 	sub	r2,r2,r3
   54630:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   54634:	e0bffc17 	ldw	r2,-16(fp)
   54638:	10800044 	addi	r2,r2,1
   5463c:	e0bffc15 	stw	r2,-16(fp)
   54640:	e0fffc17 	ldw	r3,-16(fp)
   54644:	e0bffe17 	ldw	r2,-8(fp)
   54648:	18bfe616 	blt	r3,r2,545e4 <__alt_data_end+0xfffd5de4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   5464c:	e0fffd17 	ldw	r3,-12(fp)
   54650:	008003f4 	movhi	r2,15
   54654:	10909004 	addi	r2,r2,16960
   54658:	1885383a 	mul	r2,r3,r2
   5465c:	100b883a 	mov	r5,r2
   54660:	0100bef4 	movhi	r4,763
   54664:	213c2004 	addi	r4,r4,-3968
   54668:	0043e140 	call	43e14 <__udivsi3>
   5466c:	1007883a 	mov	r3,r2
   54670:	e0bfff17 	ldw	r2,-4(fp)
   54674:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   54678:	10bfffc4 	addi	r2,r2,-1
   5467c:	103ffe1e 	bne	r2,zero,54678 <__alt_data_end+0xfffd5e78>
   54680:	00000d06 	br	546b8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   54684:	e0fffd17 	ldw	r3,-12(fp)
   54688:	008003f4 	movhi	r2,15
   5468c:	10909004 	addi	r2,r2,16960
   54690:	1885383a 	mul	r2,r3,r2
   54694:	100b883a 	mov	r5,r2
   54698:	0100bef4 	movhi	r4,763
   5469c:	213c2004 	addi	r4,r4,-3968
   546a0:	0043e140 	call	43e14 <__udivsi3>
   546a4:	1007883a 	mov	r3,r2
   546a8:	e0bfff17 	ldw	r2,-4(fp)
   546ac:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   546b0:	10bfffc4 	addi	r2,r2,-1
   546b4:	00bffe16 	blt	zero,r2,546b0 <__alt_data_end+0xfffd5eb0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   546b8:	0005883a 	mov	r2,zero
}
   546bc:	e037883a 	mov	sp,fp
   546c0:	dfc00117 	ldw	ra,4(sp)
   546c4:	df000017 	ldw	fp,0(sp)
   546c8:	dec00204 	addi	sp,sp,8
   546cc:	f800283a 	ret

000546d0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   546d0:	defffe04 	addi	sp,sp,-8
   546d4:	df000115 	stw	fp,4(sp)
   546d8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   546dc:	e03fff15 	stw	zero,-4(fp)
   546e0:	00000506 	br	546f8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   546e4:	e0bfff17 	ldw	r2,-4(fp)
   546e8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   546ec:	e0bfff17 	ldw	r2,-4(fp)
   546f0:	10800804 	addi	r2,r2,32
   546f4:	e0bfff15 	stw	r2,-4(fp)
   546f8:	e0bfff17 	ldw	r2,-4(fp)
   546fc:	10820030 	cmpltui	r2,r2,2048
   54700:	103ff81e 	bne	r2,zero,546e4 <__alt_data_end+0xfffd5ee4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   54704:	0001883a 	nop
   54708:	e037883a 	mov	sp,fp
   5470c:	df000017 	ldw	fp,0(sp)
   54710:	dec00104 	addi	sp,sp,4
   54714:	f800283a 	ret

00054718 <alt_get_errno>:
   54718:	defffe04 	addi	sp,sp,-8
   5471c:	dfc00115 	stw	ra,4(sp)
   54720:	df000015 	stw	fp,0(sp)
   54724:	d839883a 	mov	fp,sp
   54728:	d0a00b17 	ldw	r2,-32724(gp)
   5472c:	10000326 	beq	r2,zero,5473c <alt_get_errno+0x24>
   54730:	d0a00b17 	ldw	r2,-32724(gp)
   54734:	103ee83a 	callr	r2
   54738:	00000106 	br	54740 <alt_get_errno+0x28>
   5473c:	d0a70504 	addi	r2,gp,-25580
   54740:	e037883a 	mov	sp,fp
   54744:	dfc00117 	ldw	ra,4(sp)
   54748:	df000017 	ldw	fp,0(sp)
   5474c:	dec00204 	addi	sp,sp,8
   54750:	f800283a 	ret

00054754 <alt_dev_llist_insert>:
   54754:	defffa04 	addi	sp,sp,-24
   54758:	dfc00515 	stw	ra,20(sp)
   5475c:	df000415 	stw	fp,16(sp)
   54760:	df000404 	addi	fp,sp,16
   54764:	e13ffe15 	stw	r4,-8(fp)
   54768:	e17fff15 	stw	r5,-4(fp)
   5476c:	e0bffe17 	ldw	r2,-8(fp)
   54770:	10000326 	beq	r2,zero,54780 <alt_dev_llist_insert+0x2c>
   54774:	e0bffe17 	ldw	r2,-8(fp)
   54778:	10800217 	ldw	r2,8(r2)
   5477c:	1000061e 	bne	r2,zero,54798 <alt_dev_llist_insert+0x44>
   54780:	00547180 	call	54718 <alt_get_errno>
   54784:	1007883a 	mov	r3,r2
   54788:	00800584 	movi	r2,22
   5478c:	18800015 	stw	r2,0(r3)
   54790:	00bffa84 	movi	r2,-22
   54794:	00001306 	br	547e4 <alt_dev_llist_insert+0x90>
   54798:	e0bffe17 	ldw	r2,-8(fp)
   5479c:	e0ffff17 	ldw	r3,-4(fp)
   547a0:	e0fffc15 	stw	r3,-16(fp)
   547a4:	e0bffd15 	stw	r2,-12(fp)
   547a8:	e0bffd17 	ldw	r2,-12(fp)
   547ac:	e0fffc17 	ldw	r3,-16(fp)
   547b0:	10c00115 	stw	r3,4(r2)
   547b4:	e0bffc17 	ldw	r2,-16(fp)
   547b8:	10c00017 	ldw	r3,0(r2)
   547bc:	e0bffd17 	ldw	r2,-12(fp)
   547c0:	10c00015 	stw	r3,0(r2)
   547c4:	e0bffc17 	ldw	r2,-16(fp)
   547c8:	10800017 	ldw	r2,0(r2)
   547cc:	e0fffd17 	ldw	r3,-12(fp)
   547d0:	10c00115 	stw	r3,4(r2)
   547d4:	e0bffc17 	ldw	r2,-16(fp)
   547d8:	e0fffd17 	ldw	r3,-12(fp)
   547dc:	10c00015 	stw	r3,0(r2)
   547e0:	0005883a 	mov	r2,zero
   547e4:	e037883a 	mov	sp,fp
   547e8:	dfc00117 	ldw	ra,4(sp)
   547ec:	df000017 	ldw	fp,0(sp)
   547f0:	dec00204 	addi	sp,sp,8
   547f4:	f800283a 	ret

000547f8 <_do_ctors>:
   547f8:	defffd04 	addi	sp,sp,-12
   547fc:	dfc00215 	stw	ra,8(sp)
   54800:	df000115 	stw	fp,4(sp)
   54804:	df000104 	addi	fp,sp,4
   54808:	00800174 	movhi	r2,5
   5480c:	10955004 	addi	r2,r2,21824
   54810:	e0bfff15 	stw	r2,-4(fp)
   54814:	00000606 	br	54830 <_do_ctors+0x38>
   54818:	e0bfff17 	ldw	r2,-4(fp)
   5481c:	10800017 	ldw	r2,0(r2)
   54820:	103ee83a 	callr	r2
   54824:	e0bfff17 	ldw	r2,-4(fp)
   54828:	10bfff04 	addi	r2,r2,-4
   5482c:	e0bfff15 	stw	r2,-4(fp)
   54830:	e0ffff17 	ldw	r3,-4(fp)
   54834:	00800174 	movhi	r2,5
   54838:	10955104 	addi	r2,r2,21828
   5483c:	18bff62e 	bgeu	r3,r2,54818 <__alt_data_end+0xfffd6018>
   54840:	0001883a 	nop
   54844:	e037883a 	mov	sp,fp
   54848:	dfc00117 	ldw	ra,4(sp)
   5484c:	df000017 	ldw	fp,0(sp)
   54850:	dec00204 	addi	sp,sp,8
   54854:	f800283a 	ret

00054858 <_do_dtors>:
   54858:	defffd04 	addi	sp,sp,-12
   5485c:	dfc00215 	stw	ra,8(sp)
   54860:	df000115 	stw	fp,4(sp)
   54864:	df000104 	addi	fp,sp,4
   54868:	00800174 	movhi	r2,5
   5486c:	10955004 	addi	r2,r2,21824
   54870:	e0bfff15 	stw	r2,-4(fp)
   54874:	00000606 	br	54890 <_do_dtors+0x38>
   54878:	e0bfff17 	ldw	r2,-4(fp)
   5487c:	10800017 	ldw	r2,0(r2)
   54880:	103ee83a 	callr	r2
   54884:	e0bfff17 	ldw	r2,-4(fp)
   54888:	10bfff04 	addi	r2,r2,-4
   5488c:	e0bfff15 	stw	r2,-4(fp)
   54890:	e0ffff17 	ldw	r3,-4(fp)
   54894:	00800174 	movhi	r2,5
   54898:	10955104 	addi	r2,r2,21828
   5489c:	18bff62e 	bgeu	r3,r2,54878 <__alt_data_end+0xfffd6078>
   548a0:	0001883a 	nop
   548a4:	e037883a 	mov	sp,fp
   548a8:	dfc00117 	ldw	ra,4(sp)
   548ac:	df000017 	ldw	fp,0(sp)
   548b0:	dec00204 	addi	sp,sp,8
   548b4:	f800283a 	ret

000548b8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   548b8:	defffe04 	addi	sp,sp,-8
   548bc:	dfc00115 	stw	ra,4(sp)
   548c0:	df000015 	stw	fp,0(sp)
   548c4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   548c8:	01440004 	movi	r5,4096
   548cc:	0009883a 	mov	r4,zero
   548d0:	00551200 	call	55120 <alt_icache_flush>
#endif
}
   548d4:	0001883a 	nop
   548d8:	e037883a 	mov	sp,fp
   548dc:	dfc00117 	ldw	ra,4(sp)
   548e0:	df000017 	ldw	fp,0(sp)
   548e4:	dec00204 	addi	sp,sp,8
   548e8:	f800283a 	ret

000548ec <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   548ec:	defffe04 	addi	sp,sp,-8
   548f0:	df000115 	stw	fp,4(sp)
   548f4:	df000104 	addi	fp,sp,4
   548f8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   548fc:	e0bfff17 	ldw	r2,-4(fp)
   54900:	10bffe84 	addi	r2,r2,-6
   54904:	10c00428 	cmpgeui	r3,r2,16
   54908:	18001a1e 	bne	r3,zero,54974 <alt_exception_cause_generated_bad_addr+0x88>
   5490c:	100690ba 	slli	r3,r2,2
   54910:	00800174 	movhi	r2,5
   54914:	10924904 	addi	r2,r2,18724
   54918:	1885883a 	add	r2,r3,r2
   5491c:	10800017 	ldw	r2,0(r2)
   54920:	1000683a 	jmp	r2
   54924:	00054964 	muli	zero,zero,5413
   54928:	00054964 	muli	zero,zero,5413
   5492c:	00054974 	movhi	zero,5413
   54930:	00054974 	movhi	zero,5413
   54934:	00054974 	movhi	zero,5413
   54938:	00054964 	muli	zero,zero,5413
   5493c:	0005496c 	andhi	zero,zero,5413
   54940:	00054974 	movhi	zero,5413
   54944:	00054964 	muli	zero,zero,5413
   54948:	00054964 	muli	zero,zero,5413
   5494c:	00054974 	movhi	zero,5413
   54950:	00054964 	muli	zero,zero,5413
   54954:	0005496c 	andhi	zero,zero,5413
   54958:	00054974 	movhi	zero,5413
   5495c:	00054974 	movhi	zero,5413
   54960:	00054964 	muli	zero,zero,5413
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   54964:	00800044 	movi	r2,1
   54968:	00000306 	br	54978 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   5496c:	0005883a 	mov	r2,zero
   54970:	00000106 	br	54978 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   54974:	0005883a 	mov	r2,zero
  }
}
   54978:	e037883a 	mov	sp,fp
   5497c:	df000017 	ldw	fp,0(sp)
   54980:	dec00104 	addi	sp,sp,4
   54984:	f800283a 	ret

00054988 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   54988:	defff904 	addi	sp,sp,-28
   5498c:	dfc00615 	stw	ra,24(sp)
   54990:	df000515 	stw	fp,20(sp)
   54994:	df000504 	addi	fp,sp,20
   54998:	e13ffc15 	stw	r4,-16(fp)
   5499c:	e17ffd15 	stw	r5,-12(fp)
   549a0:	e1bffe15 	stw	r6,-8(fp)
   549a4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   549a8:	e1bfff17 	ldw	r6,-4(fp)
   549ac:	e17ffe17 	ldw	r5,-8(fp)
   549b0:	e13ffd17 	ldw	r4,-12(fp)
   549b4:	0054bc80 	call	54bc8 <open>
   549b8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   549bc:	e0bffb17 	ldw	r2,-20(fp)
   549c0:	10001c16 	blt	r2,zero,54a34 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   549c4:	00800174 	movhi	r2,5
   549c8:	109a2f04 	addi	r2,r2,26812
   549cc:	e0fffb17 	ldw	r3,-20(fp)
   549d0:	18c00324 	muli	r3,r3,12
   549d4:	10c5883a 	add	r2,r2,r3
   549d8:	10c00017 	ldw	r3,0(r2)
   549dc:	e0bffc17 	ldw	r2,-16(fp)
   549e0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   549e4:	00800174 	movhi	r2,5
   549e8:	109a2f04 	addi	r2,r2,26812
   549ec:	e0fffb17 	ldw	r3,-20(fp)
   549f0:	18c00324 	muli	r3,r3,12
   549f4:	10c5883a 	add	r2,r2,r3
   549f8:	10800104 	addi	r2,r2,4
   549fc:	10c00017 	ldw	r3,0(r2)
   54a00:	e0bffc17 	ldw	r2,-16(fp)
   54a04:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   54a08:	00800174 	movhi	r2,5
   54a0c:	109a2f04 	addi	r2,r2,26812
   54a10:	e0fffb17 	ldw	r3,-20(fp)
   54a14:	18c00324 	muli	r3,r3,12
   54a18:	10c5883a 	add	r2,r2,r3
   54a1c:	10800204 	addi	r2,r2,8
   54a20:	10c00017 	ldw	r3,0(r2)
   54a24:	e0bffc17 	ldw	r2,-16(fp)
   54a28:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   54a2c:	e13ffb17 	ldw	r4,-20(fp)
   54a30:	00535ac0 	call	535ac <alt_release_fd>
  }
} 
   54a34:	0001883a 	nop
   54a38:	e037883a 	mov	sp,fp
   54a3c:	dfc00117 	ldw	ra,4(sp)
   54a40:	df000017 	ldw	fp,0(sp)
   54a44:	dec00204 	addi	sp,sp,8
   54a48:	f800283a 	ret

00054a4c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   54a4c:	defffb04 	addi	sp,sp,-20
   54a50:	dfc00415 	stw	ra,16(sp)
   54a54:	df000315 	stw	fp,12(sp)
   54a58:	df000304 	addi	fp,sp,12
   54a5c:	e13ffd15 	stw	r4,-12(fp)
   54a60:	e17ffe15 	stw	r5,-8(fp)
   54a64:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   54a68:	01c07fc4 	movi	r7,511
   54a6c:	01800044 	movi	r6,1
   54a70:	e17ffd17 	ldw	r5,-12(fp)
   54a74:	01000174 	movhi	r4,5
   54a78:	211a3204 	addi	r4,r4,26824
   54a7c:	00549880 	call	54988 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   54a80:	01c07fc4 	movi	r7,511
   54a84:	000d883a 	mov	r6,zero
   54a88:	e17ffe17 	ldw	r5,-8(fp)
   54a8c:	01000174 	movhi	r4,5
   54a90:	211a2f04 	addi	r4,r4,26812
   54a94:	00549880 	call	54988 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   54a98:	01c07fc4 	movi	r7,511
   54a9c:	01800044 	movi	r6,1
   54aa0:	e17fff17 	ldw	r5,-4(fp)
   54aa4:	01000174 	movhi	r4,5
   54aa8:	211a3504 	addi	r4,r4,26836
   54aac:	00549880 	call	54988 <alt_open_fd>
}  
   54ab0:	0001883a 	nop
   54ab4:	e037883a 	mov	sp,fp
   54ab8:	dfc00117 	ldw	ra,4(sp)
   54abc:	df000017 	ldw	fp,0(sp)
   54ac0:	dec00204 	addi	sp,sp,8
   54ac4:	f800283a 	ret

00054ac8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   54ac8:	defffe04 	addi	sp,sp,-8
   54acc:	dfc00115 	stw	ra,4(sp)
   54ad0:	df000015 	stw	fp,0(sp)
   54ad4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   54ad8:	d0a00b17 	ldw	r2,-32724(gp)
   54adc:	10000326 	beq	r2,zero,54aec <alt_get_errno+0x24>
   54ae0:	d0a00b17 	ldw	r2,-32724(gp)
   54ae4:	103ee83a 	callr	r2
   54ae8:	00000106 	br	54af0 <alt_get_errno+0x28>
   54aec:	d0a70504 	addi	r2,gp,-25580
}
   54af0:	e037883a 	mov	sp,fp
   54af4:	dfc00117 	ldw	ra,4(sp)
   54af8:	df000017 	ldw	fp,0(sp)
   54afc:	dec00204 	addi	sp,sp,8
   54b00:	f800283a 	ret

00054b04 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   54b04:	defffd04 	addi	sp,sp,-12
   54b08:	df000215 	stw	fp,8(sp)
   54b0c:	df000204 	addi	fp,sp,8
   54b10:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   54b14:	e0bfff17 	ldw	r2,-4(fp)
   54b18:	10800217 	ldw	r2,8(r2)
   54b1c:	10d00034 	orhi	r3,r2,16384
   54b20:	e0bfff17 	ldw	r2,-4(fp)
   54b24:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   54b28:	e03ffe15 	stw	zero,-8(fp)
   54b2c:	00001d06 	br	54ba4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   54b30:	00800174 	movhi	r2,5
   54b34:	109a2f04 	addi	r2,r2,26812
   54b38:	e0fffe17 	ldw	r3,-8(fp)
   54b3c:	18c00324 	muli	r3,r3,12
   54b40:	10c5883a 	add	r2,r2,r3
   54b44:	10c00017 	ldw	r3,0(r2)
   54b48:	e0bfff17 	ldw	r2,-4(fp)
   54b4c:	10800017 	ldw	r2,0(r2)
   54b50:	1880111e 	bne	r3,r2,54b98 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   54b54:	00800174 	movhi	r2,5
   54b58:	109a2f04 	addi	r2,r2,26812
   54b5c:	e0fffe17 	ldw	r3,-8(fp)
   54b60:	18c00324 	muli	r3,r3,12
   54b64:	10c5883a 	add	r2,r2,r3
   54b68:	10800204 	addi	r2,r2,8
   54b6c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   54b70:	1000090e 	bge	r2,zero,54b98 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   54b74:	e0bffe17 	ldw	r2,-8(fp)
   54b78:	10c00324 	muli	r3,r2,12
   54b7c:	00800174 	movhi	r2,5
   54b80:	109a2f04 	addi	r2,r2,26812
   54b84:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   54b88:	e0bfff17 	ldw	r2,-4(fp)
   54b8c:	18800226 	beq	r3,r2,54b98 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   54b90:	00bffcc4 	movi	r2,-13
   54b94:	00000806 	br	54bb8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   54b98:	e0bffe17 	ldw	r2,-8(fp)
   54b9c:	10800044 	addi	r2,r2,1
   54ba0:	e0bffe15 	stw	r2,-8(fp)
   54ba4:	d0a00a17 	ldw	r2,-32728(gp)
   54ba8:	1007883a 	mov	r3,r2
   54bac:	e0bffe17 	ldw	r2,-8(fp)
   54bb0:	18bfdf2e 	bgeu	r3,r2,54b30 <__alt_data_end+0xfffd6330>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   54bb4:	0005883a 	mov	r2,zero
}
   54bb8:	e037883a 	mov	sp,fp
   54bbc:	df000017 	ldw	fp,0(sp)
   54bc0:	dec00104 	addi	sp,sp,4
   54bc4:	f800283a 	ret

00054bc8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   54bc8:	defff604 	addi	sp,sp,-40
   54bcc:	dfc00915 	stw	ra,36(sp)
   54bd0:	df000815 	stw	fp,32(sp)
   54bd4:	df000804 	addi	fp,sp,32
   54bd8:	e13ffd15 	stw	r4,-12(fp)
   54bdc:	e17ffe15 	stw	r5,-8(fp)
   54be0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   54be4:	00bfffc4 	movi	r2,-1
   54be8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   54bec:	00bffb44 	movi	r2,-19
   54bf0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   54bf4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   54bf8:	d1600804 	addi	r5,gp,-32736
   54bfc:	e13ffd17 	ldw	r4,-12(fp)
   54c00:	0054ee40 	call	54ee4 <alt_find_dev>
   54c04:	e0bff815 	stw	r2,-32(fp)
   54c08:	e0bff817 	ldw	r2,-32(fp)
   54c0c:	1000051e 	bne	r2,zero,54c24 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   54c10:	e13ffd17 	ldw	r4,-12(fp)
   54c14:	0054f740 	call	54f74 <alt_find_file>
   54c18:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   54c1c:	00800044 	movi	r2,1
   54c20:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   54c24:	e0bff817 	ldw	r2,-32(fp)
   54c28:	10002926 	beq	r2,zero,54cd0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   54c2c:	e13ff817 	ldw	r4,-32(fp)
   54c30:	005507c0 	call	5507c <alt_get_fd>
   54c34:	e0bff915 	stw	r2,-28(fp)
   54c38:	e0bff917 	ldw	r2,-28(fp)
   54c3c:	1000030e 	bge	r2,zero,54c4c <open+0x84>
    {
      status = index;
   54c40:	e0bff917 	ldw	r2,-28(fp)
   54c44:	e0bffa15 	stw	r2,-24(fp)
   54c48:	00002306 	br	54cd8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   54c4c:	e0bff917 	ldw	r2,-28(fp)
   54c50:	10c00324 	muli	r3,r2,12
   54c54:	00800174 	movhi	r2,5
   54c58:	109a2f04 	addi	r2,r2,26812
   54c5c:	1885883a 	add	r2,r3,r2
   54c60:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   54c64:	e0fffe17 	ldw	r3,-8(fp)
   54c68:	00900034 	movhi	r2,16384
   54c6c:	10bfffc4 	addi	r2,r2,-1
   54c70:	1886703a 	and	r3,r3,r2
   54c74:	e0bffc17 	ldw	r2,-16(fp)
   54c78:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   54c7c:	e0bffb17 	ldw	r2,-20(fp)
   54c80:	1000051e 	bne	r2,zero,54c98 <open+0xd0>
   54c84:	e13ffc17 	ldw	r4,-16(fp)
   54c88:	0054b040 	call	54b04 <alt_file_locked>
   54c8c:	e0bffa15 	stw	r2,-24(fp)
   54c90:	e0bffa17 	ldw	r2,-24(fp)
   54c94:	10001016 	blt	r2,zero,54cd8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   54c98:	e0bff817 	ldw	r2,-32(fp)
   54c9c:	10800317 	ldw	r2,12(r2)
   54ca0:	10000826 	beq	r2,zero,54cc4 <open+0xfc>
   54ca4:	e0bff817 	ldw	r2,-32(fp)
   54ca8:	10800317 	ldw	r2,12(r2)
   54cac:	e1ffff17 	ldw	r7,-4(fp)
   54cb0:	e1bffe17 	ldw	r6,-8(fp)
   54cb4:	e17ffd17 	ldw	r5,-12(fp)
   54cb8:	e13ffc17 	ldw	r4,-16(fp)
   54cbc:	103ee83a 	callr	r2
   54cc0:	00000106 	br	54cc8 <open+0x100>
   54cc4:	0005883a 	mov	r2,zero
   54cc8:	e0bffa15 	stw	r2,-24(fp)
   54ccc:	00000206 	br	54cd8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   54cd0:	00bffb44 	movi	r2,-19
   54cd4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   54cd8:	e0bffa17 	ldw	r2,-24(fp)
   54cdc:	1000090e 	bge	r2,zero,54d04 <open+0x13c>
  {
    alt_release_fd (index);  
   54ce0:	e13ff917 	ldw	r4,-28(fp)
   54ce4:	00535ac0 	call	535ac <alt_release_fd>
    ALT_ERRNO = -status;
   54ce8:	0054ac80 	call	54ac8 <alt_get_errno>
   54cec:	1007883a 	mov	r3,r2
   54cf0:	e0bffa17 	ldw	r2,-24(fp)
   54cf4:	0085c83a 	sub	r2,zero,r2
   54cf8:	18800015 	stw	r2,0(r3)
    return -1;
   54cfc:	00bfffc4 	movi	r2,-1
   54d00:	00000106 	br	54d08 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   54d04:	e0bff917 	ldw	r2,-28(fp)
}
   54d08:	e037883a 	mov	sp,fp
   54d0c:	dfc00117 	ldw	ra,4(sp)
   54d10:	df000017 	ldw	fp,0(sp)
   54d14:	dec00204 	addi	sp,sp,8
   54d18:	f800283a 	ret

00054d1c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   54d1c:	defffa04 	addi	sp,sp,-24
   54d20:	df000515 	stw	fp,20(sp)
   54d24:	df000504 	addi	fp,sp,20
   54d28:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54d2c:	0005303a 	rdctl	r2,status
   54d30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54d34:	e0fffc17 	ldw	r3,-16(fp)
   54d38:	00bfff84 	movi	r2,-2
   54d3c:	1884703a 	and	r2,r3,r2
   54d40:	1001703a 	wrctl	status,r2
  
  return context;
   54d44:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   54d48:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   54d4c:	e0bfff17 	ldw	r2,-4(fp)
   54d50:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   54d54:	e0bffd17 	ldw	r2,-12(fp)
   54d58:	10800017 	ldw	r2,0(r2)
   54d5c:	e0fffd17 	ldw	r3,-12(fp)
   54d60:	18c00117 	ldw	r3,4(r3)
   54d64:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   54d68:	e0bffd17 	ldw	r2,-12(fp)
   54d6c:	10800117 	ldw	r2,4(r2)
   54d70:	e0fffd17 	ldw	r3,-12(fp)
   54d74:	18c00017 	ldw	r3,0(r3)
   54d78:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   54d7c:	e0bffd17 	ldw	r2,-12(fp)
   54d80:	e0fffd17 	ldw	r3,-12(fp)
   54d84:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   54d88:	e0bffd17 	ldw	r2,-12(fp)
   54d8c:	e0fffd17 	ldw	r3,-12(fp)
   54d90:	10c00015 	stw	r3,0(r2)
   54d94:	e0bffb17 	ldw	r2,-20(fp)
   54d98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54d9c:	e0bffe17 	ldw	r2,-8(fp)
   54da0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   54da4:	0001883a 	nop
   54da8:	e037883a 	mov	sp,fp
   54dac:	df000017 	ldw	fp,0(sp)
   54db0:	dec00104 	addi	sp,sp,4
   54db4:	f800283a 	ret

00054db8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   54db8:	defffb04 	addi	sp,sp,-20
   54dbc:	dfc00415 	stw	ra,16(sp)
   54dc0:	df000315 	stw	fp,12(sp)
   54dc4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   54dc8:	d0a00e17 	ldw	r2,-32712(gp)
   54dcc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   54dd0:	d0a70c17 	ldw	r2,-25552(gp)
   54dd4:	10800044 	addi	r2,r2,1
   54dd8:	d0a70c15 	stw	r2,-25552(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   54ddc:	00002e06 	br	54e98 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   54de0:	e0bffd17 	ldw	r2,-12(fp)
   54de4:	10800017 	ldw	r2,0(r2)
   54de8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   54dec:	e0bffd17 	ldw	r2,-12(fp)
   54df0:	10800403 	ldbu	r2,16(r2)
   54df4:	10803fcc 	andi	r2,r2,255
   54df8:	10000426 	beq	r2,zero,54e0c <alt_tick+0x54>
   54dfc:	d0a70c17 	ldw	r2,-25552(gp)
   54e00:	1000021e 	bne	r2,zero,54e0c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   54e04:	e0bffd17 	ldw	r2,-12(fp)
   54e08:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   54e0c:	e0bffd17 	ldw	r2,-12(fp)
   54e10:	10800217 	ldw	r2,8(r2)
   54e14:	d0e70c17 	ldw	r3,-25552(gp)
   54e18:	18801d36 	bltu	r3,r2,54e90 <alt_tick+0xd8>
   54e1c:	e0bffd17 	ldw	r2,-12(fp)
   54e20:	10800403 	ldbu	r2,16(r2)
   54e24:	10803fcc 	andi	r2,r2,255
   54e28:	1000191e 	bne	r2,zero,54e90 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   54e2c:	e0bffd17 	ldw	r2,-12(fp)
   54e30:	10800317 	ldw	r2,12(r2)
   54e34:	e0fffd17 	ldw	r3,-12(fp)
   54e38:	18c00517 	ldw	r3,20(r3)
   54e3c:	1809883a 	mov	r4,r3
   54e40:	103ee83a 	callr	r2
   54e44:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   54e48:	e0bfff17 	ldw	r2,-4(fp)
   54e4c:	1000031e 	bne	r2,zero,54e5c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   54e50:	e13ffd17 	ldw	r4,-12(fp)
   54e54:	0054d1c0 	call	54d1c <alt_alarm_stop>
   54e58:	00000d06 	br	54e90 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   54e5c:	e0bffd17 	ldw	r2,-12(fp)
   54e60:	10c00217 	ldw	r3,8(r2)
   54e64:	e0bfff17 	ldw	r2,-4(fp)
   54e68:	1887883a 	add	r3,r3,r2
   54e6c:	e0bffd17 	ldw	r2,-12(fp)
   54e70:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   54e74:	e0bffd17 	ldw	r2,-12(fp)
   54e78:	10c00217 	ldw	r3,8(r2)
   54e7c:	d0a70c17 	ldw	r2,-25552(gp)
   54e80:	1880032e 	bgeu	r3,r2,54e90 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   54e84:	e0bffd17 	ldw	r2,-12(fp)
   54e88:	00c00044 	movi	r3,1
   54e8c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   54e90:	e0bffe17 	ldw	r2,-8(fp)
   54e94:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   54e98:	e0fffd17 	ldw	r3,-12(fp)
   54e9c:	d0a00e04 	addi	r2,gp,-32712
   54ea0:	18bfcf1e 	bne	r3,r2,54de0 <__alt_data_end+0xfffd65e0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   54ea4:	0001883a 	nop
}
   54ea8:	0001883a 	nop
   54eac:	e037883a 	mov	sp,fp
   54eb0:	dfc00117 	ldw	ra,4(sp)
   54eb4:	df000017 	ldw	fp,0(sp)
   54eb8:	dec00204 	addi	sp,sp,8
   54ebc:	f800283a 	ret

00054ec0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   54ec0:	deffff04 	addi	sp,sp,-4
   54ec4:	df000015 	stw	fp,0(sp)
   54ec8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   54ecc:	000170fa 	wrctl	ienable,zero
}
   54ed0:	0001883a 	nop
   54ed4:	e037883a 	mov	sp,fp
   54ed8:	df000017 	ldw	fp,0(sp)
   54edc:	dec00104 	addi	sp,sp,4
   54ee0:	f800283a 	ret

00054ee4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   54ee4:	defffa04 	addi	sp,sp,-24
   54ee8:	dfc00515 	stw	ra,20(sp)
   54eec:	df000415 	stw	fp,16(sp)
   54ef0:	df000404 	addi	fp,sp,16
   54ef4:	e13ffe15 	stw	r4,-8(fp)
   54ef8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   54efc:	e0bfff17 	ldw	r2,-4(fp)
   54f00:	10800017 	ldw	r2,0(r2)
   54f04:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   54f08:	e13ffe17 	ldw	r4,-8(fp)
   54f0c:	00440d40 	call	440d4 <strlen>
   54f10:	10800044 	addi	r2,r2,1
   54f14:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   54f18:	00000d06 	br	54f50 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   54f1c:	e0bffc17 	ldw	r2,-16(fp)
   54f20:	10800217 	ldw	r2,8(r2)
   54f24:	e0fffd17 	ldw	r3,-12(fp)
   54f28:	180d883a 	mov	r6,r3
   54f2c:	e17ffe17 	ldw	r5,-8(fp)
   54f30:	1009883a 	mov	r4,r2
   54f34:	00551fc0 	call	551fc <memcmp>
   54f38:	1000021e 	bne	r2,zero,54f44 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   54f3c:	e0bffc17 	ldw	r2,-16(fp)
   54f40:	00000706 	br	54f60 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   54f44:	e0bffc17 	ldw	r2,-16(fp)
   54f48:	10800017 	ldw	r2,0(r2)
   54f4c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   54f50:	e0fffc17 	ldw	r3,-16(fp)
   54f54:	e0bfff17 	ldw	r2,-4(fp)
   54f58:	18bff01e 	bne	r3,r2,54f1c <__alt_data_end+0xfffd671c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   54f5c:	0005883a 	mov	r2,zero
}
   54f60:	e037883a 	mov	sp,fp
   54f64:	dfc00117 	ldw	ra,4(sp)
   54f68:	df000017 	ldw	fp,0(sp)
   54f6c:	dec00204 	addi	sp,sp,8
   54f70:	f800283a 	ret

00054f74 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   54f74:	defffb04 	addi	sp,sp,-20
   54f78:	dfc00415 	stw	ra,16(sp)
   54f7c:	df000315 	stw	fp,12(sp)
   54f80:	df000304 	addi	fp,sp,12
   54f84:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   54f88:	d0a00617 	ldw	r2,-32744(gp)
   54f8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   54f90:	00003106 	br	55058 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   54f94:	e0bffd17 	ldw	r2,-12(fp)
   54f98:	10800217 	ldw	r2,8(r2)
   54f9c:	1009883a 	mov	r4,r2
   54fa0:	00440d40 	call	440d4 <strlen>
   54fa4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   54fa8:	e0bffd17 	ldw	r2,-12(fp)
   54fac:	10c00217 	ldw	r3,8(r2)
   54fb0:	e0bffe17 	ldw	r2,-8(fp)
   54fb4:	10bfffc4 	addi	r2,r2,-1
   54fb8:	1885883a 	add	r2,r3,r2
   54fbc:	10800003 	ldbu	r2,0(r2)
   54fc0:	10803fcc 	andi	r2,r2,255
   54fc4:	1080201c 	xori	r2,r2,128
   54fc8:	10bfe004 	addi	r2,r2,-128
   54fcc:	10800bd8 	cmpnei	r2,r2,47
   54fd0:	1000031e 	bne	r2,zero,54fe0 <alt_find_file+0x6c>
    {
      len -= 1;
   54fd4:	e0bffe17 	ldw	r2,-8(fp)
   54fd8:	10bfffc4 	addi	r2,r2,-1
   54fdc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   54fe0:	e0bffe17 	ldw	r2,-8(fp)
   54fe4:	e0ffff17 	ldw	r3,-4(fp)
   54fe8:	1885883a 	add	r2,r3,r2
   54fec:	10800003 	ldbu	r2,0(r2)
   54ff0:	10803fcc 	andi	r2,r2,255
   54ff4:	1080201c 	xori	r2,r2,128
   54ff8:	10bfe004 	addi	r2,r2,-128
   54ffc:	10800be0 	cmpeqi	r2,r2,47
   55000:	1000081e 	bne	r2,zero,55024 <alt_find_file+0xb0>
   55004:	e0bffe17 	ldw	r2,-8(fp)
   55008:	e0ffff17 	ldw	r3,-4(fp)
   5500c:	1885883a 	add	r2,r3,r2
   55010:	10800003 	ldbu	r2,0(r2)
   55014:	10803fcc 	andi	r2,r2,255
   55018:	1080201c 	xori	r2,r2,128
   5501c:	10bfe004 	addi	r2,r2,-128
   55020:	10000a1e 	bne	r2,zero,5504c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   55024:	e0bffd17 	ldw	r2,-12(fp)
   55028:	10800217 	ldw	r2,8(r2)
   5502c:	e0fffe17 	ldw	r3,-8(fp)
   55030:	180d883a 	mov	r6,r3
   55034:	e17fff17 	ldw	r5,-4(fp)
   55038:	1009883a 	mov	r4,r2
   5503c:	00551fc0 	call	551fc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   55040:	1000021e 	bne	r2,zero,5504c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   55044:	e0bffd17 	ldw	r2,-12(fp)
   55048:	00000706 	br	55068 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   5504c:	e0bffd17 	ldw	r2,-12(fp)
   55050:	10800017 	ldw	r2,0(r2)
   55054:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   55058:	e0fffd17 	ldw	r3,-12(fp)
   5505c:	d0a00604 	addi	r2,gp,-32744
   55060:	18bfcc1e 	bne	r3,r2,54f94 <__alt_data_end+0xfffd6794>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   55064:	0005883a 	mov	r2,zero
}
   55068:	e037883a 	mov	sp,fp
   5506c:	dfc00117 	ldw	ra,4(sp)
   55070:	df000017 	ldw	fp,0(sp)
   55074:	dec00204 	addi	sp,sp,8
   55078:	f800283a 	ret

0005507c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   5507c:	defffc04 	addi	sp,sp,-16
   55080:	df000315 	stw	fp,12(sp)
   55084:	df000304 	addi	fp,sp,12
   55088:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   5508c:	00bffa04 	movi	r2,-24
   55090:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   55094:	e03ffd15 	stw	zero,-12(fp)
   55098:	00001906 	br	55100 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   5509c:	00800174 	movhi	r2,5
   550a0:	109a2f04 	addi	r2,r2,26812
   550a4:	e0fffd17 	ldw	r3,-12(fp)
   550a8:	18c00324 	muli	r3,r3,12
   550ac:	10c5883a 	add	r2,r2,r3
   550b0:	10800017 	ldw	r2,0(r2)
   550b4:	10000f1e 	bne	r2,zero,550f4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   550b8:	00800174 	movhi	r2,5
   550bc:	109a2f04 	addi	r2,r2,26812
   550c0:	e0fffd17 	ldw	r3,-12(fp)
   550c4:	18c00324 	muli	r3,r3,12
   550c8:	10c5883a 	add	r2,r2,r3
   550cc:	e0ffff17 	ldw	r3,-4(fp)
   550d0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   550d4:	d0e00a17 	ldw	r3,-32728(gp)
   550d8:	e0bffd17 	ldw	r2,-12(fp)
   550dc:	1880020e 	bge	r3,r2,550e8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   550e0:	e0bffd17 	ldw	r2,-12(fp)
   550e4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   550e8:	e0bffd17 	ldw	r2,-12(fp)
   550ec:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   550f0:	00000606 	br	5510c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   550f4:	e0bffd17 	ldw	r2,-12(fp)
   550f8:	10800044 	addi	r2,r2,1
   550fc:	e0bffd15 	stw	r2,-12(fp)
   55100:	e0bffd17 	ldw	r2,-12(fp)
   55104:	10800810 	cmplti	r2,r2,32
   55108:	103fe41e 	bne	r2,zero,5509c <__alt_data_end+0xfffd689c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   5510c:	e0bffe17 	ldw	r2,-8(fp)
}
   55110:	e037883a 	mov	sp,fp
   55114:	df000017 	ldw	fp,0(sp)
   55118:	dec00104 	addi	sp,sp,4
   5511c:	f800283a 	ret

00055120 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   55120:	defffb04 	addi	sp,sp,-20
   55124:	df000415 	stw	fp,16(sp)
   55128:	df000404 	addi	fp,sp,16
   5512c:	e13ffe15 	stw	r4,-8(fp)
   55130:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   55134:	e0bfff17 	ldw	r2,-4(fp)
   55138:	10840070 	cmpltui	r2,r2,4097
   5513c:	1000021e 	bne	r2,zero,55148 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   55140:	00840004 	movi	r2,4096
   55144:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   55148:	e0fffe17 	ldw	r3,-8(fp)
   5514c:	e0bfff17 	ldw	r2,-4(fp)
   55150:	1885883a 	add	r2,r3,r2
   55154:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   55158:	e0bffe17 	ldw	r2,-8(fp)
   5515c:	e0bffc15 	stw	r2,-16(fp)
   55160:	00000506 	br	55178 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   55164:	e0bffc17 	ldw	r2,-16(fp)
   55168:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   5516c:	e0bffc17 	ldw	r2,-16(fp)
   55170:	10800804 	addi	r2,r2,32
   55174:	e0bffc15 	stw	r2,-16(fp)
   55178:	e0fffc17 	ldw	r3,-16(fp)
   5517c:	e0bffd17 	ldw	r2,-12(fp)
   55180:	18bff836 	bltu	r3,r2,55164 <__alt_data_end+0xfffd6964>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   55184:	e0bffe17 	ldw	r2,-8(fp)
   55188:	108007cc 	andi	r2,r2,31
   5518c:	10000226 	beq	r2,zero,55198 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   55190:	e0bffc17 	ldw	r2,-16(fp)
   55194:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   55198:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   5519c:	0001883a 	nop
   551a0:	e037883a 	mov	sp,fp
   551a4:	df000017 	ldw	fp,0(sp)
   551a8:	dec00104 	addi	sp,sp,4
   551ac:	f800283a 	ret

000551b0 <atexit>:
   551b0:	200b883a 	mov	r5,r4
   551b4:	000f883a 	mov	r7,zero
   551b8:	000d883a 	mov	r6,zero
   551bc:	0009883a 	mov	r4,zero
   551c0:	00552781 	jmpi	55278 <__register_exitproc>

000551c4 <exit>:
   551c4:	defffe04 	addi	sp,sp,-8
   551c8:	000b883a 	mov	r5,zero
   551cc:	dc000015 	stw	r16,0(sp)
   551d0:	dfc00115 	stw	ra,4(sp)
   551d4:	2021883a 	mov	r16,r4
   551d8:	00553900 	call	55390 <__call_exitprocs>
   551dc:	00800174 	movhi	r2,5
   551e0:	109ea704 	addi	r2,r2,31388
   551e4:	11000017 	ldw	r4,0(r2)
   551e8:	20800f17 	ldw	r2,60(r4)
   551ec:	10000126 	beq	r2,zero,551f4 <exit+0x30>
   551f0:	103ee83a 	callr	r2
   551f4:	8009883a 	mov	r4,r16
   551f8:	00555100 	call	55510 <_exit>

000551fc <memcmp>:
   551fc:	01c000c4 	movi	r7,3
   55200:	3980192e 	bgeu	r7,r6,55268 <memcmp+0x6c>
   55204:	2144b03a 	or	r2,r4,r5
   55208:	11c4703a 	and	r2,r2,r7
   5520c:	10000f26 	beq	r2,zero,5524c <memcmp+0x50>
   55210:	20800003 	ldbu	r2,0(r4)
   55214:	28c00003 	ldbu	r3,0(r5)
   55218:	10c0151e 	bne	r2,r3,55270 <memcmp+0x74>
   5521c:	31bfff84 	addi	r6,r6,-2
   55220:	01ffffc4 	movi	r7,-1
   55224:	00000406 	br	55238 <memcmp+0x3c>
   55228:	20800003 	ldbu	r2,0(r4)
   5522c:	28c00003 	ldbu	r3,0(r5)
   55230:	31bfffc4 	addi	r6,r6,-1
   55234:	10c00e1e 	bne	r2,r3,55270 <memcmp+0x74>
   55238:	21000044 	addi	r4,r4,1
   5523c:	29400044 	addi	r5,r5,1
   55240:	31fff91e 	bne	r6,r7,55228 <__alt_data_end+0xfffd6a28>
   55244:	0005883a 	mov	r2,zero
   55248:	f800283a 	ret
   5524c:	20c00017 	ldw	r3,0(r4)
   55250:	28800017 	ldw	r2,0(r5)
   55254:	18bfee1e 	bne	r3,r2,55210 <__alt_data_end+0xfffd6a10>
   55258:	31bfff04 	addi	r6,r6,-4
   5525c:	21000104 	addi	r4,r4,4
   55260:	29400104 	addi	r5,r5,4
   55264:	39bff936 	bltu	r7,r6,5524c <__alt_data_end+0xfffd6a4c>
   55268:	303fe91e 	bne	r6,zero,55210 <__alt_data_end+0xfffd6a10>
   5526c:	003ff506 	br	55244 <__alt_data_end+0xfffd6a44>
   55270:	10c5c83a 	sub	r2,r2,r3
   55274:	f800283a 	ret

00055278 <__register_exitproc>:
   55278:	defffa04 	addi	sp,sp,-24
   5527c:	dc000315 	stw	r16,12(sp)
   55280:	04000174 	movhi	r16,5
   55284:	841ea704 	addi	r16,r16,31388
   55288:	80c00017 	ldw	r3,0(r16)
   5528c:	dc400415 	stw	r17,16(sp)
   55290:	dfc00515 	stw	ra,20(sp)
   55294:	18805217 	ldw	r2,328(r3)
   55298:	2023883a 	mov	r17,r4
   5529c:	10003726 	beq	r2,zero,5537c <__register_exitproc+0x104>
   552a0:	10c00117 	ldw	r3,4(r2)
   552a4:	010007c4 	movi	r4,31
   552a8:	20c00e16 	blt	r4,r3,552e4 <__register_exitproc+0x6c>
   552ac:	1a000044 	addi	r8,r3,1
   552b0:	8800221e 	bne	r17,zero,5533c <__register_exitproc+0xc4>
   552b4:	18c00084 	addi	r3,r3,2
   552b8:	18c7883a 	add	r3,r3,r3
   552bc:	18c7883a 	add	r3,r3,r3
   552c0:	12000115 	stw	r8,4(r2)
   552c4:	10c7883a 	add	r3,r2,r3
   552c8:	19400015 	stw	r5,0(r3)
   552cc:	0005883a 	mov	r2,zero
   552d0:	dfc00517 	ldw	ra,20(sp)
   552d4:	dc400417 	ldw	r17,16(sp)
   552d8:	dc000317 	ldw	r16,12(sp)
   552dc:	dec00604 	addi	sp,sp,24
   552e0:	f800283a 	ret
   552e4:	00800034 	movhi	r2,0
   552e8:	10800004 	addi	r2,r2,0
   552ec:	10002626 	beq	r2,zero,55388 <__register_exitproc+0x110>
   552f0:	01006404 	movi	r4,400
   552f4:	d9400015 	stw	r5,0(sp)
   552f8:	d9800115 	stw	r6,4(sp)
   552fc:	d9c00215 	stw	r7,8(sp)
   55300:	00000000 	call	0 <__reset-0x40000>
   55304:	d9400017 	ldw	r5,0(sp)
   55308:	d9800117 	ldw	r6,4(sp)
   5530c:	d9c00217 	ldw	r7,8(sp)
   55310:	10001d26 	beq	r2,zero,55388 <__register_exitproc+0x110>
   55314:	81000017 	ldw	r4,0(r16)
   55318:	10000115 	stw	zero,4(r2)
   5531c:	02000044 	movi	r8,1
   55320:	22405217 	ldw	r9,328(r4)
   55324:	0007883a 	mov	r3,zero
   55328:	12400015 	stw	r9,0(r2)
   5532c:	20805215 	stw	r2,328(r4)
   55330:	10006215 	stw	zero,392(r2)
   55334:	10006315 	stw	zero,396(r2)
   55338:	883fde26 	beq	r17,zero,552b4 <__alt_data_end+0xfffd6ab4>
   5533c:	18c9883a 	add	r4,r3,r3
   55340:	2109883a 	add	r4,r4,r4
   55344:	1109883a 	add	r4,r2,r4
   55348:	21802215 	stw	r6,136(r4)
   5534c:	01800044 	movi	r6,1
   55350:	12406217 	ldw	r9,392(r2)
   55354:	30cc983a 	sll	r6,r6,r3
   55358:	4992b03a 	or	r9,r9,r6
   5535c:	12406215 	stw	r9,392(r2)
   55360:	21c04215 	stw	r7,264(r4)
   55364:	01000084 	movi	r4,2
   55368:	893fd21e 	bne	r17,r4,552b4 <__alt_data_end+0xfffd6ab4>
   5536c:	11006317 	ldw	r4,396(r2)
   55370:	218cb03a 	or	r6,r4,r6
   55374:	11806315 	stw	r6,396(r2)
   55378:	003fce06 	br	552b4 <__alt_data_end+0xfffd6ab4>
   5537c:	18805304 	addi	r2,r3,332
   55380:	18805215 	stw	r2,328(r3)
   55384:	003fc606 	br	552a0 <__alt_data_end+0xfffd6aa0>
   55388:	00bfffc4 	movi	r2,-1
   5538c:	003fd006 	br	552d0 <__alt_data_end+0xfffd6ad0>

00055390 <__call_exitprocs>:
   55390:	defff504 	addi	sp,sp,-44
   55394:	df000915 	stw	fp,36(sp)
   55398:	dd400615 	stw	r21,24(sp)
   5539c:	dc800315 	stw	r18,12(sp)
   553a0:	dfc00a15 	stw	ra,40(sp)
   553a4:	ddc00815 	stw	r23,32(sp)
   553a8:	dd800715 	stw	r22,28(sp)
   553ac:	dd000515 	stw	r20,20(sp)
   553b0:	dcc00415 	stw	r19,16(sp)
   553b4:	dc400215 	stw	r17,8(sp)
   553b8:	dc000115 	stw	r16,4(sp)
   553bc:	d9000015 	stw	r4,0(sp)
   553c0:	2839883a 	mov	fp,r5
   553c4:	04800044 	movi	r18,1
   553c8:	057fffc4 	movi	r21,-1
   553cc:	00800174 	movhi	r2,5
   553d0:	109ea704 	addi	r2,r2,31388
   553d4:	12000017 	ldw	r8,0(r2)
   553d8:	45005217 	ldw	r20,328(r8)
   553dc:	44c05204 	addi	r19,r8,328
   553e0:	a0001c26 	beq	r20,zero,55454 <__call_exitprocs+0xc4>
   553e4:	a0800117 	ldw	r2,4(r20)
   553e8:	15ffffc4 	addi	r23,r2,-1
   553ec:	b8000d16 	blt	r23,zero,55424 <__call_exitprocs+0x94>
   553f0:	14000044 	addi	r16,r2,1
   553f4:	8421883a 	add	r16,r16,r16
   553f8:	8421883a 	add	r16,r16,r16
   553fc:	84402004 	addi	r17,r16,128
   55400:	a463883a 	add	r17,r20,r17
   55404:	a421883a 	add	r16,r20,r16
   55408:	e0001e26 	beq	fp,zero,55484 <__call_exitprocs+0xf4>
   5540c:	80804017 	ldw	r2,256(r16)
   55410:	e0801c26 	beq	fp,r2,55484 <__call_exitprocs+0xf4>
   55414:	bdffffc4 	addi	r23,r23,-1
   55418:	843fff04 	addi	r16,r16,-4
   5541c:	8c7fff04 	addi	r17,r17,-4
   55420:	bd7ff91e 	bne	r23,r21,55408 <__alt_data_end+0xfffd6c08>
   55424:	00800034 	movhi	r2,0
   55428:	10800004 	addi	r2,r2,0
   5542c:	10000926 	beq	r2,zero,55454 <__call_exitprocs+0xc4>
   55430:	a0800117 	ldw	r2,4(r20)
   55434:	1000301e 	bne	r2,zero,554f8 <__call_exitprocs+0x168>
   55438:	a0800017 	ldw	r2,0(r20)
   5543c:	10003226 	beq	r2,zero,55508 <__call_exitprocs+0x178>
   55440:	a009883a 	mov	r4,r20
   55444:	98800015 	stw	r2,0(r19)
   55448:	00000000 	call	0 <__reset-0x40000>
   5544c:	9d000017 	ldw	r20,0(r19)
   55450:	a03fe41e 	bne	r20,zero,553e4 <__alt_data_end+0xfffd6be4>
   55454:	dfc00a17 	ldw	ra,40(sp)
   55458:	df000917 	ldw	fp,36(sp)
   5545c:	ddc00817 	ldw	r23,32(sp)
   55460:	dd800717 	ldw	r22,28(sp)
   55464:	dd400617 	ldw	r21,24(sp)
   55468:	dd000517 	ldw	r20,20(sp)
   5546c:	dcc00417 	ldw	r19,16(sp)
   55470:	dc800317 	ldw	r18,12(sp)
   55474:	dc400217 	ldw	r17,8(sp)
   55478:	dc000117 	ldw	r16,4(sp)
   5547c:	dec00b04 	addi	sp,sp,44
   55480:	f800283a 	ret
   55484:	a0800117 	ldw	r2,4(r20)
   55488:	80c00017 	ldw	r3,0(r16)
   5548c:	10bfffc4 	addi	r2,r2,-1
   55490:	15c01426 	beq	r2,r23,554e4 <__call_exitprocs+0x154>
   55494:	80000015 	stw	zero,0(r16)
   55498:	183fde26 	beq	r3,zero,55414 <__alt_data_end+0xfffd6c14>
   5549c:	95c8983a 	sll	r4,r18,r23
   554a0:	a0806217 	ldw	r2,392(r20)
   554a4:	a5800117 	ldw	r22,4(r20)
   554a8:	2084703a 	and	r2,r4,r2
   554ac:	10000b26 	beq	r2,zero,554dc <__call_exitprocs+0x14c>
   554b0:	a0806317 	ldw	r2,396(r20)
   554b4:	2088703a 	and	r4,r4,r2
   554b8:	20000c1e 	bne	r4,zero,554ec <__call_exitprocs+0x15c>
   554bc:	89400017 	ldw	r5,0(r17)
   554c0:	d9000017 	ldw	r4,0(sp)
   554c4:	183ee83a 	callr	r3
   554c8:	a0800117 	ldw	r2,4(r20)
   554cc:	15bfbf1e 	bne	r2,r22,553cc <__alt_data_end+0xfffd6bcc>
   554d0:	98800017 	ldw	r2,0(r19)
   554d4:	153fcf26 	beq	r2,r20,55414 <__alt_data_end+0xfffd6c14>
   554d8:	003fbc06 	br	553cc <__alt_data_end+0xfffd6bcc>
   554dc:	183ee83a 	callr	r3
   554e0:	003ff906 	br	554c8 <__alt_data_end+0xfffd6cc8>
   554e4:	a5c00115 	stw	r23,4(r20)
   554e8:	003feb06 	br	55498 <__alt_data_end+0xfffd6c98>
   554ec:	89000017 	ldw	r4,0(r17)
   554f0:	183ee83a 	callr	r3
   554f4:	003ff406 	br	554c8 <__alt_data_end+0xfffd6cc8>
   554f8:	a0800017 	ldw	r2,0(r20)
   554fc:	a027883a 	mov	r19,r20
   55500:	1029883a 	mov	r20,r2
   55504:	003fb606 	br	553e0 <__alt_data_end+0xfffd6be0>
   55508:	0005883a 	mov	r2,zero
   5550c:	003ffb06 	br	554fc <__alt_data_end+0xfffd6cfc>

00055510 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   55510:	defffd04 	addi	sp,sp,-12
   55514:	df000215 	stw	fp,8(sp)
   55518:	df000204 	addi	fp,sp,8
   5551c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   55520:	0001883a 	nop
   55524:	e0bfff17 	ldw	r2,-4(fp)
   55528:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   5552c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   55530:	10000226 	beq	r2,zero,5553c <_exit+0x2c>
    ALT_SIM_FAIL();
   55534:	002af070 	cmpltui	zero,zero,43969
   55538:	00000106 	br	55540 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   5553c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   55540:	003fff06 	br	55540 <__alt_data_end+0xfffd6d40>
