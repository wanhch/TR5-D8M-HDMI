
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module TR5_FMC_HDMI(

	//////////// CLOCK //////////
	input 		          		OSC_50_B3B,
	input 		          		OSC_50_B4A,
	input 		          		OSC_50_B4D,
	input 		          		OSC_50_B7A,
	input 		          		OSC_50_B7D,
	input 		          		OSC_50_B8A,
	input 		          		OSC_50_B8D,

	//////////// KEY //////////
	input 		     [3:0]		BUTTON,
	input 		          		CPU_RESET_n,

	//////////// SW //////////
	input 		     [3:0]		SW,

	//////////// LED //////////
	output		     [3:0]		LED,

	//////////// FAN //////////
	input 		          		FAN_ALERT_n,

	//////////// RZQ for FMC or DDR3 //////////
	input 		          		RZQ_DDR3,
	input 		          		RZQ_FMC,

	//////////// I2C for Temperature-Sensor or Fan-Control or Power-Monitor //////////
	output		          		FPGA_I2C_SCL,
	inout 		          		FPGA_I2C_SDA,

	//////////// FMC I2C //////////

	//////////// FMCD, FMCD connect to FMC-HDMI //////////
	inout 		          		ADV7619_CSCL_FMC,
	inout 		          		ADV7619_CSDA_FMC,
	output		          		ADV7619_CS_n,
	input 		          		ADV7619_INT,
	output		          		ADV7619_RESET_n,
	output		     [1:0]		FMC_GA,
	inout 		          		RX0_DDC_SCL,
	inout 		          		RX0_DDC_SDA,
	inout 		          		RX1_DDC_SCL,
	inout 		          		RX1_DDC_SDA,
	// input 		     [5:0]		RX_AP, //(I2S, SPDIF)
	input 		    [15:0]		RX_BD,
	input 		          		RX_DE,
	input 		    [15:0]		RX_GD,
	input 		          		RX_HS,
	input 		          		RX_MCLK,
	input 		          		RX_PCLK,
	input 		    [15:0]		RX_RD,
	input 		          		RX_SCLK,
	input 		          		RX_VS,
	inout 		          		SII9136_CSCL_FMC,
	inout 		          		SII9136_CSDA_FMC,
	input 		          		SII9136_INT,
	output		          		SII9136_RST_n,
	output		    [11:0]		TX_BD,
	output		          		TX_DE,
	output		          		TX_DSR3L,
	output		          		TX_DSR3R,
	output		    [11:0]		TX_GD,
	output		          		TX_HS,
	output		     [3:0]		TX_I2S,
	output		          		TX_MCLK,
	output		          		TX_PCLK,
	output		    [11:0]		TX_RD,
	output		          		TX_SCK,
	output		          		TX_SPDIF,
	output		          		TX_VS,
	output		          		TX_WS
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire        reset_n;

//=======================================================
//  Structural coding
//=======================================================
assign           ADV7619_CS_n = 1'b0;
assign           reset_n = 1'b1;


TR5_QSYS u0 (
    .clk_50                                         (OSC_50_B8D),           //                           clk_50_clk_in.clk
    .reset_n                                        (reset_n),              //                     clk_50_clk_in_reset.reset_n

    // HDMI TX
    .hdmi_tx_fmc_i2c_scl_external_connection_export (SII9136_CSCL_FMC),     // hdmi_tx_fmc_i2c_scl_external_connection.export
    .hdmi_tx_fmc_i2c_sda_external_connection_export (SII9136_CSDA_FMC),     // hdmi_tx_fmc_i2c_sda_external_connection.export
    .sii9136_int_external_connection_export         (SII9136_INT),          //         sii9136_int_external_connection.export
    .sii9136_rst_n_external_connection_export       (SII9136_RST_n),        //       sii9136_rst_n_external_connection.export

    .i2c_scl_external_connection_export             (ADV7619_CSCL_FMC),     //             i2c_scl_external_connection.export
    .i2c_sda_external_connection_export             (ADV7619_CSDA_FMC),     //             i2c_sda_external_connection.export
    .sii9679_rst_external_connection_export         (),                     //         sii9679_rst_external_connection.export
    .adv7619_rst_external_connection_export         (ADV7619_RESET_n),      //         adv7619_rst_external_connection.export
    .rx0_edid_i2c_scl_external_connection_export    (RX0_DDC_SCL),          //    rx0_edid_i2c_scl_external_connection.export
    .rx0_edid_i2c_sda_external_connection_export    (RX0_DDC_SDA),          //    rx0_edid_i2c_sda_external_connection.export
    .rx1_edid_i2c_scl_external_connection_export    (RX1_DDC_SCL),          //    rx1_edid_i2c_scl_external_connection.export
    .rx1_edid_i2c_sda_external_connection_export    (RX1_DDC_SDA),          //    rx1_edid_i2c_sda_external_connection.export
    .adv7619_int_external_connection_export         (ADV7619_INT)           //         adv7619_int_external_connection.export
);

//===== latch hdmi source video
wire rx_de_0;
wire rx_hs_0;
wire rx_vs_0;
wire rx_de_1;
wire rx_hs_1;
wire rx_vs_1;

wire [7: 0] rx_r_0;
wire [7: 0] rx_g_0;
wire [7: 0] rx_b_0;
wire [7: 0] rx_r_1;
wire [7: 0] rx_g_1;
wire [7: 0] rx_b_1;

wire [4: 0] rdusedw;


wire [7: 0] RX_G0, RX_G1;
wire [7: 0] RX_B0, RX_B1;
wire [7: 0] RX_R0, RX_R1;
assign RX_G0[7: 0] = RX_RD[15: 8];
assign RX_B0[7: 0] = RX_RD[7: 0];
assign RX_R0[7: 0] = RX_GD[15: 8];
assign RX_G1[7: 0] = RX_GD[7: 0];
assign RX_B1[7: 0] = RX_BD[15: 8];
assign RX_R1[7: 0] = RX_BD[7: 0];

fifo fifo_inst(

    .wrclk(RX_PCLK),
    .wrreq(1'b1),
    .data({RX_DE, RX_HS, RX_VS, RX_R1, RX_G1, RX_B1, RX_DE, RX_HS, RX_VS, RX_R0, RX_G0, RX_B0}),

    .rdclk(tx_clk),
    .rdreq(rdusedw >= 5'd8),
    .rdusedw(rdusedw),
    .q({rx_de_1,rx_hs_1,rx_vs_1,rx_r_1,rx_g_1,rx_b_1,
        rx_de_0,rx_hs_0,rx_vs_0,rx_r_0,rx_g_0,rx_b_0})
);

wire tx_pll_locked;
wire tx_clk;
pll tx_pll_inst (
    .refclk   (RX_PCLK),        //  refclk.clk
    .rst      (~BUTTON[0]),     //   reset.reset
    .outclk_0 (tx_clk),         // outclk0.clk
    .outclk_1 (TX_PCLK),        // outclk1.clk
    .locked   (tx_pll_locked)   //  locked.export
);

tx_ddio	tx_ddio_inst (
    .datain_h ({rx_de_0,rx_hs_0,rx_vs_0,rx_r_0,rx_g_0,rx_b_0}),
    .datain_l ({rx_de_1,rx_hs_1,rx_vs_1,rx_r_1,rx_g_1,rx_b_1}),
    .outclock (tx_clk),
    .dataout ({TX_DE, TX_HS, TX_VS, TX_RD[11: 4], TX_GD[11: 4], TX_BD[11: 4]})
);


/////////////////////////////
assign {TX_RD[3: 0],TX_GD[3: 0],TX_BD[3: 0]} = {4'b0, 4'b0, 4'b0};

assign TX_WS = RX_AP[5];
assign TX_SCK = RX_SCLK;
assign TX_I2S = RX_AP[4: 1];
assign TX_MCLK = RX_MCLK;

assign TX_SPDIF = RX_AP[0];

endmodule
